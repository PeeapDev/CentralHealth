"use client"

import * as React from "react"
import { useState, useRef, useEffect, useCallback } from 'react'
import { Box, Input, InputGroup, Spinner, Flex, Text, Button, IconButton } from '@chakra-ui/react'
import dynamic from 'next/dynamic'
import { debounce } from 'lodash'
import { FaTimes, FaQrcode, FaEnvelope, FaPhone } from 'react-icons/fa'

// Define types for the html5-qrcode library
declare global {
  interface Window {
    Html5QrcodeScanner: any;
    Html5QrcodeSupportedFormats: any;
    Html5Qrcode: any;
    qrErrorShown?: boolean;
    lastSKeypress?: number;
  }
}

// Create a type definition for the QrScannerWrapper props
interface QrScannerWrapperProps {
  onScanSuccess: (data: string) => void;
  onScanError?: (error: string) => void;
}

// Import QR scanner wrapper with dynamic import to prevent SSR issues
const QrScannerComponent = dynamic<QrScannerWrapperProps>(
  () => import('../components/qr-scanner-wrapper').then((mod) => mod.QrScannerWrapper),
  { ssr: false, loading: () => <Text p={4}>Loading QR scanner...</Text> }
);

// Define HTML5QrcodeScanner config type
interface Html5QrcodeScannerConfig {
  fps: number
  qrbox: { width: number; height: number } | number
  formatsToSupport?: any[]
  disableFlip?: boolean
  videoConstraints?: { facingMode: string }
  width?: number
  height?: number
  aspectRatio?: number
}

interface Html5QrcodeScannerType {
  new (elementId: string, config: Html5QrcodeScannerConfig, verbose: boolean): {
    render(
      onScanSuccess: (decodedText: string) => void,
      onScanFailure: (errorMessage: string) => void
    ): void;
    clear(): void;
  };
}

// Type declarations for ProcessedPatient
interface ProcessedPatient {
  id: string;
  mrn?: string; // medical record number (medical ID)
  name: string;
  email?: string;
  phone?: string;
  dob?: string;
  photo?: string; // Patient photo if available
  medicalNumber?: string; // Alias for mrn
  raw?: any; // raw patient data
}

interface PatientSearchWidgetProps {
  onSelect: (patient: ProcessedPatient) => void;
  placeholder?: string;
  createMode?: boolean;
  hospitalId?: string;
  showCameraButton?: boolean;
  className?: string;
}

export function PatientSearchWidget({
  onSelect,
  placeholder = 'Search for patients by name, email, or medical ID...',
  createMode = false,
  hospitalId,
  showCameraButton = true,
  className = ''
}: PatientSearchWidgetProps) {
  // State for input and results
  const [query, setQuery] = useState('')
  const [loading, setLoading] = useState(false)
  const [showError, setShowError] = useState(false)
  const [errorMessage, setErrorMessage] = useState('')
  const [results, setResults] = useState<ProcessedPatient[]>([])
  const [showDropdown, setShowDropdown] = useState(false)

  // State for QR scanner
  const [scannerModalOpen, setScannerModalOpen] = useState(false)
  const [scannerActive, setScannerActive] = useState(false)
  const [scannerLoading, setScannerLoading] = useState(false)
  const [scannerError, setScannerError] = useState('')

  const dropdownRef = useRef<HTMLDivElement>(null)
  const scannerRef = useRef<HTMLDivElement>(null)

  // Search by medical ID specifically
  const searchByMedicalId = useCallback((medicalId: string) => {
    if (!medicalId) return;
    
    setLoading(true);
    setShowError(false);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000);
    
    const searchParams = new URLSearchParams({
      medicalId: medicalId.trim()
    });
    
    if (hospitalId) {
      searchParams.append('hospitalId', hospitalId);
    }
    
    fetch(`/api/patients/search?${searchParams.toString()}`, {
      signal: controller.signal
    })
      .then(response => {
        clearTimeout(timeoutId);
        if (!response.ok) {
          throw new Error(`Search failed with status ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        setLoading(false);
        if (Array.isArray(data) && data.length > 0) {
          setResults(data);
          setShowDropdown(true);
          
          if (data.length === 1) {
            handleSelectPatient(data[0]);
          }
        } else {
          setErrorMessage('No patients found with that medical ID');
          setShowError(true);
          setResults([]);
          setShowDropdown(false);
        }
      })
      .catch(error => {
        clearTimeout(timeoutId);
        console.error('Error searching for patient by medical ID:', error);
        setErrorMessage('Error searching for patient');
        setShowError(true);
        setResults([]);
        setShowDropdown(false);
        setLoading(false);
      });
  }, [hospitalId]);

  // Process QR code scan result
  const handleQrCodeResult = useCallback((result: string) => {
    try {
      handleCloseScanner();
      console.log('Processing QR code result:', result);
      
      try {
        const jsonResult = JSON.parse(result);
        if (jsonResult.medicalId || jsonResult.medicalNumber || jsonResult.mrn) {
          const id = jsonResult.medicalId || jsonResult.medicalNumber || jsonResult.mrn;
          console.log('Found medical ID in QR code JSON:', id);
          searchByMedicalId(id);
          return;
        }
      } catch (e) {
        console.log('QR code is not valid JSON, processing as plain text');
      }
      
      const isMedicalId = /^[A-Z0-9]{5,10}$/i.test(result.trim());
      
      if (isMedicalId) {
        console.log('QR code looks like a medical ID, searching by medical ID');
        searchByMedicalId(result.trim());
      } else {
        console.log('Using QR code content as general search term');
        setQuery(result.trim());
        debouncedSearch(result.trim());
      }
    } catch (error) {
      console.error('Error processing QR code result:', error);
      setErrorMessage('Invalid QR code format');
      setShowError(true);
    }
  }, [searchByMedicalId]);

  // Create debounced search function
  const debouncedSearch = useCallback(
    debounce((query: string) => {
      if (query.trim().length >= 2) {
        searchPatient(query);
      }
    }, 300),
    []
  );

  // Handle opening the scanner modal
  const handleOpenScanner = () => {
    setScannerError('')
    setScannerLoading(true)
    setScannerModalOpen(true)
    setScannerActive(true)
  }
  
  // Handle closing the scanner modal
  const handleCloseScanner = () => {
    setScannerModalOpen(false);
    setScannerActive(false);
    setScannerError('');
    
    if (typeof window !== 'undefined') {
      window.qrErrorShown = false;
    }
    
    try {
      const scannerElement = document.getElementById('html5qr-code-full-region')
      if (scannerElement) {
        scannerElement.innerHTML = ''
      }
    } catch (error) {
      console.error('Error cleaning up scanner on close:', error)
    }
  }
  
  // Handle selecting a patient from results
  const handleSelectPatient = (patient: ProcessedPatient) => {
    onSelect(patient);
    setResults([]);
    setShowDropdown(false);
    setQuery('');
  }
  
  // General search function for patients
  const searchPatient = async (searchQuery: string) => {
    setShowError(false);
    setErrorMessage('');
    
    try {
      setLoading(true);
      
      const searchParams = new URLSearchParams();
      searchParams.append('search', searchQuery);
      if (hospitalId) {
        searchParams.append('hospitalId', hospitalId);
      }
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000);
      
      const response = await fetch(`/api/patients/search?${searchParams.toString()}`, {
        credentials: 'include',
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        const errorText = await response.text().catch(() => 'Unknown error');
        let errorMessage = `Search failed: ${response.statusText || response.status}`;
        
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.error || errorData.message) {
            errorMessage = errorData.error || errorData.message;
          }
        } catch (e) {
          if (errorText && errorText.length < 100) {
            errorMessage = errorText;
          }
        }
        
        console.error('Patient search error:', errorMessage);
        setErrorMessage(errorMessage);
        setShowError(true);
        setResults([]);
        setShowDropdown(false);
        return;
      }
      
      const data = await response.json();
      
      if (!data.success) {
        const errorMsg = data.error || data.message || 'Unknown search error';
        console.error('API returned error:', errorMsg);
        setErrorMessage(errorMsg);
        setShowError(true);
        setResults([]);
        setShowDropdown(false);
        return;
      }
      
      const foundPatients = data.patients || [];
      
      console.log(`Found ${foundPatients.length} patients matching "${searchQuery}"`);
      
      if (foundPatients.length === 0) {
        setShowError(true);
        setErrorMessage(`No patients found matching "${searchQuery}"`);
        setShowDropdown(false);
      } else {
        setResults(foundPatients);
        setShowDropdown(true);
        setShowError(false);
      }
    } catch (error) {
      console.error('Patient search error:', error);
      setErrorMessage(error instanceof Error ? error.message : 'Search failed. Please try again.');
      setShowError(true);
      setResults([]);
      setShowDropdown(false);
    } finally {
      setLoading(false);
    }
  }
  
  // Handle input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
    
    if (showError) {
      setShowError(false);
      setErrorMessage('');
    }
    
    if (value.trim().length >= 2) {
      debouncedSearch(value);
    } else {
      setResults([]);
      setShowDropdown(false);
    }
  }
  
  // Handle keyboard events
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const value = e.currentTarget.value.trim();
      if (value.length >= 2) {
        debouncedSearch.cancel();
        searchPatient(value);
      }
    }
    
    if (e.key === 's' || e.key === 'S') {
      const now = Date.now();
      const timeSinceLastS = now - (window.lastSKeypress || 0);
      
      if (timeSinceLastS < 500) {
        e.preventDefault();
        handleOpenScanner();
        window.lastSKeypress = 0;
      } else {
        window.lastSKeypress = now;
      }
    }
  }

  // Listen for keyboard events for scanner activation shortcuts
  useEffect(() => {
    const lastKeyPress = { key: '', time: 0 }
    const doublePressThreshold = 500
    
    const handleGlobalKeyDown = (e: KeyboardEvent) => {
      const activeElement = document.activeElement;
      const isInputActive = activeElement instanceof HTMLInputElement || 
                           activeElement instanceof HTMLTextAreaElement;
      if (isInputActive) return;
      
      if (e.key === 's' || e.key === 'S') {
        const now = Date.now()
        if (lastKeyPress.key === 's' && now - lastKeyPress.time < doublePressThreshold) {
          handleOpenScanner();
          e.preventDefault();
          lastKeyPress.key = '';
        } else {
          lastKeyPress.key = e.key
          lastKeyPress.time = now
        }
      }
    }
    
    document.addEventListener('keydown', handleGlobalKeyDown)
    
    return () => {
      document.removeEventListener('keydown', handleGlobalKeyDown)
    }
  }, [handleOpenScanner])

  return (
    <Box position="relative" className={className}>
      <Flex>
        <Box position="relative" flex="1">
          <Input
            type="text"
            placeholder={placeholder}
            width="full"
            pr="10"
            borderColor={showError ? 'red.500' : undefined}
            value={query}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
          />
          {loading && (
            <Box position="absolute" right="3" top="50%" transform="translateY(-50%)">
              <Spinner size="sm" color="gray.400" />
            </Box>
          )}
        </Box>
        
        {showCameraButton && (
          <Button
            variant="outline"
            ml={2}
            onClick={handleOpenScanner}
            aria-label="Scan QR Code"
          >
            <FaQrcode />
          </Button>
        )}
      </Flex>
      
      {showError && errorMessage && (
        <Box mt={2} fontSize="sm" color="red.500" animation="fadeIn 0.2s ease-in">
          <Flex alignItems="center">
            <FaTimes size={12} style={{ marginRight: '4px' }} />
            <Text>{errorMessage}</Text>
          </Flex>
        </Box>
      )}
      
      {scannerModalOpen && (
        <Box
          position="fixed"
          top={0}
          left={0}
          right={0}
          bottom={0}
          zIndex={1000}
          display="flex"
          alignItems="center"
          justifyContent="center"
          onClick={handleCloseScanner}
        >
          <Box 
            position="fixed"
            top={0}
            left={0}
            right={0}
            bottom={0}
            bg="blackAlpha.600"
          />
          
          <Box
            position="relative"
            bg="white"
            borderRadius="md"
            maxW="md"
            w="full"
            mx={4}
            boxShadow="xl"
            zIndex={1001}
            onClick={(e) => e.stopPropagation()}
          >
            <Flex
              align="center"
              justify="space-between"
              p={4}
              borderBottomWidth="1px"
              borderColor="gray.200"
            >
              <Text fontWeight="bold">Scan Patient QR Code</Text>
              <IconButton
                aria-label="Close"
                size="sm"
                onClick={handleCloseScanner}
              >
                <FaTimes />
              </IconButton>
            </Flex>
            
            <Box p={6}>
              {scannerError ? (
                <Box>
                  <Text color="red.500">{scannerError}</Text>
                  <Button mt={4} onClick={() => { setScannerError(''); handleOpenScanner(); }}>
                    Try Again
                  </Button>
                </Box>
              ) : (
                <Box>
                  <Box position="relative" width="100%" height="300px" bgColor="black" borderRadius="md" overflow="hidden">
                    <QrScannerComponent 
                      onScanSuccess={(result: string) => handleQrCodeResult(result)}
                      onScanError={(error: string) => setScannerError(error)} 
                    />
                    
                    {scannerLoading && (
                      <Flex 
                        position="absolute" 
                        inset="0" 
                        flexDirection="column" 
                        alignItems="center" 
                        justifyContent="center" 
                        bgColor="blackAlpha.800" 
                        zIndex={20}
                      >
                        <Spinner size="lg" color="white" mb={2} />
                        <Text fontSize="sm" color="white">Initializing camera...</Text>
                      </Flex>
                    )}
                  </Box>
                </Box>
              )}
            </Box>
          </Box>
        </Box>
      )}
      
      {showDropdown && results.length > 0 && (
        <Box
          ref={dropdownRef}
          position="absolute"
          top="100%"
          left={0}
          right={0}
          mt={1}
          maxH="60"
          overflowY="auto"
          zIndex={50}
          rounded="md"
          borderWidth="1px"
          bg="white"
          shadow="md"
        >
          <Box p={1}>
            {results.map((patient) => (
              <Flex
                key={patient.id}
                alignItems="center"
                gap={2}
                p={2}
                _hover={{ bg: 'gray.100' }}
                rounded="sm"
                cursor="pointer"
                onClick={() => handleSelectPatient(patient)}
              >
                <Box position="relative" width="32px" height="32px">
                  <div style={{ 
                    width: '32px', 
                    height: '32px', 
                    borderRadius: '50%', 
                    backgroundColor: '#E2E8F0',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '14px'
                  }}>
                    {patient.name ? patient.name.charAt(0).toUpperCase() : 'P'}
                  </div>
                  {patient.mrn && (
                    <Box 
                      position="absolute"
                      bottom="0"
                      right="0"
                      width="12px"
                      height="12px"
                      borderRadius="50%"
                      bg="green.500"
                      border="2px solid white"
                    />
                  )}
                </Box>
                
                <Box>
                  <Text fontSize="sm" fontWeight="medium">{patient.name}</Text>
                  <Text fontSize="xs" color="gray.600">{patient.mrn || 'No Medical ID'}</Text>
                  {patient.email && (
                    <Text fontSize="xs">
                      <FaEnvelope size={10} style={{ display: 'inline', marginRight: '4px' }} />
                      {patient.email}
                    </Text>
                  )}
                  {patient.phone && (
                    <Text fontSize="xs">
                      <FaPhone size={10} style={{ display: 'inline', marginRight: '4px' }} />
                      {patient.phone}
                    </Text>
                  )}
                </Box>
              </Flex>
            ))}
          </Box>
        </Box>
      )}
    </Box>
  )
}