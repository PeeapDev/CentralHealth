generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["multiSchema"]
}

// Use environment variable to determine which datasource to use
// When DATABASE_PROVIDER=sqlite, use SQLite for offline mode
// When DATABASE_PROVIDER=postgresql (or any other value), use PostgreSQL for online mode
datasource db {
  provider = "postgresql" // Changed from env() to fixed value as env() is not allowed in provider
  url      = env("DATABASE_URL") // For PostgreSQL: postgres://... For SQLite: file:./dev.db
  // SQLite shadow database for development - not needed in production
  // This helps with migrations when using SQLite
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Hospital {
  id          String    @id @default(uuid())
  name        String
  subdomain   String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  settings    Json
  branding    Json?
  patients    Patient[]
  users       User[]
  
  // Plugin system relations
  pluginSettings    HospitalPluginSettings[]
  patientAccessLogs PatientAccessLog[]
  pluginPermissions PluginRolePermission[]
  
  // Sync fields
  syncStatus  String?   @default("synced") // synced, modified, created, deleted
  syncedAt    DateTime? // Last successful sync time
  globalId    String?   @unique // ID on the central server for conflict resolution
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  password           String
  name               String?
  role               String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  hospitalId         String?
  profileImage       String?
  appointments       Appointment[]
  chatParticipations ChatParticipant[]
  medicalRecords     MedicalRecord[]
  messages           Message[]
  patients           Patient[]
  hospital           Hospital?         @relation(fields: [hospitalId], references: [id])
  
  // Plugin system relations
  activatedPlugins   HospitalPluginSettings[] @relation("PluginActivator")
  patientAccessLogs  PatientAccessLog[]
  createdPluginData  PatientPluginData[]     @relation("CreatedPluginData")
  updatedPluginData  PatientPluginData[]     @relation("UpdatedPluginData")
  
  // Sync fields
  syncStatus         String?           @default("synced") // synced, modified, created, deleted
  syncedAt           DateTime?         // Last successful sync time
  globalId           String?           @unique // ID on the central server for conflict resolution
  // Offline fields
  offlineAccess      Boolean           @default(false) // Whether this user can access the system offline
  offlineExpiry      DateTime?         // When offline access expires
  lastLogin          DateTime?         // Track last login time for expiry calculations
}

model Patient {
  id                   String          @id @default(uuid())
  mrn                  String?
  gender               String
  contact              Json?
  medicalHistory       Json?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  hospitalId           String?
  userId               String?
  // Sync fields
  syncStatus           String?         @default("synced") // synced, modified, created, deleted
  syncedAt             DateTime?       // Last successful sync time
  globalId             String?         @unique // ID on the central server for conflict resolution
  active               Boolean         @default(true)
  address              Json?
  birthDate            DateTime
  communication        Json?
  deceased             Boolean         @default(false)
  deceasedDateTime     DateTime?
  email                String?
  extension            Json?
  generalPractitioner  Json?
  managingOrganization String?
  maritalStatus        Json?
  medicalNumber        String          @unique
  multipleBirth        Boolean?
  multipleBirthInteger Int?
  password             String?
  photo                String?
  resetCode            String?
  resetExpiration      DateTime?
  resourceType         String          @default("Patient")
  telecom              Json?
  name                 Json
  phone                String?
  appointments         Appointment[]
  records              MedicalRecord[]
  hospital             Hospital?       @relation(fields: [hospitalId], references: [id])
  user                 User?           @relation(fields: [userId], references: [id])
  
  // Plugin system relations
  accessLogs           PatientAccessLog[]
  pluginData           PatientPluginData[]
}

model Appointment {
  id              String    @id @default(uuid())
  patientId       String
  doctorId        String
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  appointmentType Json?
  comment         String?
  description     String?
  end             DateTime?
  extension       Json?
  hospitalId      String?
  minutesDuration Int?
  priority        Int?
  reason          Json?
  resourceType    String    @default("Appointment")
  serviceType     Json?
  specialty       Json?
  start           DateTime
  doctor          User      @relation(fields: [doctorId], references: [id])
  patient         Patient   @relation(fields: [patientId], references: [id])
  // Sync fields
  syncStatus      String?   @default("synced") // synced, modified, created, deleted
  syncedAt        DateTime? // Last successful sync time
  globalId        String?   @unique // ID on the central server for conflict resolution
}

model MedicalRecord {
  id                   String   @id @default(uuid())
  patientId            String
  doctorId             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  bodySite             Json?
  category             Json?
  code                 Json
  derivedFrom          Json?
  // Sync fields
  syncStatus           String?  @default("synced") // synced, modified, created, deleted
  syncedAt             DateTime? // Last successful sync time
  globalId             String?  @unique // ID on the central server for conflict resolution
  device               String?
  effectiveDateTime    DateTime
  extension            Json?
  hasMember            Json?
  hospitalId           String?
  interpretation       Json?
  issued               DateTime
  method               Json?
  note                 Json?
  performer            Json?
  referenceRange       Json?
  resourceType         String
  specimen             String?
  status               String
  valueCodeableConcept Json?
  valueQuantity        Json?
  valueString          String?
  doctor               User     @relation(fields: [doctorId], references: [id])
  patient              Patient  @relation(fields: [patientId], references: [id])
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Sync fields
  syncStatus String?  @default("synced") // synced, modified, created, deleted
  syncedAt  DateTime? // Last successful sync time
  globalId  String?  @unique // ID on the central server for conflict resolution
}

model Chat {
  id           String            @id @default(uuid())
  name         String?
  type         String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  messages     Message[]
  participants ChatParticipant[]
  // Sync fields
  syncStatus   String?           @default("synced") // synced, modified, created, deleted
  syncedAt     DateTime?         // Last successful sync time
  globalId     String?           @unique // ID on the central server for conflict resolution
}

model ChatParticipant {
  id        String   @id @default(uuid())
  chatId    String
  userId    String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Sync fields
  syncStatus String?  @default("synced") // synced, modified, created, deleted
  syncedAt  DateTime? // Last successful sync time
  globalId  String?  @unique // ID on the central server for conflict resolution

  @@unique([chatId, userId])
}

model Message {
  id       String   @id @default(uuid())
  chatId   String
  senderId String
  content  String
  isRead   Boolean  @default(false)
  readBy   Json?
  sentAt   DateTime @default(now())
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  // Sync fields
  syncStatus String?  @default("synced") // synced, modified, created, deleted
  syncedAt  DateTime? // Last successful sync time
  globalId  String?   @unique // ID on the central server for conflict resolution
}

// This model tracks all changes made in offline mode that need to be synced
model SyncQueue {
  id               String   @id @default(uuid())
  modelName        String   // Name of the model being synced (Hospital, Patient, etc.)
  recordId         String   // ID of the record in the local database
  globalId         String?  // ID of the record in the cloud database (if known)
  operation        String   // create, update, delete
  status           String   @default("pending") // pending, success, conflict, error
  payload          String   // Serialized JSON data of the changed record
  errorMessage     String?  // Error message if sync failed
  conflictResolved Boolean  @default(false) // Whether conflicts have been resolved
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  attemptCount     Int      @default(0) // Number of sync attempts
  lastAttemptAt    DateTime? // Timestamp of the last sync attempt
  userId           String   // User who made the change
  hospitalId       String?  // Hospital context for the change
  
  @@index([status, modelName]) // For efficient querying of pending sync operations
  @@index([recordId, modelName]) // For checking if a record is in the sync queue
}

// This model tracks local user sessions for offline authentication
model OfflineSession {
  id           String    @id @default(uuid())
  userId       String    // User ID in the local database
  token        String    @unique // Encrypted session token
  createdAt    DateTime  @default(now())
  expiresAt    DateTime  // When this session expires
  lastActiveAt DateTime  @updatedAt
  ipAddress    String?   // IP address when session was created
  userAgent    String?   // User agent when session was created
  isRevoked    Boolean   @default(false) // Whether this session has been manually revoked
  
  @@index([userId, expiresAt]) // For efficient lookup and cleanup
}

// Email verification for OTP management
model EmailVerification {
  id        String    @id @default(uuid())
  email     String    @unique
  code      String
  expires   DateTime
  verified  Boolean   @default(false)
  attempts  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Plugin System Models

// Core plugin registration
model Plugin {
  id                      String   @id @default(uuid())
  name                    String
  version                 String
  category                String
  author                  String
  description             String
  medicalReference        String   @default("byMedicalNumber")
  hiddenFromGit           Boolean  @default(false)
  crossHospitalCompatible Boolean  @default(true)
  path                    String   // Path to plugin directory
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  // Relations
  hospitalSettings        HospitalPluginSettings[]
  accessLogs              PatientAccessLog[]
  rolePermissions         PluginRolePermission[]
  patientData             PatientPluginData[]
  
  @@unique([name, version])
}

// Hospital-specific plugin settings and activation
model HospitalPluginSettings {
  id             String    @id @default(uuid())
  hospitalId     String
  pluginId       String
  pluginName     String    // Denormalized for faster queries
  isActive       Boolean   @default(false)
  settings       Json      // Hospital-specific settings
  activatedAt    DateTime?
  activatedById  String?   // User who activated the plugin
  modifiedAt     DateTime  @updatedAt
  
  // Relations
  hospital       Hospital  @relation(fields: [hospitalId], references: [id])
  plugin         Plugin    @relation(fields: [pluginId], references: [id])
  activatedBy    User?     @relation("PluginActivator", fields: [activatedById], references: [id])
  
  @@unique([hospitalId, pluginId])
}

// Track plugin access to patient data
model PatientAccessLog {
  id            String   @id @default(uuid())
  patientId     String
  medicalNumber String
  hospitalId    String
  userId        String
  action        String   // e.g. "view", "update", "create"
  pluginId      String
  pluginName    String   // Denormalized for easier querying
  context       Json?    // Additional context about the access
  timestamp     DateTime @default(now())
  
  // Relations
  patient       Patient  @relation(fields: [patientId], references: [id])
  hospital      Hospital @relation(fields: [hospitalId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  plugin        Plugin   @relation(fields: [pluginId], references: [id])
  
  @@index([patientId, timestamp])
  @@index([hospitalId, pluginName])
  @@index([userId, timestamp])
}

// Plugin-specific role permissions
model PluginRolePermission {
  id           String  @id @default(uuid())
  hospitalId   String
  pluginId     String
  roleId       String  
  permissions  Json    // Map of permission keys to boolean values
  
  // Relations
  hospital     Hospital @relation(fields: [hospitalId], references: [id])
  plugin       Plugin   @relation(fields: [pluginId], references: [id])
  // This assumes you have a Role model - add relation when implementing roles
  // role         Role     @relation(fields: [roleId], references: [id])
  
  @@unique([hospitalId, pluginId, roleId])
}

// Plugin-specific patient data
model PatientPluginData {
  id                  String   @id @default(uuid())
  patientId           String
  pluginId            String
  pluginName          String   // Denormalized for easier querying
  data                Json     // Plugin-specific data for this patient
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdByUserId     String
  updatedByUserId     String
  createdByHospitalId String
  updatedByHospitalId String
  
  // Relations
  patient             Patient  @relation(fields: [patientId], references: [id])
  plugin              Plugin   @relation(fields: [pluginId], references: [id])
  createdByUser       User     @relation("CreatedPluginData", fields: [createdByUserId], references: [id])
  updatedByUser       User     @relation("UpdatedPluginData", fields: [updatedByUserId], references: [id])
  
  @@unique([patientId, pluginName])
  @@index([patientId, pluginName])
  @@index([createdByHospitalId])
}

// Plugin sync tracking for offline mode
model PluginSyncQueue {
  id               String    @id @default(uuid())
  pluginId         String
  pluginName       String    // Denormalized for easier querying
  modelName        String    // Name of the model within the plugin context
  recordId         String    // ID of the record in the local database
  operation        String    // create, update, delete
  status           String    @default("pending")
  payload          Json      // Data being synced
  errorMessage     String?
  conflictResolved Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  attemptCount     Int       @default(0)
  lastAttemptAt    DateTime?
  userId           String
  hospitalId       String
  
  @@index([status, pluginName])
  @@index([hospitalId, status])
}
