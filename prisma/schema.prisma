generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Hospital {
  id               String            @id @default(uuid())
  name             String
  subdomain        String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  settings         Json
  branding         Json?
  antenatalRecords AntenatalRecord[]
  neonatalRecords  NeonatalRecord[]
  patients         Patient[]
  users            User[]
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  name             String?
  role             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  hospitalId       String
  createdAntenatal AntenatalRecord[] @relation("CreatedAntenatalRecord")
  updatedAntenatal AntenatalRecord[] @relation("UpdatedAntenatalRecord")
  appointments     Appointment[]
  medicalRecords   MedicalRecord[]
  createdNeonatal  NeonatalRecord[]  @relation("CreatedNeonatalRecord")
  updatedNeonatal  NeonatalRecord[]  @relation("UpdatedNeonatalRecord")
  hospital         Hospital          @relation(fields: [hospitalId], references: [id])
  patients         Patient[]         @relation("DoctorPatients")
}

model Patient {
  id             String            @id @default(uuid())
  mrn            String            @unique
  name           String
  dateOfBirth    DateTime
  gender         String
  contact        Json
  medicalHistory Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  hospitalId     String
  antenatal      AntenatalRecord[]
  appointments   Appointment[]
  records        MedicalRecord[]
  children       NeonatalRecord[]  @relation("MotherChildRelation")
  neonatal       NeonatalRecord[]
  hospital       Hospital          @relation(fields: [hospitalId], references: [id])
  doctors        User[]            @relation("DoctorPatients")
}

model Appointment {
  id        String   @id @default(uuid())
  patientId String
  doctorId  String
  date      DateTime
  status    String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    User     @relation(fields: [doctorId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model MedicalRecord {
  id        String   @id @default(uuid())
  patientId String
  doctorId  String
  type      String
  details   Json
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    User     @relation(fields: [doctorId], references: [id])
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model AntenatalRecord {
  id                String          @id @default(uuid())
  patientId         String
  hospitalId        String
  gestationalAge    Int
  nextAppointment   DateTime?
  riskLevel         RiskLevel       @default(LOW)
  status            AntenatalStatus @default(ACTIVE)
  trimester         Int             @default(1)
  lastVisitDate     DateTime?
  expectedDueDate   DateTime
  medicalNotes      String?
  ultrasoundReports Json?
  labResults        Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdByUserId   String
  updatedByUserId   String
  createdByUser     User            @relation("CreatedAntenatalRecord", fields: [createdByUserId], references: [id])
  hospital          Hospital        @relation(fields: [hospitalId], references: [id])
  patient           Patient         @relation(fields: [patientId], references: [id])
  updatedByUser     User            @relation("UpdatedAntenatalRecord", fields: [updatedByUserId], references: [id])

  @@index([patientId])
  @@index([hospitalId])
  @@index([status])
  @@index([riskLevel])
}

model NeonatalRecord {
  id                    String           @id @default(uuid())
  patientId             String
  hospitalId            String
  birthWeight           Float
  gestationalAgeAtBirth Int
  careLevel             CareLevel        @default(NORMAL)
  status                NeonatalStatus   @default(ACTIVE)
  dischargeStatus       DischargeStatus?
  apgarScore            Int?
  motherId              String?
  birthComplications    String?
  medicalNotes          String?
  feedingMethod         String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  createdByUserId       String
  updatedByUserId       String
  createdByUser         User             @relation("CreatedNeonatalRecord", fields: [createdByUserId], references: [id])
  hospital              Hospital         @relation(fields: [hospitalId], references: [id])
  mother                Patient?         @relation("MotherChildRelation", fields: [motherId], references: [id])
  patient               Patient          @relation(fields: [patientId], references: [id])
  updatedByUser         User             @relation("UpdatedNeonatalRecord", fields: [updatedByUserId], references: [id])

  @@index([patientId])
  @@index([hospitalId])
  @@index([status])
  @@index([careLevel])
  @@index([motherId])
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum AntenatalStatus {
  ACTIVE
  COMPLETED
  REFERRED
  TRANSFERRED
}

enum CareLevel {
  NORMAL
  INTENSIVE
  CRITICAL
}

enum NeonatalStatus {
  ACTIVE
  DISCHARGED
  TRANSFERRED
  DECEASED
}

enum DischargeStatus {
  READY
  NOT_READY
}
