// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id          String    @id @default(cuid())
  name        String
  subdomain   String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  settings    Json
  branding    Json?
  users       User[]
  patients    Patient[]
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String?
  role        String
  profileImage String?   // URL or base64 of profile image
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hospitalId  String
  hospital    Hospital  @relation(fields: [hospitalId], references: [id])
  patients    Patient[] @relation("DoctorPatients")
  appointments Appointment[]
  medicalRecords MedicalRecord[]
  chatParticipations ChatParticipant[]
  messages Message[]
}

model Patient {
  id            String    @id @default(cuid())
  mrn           String    @unique
  name          String
  dateOfBirth   DateTime
  gender        String
  contact       Json
  medicalHistory Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  hospitalId    String
  hospital      Hospital  @relation(fields: [hospitalId], references: [id])
  doctors       User[]    @relation("DoctorPatients")
  appointments  Appointment[]
  records       MedicalRecord[]
}

model Appointment {
  id          String    @id @default(cuid())
  patientId   String
  patient     Patient   @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      User      @relation(fields: [doctorId], references: [id])
  date        DateTime
  status      String
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MedicalRecord {
  id          String    @id @default(cuid())
  patientId   String
  patient     Patient   @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      User      @relation(fields: [doctorId], references: [id])
  type        String
  details     Json
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id            String    @id @default(cuid())
  name          String?   // Optional name for group chats
  type          String    // 'direct', 'group', 'broadcast'
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  participants  ChatParticipant[]
}

model ChatParticipant {
  id        String   @id @default(cuid())
  chatId    String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin   Boolean  @default(false)  // Chat admin can add/remove participants
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatId, userId])
}

model Message {
  id          String    @id @default(cuid())
  chatId      String
  senderId    String
  content     String    @db.Text
  isRead      Boolean   @default(false)
  readBy      Json?     // Array of user IDs who have read the message
  sentAt      DateTime  @default(now())
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
