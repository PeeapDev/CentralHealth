generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id          String    @id @default(uuid())
  name        String
  subdomain   String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  settings    Json
  branding    Json?
  patients    Patient[]
  users       User[]
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  password           String
  name               String?
  role               String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  hospitalId         String?
  profileImage       String?
  appointments       Appointment[]
  chatParticipations ChatParticipant[]
  medicalRecords     MedicalRecord[]
  messages           Message[]
  patients           Patient[]
  hospital           Hospital?         @relation(fields: [hospitalId], references: [id])
}

model Patient {
  id                   String          @id @default(uuid())
  mrn                  String?
  gender               String
  contact              Json?
  medicalHistory       Json?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  hospitalId           String?
  userId               String?
  active               Boolean         @default(true)
  address              Json?
  birthDate            DateTime
  communication        Json?
  deceased             Boolean         @default(false)
  deceasedDateTime     DateTime?
  email                String?
  extension            Json?
  generalPractitioner  Json?
  managingOrganization String?
  maritalStatus        Json?
  medicalNumber        String          @unique
  multipleBirth        Boolean?
  multipleBirthInteger Int?
  password             String?
  photo                String?
  resetCode            String?
  resetExpiration      DateTime?
  resourceType         String          @default("Patient")
  telecom              Json?
  name                 Json
  phone                String?
  appointments         Appointment[]
  records              MedicalRecord[]
  hospital             Hospital?       @relation(fields: [hospitalId], references: [id])
  user                 User?           @relation(fields: [userId], references: [id])
}

model Appointment {
  id              String    @id @default(uuid())
  patientId       String
  doctorId        String
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  appointmentType Json?
  comment         String?
  description     String?
  end             DateTime?
  extension       Json?
  hospitalId      String?
  minutesDuration Int?
  priority        Int?
  reason          Json?
  resourceType    String    @default("Appointment")
  serviceType     Json?
  specialty       Json?
  start           DateTime
  doctor          User      @relation(fields: [doctorId], references: [id])
  patient         Patient   @relation(fields: [patientId], references: [id])
}

model MedicalRecord {
  id                   String   @id @default(uuid())
  patientId            String
  doctorId             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  bodySite             Json?
  category             Json?
  code                 Json
  derivedFrom          Json?
  device               String?
  effectiveDateTime    DateTime
  extension            Json?
  hasMember            Json?
  hospitalId           String?
  interpretation       Json?
  issued               DateTime
  method               Json?
  note                 Json?
  performer            Json?
  referenceRange       Json?
  resourceType         String
  specimen             String?
  status               String
  valueCodeableConcept Json?
  valueQuantity        Json?
  valueString          String?
  doctor               User     @relation(fields: [doctorId], references: [id])
  patient              Patient  @relation(fields: [patientId], references: [id])
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id           String            @id @default(uuid())
  name         String?
  type         String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id        String   @id @default(uuid())
  chatId    String
  userId    String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
}

model Message {
  id       String   @id @default(uuid())
  chatId   String
  senderId String
  content  String
  isRead   Boolean  @default(false)
  readBy   Json?
  sentAt   DateTime @default(now())
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
