
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model AntenatalRecord
 * 
 */
export type AntenatalRecord = $Result.DefaultSelection<Prisma.$AntenatalRecordPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model Hospital
 * 
 */
export type Hospital = $Result.DefaultSelection<Prisma.$HospitalPayload>
/**
 * Model MedicalRecord
 * 
 */
export type MedicalRecord = $Result.DefaultSelection<Prisma.$MedicalRecordPayload>
/**
 * Model NeonatalRecord
 * 
 */
export type NeonatalRecord = $Result.DefaultSelection<Prisma.$NeonatalRecordPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model PasswordReset
 * 
 */
export type PasswordReset = $Result.DefaultSelection<Prisma.$PasswordResetPayload>
/**
 * Model SecurityAuditLog
 * 
 */
export type SecurityAuditLog = $Result.DefaultSelection<Prisma.$SecurityAuditLogPayload>
/**
 * Model ProfilePicture
 * 
 */
export type ProfilePicture = $Result.DefaultSelection<Prisma.$ProfilePicturePayload>
/**
 * Model PatientEmail
 * 
 */
export type PatientEmail = $Result.DefaultSelection<Prisma.$PatientEmailPayload>
/**
 * Model PatientPhone
 * 
 */
export type PatientPhone = $Result.DefaultSelection<Prisma.$PatientPhonePayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model DepartmentMembership
 * 
 */
export type DepartmentMembership = $Result.DefaultSelection<Prisma.$DepartmentMembershipPayload>
/**
 * Model StaffProfile
 * 
 */
export type StaffProfile = $Result.DefaultSelection<Prisma.$StaffProfilePayload>
/**
 * Model PatientHospitalAccess
 * 
 */
export type PatientHospitalAccess = $Result.DefaultSelection<Prisma.$PatientHospitalAccessPayload>
/**
 * Model PatientSearchIndex
 * 
 */
export type PatientSearchIndex = $Result.DefaultSelection<Prisma.$PatientSearchIndexPayload>
/**
 * Model DoctorAvailability
 * 
 */
export type DoctorAvailability = $Result.DefaultSelection<Prisma.$DoctorAvailabilityPayload>
/**
 * Model PatientWidgetPreference
 * 
 */
export type PatientWidgetPreference = $Result.DefaultSelection<Prisma.$PatientWidgetPreferencePayload>
/**
 * Model Referral
 * 
 */
export type Referral = $Result.DefaultSelection<Prisma.$ReferralPayload>
/**
 * Model Ambulance
 * 
 */
export type Ambulance = $Result.DefaultSelection<Prisma.$AmbulancePayload>
/**
 * Model AmbulanceDispatch
 * 
 */
export type AmbulanceDispatch = $Result.DefaultSelection<Prisma.$AmbulanceDispatchPayload>
/**
 * Model AmbulanceRequest
 * 
 */
export type AmbulanceRequest = $Result.DefaultSelection<Prisma.$AmbulanceRequestPayload>
/**
 * Model Wallet
 * 
 */
export type Wallet = $Result.DefaultSelection<Prisma.$WalletPayload>
/**
 * Model WalletTransaction
 * 
 */
export type WalletTransaction = $Result.DefaultSelection<Prisma.$WalletTransactionPayload>
/**
 * Model Billing
 * 
 */
export type Billing = $Result.DefaultSelection<Prisma.$BillingPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Conversation
 * 
 */
export type Conversation = $Result.DefaultSelection<Prisma.$ConversationPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model BirthRecord
 * 
 */
export type BirthRecord = $Result.DefaultSelection<Prisma.$BirthRecordPayload>
/**
 * Model DeathRecord
 * 
 */
export type DeathRecord = $Result.DefaultSelection<Prisma.$DeathRecordPayload>
/**
 * Model MarketplaceVendor
 * 
 */
export type MarketplaceVendor = $Result.DefaultSelection<Prisma.$MarketplaceVendorPayload>
/**
 * Model MarketplaceProduct
 * 
 */
export type MarketplaceProduct = $Result.DefaultSelection<Prisma.$MarketplaceProductPayload>
/**
 * Model MarketplaceOrder
 * 
 */
export type MarketplaceOrder = $Result.DefaultSelection<Prisma.$MarketplaceOrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model CartItem
 * 
 */
export type CartItem = $Result.DefaultSelection<Prisma.$CartItemPayload>
/**
 * Model SavedVendor
 * 
 */
export type SavedVendor = $Result.DefaultSelection<Prisma.$SavedVendorPayload>
/**
 * Model Prescription
 * 
 */
export type Prescription = $Result.DefaultSelection<Prisma.$PrescriptionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AntenatalStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  REFERRED: 'REFERRED',
  TRANSFERRED: 'TRANSFERRED'
};

export type AntenatalStatus = (typeof AntenatalStatus)[keyof typeof AntenatalStatus]


export const CareLevel: {
  NORMAL: 'NORMAL',
  INTENSIVE: 'INTENSIVE',
  CRITICAL: 'CRITICAL'
};

export type CareLevel = (typeof CareLevel)[keyof typeof CareLevel]


export const DischargeStatus: {
  READY: 'READY',
  NOT_READY: 'NOT_READY'
};

export type DischargeStatus = (typeof DischargeStatus)[keyof typeof DischargeStatus]


export const NeonatalStatus: {
  ACTIVE: 'ACTIVE',
  DISCHARGED: 'DISCHARGED',
  TRANSFERRED: 'TRANSFERRED',
  DECEASED: 'DECEASED'
};

export type NeonatalStatus = (typeof NeonatalStatus)[keyof typeof NeonatalStatus]


export const RiskLevel: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

export type RiskLevel = (typeof RiskLevel)[keyof typeof RiskLevel]


export const UserRole: {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  STAFF: 'STAFF',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const EmploymentStatus: {
  ACTIVE: 'ACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED'
};

export type EmploymentStatus = (typeof EmploymentStatus)[keyof typeof EmploymentStatus]


export const AccessLevel: {
  READ: 'READ',
  WRITE: 'WRITE',
  ADMIN: 'ADMIN'
};

export type AccessLevel = (typeof AccessLevel)[keyof typeof AccessLevel]


export const AppointmentStatus: {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const ReferralPriority: {
  ROUTINE: 'ROUTINE',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY'
};

export type ReferralPriority = (typeof ReferralPriority)[keyof typeof ReferralPriority]


export const ReferralStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

export type ReferralStatus = (typeof ReferralStatus)[keyof typeof ReferralStatus]


export const AmbulanceType: {
  BASIC: 'BASIC',
  ADVANCED: 'ADVANCED',
  NEONATAL: 'NEONATAL',
  MOBILE_ICU: 'MOBILE_ICU'
};

export type AmbulanceType = (typeof AmbulanceType)[keyof typeof AmbulanceType]


export const AmbulanceStatus: {
  AVAILABLE: 'AVAILABLE',
  DISPATCHED: 'DISPATCHED',
  IN_MAINTENANCE: 'IN_MAINTENANCE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE'
};

export type AmbulanceStatus = (typeof AmbulanceStatus)[keyof typeof AmbulanceStatus]


export const DispatchPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type DispatchPriority = (typeof DispatchPriority)[keyof typeof DispatchPriority]


export const DispatchStatus: {
  REQUESTED: 'REQUESTED',
  DISPATCHED: 'DISPATCHED',
  EN_ROUTE: 'EN_ROUTE',
  ARRIVED: 'ARRIVED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type DispatchStatus = (typeof DispatchStatus)[keyof typeof DispatchStatus]


export const WalletStatus: {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  CLOSED: 'CLOSED'
};

export type WalletStatus = (typeof WalletStatus)[keyof typeof WalletStatus]


export const TransactionType: {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  PAYMENT: 'PAYMENT',
  REFUND: 'REFUND',
  TRANSFER: 'TRANSFER'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]


export const TransactionStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REVERSED: 'REVERSED'
};

export type TransactionStatus = (typeof TransactionStatus)[keyof typeof TransactionStatus]


export const BillingStatus: {
  PENDING: 'PENDING',
  PARTIAL: 'PARTIAL',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

export type BillingStatus = (typeof BillingStatus)[keyof typeof BillingStatus]


export const PaymentMethod: {
  CASH: 'CASH',
  CARD: 'CARD',
  TRANSFER: 'TRANSFER',
  MOBILE_MONEY: 'MOBILE_MONEY',
  INSURANCE: 'INSURANCE'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const ConversationStatus: {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  BLOCKED: 'BLOCKED'
};

export type ConversationStatus = (typeof ConversationStatus)[keyof typeof ConversationStatus]


export const MessageStatus: {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ'
};

export type MessageStatus = (typeof MessageStatus)[keyof typeof MessageStatus]


export const DeliveryMethod: {
  NATURAL: 'NATURAL',
  CESAREAN: 'CESAREAN',
  ASSISTED: 'ASSISTED'
};

export type DeliveryMethod = (typeof DeliveryMethod)[keyof typeof DeliveryMethod]


export const OrderStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  RETURNED: 'RETURNED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]

}

export type AntenatalStatus = $Enums.AntenatalStatus

export const AntenatalStatus: typeof $Enums.AntenatalStatus

export type CareLevel = $Enums.CareLevel

export const CareLevel: typeof $Enums.CareLevel

export type DischargeStatus = $Enums.DischargeStatus

export const DischargeStatus: typeof $Enums.DischargeStatus

export type NeonatalStatus = $Enums.NeonatalStatus

export const NeonatalStatus: typeof $Enums.NeonatalStatus

export type RiskLevel = $Enums.RiskLevel

export const RiskLevel: typeof $Enums.RiskLevel

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type EmploymentStatus = $Enums.EmploymentStatus

export const EmploymentStatus: typeof $Enums.EmploymentStatus

export type AccessLevel = $Enums.AccessLevel

export const AccessLevel: typeof $Enums.AccessLevel

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type ReferralPriority = $Enums.ReferralPriority

export const ReferralPriority: typeof $Enums.ReferralPriority

export type ReferralStatus = $Enums.ReferralStatus

export const ReferralStatus: typeof $Enums.ReferralStatus

export type AmbulanceType = $Enums.AmbulanceType

export const AmbulanceType: typeof $Enums.AmbulanceType

export type AmbulanceStatus = $Enums.AmbulanceStatus

export const AmbulanceStatus: typeof $Enums.AmbulanceStatus

export type DispatchPriority = $Enums.DispatchPriority

export const DispatchPriority: typeof $Enums.DispatchPriority

export type DispatchStatus = $Enums.DispatchStatus

export const DispatchStatus: typeof $Enums.DispatchStatus

export type WalletStatus = $Enums.WalletStatus

export const WalletStatus: typeof $Enums.WalletStatus

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

export type TransactionStatus = $Enums.TransactionStatus

export const TransactionStatus: typeof $Enums.TransactionStatus

export type BillingStatus = $Enums.BillingStatus

export const BillingStatus: typeof $Enums.BillingStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type ConversationStatus = $Enums.ConversationStatus

export const ConversationStatus: typeof $Enums.ConversationStatus

export type MessageStatus = $Enums.MessageStatus

export const MessageStatus: typeof $Enums.MessageStatus

export type DeliveryMethod = $Enums.DeliveryMethod

export const DeliveryMethod: typeof $Enums.DeliveryMethod

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more AntenatalRecords
 * const antenatalRecords = await prisma.antenatalRecord.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more AntenatalRecords
   * const antenatalRecords = await prisma.antenatalRecord.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.antenatalRecord`: Exposes CRUD operations for the **AntenatalRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AntenatalRecords
    * const antenatalRecords = await prisma.antenatalRecord.findMany()
    * ```
    */
  get antenatalRecord(): Prisma.AntenatalRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hospital`: Exposes CRUD operations for the **Hospital** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hospitals
    * const hospitals = await prisma.hospital.findMany()
    * ```
    */
  get hospital(): Prisma.HospitalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicalRecord`: Exposes CRUD operations for the **MedicalRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalRecords
    * const medicalRecords = await prisma.medicalRecord.findMany()
    * ```
    */
  get medicalRecord(): Prisma.MedicalRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.neonatalRecord`: Exposes CRUD operations for the **NeonatalRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NeonatalRecords
    * const neonatalRecords = await prisma.neonatalRecord.findMany()
    * ```
    */
  get neonatalRecord(): Prisma.NeonatalRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordReset`: Exposes CRUD operations for the **PasswordReset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordReset.findMany()
    * ```
    */
  get passwordReset(): Prisma.PasswordResetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.securityAuditLog`: Exposes CRUD operations for the **SecurityAuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SecurityAuditLogs
    * const securityAuditLogs = await prisma.securityAuditLog.findMany()
    * ```
    */
  get securityAuditLog(): Prisma.SecurityAuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profilePicture`: Exposes CRUD operations for the **ProfilePicture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilePictures
    * const profilePictures = await prisma.profilePicture.findMany()
    * ```
    */
  get profilePicture(): Prisma.ProfilePictureDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientEmail`: Exposes CRUD operations for the **PatientEmail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientEmails
    * const patientEmails = await prisma.patientEmail.findMany()
    * ```
    */
  get patientEmail(): Prisma.PatientEmailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientPhone`: Exposes CRUD operations for the **PatientPhone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientPhones
    * const patientPhones = await prisma.patientPhone.findMany()
    * ```
    */
  get patientPhone(): Prisma.PatientPhoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departmentMembership`: Exposes CRUD operations for the **DepartmentMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentMemberships
    * const departmentMemberships = await prisma.departmentMembership.findMany()
    * ```
    */
  get departmentMembership(): Prisma.DepartmentMembershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffProfile`: Exposes CRUD operations for the **StaffProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffProfiles
    * const staffProfiles = await prisma.staffProfile.findMany()
    * ```
    */
  get staffProfile(): Prisma.StaffProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientHospitalAccess`: Exposes CRUD operations for the **PatientHospitalAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientHospitalAccesses
    * const patientHospitalAccesses = await prisma.patientHospitalAccess.findMany()
    * ```
    */
  get patientHospitalAccess(): Prisma.PatientHospitalAccessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientSearchIndex`: Exposes CRUD operations for the **PatientSearchIndex** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientSearchIndices
    * const patientSearchIndices = await prisma.patientSearchIndex.findMany()
    * ```
    */
  get patientSearchIndex(): Prisma.PatientSearchIndexDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctorAvailability`: Exposes CRUD operations for the **DoctorAvailability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorAvailabilities
    * const doctorAvailabilities = await prisma.doctorAvailability.findMany()
    * ```
    */
  get doctorAvailability(): Prisma.DoctorAvailabilityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientWidgetPreference`: Exposes CRUD operations for the **PatientWidgetPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientWidgetPreferences
    * const patientWidgetPreferences = await prisma.patientWidgetPreference.findMany()
    * ```
    */
  get patientWidgetPreference(): Prisma.PatientWidgetPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referral`: Exposes CRUD operations for the **Referral** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referrals
    * const referrals = await prisma.referral.findMany()
    * ```
    */
  get referral(): Prisma.ReferralDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ambulance`: Exposes CRUD operations for the **Ambulance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ambulances
    * const ambulances = await prisma.ambulance.findMany()
    * ```
    */
  get ambulance(): Prisma.AmbulanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ambulanceDispatch`: Exposes CRUD operations for the **AmbulanceDispatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AmbulanceDispatches
    * const ambulanceDispatches = await prisma.ambulanceDispatch.findMany()
    * ```
    */
  get ambulanceDispatch(): Prisma.AmbulanceDispatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ambulanceRequest`: Exposes CRUD operations for the **AmbulanceRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AmbulanceRequests
    * const ambulanceRequests = await prisma.ambulanceRequest.findMany()
    * ```
    */
  get ambulanceRequest(): Prisma.AmbulanceRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.walletTransaction`: Exposes CRUD operations for the **WalletTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WalletTransactions
    * const walletTransactions = await prisma.walletTransaction.findMany()
    * ```
    */
  get walletTransaction(): Prisma.WalletTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.billing`: Exposes CRUD operations for the **Billing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Billings
    * const billings = await prisma.billing.findMany()
    * ```
    */
  get billing(): Prisma.BillingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.birthRecord`: Exposes CRUD operations for the **BirthRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BirthRecords
    * const birthRecords = await prisma.birthRecord.findMany()
    * ```
    */
  get birthRecord(): Prisma.BirthRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deathRecord`: Exposes CRUD operations for the **DeathRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeathRecords
    * const deathRecords = await prisma.deathRecord.findMany()
    * ```
    */
  get deathRecord(): Prisma.DeathRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketplaceVendor`: Exposes CRUD operations for the **MarketplaceVendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketplaceVendors
    * const marketplaceVendors = await prisma.marketplaceVendor.findMany()
    * ```
    */
  get marketplaceVendor(): Prisma.MarketplaceVendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketplaceProduct`: Exposes CRUD operations for the **MarketplaceProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketplaceProducts
    * const marketplaceProducts = await prisma.marketplaceProduct.findMany()
    * ```
    */
  get marketplaceProduct(): Prisma.MarketplaceProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketplaceOrder`: Exposes CRUD operations for the **MarketplaceOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketplaceOrders
    * const marketplaceOrders = await prisma.marketplaceOrder.findMany()
    * ```
    */
  get marketplaceOrder(): Prisma.MarketplaceOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartItem`: Exposes CRUD operations for the **CartItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartItems
    * const cartItems = await prisma.cartItem.findMany()
    * ```
    */
  get cartItem(): Prisma.CartItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.savedVendor`: Exposes CRUD operations for the **SavedVendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedVendors
    * const savedVendors = await prisma.savedVendor.findMany()
    * ```
    */
  get savedVendor(): Prisma.SavedVendorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.prescription`: Exposes CRUD operations for the **Prescription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prescriptions
    * const prescriptions = await prisma.prescription.findMany()
    * ```
    */
  get prescription(): Prisma.PrescriptionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    AntenatalRecord: 'AntenatalRecord',
    Appointment: 'Appointment',
    Hospital: 'Hospital',
    MedicalRecord: 'MedicalRecord',
    NeonatalRecord: 'NeonatalRecord',
    Patient: 'Patient',
    User: 'User',
    PasswordReset: 'PasswordReset',
    SecurityAuditLog: 'SecurityAuditLog',
    ProfilePicture: 'ProfilePicture',
    PatientEmail: 'PatientEmail',
    PatientPhone: 'PatientPhone',
    Department: 'Department',
    DepartmentMembership: 'DepartmentMembership',
    StaffProfile: 'StaffProfile',
    PatientHospitalAccess: 'PatientHospitalAccess',
    PatientSearchIndex: 'PatientSearchIndex',
    DoctorAvailability: 'DoctorAvailability',
    PatientWidgetPreference: 'PatientWidgetPreference',
    Referral: 'Referral',
    Ambulance: 'Ambulance',
    AmbulanceDispatch: 'AmbulanceDispatch',
    AmbulanceRequest: 'AmbulanceRequest',
    Wallet: 'Wallet',
    WalletTransaction: 'WalletTransaction',
    Billing: 'Billing',
    Payment: 'Payment',
    Conversation: 'Conversation',
    Message: 'Message',
    BirthRecord: 'BirthRecord',
    DeathRecord: 'DeathRecord',
    MarketplaceVendor: 'MarketplaceVendor',
    MarketplaceProduct: 'MarketplaceProduct',
    MarketplaceOrder: 'MarketplaceOrder',
    OrderItem: 'OrderItem',
    CartItem: 'CartItem',
    SavedVendor: 'SavedVendor',
    Prescription: 'Prescription'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "antenatalRecord" | "appointment" | "hospital" | "medicalRecord" | "neonatalRecord" | "patient" | "user" | "passwordReset" | "securityAuditLog" | "profilePicture" | "patientEmail" | "patientPhone" | "department" | "departmentMembership" | "staffProfile" | "patientHospitalAccess" | "patientSearchIndex" | "doctorAvailability" | "patientWidgetPreference" | "referral" | "ambulance" | "ambulanceDispatch" | "ambulanceRequest" | "wallet" | "walletTransaction" | "billing" | "payment" | "conversation" | "message" | "birthRecord" | "deathRecord" | "marketplaceVendor" | "marketplaceProduct" | "marketplaceOrder" | "orderItem" | "cartItem" | "savedVendor" | "prescription"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      AntenatalRecord: {
        payload: Prisma.$AntenatalRecordPayload<ExtArgs>
        fields: Prisma.AntenatalRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AntenatalRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AntenatalRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>
          }
          findFirst: {
            args: Prisma.AntenatalRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AntenatalRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>
          }
          findMany: {
            args: Prisma.AntenatalRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>[]
          }
          create: {
            args: Prisma.AntenatalRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>
          }
          createMany: {
            args: Prisma.AntenatalRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AntenatalRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>[]
          }
          delete: {
            args: Prisma.AntenatalRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>
          }
          update: {
            args: Prisma.AntenatalRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>
          }
          deleteMany: {
            args: Prisma.AntenatalRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AntenatalRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AntenatalRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>[]
          }
          upsert: {
            args: Prisma.AntenatalRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AntenatalRecordPayload>
          }
          aggregate: {
            args: Prisma.AntenatalRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAntenatalRecord>
          }
          groupBy: {
            args: Prisma.AntenatalRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<AntenatalRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.AntenatalRecordCountArgs<ExtArgs>
            result: $Utils.Optional<AntenatalRecordCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Hospital: {
        payload: Prisma.$HospitalPayload<ExtArgs>
        fields: Prisma.HospitalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HospitalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HospitalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          findFirst: {
            args: Prisma.HospitalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HospitalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          findMany: {
            args: Prisma.HospitalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>[]
          }
          create: {
            args: Prisma.HospitalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          createMany: {
            args: Prisma.HospitalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HospitalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>[]
          }
          delete: {
            args: Prisma.HospitalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          update: {
            args: Prisma.HospitalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          deleteMany: {
            args: Prisma.HospitalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HospitalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HospitalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>[]
          }
          upsert: {
            args: Prisma.HospitalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HospitalPayload>
          }
          aggregate: {
            args: Prisma.HospitalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHospital>
          }
          groupBy: {
            args: Prisma.HospitalGroupByArgs<ExtArgs>
            result: $Utils.Optional<HospitalGroupByOutputType>[]
          }
          count: {
            args: Prisma.HospitalCountArgs<ExtArgs>
            result: $Utils.Optional<HospitalCountAggregateOutputType> | number
          }
        }
      }
      MedicalRecord: {
        payload: Prisma.$MedicalRecordPayload<ExtArgs>
        fields: Prisma.MedicalRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          findFirst: {
            args: Prisma.MedicalRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          findMany: {
            args: Prisma.MedicalRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          create: {
            args: Prisma.MedicalRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          createMany: {
            args: Prisma.MedicalRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          delete: {
            args: Prisma.MedicalRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          update: {
            args: Prisma.MedicalRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          deleteMany: {
            args: Prisma.MedicalRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicalRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>[]
          }
          upsert: {
            args: Prisma.MedicalRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalRecordPayload>
          }
          aggregate: {
            args: Prisma.MedicalRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalRecord>
          }
          groupBy: {
            args: Prisma.MedicalRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalRecordCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalRecordCountAggregateOutputType> | number
          }
        }
      }
      NeonatalRecord: {
        payload: Prisma.$NeonatalRecordPayload<ExtArgs>
        fields: Prisma.NeonatalRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NeonatalRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NeonatalRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>
          }
          findFirst: {
            args: Prisma.NeonatalRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NeonatalRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>
          }
          findMany: {
            args: Prisma.NeonatalRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>[]
          }
          create: {
            args: Prisma.NeonatalRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>
          }
          createMany: {
            args: Prisma.NeonatalRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NeonatalRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>[]
          }
          delete: {
            args: Prisma.NeonatalRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>
          }
          update: {
            args: Prisma.NeonatalRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>
          }
          deleteMany: {
            args: Prisma.NeonatalRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NeonatalRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NeonatalRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>[]
          }
          upsert: {
            args: Prisma.NeonatalRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeonatalRecordPayload>
          }
          aggregate: {
            args: Prisma.NeonatalRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNeonatalRecord>
          }
          groupBy: {
            args: Prisma.NeonatalRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<NeonatalRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.NeonatalRecordCountArgs<ExtArgs>
            result: $Utils.Optional<NeonatalRecordCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      PasswordReset: {
        payload: Prisma.$PasswordResetPayload<ExtArgs>
        fields: Prisma.PasswordResetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findMany: {
            args: Prisma.PasswordResetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          create: {
            args: Prisma.PasswordResetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          createMany: {
            args: Prisma.PasswordResetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          update: {
            args: Prisma.PasswordResetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordReset>
          }
          groupBy: {
            args: Prisma.PasswordResetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetCountAggregateOutputType> | number
          }
        }
      }
      SecurityAuditLog: {
        payload: Prisma.$SecurityAuditLogPayload<ExtArgs>
        fields: Prisma.SecurityAuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SecurityAuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SecurityAuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>
          }
          findFirst: {
            args: Prisma.SecurityAuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SecurityAuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>
          }
          findMany: {
            args: Prisma.SecurityAuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>[]
          }
          create: {
            args: Prisma.SecurityAuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>
          }
          createMany: {
            args: Prisma.SecurityAuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SecurityAuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>[]
          }
          delete: {
            args: Prisma.SecurityAuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>
          }
          update: {
            args: Prisma.SecurityAuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>
          }
          deleteMany: {
            args: Prisma.SecurityAuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SecurityAuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SecurityAuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>[]
          }
          upsert: {
            args: Prisma.SecurityAuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityAuditLogPayload>
          }
          aggregate: {
            args: Prisma.SecurityAuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSecurityAuditLog>
          }
          groupBy: {
            args: Prisma.SecurityAuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SecurityAuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SecurityAuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<SecurityAuditLogCountAggregateOutputType> | number
          }
        }
      }
      ProfilePicture: {
        payload: Prisma.$ProfilePicturePayload<ExtArgs>
        fields: Prisma.ProfilePictureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilePictureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilePictureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          findFirst: {
            args: Prisma.ProfilePictureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilePictureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          findMany: {
            args: Prisma.ProfilePictureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>[]
          }
          create: {
            args: Prisma.ProfilePictureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          createMany: {
            args: Prisma.ProfilePictureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfilePictureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>[]
          }
          delete: {
            args: Prisma.ProfilePictureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          update: {
            args: Prisma.ProfilePictureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          deleteMany: {
            args: Prisma.ProfilePictureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilePictureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfilePictureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>[]
          }
          upsert: {
            args: Prisma.ProfilePictureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          aggregate: {
            args: Prisma.ProfilePictureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfilePicture>
          }
          groupBy: {
            args: Prisma.ProfilePictureGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilePictureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilePictureCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilePictureCountAggregateOutputType> | number
          }
        }
      }
      PatientEmail: {
        payload: Prisma.$PatientEmailPayload<ExtArgs>
        fields: Prisma.PatientEmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientEmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientEmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>
          }
          findFirst: {
            args: Prisma.PatientEmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientEmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>
          }
          findMany: {
            args: Prisma.PatientEmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>[]
          }
          create: {
            args: Prisma.PatientEmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>
          }
          createMany: {
            args: Prisma.PatientEmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientEmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>[]
          }
          delete: {
            args: Prisma.PatientEmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>
          }
          update: {
            args: Prisma.PatientEmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>
          }
          deleteMany: {
            args: Prisma.PatientEmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientEmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientEmailUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>[]
          }
          upsert: {
            args: Prisma.PatientEmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientEmailPayload>
          }
          aggregate: {
            args: Prisma.PatientEmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientEmail>
          }
          groupBy: {
            args: Prisma.PatientEmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientEmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientEmailCountArgs<ExtArgs>
            result: $Utils.Optional<PatientEmailCountAggregateOutputType> | number
          }
        }
      }
      PatientPhone: {
        payload: Prisma.$PatientPhonePayload<ExtArgs>
        fields: Prisma.PatientPhoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientPhoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientPhoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>
          }
          findFirst: {
            args: Prisma.PatientPhoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientPhoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>
          }
          findMany: {
            args: Prisma.PatientPhoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>[]
          }
          create: {
            args: Prisma.PatientPhoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>
          }
          createMany: {
            args: Prisma.PatientPhoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientPhoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>[]
          }
          delete: {
            args: Prisma.PatientPhoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>
          }
          update: {
            args: Prisma.PatientPhoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>
          }
          deleteMany: {
            args: Prisma.PatientPhoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientPhoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientPhoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>[]
          }
          upsert: {
            args: Prisma.PatientPhoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPhonePayload>
          }
          aggregate: {
            args: Prisma.PatientPhoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientPhone>
          }
          groupBy: {
            args: Prisma.PatientPhoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientPhoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientPhoneCountArgs<ExtArgs>
            result: $Utils.Optional<PatientPhoneCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      DepartmentMembership: {
        payload: Prisma.$DepartmentMembershipPayload<ExtArgs>
        fields: Prisma.DepartmentMembershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentMembershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentMembershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>
          }
          findFirst: {
            args: Prisma.DepartmentMembershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentMembershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>
          }
          findMany: {
            args: Prisma.DepartmentMembershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>[]
          }
          create: {
            args: Prisma.DepartmentMembershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>
          }
          createMany: {
            args: Prisma.DepartmentMembershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentMembershipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>[]
          }
          delete: {
            args: Prisma.DepartmentMembershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>
          }
          update: {
            args: Prisma.DepartmentMembershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentMembershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentMembershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentMembershipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentMembershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMembershipPayload>
          }
          aggregate: {
            args: Prisma.DepartmentMembershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartmentMembership>
          }
          groupBy: {
            args: Prisma.DepartmentMembershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentMembershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentMembershipCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentMembershipCountAggregateOutputType> | number
          }
        }
      }
      StaffProfile: {
        payload: Prisma.$StaffProfilePayload<ExtArgs>
        fields: Prisma.StaffProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          findFirst: {
            args: Prisma.StaffProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          findMany: {
            args: Prisma.StaffProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>[]
          }
          create: {
            args: Prisma.StaffProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          createMany: {
            args: Prisma.StaffProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>[]
          }
          delete: {
            args: Prisma.StaffProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          update: {
            args: Prisma.StaffProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          deleteMany: {
            args: Prisma.StaffProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>[]
          }
          upsert: {
            args: Prisma.StaffProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffProfilePayload>
          }
          aggregate: {
            args: Prisma.StaffProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffProfile>
          }
          groupBy: {
            args: Prisma.StaffProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffProfileCountArgs<ExtArgs>
            result: $Utils.Optional<StaffProfileCountAggregateOutputType> | number
          }
        }
      }
      PatientHospitalAccess: {
        payload: Prisma.$PatientHospitalAccessPayload<ExtArgs>
        fields: Prisma.PatientHospitalAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientHospitalAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientHospitalAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>
          }
          findFirst: {
            args: Prisma.PatientHospitalAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientHospitalAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>
          }
          findMany: {
            args: Prisma.PatientHospitalAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>[]
          }
          create: {
            args: Prisma.PatientHospitalAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>
          }
          createMany: {
            args: Prisma.PatientHospitalAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientHospitalAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>[]
          }
          delete: {
            args: Prisma.PatientHospitalAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>
          }
          update: {
            args: Prisma.PatientHospitalAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>
          }
          deleteMany: {
            args: Prisma.PatientHospitalAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientHospitalAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientHospitalAccessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>[]
          }
          upsert: {
            args: Prisma.PatientHospitalAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHospitalAccessPayload>
          }
          aggregate: {
            args: Prisma.PatientHospitalAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientHospitalAccess>
          }
          groupBy: {
            args: Prisma.PatientHospitalAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientHospitalAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientHospitalAccessCountArgs<ExtArgs>
            result: $Utils.Optional<PatientHospitalAccessCountAggregateOutputType> | number
          }
        }
      }
      PatientSearchIndex: {
        payload: Prisma.$PatientSearchIndexPayload<ExtArgs>
        fields: Prisma.PatientSearchIndexFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientSearchIndexFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientSearchIndexFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>
          }
          findFirst: {
            args: Prisma.PatientSearchIndexFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientSearchIndexFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>
          }
          findMany: {
            args: Prisma.PatientSearchIndexFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>[]
          }
          create: {
            args: Prisma.PatientSearchIndexCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>
          }
          createMany: {
            args: Prisma.PatientSearchIndexCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientSearchIndexCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>[]
          }
          delete: {
            args: Prisma.PatientSearchIndexDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>
          }
          update: {
            args: Prisma.PatientSearchIndexUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>
          }
          deleteMany: {
            args: Prisma.PatientSearchIndexDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientSearchIndexUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientSearchIndexUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>[]
          }
          upsert: {
            args: Prisma.PatientSearchIndexUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientSearchIndexPayload>
          }
          aggregate: {
            args: Prisma.PatientSearchIndexAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientSearchIndex>
          }
          groupBy: {
            args: Prisma.PatientSearchIndexGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientSearchIndexGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientSearchIndexCountArgs<ExtArgs>
            result: $Utils.Optional<PatientSearchIndexCountAggregateOutputType> | number
          }
        }
      }
      DoctorAvailability: {
        payload: Prisma.$DoctorAvailabilityPayload<ExtArgs>
        fields: Prisma.DoctorAvailabilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorAvailabilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorAvailabilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>
          }
          findFirst: {
            args: Prisma.DoctorAvailabilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorAvailabilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>
          }
          findMany: {
            args: Prisma.DoctorAvailabilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>[]
          }
          create: {
            args: Prisma.DoctorAvailabilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>
          }
          createMany: {
            args: Prisma.DoctorAvailabilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorAvailabilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>[]
          }
          delete: {
            args: Prisma.DoctorAvailabilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>
          }
          update: {
            args: Prisma.DoctorAvailabilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>
          }
          deleteMany: {
            args: Prisma.DoctorAvailabilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorAvailabilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorAvailabilityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>[]
          }
          upsert: {
            args: Prisma.DoctorAvailabilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorAvailabilityPayload>
          }
          aggregate: {
            args: Prisma.DoctorAvailabilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctorAvailability>
          }
          groupBy: {
            args: Prisma.DoctorAvailabilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorAvailabilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorAvailabilityCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorAvailabilityCountAggregateOutputType> | number
          }
        }
      }
      PatientWidgetPreference: {
        payload: Prisma.$PatientWidgetPreferencePayload<ExtArgs>
        fields: Prisma.PatientWidgetPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientWidgetPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientWidgetPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>
          }
          findFirst: {
            args: Prisma.PatientWidgetPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientWidgetPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>
          }
          findMany: {
            args: Prisma.PatientWidgetPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>[]
          }
          create: {
            args: Prisma.PatientWidgetPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>
          }
          createMany: {
            args: Prisma.PatientWidgetPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientWidgetPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>[]
          }
          delete: {
            args: Prisma.PatientWidgetPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>
          }
          update: {
            args: Prisma.PatientWidgetPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>
          }
          deleteMany: {
            args: Prisma.PatientWidgetPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientWidgetPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientWidgetPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>[]
          }
          upsert: {
            args: Prisma.PatientWidgetPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientWidgetPreferencePayload>
          }
          aggregate: {
            args: Prisma.PatientWidgetPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientWidgetPreference>
          }
          groupBy: {
            args: Prisma.PatientWidgetPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientWidgetPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientWidgetPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<PatientWidgetPreferenceCountAggregateOutputType> | number
          }
        }
      }
      Referral: {
        payload: Prisma.$ReferralPayload<ExtArgs>
        fields: Prisma.ReferralFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferralFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferralFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findFirst: {
            args: Prisma.ReferralFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferralFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          findMany: {
            args: Prisma.ReferralFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          create: {
            args: Prisma.ReferralCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          createMany: {
            args: Prisma.ReferralCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReferralCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          delete: {
            args: Prisma.ReferralDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          update: {
            args: Prisma.ReferralUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          deleteMany: {
            args: Prisma.ReferralDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferralUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReferralUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>[]
          }
          upsert: {
            args: Prisma.ReferralUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferralPayload>
          }
          aggregate: {
            args: Prisma.ReferralAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferral>
          }
          groupBy: {
            args: Prisma.ReferralGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferralGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferralCountArgs<ExtArgs>
            result: $Utils.Optional<ReferralCountAggregateOutputType> | number
          }
        }
      }
      Ambulance: {
        payload: Prisma.$AmbulancePayload<ExtArgs>
        fields: Prisma.AmbulanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AmbulanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AmbulanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>
          }
          findFirst: {
            args: Prisma.AmbulanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AmbulanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>
          }
          findMany: {
            args: Prisma.AmbulanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>[]
          }
          create: {
            args: Prisma.AmbulanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>
          }
          createMany: {
            args: Prisma.AmbulanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AmbulanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>[]
          }
          delete: {
            args: Prisma.AmbulanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>
          }
          update: {
            args: Prisma.AmbulanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>
          }
          deleteMany: {
            args: Prisma.AmbulanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AmbulanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AmbulanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>[]
          }
          upsert: {
            args: Prisma.AmbulanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulancePayload>
          }
          aggregate: {
            args: Prisma.AmbulanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmbulance>
          }
          groupBy: {
            args: Prisma.AmbulanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmbulanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AmbulanceCountArgs<ExtArgs>
            result: $Utils.Optional<AmbulanceCountAggregateOutputType> | number
          }
        }
      }
      AmbulanceDispatch: {
        payload: Prisma.$AmbulanceDispatchPayload<ExtArgs>
        fields: Prisma.AmbulanceDispatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AmbulanceDispatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AmbulanceDispatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>
          }
          findFirst: {
            args: Prisma.AmbulanceDispatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AmbulanceDispatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>
          }
          findMany: {
            args: Prisma.AmbulanceDispatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>[]
          }
          create: {
            args: Prisma.AmbulanceDispatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>
          }
          createMany: {
            args: Prisma.AmbulanceDispatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AmbulanceDispatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>[]
          }
          delete: {
            args: Prisma.AmbulanceDispatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>
          }
          update: {
            args: Prisma.AmbulanceDispatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>
          }
          deleteMany: {
            args: Prisma.AmbulanceDispatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AmbulanceDispatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AmbulanceDispatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>[]
          }
          upsert: {
            args: Prisma.AmbulanceDispatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceDispatchPayload>
          }
          aggregate: {
            args: Prisma.AmbulanceDispatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmbulanceDispatch>
          }
          groupBy: {
            args: Prisma.AmbulanceDispatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmbulanceDispatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.AmbulanceDispatchCountArgs<ExtArgs>
            result: $Utils.Optional<AmbulanceDispatchCountAggregateOutputType> | number
          }
        }
      }
      AmbulanceRequest: {
        payload: Prisma.$AmbulanceRequestPayload<ExtArgs>
        fields: Prisma.AmbulanceRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AmbulanceRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AmbulanceRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>
          }
          findFirst: {
            args: Prisma.AmbulanceRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AmbulanceRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>
          }
          findMany: {
            args: Prisma.AmbulanceRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>[]
          }
          create: {
            args: Prisma.AmbulanceRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>
          }
          createMany: {
            args: Prisma.AmbulanceRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AmbulanceRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>[]
          }
          delete: {
            args: Prisma.AmbulanceRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>
          }
          update: {
            args: Prisma.AmbulanceRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>
          }
          deleteMany: {
            args: Prisma.AmbulanceRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AmbulanceRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AmbulanceRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>[]
          }
          upsert: {
            args: Prisma.AmbulanceRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AmbulanceRequestPayload>
          }
          aggregate: {
            args: Prisma.AmbulanceRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAmbulanceRequest>
          }
          groupBy: {
            args: Prisma.AmbulanceRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<AmbulanceRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.AmbulanceRequestCountArgs<ExtArgs>
            result: $Utils.Optional<AmbulanceRequestCountAggregateOutputType> | number
          }
        }
      }
      Wallet: {
        payload: Prisma.$WalletPayload<ExtArgs>
        fields: Prisma.WalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findFirst: {
            args: Prisma.WalletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findMany: {
            args: Prisma.WalletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          create: {
            args: Prisma.WalletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          createMany: {
            args: Prisma.WalletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          delete: {
            args: Prisma.WalletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          update: {
            args: Prisma.WalletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          deleteMany: {
            args: Prisma.WalletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WalletUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          upsert: {
            args: Prisma.WalletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.WalletGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletCountArgs<ExtArgs>
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      WalletTransaction: {
        payload: Prisma.$WalletTransactionPayload<ExtArgs>
        fields: Prisma.WalletTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          findFirst: {
            args: Prisma.WalletTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          findMany: {
            args: Prisma.WalletTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>[]
          }
          create: {
            args: Prisma.WalletTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          createMany: {
            args: Prisma.WalletTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>[]
          }
          delete: {
            args: Prisma.WalletTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          update: {
            args: Prisma.WalletTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          deleteMany: {
            args: Prisma.WalletTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WalletTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>[]
          }
          upsert: {
            args: Prisma.WalletTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          aggregate: {
            args: Prisma.WalletTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWalletTransaction>
          }
          groupBy: {
            args: Prisma.WalletTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<WalletTransactionCountAggregateOutputType> | number
          }
        }
      }
      Billing: {
        payload: Prisma.$BillingPayload<ExtArgs>
        fields: Prisma.BillingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          findFirst: {
            args: Prisma.BillingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          findMany: {
            args: Prisma.BillingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>[]
          }
          create: {
            args: Prisma.BillingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          createMany: {
            args: Prisma.BillingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>[]
          }
          delete: {
            args: Prisma.BillingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          update: {
            args: Prisma.BillingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          deleteMany: {
            args: Prisma.BillingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BillingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>[]
          }
          upsert: {
            args: Prisma.BillingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingPayload>
          }
          aggregate: {
            args: Prisma.BillingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBilling>
          }
          groupBy: {
            args: Prisma.BillingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingCountArgs<ExtArgs>
            result: $Utils.Optional<BillingCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Conversation: {
        payload: Prisma.$ConversationPayload<ExtArgs>
        fields: Prisma.ConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConversationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConversationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findFirst: {
            args: Prisma.ConversationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConversationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          findMany: {
            args: Prisma.ConversationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          create: {
            args: Prisma.ConversationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          createMany: {
            args: Prisma.ConversationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConversationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          delete: {
            args: Prisma.ConversationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          update: {
            args: Prisma.ConversationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          deleteMany: {
            args: Prisma.ConversationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConversationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConversationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>[]
          }
          upsert: {
            args: Prisma.ConversationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConversationPayload>
          }
          aggregate: {
            args: Prisma.ConversationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConversation>
          }
          groupBy: {
            args: Prisma.ConversationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConversationCountArgs<ExtArgs>
            result: $Utils.Optional<ConversationCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      BirthRecord: {
        payload: Prisma.$BirthRecordPayload<ExtArgs>
        fields: Prisma.BirthRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BirthRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BirthRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>
          }
          findFirst: {
            args: Prisma.BirthRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BirthRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>
          }
          findMany: {
            args: Prisma.BirthRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>[]
          }
          create: {
            args: Prisma.BirthRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>
          }
          createMany: {
            args: Prisma.BirthRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BirthRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>[]
          }
          delete: {
            args: Prisma.BirthRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>
          }
          update: {
            args: Prisma.BirthRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>
          }
          deleteMany: {
            args: Prisma.BirthRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BirthRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BirthRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>[]
          }
          upsert: {
            args: Prisma.BirthRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BirthRecordPayload>
          }
          aggregate: {
            args: Prisma.BirthRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBirthRecord>
          }
          groupBy: {
            args: Prisma.BirthRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<BirthRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.BirthRecordCountArgs<ExtArgs>
            result: $Utils.Optional<BirthRecordCountAggregateOutputType> | number
          }
        }
      }
      DeathRecord: {
        payload: Prisma.$DeathRecordPayload<ExtArgs>
        fields: Prisma.DeathRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeathRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeathRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>
          }
          findFirst: {
            args: Prisma.DeathRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeathRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>
          }
          findMany: {
            args: Prisma.DeathRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>[]
          }
          create: {
            args: Prisma.DeathRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>
          }
          createMany: {
            args: Prisma.DeathRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeathRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>[]
          }
          delete: {
            args: Prisma.DeathRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>
          }
          update: {
            args: Prisma.DeathRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>
          }
          deleteMany: {
            args: Prisma.DeathRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeathRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeathRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>[]
          }
          upsert: {
            args: Prisma.DeathRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeathRecordPayload>
          }
          aggregate: {
            args: Prisma.DeathRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeathRecord>
          }
          groupBy: {
            args: Prisma.DeathRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeathRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeathRecordCountArgs<ExtArgs>
            result: $Utils.Optional<DeathRecordCountAggregateOutputType> | number
          }
        }
      }
      MarketplaceVendor: {
        payload: Prisma.$MarketplaceVendorPayload<ExtArgs>
        fields: Prisma.MarketplaceVendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketplaceVendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketplaceVendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>
          }
          findFirst: {
            args: Prisma.MarketplaceVendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketplaceVendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>
          }
          findMany: {
            args: Prisma.MarketplaceVendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>[]
          }
          create: {
            args: Prisma.MarketplaceVendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>
          }
          createMany: {
            args: Prisma.MarketplaceVendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketplaceVendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>[]
          }
          delete: {
            args: Prisma.MarketplaceVendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>
          }
          update: {
            args: Prisma.MarketplaceVendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>
          }
          deleteMany: {
            args: Prisma.MarketplaceVendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketplaceVendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketplaceVendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>[]
          }
          upsert: {
            args: Prisma.MarketplaceVendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceVendorPayload>
          }
          aggregate: {
            args: Prisma.MarketplaceVendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketplaceVendor>
          }
          groupBy: {
            args: Prisma.MarketplaceVendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketplaceVendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketplaceVendorCountArgs<ExtArgs>
            result: $Utils.Optional<MarketplaceVendorCountAggregateOutputType> | number
          }
        }
      }
      MarketplaceProduct: {
        payload: Prisma.$MarketplaceProductPayload<ExtArgs>
        fields: Prisma.MarketplaceProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketplaceProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketplaceProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>
          }
          findFirst: {
            args: Prisma.MarketplaceProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketplaceProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>
          }
          findMany: {
            args: Prisma.MarketplaceProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>[]
          }
          create: {
            args: Prisma.MarketplaceProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>
          }
          createMany: {
            args: Prisma.MarketplaceProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketplaceProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>[]
          }
          delete: {
            args: Prisma.MarketplaceProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>
          }
          update: {
            args: Prisma.MarketplaceProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>
          }
          deleteMany: {
            args: Prisma.MarketplaceProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketplaceProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketplaceProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>[]
          }
          upsert: {
            args: Prisma.MarketplaceProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceProductPayload>
          }
          aggregate: {
            args: Prisma.MarketplaceProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketplaceProduct>
          }
          groupBy: {
            args: Prisma.MarketplaceProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketplaceProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketplaceProductCountArgs<ExtArgs>
            result: $Utils.Optional<MarketplaceProductCountAggregateOutputType> | number
          }
        }
      }
      MarketplaceOrder: {
        payload: Prisma.$MarketplaceOrderPayload<ExtArgs>
        fields: Prisma.MarketplaceOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketplaceOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketplaceOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>
          }
          findFirst: {
            args: Prisma.MarketplaceOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketplaceOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>
          }
          findMany: {
            args: Prisma.MarketplaceOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>[]
          }
          create: {
            args: Prisma.MarketplaceOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>
          }
          createMany: {
            args: Prisma.MarketplaceOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketplaceOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>[]
          }
          delete: {
            args: Prisma.MarketplaceOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>
          }
          update: {
            args: Prisma.MarketplaceOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>
          }
          deleteMany: {
            args: Prisma.MarketplaceOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketplaceOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketplaceOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>[]
          }
          upsert: {
            args: Prisma.MarketplaceOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketplaceOrderPayload>
          }
          aggregate: {
            args: Prisma.MarketplaceOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketplaceOrder>
          }
          groupBy: {
            args: Prisma.MarketplaceOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketplaceOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketplaceOrderCountArgs<ExtArgs>
            result: $Utils.Optional<MarketplaceOrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      CartItem: {
        payload: Prisma.$CartItemPayload<ExtArgs>
        fields: Prisma.CartItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findFirst: {
            args: Prisma.CartItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findMany: {
            args: Prisma.CartItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          create: {
            args: Prisma.CartItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          createMany: {
            args: Prisma.CartItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          delete: {
            args: Prisma.CartItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          update: {
            args: Prisma.CartItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          deleteMany: {
            args: Prisma.CartItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          upsert: {
            args: Prisma.CartItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          aggregate: {
            args: Prisma.CartItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartItem>
          }
          groupBy: {
            args: Prisma.CartItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartItemCountArgs<ExtArgs>
            result: $Utils.Optional<CartItemCountAggregateOutputType> | number
          }
        }
      }
      SavedVendor: {
        payload: Prisma.$SavedVendorPayload<ExtArgs>
        fields: Prisma.SavedVendorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SavedVendorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedVendorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>
          }
          findFirst: {
            args: Prisma.SavedVendorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedVendorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>
          }
          findMany: {
            args: Prisma.SavedVendorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>[]
          }
          create: {
            args: Prisma.SavedVendorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>
          }
          createMany: {
            args: Prisma.SavedVendorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SavedVendorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>[]
          }
          delete: {
            args: Prisma.SavedVendorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>
          }
          update: {
            args: Prisma.SavedVendorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>
          }
          deleteMany: {
            args: Prisma.SavedVendorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SavedVendorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SavedVendorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>[]
          }
          upsert: {
            args: Prisma.SavedVendorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedVendorPayload>
          }
          aggregate: {
            args: Prisma.SavedVendorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSavedVendor>
          }
          groupBy: {
            args: Prisma.SavedVendorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SavedVendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedVendorCountArgs<ExtArgs>
            result: $Utils.Optional<SavedVendorCountAggregateOutputType> | number
          }
        }
      }
      Prescription: {
        payload: Prisma.$PrescriptionPayload<ExtArgs>
        fields: Prisma.PrescriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrescriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrescriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          findFirst: {
            args: Prisma.PrescriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrescriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          findMany: {
            args: Prisma.PrescriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>[]
          }
          create: {
            args: Prisma.PrescriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          createMany: {
            args: Prisma.PrescriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrescriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>[]
          }
          delete: {
            args: Prisma.PrescriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          update: {
            args: Prisma.PrescriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          deleteMany: {
            args: Prisma.PrescriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrescriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrescriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>[]
          }
          upsert: {
            args: Prisma.PrescriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrescriptionPayload>
          }
          aggregate: {
            args: Prisma.PrescriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrescription>
          }
          groupBy: {
            args: Prisma.PrescriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrescriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrescriptionCountArgs<ExtArgs>
            result: $Utils.Optional<PrescriptionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    antenatalRecord?: AntenatalRecordOmit
    appointment?: AppointmentOmit
    hospital?: HospitalOmit
    medicalRecord?: MedicalRecordOmit
    neonatalRecord?: NeonatalRecordOmit
    patient?: PatientOmit
    user?: UserOmit
    passwordReset?: PasswordResetOmit
    securityAuditLog?: SecurityAuditLogOmit
    profilePicture?: ProfilePictureOmit
    patientEmail?: PatientEmailOmit
    patientPhone?: PatientPhoneOmit
    department?: DepartmentOmit
    departmentMembership?: DepartmentMembershipOmit
    staffProfile?: StaffProfileOmit
    patientHospitalAccess?: PatientHospitalAccessOmit
    patientSearchIndex?: PatientSearchIndexOmit
    doctorAvailability?: DoctorAvailabilityOmit
    patientWidgetPreference?: PatientWidgetPreferenceOmit
    referral?: ReferralOmit
    ambulance?: AmbulanceOmit
    ambulanceDispatch?: AmbulanceDispatchOmit
    ambulanceRequest?: AmbulanceRequestOmit
    wallet?: WalletOmit
    walletTransaction?: WalletTransactionOmit
    billing?: BillingOmit
    payment?: PaymentOmit
    conversation?: ConversationOmit
    message?: MessageOmit
    birthRecord?: BirthRecordOmit
    deathRecord?: DeathRecordOmit
    marketplaceVendor?: MarketplaceVendorOmit
    marketplaceProduct?: MarketplaceProductOmit
    marketplaceOrder?: MarketplaceOrderOmit
    orderItem?: OrderItemOmit
    cartItem?: CartItemOmit
    savedVendor?: SavedVendorOmit
    prescription?: PrescriptionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HospitalCountOutputType
   */

  export type HospitalCountOutputType = {
    AntenatalRecords: number
    NeonatalRecords: number
    Users: number
    Departments: number
    StaffProfiles: number
    PatientAccesses: number
    Appointments: number
    DoctorAvailabilities: number
    Patients: number
    MedicalRecords: number
    ReferralsFrom: number
    ReferralsTo: number
    Ambulances: number
    AmbulanceDispatches: number
    AmbulanceRequests: number
    BillingRecords: number
    Conversations: number
    BirthRecords: number
    DeathRecords: number
    MarketplaceVendors: number
    Prescriptions: number
  }

  export type HospitalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AntenatalRecords?: boolean | HospitalCountOutputTypeCountAntenatalRecordsArgs
    NeonatalRecords?: boolean | HospitalCountOutputTypeCountNeonatalRecordsArgs
    Users?: boolean | HospitalCountOutputTypeCountUsersArgs
    Departments?: boolean | HospitalCountOutputTypeCountDepartmentsArgs
    StaffProfiles?: boolean | HospitalCountOutputTypeCountStaffProfilesArgs
    PatientAccesses?: boolean | HospitalCountOutputTypeCountPatientAccessesArgs
    Appointments?: boolean | HospitalCountOutputTypeCountAppointmentsArgs
    DoctorAvailabilities?: boolean | HospitalCountOutputTypeCountDoctorAvailabilitiesArgs
    Patients?: boolean | HospitalCountOutputTypeCountPatientsArgs
    MedicalRecords?: boolean | HospitalCountOutputTypeCountMedicalRecordsArgs
    ReferralsFrom?: boolean | HospitalCountOutputTypeCountReferralsFromArgs
    ReferralsTo?: boolean | HospitalCountOutputTypeCountReferralsToArgs
    Ambulances?: boolean | HospitalCountOutputTypeCountAmbulancesArgs
    AmbulanceDispatches?: boolean | HospitalCountOutputTypeCountAmbulanceDispatchesArgs
    AmbulanceRequests?: boolean | HospitalCountOutputTypeCountAmbulanceRequestsArgs
    BillingRecords?: boolean | HospitalCountOutputTypeCountBillingRecordsArgs
    Conversations?: boolean | HospitalCountOutputTypeCountConversationsArgs
    BirthRecords?: boolean | HospitalCountOutputTypeCountBirthRecordsArgs
    DeathRecords?: boolean | HospitalCountOutputTypeCountDeathRecordsArgs
    MarketplaceVendors?: boolean | HospitalCountOutputTypeCountMarketplaceVendorsArgs
    Prescriptions?: boolean | HospitalCountOutputTypeCountPrescriptionsArgs
  }

  // Custom InputTypes
  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HospitalCountOutputType
     */
    select?: HospitalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountAntenatalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntenatalRecordWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountNeonatalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeonatalRecordWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountStaffProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffProfileWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountPatientAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHospitalAccessWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountDoctorAvailabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorAvailabilityWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountMedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountReferralsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountReferralsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountAmbulancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountAmbulanceDispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceDispatchWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountAmbulanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceRequestWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountBillingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountBirthRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BirthRecordWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountDeathRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeathRecordWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountMarketplaceVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketplaceVendorWhereInput
  }

  /**
   * HospitalCountOutputType without action
   */
  export type HospitalCountOutputTypeCountPrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    Appointments: number
    MedicalRecords: number
    PasswordResets: number
    Doctors: number
    Emails: number
    Phones: number
    HospitalAccesses: number
    AntenatalRecords: number
    NeonatalRecords_AsPatient: number
    NeonatalRecords_AsMother: number
    ReferralsReceived: number
    AmbulanceDispatches: number
    AmbulanceRequests: number
    BillingRecords: number
    Conversations: number
    MotherOfBirths: number
    FatherOfBirths: number
    MarketplaceOrders: number
    SavedVendors: number
    CartItems: number
    Prescription: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Appointments?: boolean | PatientCountOutputTypeCountAppointmentsArgs
    MedicalRecords?: boolean | PatientCountOutputTypeCountMedicalRecordsArgs
    PasswordResets?: boolean | PatientCountOutputTypeCountPasswordResetsArgs
    Doctors?: boolean | PatientCountOutputTypeCountDoctorsArgs
    Emails?: boolean | PatientCountOutputTypeCountEmailsArgs
    Phones?: boolean | PatientCountOutputTypeCountPhonesArgs
    HospitalAccesses?: boolean | PatientCountOutputTypeCountHospitalAccessesArgs
    AntenatalRecords?: boolean | PatientCountOutputTypeCountAntenatalRecordsArgs
    NeonatalRecords_AsPatient?: boolean | PatientCountOutputTypeCountNeonatalRecords_AsPatientArgs
    NeonatalRecords_AsMother?: boolean | PatientCountOutputTypeCountNeonatalRecords_AsMotherArgs
    ReferralsReceived?: boolean | PatientCountOutputTypeCountReferralsReceivedArgs
    AmbulanceDispatches?: boolean | PatientCountOutputTypeCountAmbulanceDispatchesArgs
    AmbulanceRequests?: boolean | PatientCountOutputTypeCountAmbulanceRequestsArgs
    BillingRecords?: boolean | PatientCountOutputTypeCountBillingRecordsArgs
    Conversations?: boolean | PatientCountOutputTypeCountConversationsArgs
    MotherOfBirths?: boolean | PatientCountOutputTypeCountMotherOfBirthsArgs
    FatherOfBirths?: boolean | PatientCountOutputTypeCountFatherOfBirthsArgs
    MarketplaceOrders?: boolean | PatientCountOutputTypeCountMarketplaceOrdersArgs
    SavedVendors?: boolean | PatientCountOutputTypeCountSavedVendorsArgs
    CartItems?: boolean | PatientCountOutputTypeCountCartItemsArgs
    Prescription?: boolean | PatientCountOutputTypeCountPrescriptionArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPasswordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountDoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountEmailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientEmailWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPhonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPhoneWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountHospitalAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHospitalAccessWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAntenatalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntenatalRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountNeonatalRecords_AsPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeonatalRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountNeonatalRecords_AsMotherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeonatalRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountReferralsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAmbulanceDispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceDispatchWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAmbulanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceRequestWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountBillingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMotherOfBirthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BirthRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountFatherOfBirthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BirthRecordWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMarketplaceOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketplaceOrderWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountSavedVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedVendorWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountCartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPrescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    NeonatalRecords_updated: number
    AntenatalRecords_created: number
    AntenatalRecords_updated: number
    Appointments: number
    MedicalRecords: number
    NeonatalRecords_created: number
    PatientAccess_grantedBy: number
    DoctorPatients: number
    PasswordResets: number
    DepartmentMemberships: number
    ReferralsSent: number
    ReferralsReceived: number
    Conversations: number
    MessagesSent: number
    BirthRecordsRegistered: number
    DeathRecordsRegistered: number
    Prescriptions: number
    SecurityAuditLog: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    NeonatalRecords_updated?: boolean | UserCountOutputTypeCountNeonatalRecords_updatedArgs
    AntenatalRecords_created?: boolean | UserCountOutputTypeCountAntenatalRecords_createdArgs
    AntenatalRecords_updated?: boolean | UserCountOutputTypeCountAntenatalRecords_updatedArgs
    Appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
    MedicalRecords?: boolean | UserCountOutputTypeCountMedicalRecordsArgs
    NeonatalRecords_created?: boolean | UserCountOutputTypeCountNeonatalRecords_createdArgs
    PatientAccess_grantedBy?: boolean | UserCountOutputTypeCountPatientAccess_grantedByArgs
    DoctorPatients?: boolean | UserCountOutputTypeCountDoctorPatientsArgs
    PasswordResets?: boolean | UserCountOutputTypeCountPasswordResetsArgs
    DepartmentMemberships?: boolean | UserCountOutputTypeCountDepartmentMembershipsArgs
    ReferralsSent?: boolean | UserCountOutputTypeCountReferralsSentArgs
    ReferralsReceived?: boolean | UserCountOutputTypeCountReferralsReceivedArgs
    Conversations?: boolean | UserCountOutputTypeCountConversationsArgs
    MessagesSent?: boolean | UserCountOutputTypeCountMessagesSentArgs
    BirthRecordsRegistered?: boolean | UserCountOutputTypeCountBirthRecordsRegisteredArgs
    DeathRecordsRegistered?: boolean | UserCountOutputTypeCountDeathRecordsRegisteredArgs
    Prescriptions?: boolean | UserCountOutputTypeCountPrescriptionsArgs
    SecurityAuditLog?: boolean | UserCountOutputTypeCountSecurityAuditLogArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNeonatalRecords_updatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeonatalRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAntenatalRecords_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntenatalRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAntenatalRecords_updatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntenatalRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNeonatalRecords_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeonatalRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientAccess_grantedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHospitalAccessWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDoctorPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepartmentMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMembershipWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferralsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferralsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBirthRecordsRegisteredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BirthRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDeathRecordsRegisteredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeathRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSecurityAuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityAuditLogWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    members: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | DepartmentCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMembershipWhereInput
  }


  /**
   * Count Type AmbulanceCountOutputType
   */

  export type AmbulanceCountOutputType = {
    dispatches: number
  }

  export type AmbulanceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dispatches?: boolean | AmbulanceCountOutputTypeCountDispatchesArgs
  }

  // Custom InputTypes
  /**
   * AmbulanceCountOutputType without action
   */
  export type AmbulanceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceCountOutputType
     */
    select?: AmbulanceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AmbulanceCountOutputType without action
   */
  export type AmbulanceCountOutputTypeCountDispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceDispatchWhereInput
  }


  /**
   * Count Type WalletCountOutputType
   */

  export type WalletCountOutputType = {
    transactions: number
  }

  export type WalletCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | WalletCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletCountOutputType
     */
    select?: WalletCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletTransactionWhereInput
  }


  /**
   * Count Type BillingCountOutputType
   */

  export type BillingCountOutputType = {
    payments: number
  }

  export type BillingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | BillingCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * BillingCountOutputType without action
   */
  export type BillingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingCountOutputType
     */
    select?: BillingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BillingCountOutputType without action
   */
  export type BillingCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type ConversationCountOutputType
   */

  export type ConversationCountOutputType = {
    messages: number
  }

  export type ConversationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ConversationCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConversationCountOutputType
     */
    select?: ConversationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConversationCountOutputType without action
   */
  export type ConversationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type MarketplaceVendorCountOutputType
   */

  export type MarketplaceVendorCountOutputType = {
    products: number
    savedBy: number
  }

  export type MarketplaceVendorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | MarketplaceVendorCountOutputTypeCountProductsArgs
    savedBy?: boolean | MarketplaceVendorCountOutputTypeCountSavedByArgs
  }

  // Custom InputTypes
  /**
   * MarketplaceVendorCountOutputType without action
   */
  export type MarketplaceVendorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendorCountOutputType
     */
    select?: MarketplaceVendorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MarketplaceVendorCountOutputType without action
   */
  export type MarketplaceVendorCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketplaceProductWhereInput
  }

  /**
   * MarketplaceVendorCountOutputType without action
   */
  export type MarketplaceVendorCountOutputTypeCountSavedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedVendorWhereInput
  }


  /**
   * Count Type MarketplaceProductCountOutputType
   */

  export type MarketplaceProductCountOutputType = {
    orderItems: number
    cartItems: number
  }

  export type MarketplaceProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | MarketplaceProductCountOutputTypeCountOrderItemsArgs
    cartItems?: boolean | MarketplaceProductCountOutputTypeCountCartItemsArgs
  }

  // Custom InputTypes
  /**
   * MarketplaceProductCountOutputType without action
   */
  export type MarketplaceProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProductCountOutputType
     */
    select?: MarketplaceProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MarketplaceProductCountOutputType without action
   */
  export type MarketplaceProductCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * MarketplaceProductCountOutputType without action
   */
  export type MarketplaceProductCountOutputTypeCountCartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }


  /**
   * Count Type MarketplaceOrderCountOutputType
   */

  export type MarketplaceOrderCountOutputType = {
    items: number
  }

  export type MarketplaceOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | MarketplaceOrderCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * MarketplaceOrderCountOutputType without action
   */
  export type MarketplaceOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrderCountOutputType
     */
    select?: MarketplaceOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MarketplaceOrderCountOutputType without action
   */
  export type MarketplaceOrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Count Type PrescriptionCountOutputType
   */

  export type PrescriptionCountOutputType = {
    orderItems: number
  }

  export type PrescriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | PrescriptionCountOutputTypeCountOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * PrescriptionCountOutputType without action
   */
  export type PrescriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrescriptionCountOutputType
     */
    select?: PrescriptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PrescriptionCountOutputType without action
   */
  export type PrescriptionCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model AntenatalRecord
   */

  export type AggregateAntenatalRecord = {
    _count: AntenatalRecordCountAggregateOutputType | null
    _avg: AntenatalRecordAvgAggregateOutputType | null
    _sum: AntenatalRecordSumAggregateOutputType | null
    _min: AntenatalRecordMinAggregateOutputType | null
    _max: AntenatalRecordMaxAggregateOutputType | null
  }

  export type AntenatalRecordAvgAggregateOutputType = {
    gestationalAge: number | null
    trimester: number | null
  }

  export type AntenatalRecordSumAggregateOutputType = {
    gestationalAge: number | null
    trimester: number | null
  }

  export type AntenatalRecordMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    gestationalAge: number | null
    nextAppointment: Date | null
    riskLevel: $Enums.RiskLevel | null
    status: $Enums.AntenatalStatus | null
    trimester: number | null
    lastVisitDate: Date | null
    expectedDueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdByUserId: string | null
    updatedByUserId: string | null
    mrn: string | null
  }

  export type AntenatalRecordMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    gestationalAge: number | null
    nextAppointment: Date | null
    riskLevel: $Enums.RiskLevel | null
    status: $Enums.AntenatalStatus | null
    trimester: number | null
    lastVisitDate: Date | null
    expectedDueDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdByUserId: string | null
    updatedByUserId: string | null
    mrn: string | null
  }

  export type AntenatalRecordCountAggregateOutputType = {
    id: number
    patientId: number
    hospitalId: number
    gestationalAge: number
    nextAppointment: number
    riskLevel: number
    status: number
    trimester: number
    lastVisitDate: number
    expectedDueDate: number
    ultrasoundReports: number
    labResults: number
    createdAt: number
    updatedAt: number
    createdByUserId: number
    updatedByUserId: number
    mrn: number
    _all: number
  }


  export type AntenatalRecordAvgAggregateInputType = {
    gestationalAge?: true
    trimester?: true
  }

  export type AntenatalRecordSumAggregateInputType = {
    gestationalAge?: true
    trimester?: true
  }

  export type AntenatalRecordMinAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    gestationalAge?: true
    nextAppointment?: true
    riskLevel?: true
    status?: true
    trimester?: true
    lastVisitDate?: true
    expectedDueDate?: true
    createdAt?: true
    updatedAt?: true
    createdByUserId?: true
    updatedByUserId?: true
    mrn?: true
  }

  export type AntenatalRecordMaxAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    gestationalAge?: true
    nextAppointment?: true
    riskLevel?: true
    status?: true
    trimester?: true
    lastVisitDate?: true
    expectedDueDate?: true
    createdAt?: true
    updatedAt?: true
    createdByUserId?: true
    updatedByUserId?: true
    mrn?: true
  }

  export type AntenatalRecordCountAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    gestationalAge?: true
    nextAppointment?: true
    riskLevel?: true
    status?: true
    trimester?: true
    lastVisitDate?: true
    expectedDueDate?: true
    ultrasoundReports?: true
    labResults?: true
    createdAt?: true
    updatedAt?: true
    createdByUserId?: true
    updatedByUserId?: true
    mrn?: true
    _all?: true
  }

  export type AntenatalRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AntenatalRecord to aggregate.
     */
    where?: AntenatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntenatalRecords to fetch.
     */
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AntenatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntenatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntenatalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AntenatalRecords
    **/
    _count?: true | AntenatalRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AntenatalRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AntenatalRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AntenatalRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AntenatalRecordMaxAggregateInputType
  }

  export type GetAntenatalRecordAggregateType<T extends AntenatalRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateAntenatalRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAntenatalRecord[P]>
      : GetScalarType<T[P], AggregateAntenatalRecord[P]>
  }




  export type AntenatalRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AntenatalRecordWhereInput
    orderBy?: AntenatalRecordOrderByWithAggregationInput | AntenatalRecordOrderByWithAggregationInput[]
    by: AntenatalRecordScalarFieldEnum[] | AntenatalRecordScalarFieldEnum
    having?: AntenatalRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AntenatalRecordCountAggregateInputType | true
    _avg?: AntenatalRecordAvgAggregateInputType
    _sum?: AntenatalRecordSumAggregateInputType
    _min?: AntenatalRecordMinAggregateInputType
    _max?: AntenatalRecordMaxAggregateInputType
  }

  export type AntenatalRecordGroupByOutputType = {
    id: string
    patientId: string
    hospitalId: string
    gestationalAge: number
    nextAppointment: Date | null
    riskLevel: $Enums.RiskLevel
    status: $Enums.AntenatalStatus
    trimester: number
    lastVisitDate: Date | null
    expectedDueDate: Date
    ultrasoundReports: JsonValue | null
    labResults: JsonValue | null
    createdAt: Date
    updatedAt: Date
    createdByUserId: string
    updatedByUserId: string
    mrn: string | null
    _count: AntenatalRecordCountAggregateOutputType | null
    _avg: AntenatalRecordAvgAggregateOutputType | null
    _sum: AntenatalRecordSumAggregateOutputType | null
    _min: AntenatalRecordMinAggregateOutputType | null
    _max: AntenatalRecordMaxAggregateOutputType | null
  }

  type GetAntenatalRecordGroupByPayload<T extends AntenatalRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AntenatalRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AntenatalRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AntenatalRecordGroupByOutputType[P]>
            : GetScalarType<T[P], AntenatalRecordGroupByOutputType[P]>
        }
      >
    >


  export type AntenatalRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    gestationalAge?: boolean
    nextAppointment?: boolean
    riskLevel?: boolean
    status?: boolean
    trimester?: boolean
    lastVisitDate?: boolean
    expectedDueDate?: boolean
    ultrasoundReports?: boolean
    labResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
    User_AntenatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    User_AntenatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["antenatalRecord"]>

  export type AntenatalRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    gestationalAge?: boolean
    nextAppointment?: boolean
    riskLevel?: boolean
    status?: boolean
    trimester?: boolean
    lastVisitDate?: boolean
    expectedDueDate?: boolean
    ultrasoundReports?: boolean
    labResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
    User_AntenatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    User_AntenatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["antenatalRecord"]>

  export type AntenatalRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    gestationalAge?: boolean
    nextAppointment?: boolean
    riskLevel?: boolean
    status?: boolean
    trimester?: boolean
    lastVisitDate?: boolean
    expectedDueDate?: boolean
    ultrasoundReports?: boolean
    labResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
    User_AntenatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    User_AntenatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["antenatalRecord"]>

  export type AntenatalRecordSelectScalar = {
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    gestationalAge?: boolean
    nextAppointment?: boolean
    riskLevel?: boolean
    status?: boolean
    trimester?: boolean
    lastVisitDate?: boolean
    expectedDueDate?: boolean
    ultrasoundReports?: boolean
    labResults?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
  }

  export type AntenatalRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "hospitalId" | "gestationalAge" | "nextAppointment" | "riskLevel" | "status" | "trimester" | "lastVisitDate" | "expectedDueDate" | "ultrasoundReports" | "labResults" | "createdAt" | "updatedAt" | "createdByUserId" | "updatedByUserId" | "mrn", ExtArgs["result"]["antenatalRecord"]>
  export type AntenatalRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User_AntenatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    User_AntenatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AntenatalRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User_AntenatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    User_AntenatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AntenatalRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User_AntenatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    User_AntenatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AntenatalRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AntenatalRecord"
    objects: {
      User_AntenatalRecord_createdByUserIdToUser: Prisma.$UserPayload<ExtArgs>
      Hospital: Prisma.$HospitalPayload<ExtArgs>
      Patient: Prisma.$PatientPayload<ExtArgs>
      User_AntenatalRecord_updatedByUserIdToUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      hospitalId: string
      gestationalAge: number
      nextAppointment: Date | null
      riskLevel: $Enums.RiskLevel
      status: $Enums.AntenatalStatus
      trimester: number
      lastVisitDate: Date | null
      expectedDueDate: Date
      ultrasoundReports: Prisma.JsonValue | null
      labResults: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      createdByUserId: string
      updatedByUserId: string
      mrn: string | null
    }, ExtArgs["result"]["antenatalRecord"]>
    composites: {}
  }

  type AntenatalRecordGetPayload<S extends boolean | null | undefined | AntenatalRecordDefaultArgs> = $Result.GetResult<Prisma.$AntenatalRecordPayload, S>

  type AntenatalRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AntenatalRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AntenatalRecordCountAggregateInputType | true
    }

  export interface AntenatalRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AntenatalRecord'], meta: { name: 'AntenatalRecord' } }
    /**
     * Find zero or one AntenatalRecord that matches the filter.
     * @param {AntenatalRecordFindUniqueArgs} args - Arguments to find a AntenatalRecord
     * @example
     * // Get one AntenatalRecord
     * const antenatalRecord = await prisma.antenatalRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AntenatalRecordFindUniqueArgs>(args: SelectSubset<T, AntenatalRecordFindUniqueArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AntenatalRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AntenatalRecordFindUniqueOrThrowArgs} args - Arguments to find a AntenatalRecord
     * @example
     * // Get one AntenatalRecord
     * const antenatalRecord = await prisma.antenatalRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AntenatalRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, AntenatalRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AntenatalRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntenatalRecordFindFirstArgs} args - Arguments to find a AntenatalRecord
     * @example
     * // Get one AntenatalRecord
     * const antenatalRecord = await prisma.antenatalRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AntenatalRecordFindFirstArgs>(args?: SelectSubset<T, AntenatalRecordFindFirstArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AntenatalRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntenatalRecordFindFirstOrThrowArgs} args - Arguments to find a AntenatalRecord
     * @example
     * // Get one AntenatalRecord
     * const antenatalRecord = await prisma.antenatalRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AntenatalRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, AntenatalRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AntenatalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntenatalRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AntenatalRecords
     * const antenatalRecords = await prisma.antenatalRecord.findMany()
     * 
     * // Get first 10 AntenatalRecords
     * const antenatalRecords = await prisma.antenatalRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const antenatalRecordWithIdOnly = await prisma.antenatalRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AntenatalRecordFindManyArgs>(args?: SelectSubset<T, AntenatalRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AntenatalRecord.
     * @param {AntenatalRecordCreateArgs} args - Arguments to create a AntenatalRecord.
     * @example
     * // Create one AntenatalRecord
     * const AntenatalRecord = await prisma.antenatalRecord.create({
     *   data: {
     *     // ... data to create a AntenatalRecord
     *   }
     * })
     * 
     */
    create<T extends AntenatalRecordCreateArgs>(args: SelectSubset<T, AntenatalRecordCreateArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AntenatalRecords.
     * @param {AntenatalRecordCreateManyArgs} args - Arguments to create many AntenatalRecords.
     * @example
     * // Create many AntenatalRecords
     * const antenatalRecord = await prisma.antenatalRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AntenatalRecordCreateManyArgs>(args?: SelectSubset<T, AntenatalRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AntenatalRecords and returns the data saved in the database.
     * @param {AntenatalRecordCreateManyAndReturnArgs} args - Arguments to create many AntenatalRecords.
     * @example
     * // Create many AntenatalRecords
     * const antenatalRecord = await prisma.antenatalRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AntenatalRecords and only return the `id`
     * const antenatalRecordWithIdOnly = await prisma.antenatalRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AntenatalRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, AntenatalRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AntenatalRecord.
     * @param {AntenatalRecordDeleteArgs} args - Arguments to delete one AntenatalRecord.
     * @example
     * // Delete one AntenatalRecord
     * const AntenatalRecord = await prisma.antenatalRecord.delete({
     *   where: {
     *     // ... filter to delete one AntenatalRecord
     *   }
     * })
     * 
     */
    delete<T extends AntenatalRecordDeleteArgs>(args: SelectSubset<T, AntenatalRecordDeleteArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AntenatalRecord.
     * @param {AntenatalRecordUpdateArgs} args - Arguments to update one AntenatalRecord.
     * @example
     * // Update one AntenatalRecord
     * const antenatalRecord = await prisma.antenatalRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AntenatalRecordUpdateArgs>(args: SelectSubset<T, AntenatalRecordUpdateArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AntenatalRecords.
     * @param {AntenatalRecordDeleteManyArgs} args - Arguments to filter AntenatalRecords to delete.
     * @example
     * // Delete a few AntenatalRecords
     * const { count } = await prisma.antenatalRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AntenatalRecordDeleteManyArgs>(args?: SelectSubset<T, AntenatalRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AntenatalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntenatalRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AntenatalRecords
     * const antenatalRecord = await prisma.antenatalRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AntenatalRecordUpdateManyArgs>(args: SelectSubset<T, AntenatalRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AntenatalRecords and returns the data updated in the database.
     * @param {AntenatalRecordUpdateManyAndReturnArgs} args - Arguments to update many AntenatalRecords.
     * @example
     * // Update many AntenatalRecords
     * const antenatalRecord = await prisma.antenatalRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AntenatalRecords and only return the `id`
     * const antenatalRecordWithIdOnly = await prisma.antenatalRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AntenatalRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, AntenatalRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AntenatalRecord.
     * @param {AntenatalRecordUpsertArgs} args - Arguments to update or create a AntenatalRecord.
     * @example
     * // Update or create a AntenatalRecord
     * const antenatalRecord = await prisma.antenatalRecord.upsert({
     *   create: {
     *     // ... data to create a AntenatalRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AntenatalRecord we want to update
     *   }
     * })
     */
    upsert<T extends AntenatalRecordUpsertArgs>(args: SelectSubset<T, AntenatalRecordUpsertArgs<ExtArgs>>): Prisma__AntenatalRecordClient<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AntenatalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntenatalRecordCountArgs} args - Arguments to filter AntenatalRecords to count.
     * @example
     * // Count the number of AntenatalRecords
     * const count = await prisma.antenatalRecord.count({
     *   where: {
     *     // ... the filter for the AntenatalRecords we want to count
     *   }
     * })
    **/
    count<T extends AntenatalRecordCountArgs>(
      args?: Subset<T, AntenatalRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AntenatalRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AntenatalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntenatalRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AntenatalRecordAggregateArgs>(args: Subset<T, AntenatalRecordAggregateArgs>): Prisma.PrismaPromise<GetAntenatalRecordAggregateType<T>>

    /**
     * Group by AntenatalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AntenatalRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AntenatalRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AntenatalRecordGroupByArgs['orderBy'] }
        : { orderBy?: AntenatalRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AntenatalRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAntenatalRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AntenatalRecord model
   */
  readonly fields: AntenatalRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AntenatalRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AntenatalRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User_AntenatalRecord_createdByUserIdToUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User_AntenatalRecord_updatedByUserIdToUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AntenatalRecord model
   */
  interface AntenatalRecordFieldRefs {
    readonly id: FieldRef<"AntenatalRecord", 'String'>
    readonly patientId: FieldRef<"AntenatalRecord", 'String'>
    readonly hospitalId: FieldRef<"AntenatalRecord", 'String'>
    readonly gestationalAge: FieldRef<"AntenatalRecord", 'Int'>
    readonly nextAppointment: FieldRef<"AntenatalRecord", 'DateTime'>
    readonly riskLevel: FieldRef<"AntenatalRecord", 'RiskLevel'>
    readonly status: FieldRef<"AntenatalRecord", 'AntenatalStatus'>
    readonly trimester: FieldRef<"AntenatalRecord", 'Int'>
    readonly lastVisitDate: FieldRef<"AntenatalRecord", 'DateTime'>
    readonly expectedDueDate: FieldRef<"AntenatalRecord", 'DateTime'>
    readonly ultrasoundReports: FieldRef<"AntenatalRecord", 'Json'>
    readonly labResults: FieldRef<"AntenatalRecord", 'Json'>
    readonly createdAt: FieldRef<"AntenatalRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"AntenatalRecord", 'DateTime'>
    readonly createdByUserId: FieldRef<"AntenatalRecord", 'String'>
    readonly updatedByUserId: FieldRef<"AntenatalRecord", 'String'>
    readonly mrn: FieldRef<"AntenatalRecord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AntenatalRecord findUnique
   */
  export type AntenatalRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which AntenatalRecord to fetch.
     */
    where: AntenatalRecordWhereUniqueInput
  }

  /**
   * AntenatalRecord findUniqueOrThrow
   */
  export type AntenatalRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which AntenatalRecord to fetch.
     */
    where: AntenatalRecordWhereUniqueInput
  }

  /**
   * AntenatalRecord findFirst
   */
  export type AntenatalRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which AntenatalRecord to fetch.
     */
    where?: AntenatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntenatalRecords to fetch.
     */
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AntenatalRecords.
     */
    cursor?: AntenatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntenatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntenatalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AntenatalRecords.
     */
    distinct?: AntenatalRecordScalarFieldEnum | AntenatalRecordScalarFieldEnum[]
  }

  /**
   * AntenatalRecord findFirstOrThrow
   */
  export type AntenatalRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which AntenatalRecord to fetch.
     */
    where?: AntenatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntenatalRecords to fetch.
     */
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AntenatalRecords.
     */
    cursor?: AntenatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntenatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntenatalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AntenatalRecords.
     */
    distinct?: AntenatalRecordScalarFieldEnum | AntenatalRecordScalarFieldEnum[]
  }

  /**
   * AntenatalRecord findMany
   */
  export type AntenatalRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which AntenatalRecords to fetch.
     */
    where?: AntenatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AntenatalRecords to fetch.
     */
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AntenatalRecords.
     */
    cursor?: AntenatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AntenatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AntenatalRecords.
     */
    skip?: number
    distinct?: AntenatalRecordScalarFieldEnum | AntenatalRecordScalarFieldEnum[]
  }

  /**
   * AntenatalRecord create
   */
  export type AntenatalRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a AntenatalRecord.
     */
    data: XOR<AntenatalRecordCreateInput, AntenatalRecordUncheckedCreateInput>
  }

  /**
   * AntenatalRecord createMany
   */
  export type AntenatalRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AntenatalRecords.
     */
    data: AntenatalRecordCreateManyInput | AntenatalRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AntenatalRecord createManyAndReturn
   */
  export type AntenatalRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * The data used to create many AntenatalRecords.
     */
    data: AntenatalRecordCreateManyInput | AntenatalRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AntenatalRecord update
   */
  export type AntenatalRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a AntenatalRecord.
     */
    data: XOR<AntenatalRecordUpdateInput, AntenatalRecordUncheckedUpdateInput>
    /**
     * Choose, which AntenatalRecord to update.
     */
    where: AntenatalRecordWhereUniqueInput
  }

  /**
   * AntenatalRecord updateMany
   */
  export type AntenatalRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AntenatalRecords.
     */
    data: XOR<AntenatalRecordUpdateManyMutationInput, AntenatalRecordUncheckedUpdateManyInput>
    /**
     * Filter which AntenatalRecords to update
     */
    where?: AntenatalRecordWhereInput
    /**
     * Limit how many AntenatalRecords to update.
     */
    limit?: number
  }

  /**
   * AntenatalRecord updateManyAndReturn
   */
  export type AntenatalRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * The data used to update AntenatalRecords.
     */
    data: XOR<AntenatalRecordUpdateManyMutationInput, AntenatalRecordUncheckedUpdateManyInput>
    /**
     * Filter which AntenatalRecords to update
     */
    where?: AntenatalRecordWhereInput
    /**
     * Limit how many AntenatalRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AntenatalRecord upsert
   */
  export type AntenatalRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the AntenatalRecord to update in case it exists.
     */
    where: AntenatalRecordWhereUniqueInput
    /**
     * In case the AntenatalRecord found by the `where` argument doesn't exist, create a new AntenatalRecord with this data.
     */
    create: XOR<AntenatalRecordCreateInput, AntenatalRecordUncheckedCreateInput>
    /**
     * In case the AntenatalRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AntenatalRecordUpdateInput, AntenatalRecordUncheckedUpdateInput>
  }

  /**
   * AntenatalRecord delete
   */
  export type AntenatalRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    /**
     * Filter which AntenatalRecord to delete.
     */
    where: AntenatalRecordWhereUniqueInput
  }

  /**
   * AntenatalRecord deleteMany
   */
  export type AntenatalRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AntenatalRecords to delete
     */
    where?: AntenatalRecordWhereInput
    /**
     * Limit how many AntenatalRecords to delete.
     */
    limit?: number
  }

  /**
   * AntenatalRecord without action
   */
  export type AntenatalRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    hospitalId: string | null
    date: Date | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    hospitalId: string | null
    date: Date | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    hospitalId: number
    date: number
    status: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    date?: true
    status?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    date?: true
    status?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    date?: true
    status?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    patientId: string
    doctorId: string
    hospitalId: string
    date: Date
    status: $Enums.AppointmentStatus
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    date?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "doctorId" | "hospitalId" | "date" | "status" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Patient: Prisma.$PatientPayload<ExtArgs>
      Hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      doctorId: string
      hospitalId: string
      date: Date
      status: $Enums.AppointmentStatus
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly patientId: FieldRef<"Appointment", 'String'>
    readonly doctorId: FieldRef<"Appointment", 'String'>
    readonly hospitalId: FieldRef<"Appointment", 'String'>
    readonly date: FieldRef<"Appointment", 'DateTime'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Hospital
   */

  export type AggregateHospital = {
    _count: HospitalCountAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
  }

  export type HospitalMinAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    code: string | null
  }

  export type HospitalMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subdomain: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
    code: string | null
  }

  export type HospitalCountAggregateOutputType = {
    id: number
    name: number
    subdomain: number
    description: number
    createdAt: number
    updatedAt: number
    settings: number
    branding: number
    isActive: number
    code: number
    _all: number
  }


  export type HospitalMinAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    code?: true
  }

  export type HospitalMaxAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    code?: true
  }

  export type HospitalCountAggregateInputType = {
    id?: true
    name?: true
    subdomain?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    settings?: true
    branding?: true
    isActive?: true
    code?: true
    _all?: true
  }

  export type HospitalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hospital to aggregate.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hospitals
    **/
    _count?: true | HospitalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HospitalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HospitalMaxAggregateInputType
  }

  export type GetHospitalAggregateType<T extends HospitalAggregateArgs> = {
        [P in keyof T & keyof AggregateHospital]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHospital[P]>
      : GetScalarType<T[P], AggregateHospital[P]>
  }




  export type HospitalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HospitalWhereInput
    orderBy?: HospitalOrderByWithAggregationInput | HospitalOrderByWithAggregationInput[]
    by: HospitalScalarFieldEnum[] | HospitalScalarFieldEnum
    having?: HospitalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HospitalCountAggregateInputType | true
    _min?: HospitalMinAggregateInputType
    _max?: HospitalMaxAggregateInputType
  }

  export type HospitalGroupByOutputType = {
    id: string
    name: string
    subdomain: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    settings: JsonValue
    branding: JsonValue | null
    isActive: boolean
    code: string | null
    _count: HospitalCountAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
  }

  type GetHospitalGroupByPayload<T extends HospitalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HospitalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HospitalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HospitalGroupByOutputType[P]>
            : GetScalarType<T[P], HospitalGroupByOutputType[P]>
        }
      >
    >


  export type HospitalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean
    branding?: boolean
    isActive?: boolean
    code?: boolean
    AntenatalRecords?: boolean | Hospital$AntenatalRecordsArgs<ExtArgs>
    NeonatalRecords?: boolean | Hospital$NeonatalRecordsArgs<ExtArgs>
    Users?: boolean | Hospital$UsersArgs<ExtArgs>
    Departments?: boolean | Hospital$DepartmentsArgs<ExtArgs>
    StaffProfiles?: boolean | Hospital$StaffProfilesArgs<ExtArgs>
    PatientAccesses?: boolean | Hospital$PatientAccessesArgs<ExtArgs>
    Appointments?: boolean | Hospital$AppointmentsArgs<ExtArgs>
    DoctorAvailabilities?: boolean | Hospital$DoctorAvailabilitiesArgs<ExtArgs>
    Patients?: boolean | Hospital$PatientsArgs<ExtArgs>
    MedicalRecords?: boolean | Hospital$MedicalRecordsArgs<ExtArgs>
    ReferralsFrom?: boolean | Hospital$ReferralsFromArgs<ExtArgs>
    ReferralsTo?: boolean | Hospital$ReferralsToArgs<ExtArgs>
    Ambulances?: boolean | Hospital$AmbulancesArgs<ExtArgs>
    AmbulanceDispatches?: boolean | Hospital$AmbulanceDispatchesArgs<ExtArgs>
    AmbulanceRequests?: boolean | Hospital$AmbulanceRequestsArgs<ExtArgs>
    BillingRecords?: boolean | Hospital$BillingRecordsArgs<ExtArgs>
    Conversations?: boolean | Hospital$ConversationsArgs<ExtArgs>
    BirthRecords?: boolean | Hospital$BirthRecordsArgs<ExtArgs>
    DeathRecords?: boolean | Hospital$DeathRecordsArgs<ExtArgs>
    MarketplaceVendors?: boolean | Hospital$MarketplaceVendorsArgs<ExtArgs>
    Prescriptions?: boolean | Hospital$PrescriptionsArgs<ExtArgs>
    _count?: boolean | HospitalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hospital"]>

  export type HospitalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean
    branding?: boolean
    isActive?: boolean
    code?: boolean
  }, ExtArgs["result"]["hospital"]>

  export type HospitalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subdomain?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean
    branding?: boolean
    isActive?: boolean
    code?: boolean
  }, ExtArgs["result"]["hospital"]>

  export type HospitalSelectScalar = {
    id?: boolean
    name?: boolean
    subdomain?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    settings?: boolean
    branding?: boolean
    isActive?: boolean
    code?: boolean
  }

  export type HospitalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subdomain" | "description" | "createdAt" | "updatedAt" | "settings" | "branding" | "isActive" | "code", ExtArgs["result"]["hospital"]>
  export type HospitalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AntenatalRecords?: boolean | Hospital$AntenatalRecordsArgs<ExtArgs>
    NeonatalRecords?: boolean | Hospital$NeonatalRecordsArgs<ExtArgs>
    Users?: boolean | Hospital$UsersArgs<ExtArgs>
    Departments?: boolean | Hospital$DepartmentsArgs<ExtArgs>
    StaffProfiles?: boolean | Hospital$StaffProfilesArgs<ExtArgs>
    PatientAccesses?: boolean | Hospital$PatientAccessesArgs<ExtArgs>
    Appointments?: boolean | Hospital$AppointmentsArgs<ExtArgs>
    DoctorAvailabilities?: boolean | Hospital$DoctorAvailabilitiesArgs<ExtArgs>
    Patients?: boolean | Hospital$PatientsArgs<ExtArgs>
    MedicalRecords?: boolean | Hospital$MedicalRecordsArgs<ExtArgs>
    ReferralsFrom?: boolean | Hospital$ReferralsFromArgs<ExtArgs>
    ReferralsTo?: boolean | Hospital$ReferralsToArgs<ExtArgs>
    Ambulances?: boolean | Hospital$AmbulancesArgs<ExtArgs>
    AmbulanceDispatches?: boolean | Hospital$AmbulanceDispatchesArgs<ExtArgs>
    AmbulanceRequests?: boolean | Hospital$AmbulanceRequestsArgs<ExtArgs>
    BillingRecords?: boolean | Hospital$BillingRecordsArgs<ExtArgs>
    Conversations?: boolean | Hospital$ConversationsArgs<ExtArgs>
    BirthRecords?: boolean | Hospital$BirthRecordsArgs<ExtArgs>
    DeathRecords?: boolean | Hospital$DeathRecordsArgs<ExtArgs>
    MarketplaceVendors?: boolean | Hospital$MarketplaceVendorsArgs<ExtArgs>
    Prescriptions?: boolean | Hospital$PrescriptionsArgs<ExtArgs>
    _count?: boolean | HospitalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HospitalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type HospitalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HospitalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hospital"
    objects: {
      AntenatalRecords: Prisma.$AntenatalRecordPayload<ExtArgs>[]
      NeonatalRecords: Prisma.$NeonatalRecordPayload<ExtArgs>[]
      Users: Prisma.$UserPayload<ExtArgs>[]
      Departments: Prisma.$DepartmentPayload<ExtArgs>[]
      StaffProfiles: Prisma.$StaffProfilePayload<ExtArgs>[]
      PatientAccesses: Prisma.$PatientHospitalAccessPayload<ExtArgs>[]
      Appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      DoctorAvailabilities: Prisma.$DoctorAvailabilityPayload<ExtArgs>[]
      Patients: Prisma.$PatientPayload<ExtArgs>[]
      MedicalRecords: Prisma.$MedicalRecordPayload<ExtArgs>[]
      ReferralsFrom: Prisma.$ReferralPayload<ExtArgs>[]
      ReferralsTo: Prisma.$ReferralPayload<ExtArgs>[]
      Ambulances: Prisma.$AmbulancePayload<ExtArgs>[]
      AmbulanceDispatches: Prisma.$AmbulanceDispatchPayload<ExtArgs>[]
      AmbulanceRequests: Prisma.$AmbulanceRequestPayload<ExtArgs>[]
      BillingRecords: Prisma.$BillingPayload<ExtArgs>[]
      Conversations: Prisma.$ConversationPayload<ExtArgs>[]
      BirthRecords: Prisma.$BirthRecordPayload<ExtArgs>[]
      DeathRecords: Prisma.$DeathRecordPayload<ExtArgs>[]
      MarketplaceVendors: Prisma.$MarketplaceVendorPayload<ExtArgs>[]
      Prescriptions: Prisma.$PrescriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subdomain: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      settings: Prisma.JsonValue
      branding: Prisma.JsonValue | null
      isActive: boolean
      code: string | null
    }, ExtArgs["result"]["hospital"]>
    composites: {}
  }

  type HospitalGetPayload<S extends boolean | null | undefined | HospitalDefaultArgs> = $Result.GetResult<Prisma.$HospitalPayload, S>

  type HospitalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HospitalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HospitalCountAggregateInputType | true
    }

  export interface HospitalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hospital'], meta: { name: 'Hospital' } }
    /**
     * Find zero or one Hospital that matches the filter.
     * @param {HospitalFindUniqueArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HospitalFindUniqueArgs>(args: SelectSubset<T, HospitalFindUniqueArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Hospital that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HospitalFindUniqueOrThrowArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HospitalFindUniqueOrThrowArgs>(args: SelectSubset<T, HospitalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hospital that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindFirstArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HospitalFindFirstArgs>(args?: SelectSubset<T, HospitalFindFirstArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Hospital that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindFirstOrThrowArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HospitalFindFirstOrThrowArgs>(args?: SelectSubset<T, HospitalFindFirstOrThrowArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Hospitals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hospitals
     * const hospitals = await prisma.hospital.findMany()
     * 
     * // Get first 10 Hospitals
     * const hospitals = await prisma.hospital.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hospitalWithIdOnly = await prisma.hospital.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HospitalFindManyArgs>(args?: SelectSubset<T, HospitalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Hospital.
     * @param {HospitalCreateArgs} args - Arguments to create a Hospital.
     * @example
     * // Create one Hospital
     * const Hospital = await prisma.hospital.create({
     *   data: {
     *     // ... data to create a Hospital
     *   }
     * })
     * 
     */
    create<T extends HospitalCreateArgs>(args: SelectSubset<T, HospitalCreateArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Hospitals.
     * @param {HospitalCreateManyArgs} args - Arguments to create many Hospitals.
     * @example
     * // Create many Hospitals
     * const hospital = await prisma.hospital.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HospitalCreateManyArgs>(args?: SelectSubset<T, HospitalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Hospitals and returns the data saved in the database.
     * @param {HospitalCreateManyAndReturnArgs} args - Arguments to create many Hospitals.
     * @example
     * // Create many Hospitals
     * const hospital = await prisma.hospital.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Hospitals and only return the `id`
     * const hospitalWithIdOnly = await prisma.hospital.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HospitalCreateManyAndReturnArgs>(args?: SelectSubset<T, HospitalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Hospital.
     * @param {HospitalDeleteArgs} args - Arguments to delete one Hospital.
     * @example
     * // Delete one Hospital
     * const Hospital = await prisma.hospital.delete({
     *   where: {
     *     // ... filter to delete one Hospital
     *   }
     * })
     * 
     */
    delete<T extends HospitalDeleteArgs>(args: SelectSubset<T, HospitalDeleteArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Hospital.
     * @param {HospitalUpdateArgs} args - Arguments to update one Hospital.
     * @example
     * // Update one Hospital
     * const hospital = await prisma.hospital.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HospitalUpdateArgs>(args: SelectSubset<T, HospitalUpdateArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Hospitals.
     * @param {HospitalDeleteManyArgs} args - Arguments to filter Hospitals to delete.
     * @example
     * // Delete a few Hospitals
     * const { count } = await prisma.hospital.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HospitalDeleteManyArgs>(args?: SelectSubset<T, HospitalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hospitals
     * const hospital = await prisma.hospital.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HospitalUpdateManyArgs>(args: SelectSubset<T, HospitalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hospitals and returns the data updated in the database.
     * @param {HospitalUpdateManyAndReturnArgs} args - Arguments to update many Hospitals.
     * @example
     * // Update many Hospitals
     * const hospital = await prisma.hospital.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Hospitals and only return the `id`
     * const hospitalWithIdOnly = await prisma.hospital.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HospitalUpdateManyAndReturnArgs>(args: SelectSubset<T, HospitalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Hospital.
     * @param {HospitalUpsertArgs} args - Arguments to update or create a Hospital.
     * @example
     * // Update or create a Hospital
     * const hospital = await prisma.hospital.upsert({
     *   create: {
     *     // ... data to create a Hospital
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hospital we want to update
     *   }
     * })
     */
    upsert<T extends HospitalUpsertArgs>(args: SelectSubset<T, HospitalUpsertArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalCountArgs} args - Arguments to filter Hospitals to count.
     * @example
     * // Count the number of Hospitals
     * const count = await prisma.hospital.count({
     *   where: {
     *     // ... the filter for the Hospitals we want to count
     *   }
     * })
    **/
    count<T extends HospitalCountArgs>(
      args?: Subset<T, HospitalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HospitalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HospitalAggregateArgs>(args: Subset<T, HospitalAggregateArgs>): Prisma.PrismaPromise<GetHospitalAggregateType<T>>

    /**
     * Group by Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HospitalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HospitalGroupByArgs['orderBy'] }
        : { orderBy?: HospitalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HospitalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHospitalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hospital model
   */
  readonly fields: HospitalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hospital.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HospitalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    AntenatalRecords<T extends Hospital$AntenatalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$AntenatalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    NeonatalRecords<T extends Hospital$NeonatalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$NeonatalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Users<T extends Hospital$UsersArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Departments<T extends Hospital$DepartmentsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$DepartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StaffProfiles<T extends Hospital$StaffProfilesArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$StaffProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PatientAccesses<T extends Hospital$PatientAccessesArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$PatientAccessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Appointments<T extends Hospital$AppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$AppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DoctorAvailabilities<T extends Hospital$DoctorAvailabilitiesArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$DoctorAvailabilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Patients<T extends Hospital$PatientsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$PatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MedicalRecords<T extends Hospital$MedicalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$MedicalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ReferralsFrom<T extends Hospital$ReferralsFromArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$ReferralsFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ReferralsTo<T extends Hospital$ReferralsToArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$ReferralsToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Ambulances<T extends Hospital$AmbulancesArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$AmbulancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AmbulanceDispatches<T extends Hospital$AmbulanceDispatchesArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$AmbulanceDispatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AmbulanceRequests<T extends Hospital$AmbulanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$AmbulanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BillingRecords<T extends Hospital$BillingRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$BillingRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Conversations<T extends Hospital$ConversationsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$ConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BirthRecords<T extends Hospital$BirthRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$BirthRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DeathRecords<T extends Hospital$DeathRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$DeathRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MarketplaceVendors<T extends Hospital$MarketplaceVendorsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$MarketplaceVendorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Prescriptions<T extends Hospital$PrescriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Hospital$PrescriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Hospital model
   */
  interface HospitalFieldRefs {
    readonly id: FieldRef<"Hospital", 'String'>
    readonly name: FieldRef<"Hospital", 'String'>
    readonly subdomain: FieldRef<"Hospital", 'String'>
    readonly description: FieldRef<"Hospital", 'String'>
    readonly createdAt: FieldRef<"Hospital", 'DateTime'>
    readonly updatedAt: FieldRef<"Hospital", 'DateTime'>
    readonly settings: FieldRef<"Hospital", 'Json'>
    readonly branding: FieldRef<"Hospital", 'Json'>
    readonly isActive: FieldRef<"Hospital", 'Boolean'>
    readonly code: FieldRef<"Hospital", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Hospital findUnique
   */
  export type HospitalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital findUniqueOrThrow
   */
  export type HospitalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital findFirst
   */
  export type HospitalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hospitals.
     */
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * Hospital findFirstOrThrow
   */
  export type HospitalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospital to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hospitals.
     */
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * Hospital findMany
   */
  export type HospitalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter, which Hospitals to fetch.
     */
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     */
    orderBy?: HospitalOrderByWithRelationInput | HospitalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hospitals.
     */
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     */
    skip?: number
    distinct?: HospitalScalarFieldEnum | HospitalScalarFieldEnum[]
  }

  /**
   * Hospital create
   */
  export type HospitalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The data needed to create a Hospital.
     */
    data: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
  }

  /**
   * Hospital createMany
   */
  export type HospitalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hospitals.
     */
    data: HospitalCreateManyInput | HospitalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hospital createManyAndReturn
   */
  export type HospitalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * The data used to create many Hospitals.
     */
    data: HospitalCreateManyInput | HospitalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hospital update
   */
  export type HospitalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The data needed to update a Hospital.
     */
    data: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
    /**
     * Choose, which Hospital to update.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital updateMany
   */
  export type HospitalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hospitals.
     */
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyInput>
    /**
     * Filter which Hospitals to update
     */
    where?: HospitalWhereInput
    /**
     * Limit how many Hospitals to update.
     */
    limit?: number
  }

  /**
   * Hospital updateManyAndReturn
   */
  export type HospitalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * The data used to update Hospitals.
     */
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyInput>
    /**
     * Filter which Hospitals to update
     */
    where?: HospitalWhereInput
    /**
     * Limit how many Hospitals to update.
     */
    limit?: number
  }

  /**
   * Hospital upsert
   */
  export type HospitalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * The filter to search for the Hospital to update in case it exists.
     */
    where: HospitalWhereUniqueInput
    /**
     * In case the Hospital found by the `where` argument doesn't exist, create a new Hospital with this data.
     */
    create: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
    /**
     * In case the Hospital was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
  }

  /**
   * Hospital delete
   */
  export type HospitalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    /**
     * Filter which Hospital to delete.
     */
    where: HospitalWhereUniqueInput
  }

  /**
   * Hospital deleteMany
   */
  export type HospitalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hospitals to delete
     */
    where?: HospitalWhereInput
    /**
     * Limit how many Hospitals to delete.
     */
    limit?: number
  }

  /**
   * Hospital.AntenatalRecords
   */
  export type Hospital$AntenatalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    where?: AntenatalRecordWhereInput
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    cursor?: AntenatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AntenatalRecordScalarFieldEnum | AntenatalRecordScalarFieldEnum[]
  }

  /**
   * Hospital.NeonatalRecords
   */
  export type Hospital$NeonatalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    where?: NeonatalRecordWhereInput
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    cursor?: NeonatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * Hospital.Users
   */
  export type Hospital$UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Hospital.Departments
   */
  export type Hospital$DepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Hospital.StaffProfiles
   */
  export type Hospital$StaffProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    where?: StaffProfileWhereInput
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    cursor?: StaffProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffProfileScalarFieldEnum | StaffProfileScalarFieldEnum[]
  }

  /**
   * Hospital.PatientAccesses
   */
  export type Hospital$PatientAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    where?: PatientHospitalAccessWhereInput
    orderBy?: PatientHospitalAccessOrderByWithRelationInput | PatientHospitalAccessOrderByWithRelationInput[]
    cursor?: PatientHospitalAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHospitalAccessScalarFieldEnum | PatientHospitalAccessScalarFieldEnum[]
  }

  /**
   * Hospital.Appointments
   */
  export type Hospital$AppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Hospital.DoctorAvailabilities
   */
  export type Hospital$DoctorAvailabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    where?: DoctorAvailabilityWhereInput
    orderBy?: DoctorAvailabilityOrderByWithRelationInput | DoctorAvailabilityOrderByWithRelationInput[]
    cursor?: DoctorAvailabilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorAvailabilityScalarFieldEnum | DoctorAvailabilityScalarFieldEnum[]
  }

  /**
   * Hospital.Patients
   */
  export type Hospital$PatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Hospital.MedicalRecords
   */
  export type Hospital$MedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * Hospital.ReferralsFrom
   */
  export type Hospital$ReferralsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    cursor?: ReferralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Hospital.ReferralsTo
   */
  export type Hospital$ReferralsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    cursor?: ReferralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Hospital.Ambulances
   */
  export type Hospital$AmbulancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    where?: AmbulanceWhereInput
    orderBy?: AmbulanceOrderByWithRelationInput | AmbulanceOrderByWithRelationInput[]
    cursor?: AmbulanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbulanceScalarFieldEnum | AmbulanceScalarFieldEnum[]
  }

  /**
   * Hospital.AmbulanceDispatches
   */
  export type Hospital$AmbulanceDispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    where?: AmbulanceDispatchWhereInput
    orderBy?: AmbulanceDispatchOrderByWithRelationInput | AmbulanceDispatchOrderByWithRelationInput[]
    cursor?: AmbulanceDispatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbulanceDispatchScalarFieldEnum | AmbulanceDispatchScalarFieldEnum[]
  }

  /**
   * Hospital.AmbulanceRequests
   */
  export type Hospital$AmbulanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    where?: AmbulanceRequestWhereInput
    orderBy?: AmbulanceRequestOrderByWithRelationInput | AmbulanceRequestOrderByWithRelationInput[]
    cursor?: AmbulanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbulanceRequestScalarFieldEnum | AmbulanceRequestScalarFieldEnum[]
  }

  /**
   * Hospital.BillingRecords
   */
  export type Hospital$BillingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    where?: BillingWhereInput
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    cursor?: BillingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Hospital.Conversations
   */
  export type Hospital$ConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Hospital.BirthRecords
   */
  export type Hospital$BirthRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    where?: BirthRecordWhereInput
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    cursor?: BirthRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BirthRecordScalarFieldEnum | BirthRecordScalarFieldEnum[]
  }

  /**
   * Hospital.DeathRecords
   */
  export type Hospital$DeathRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    where?: DeathRecordWhereInput
    orderBy?: DeathRecordOrderByWithRelationInput | DeathRecordOrderByWithRelationInput[]
    cursor?: DeathRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeathRecordScalarFieldEnum | DeathRecordScalarFieldEnum[]
  }

  /**
   * Hospital.MarketplaceVendors
   */
  export type Hospital$MarketplaceVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    where?: MarketplaceVendorWhereInput
    orderBy?: MarketplaceVendorOrderByWithRelationInput | MarketplaceVendorOrderByWithRelationInput[]
    cursor?: MarketplaceVendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarketplaceVendorScalarFieldEnum | MarketplaceVendorScalarFieldEnum[]
  }

  /**
   * Hospital.Prescriptions
   */
  export type Hospital$PrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    cursor?: PrescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Hospital without action
   */
  export type HospitalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
  }


  /**
   * Model MedicalRecord
   */

  export type AggregateMedicalRecord = {
    _count: MedicalRecordCountAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  export type MedicalRecordMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    hospitalId: string | null
    type: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalRecordMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    hospitalId: string | null
    type: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalRecordCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    hospitalId: number
    type: number
    details: number
    date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalRecordMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    type?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalRecordMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    type?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalRecordCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    type?: true
    details?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecord to aggregate.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalRecords
    **/
    _count?: true | MedicalRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalRecordMaxAggregateInputType
  }

  export type GetMedicalRecordAggregateType<T extends MedicalRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalRecord[P]>
      : GetScalarType<T[P], AggregateMedicalRecord[P]>
  }




  export type MedicalRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithAggregationInput | MedicalRecordOrderByWithAggregationInput[]
    by: MedicalRecordScalarFieldEnum[] | MedicalRecordScalarFieldEnum
    having?: MedicalRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalRecordCountAggregateInputType | true
    _min?: MedicalRecordMinAggregateInputType
    _max?: MedicalRecordMaxAggregateInputType
  }

  export type MedicalRecordGroupByOutputType = {
    id: string
    patientId: string
    doctorId: string
    hospitalId: string
    type: string
    details: JsonValue
    date: Date
    createdAt: Date
    updatedAt: Date
    _count: MedicalRecordCountAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  type GetMedicalRecordGroupByPayload<T extends MedicalRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
        }
      >
    >


  export type MedicalRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    type?: boolean
    details?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    type?: boolean
    details?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    type?: boolean
    details?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    type?: boolean
    details?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicalRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "doctorId" | "hospitalId" | "type" | "details" | "date" | "createdAt" | "updatedAt", ExtArgs["result"]["medicalRecord"]>
  export type MedicalRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type MedicalRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type MedicalRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    Patient?: boolean | PatientDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $MedicalRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalRecord"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      Patient: Prisma.$PatientPayload<ExtArgs>
      Hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      doctorId: string
      hospitalId: string
      type: string
      details: Prisma.JsonValue
      date: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalRecord"]>
    composites: {}
  }

  type MedicalRecordGetPayload<S extends boolean | null | undefined | MedicalRecordDefaultArgs> = $Result.GetResult<Prisma.$MedicalRecordPayload, S>

  type MedicalRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicalRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicalRecordCountAggregateInputType | true
    }

  export interface MedicalRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalRecord'], meta: { name: 'MedicalRecord' } }
    /**
     * Find zero or one MedicalRecord that matches the filter.
     * @param {MedicalRecordFindUniqueArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalRecordFindUniqueArgs>(args: SelectSubset<T, MedicalRecordFindUniqueArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicalRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalRecordFindUniqueOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalRecordFindFirstArgs>(args?: SelectSubset<T, MedicalRecordFindFirstArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany()
     * 
     * // Get first 10 MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalRecordFindManyArgs>(args?: SelectSubset<T, MedicalRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicalRecord.
     * @param {MedicalRecordCreateArgs} args - Arguments to create a MedicalRecord.
     * @example
     * // Create one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.create({
     *   data: {
     *     // ... data to create a MedicalRecord
     *   }
     * })
     * 
     */
    create<T extends MedicalRecordCreateArgs>(args: SelectSubset<T, MedicalRecordCreateArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicalRecords.
     * @param {MedicalRecordCreateManyArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalRecordCreateManyArgs>(args?: SelectSubset<T, MedicalRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalRecords and returns the data saved in the database.
     * @param {MedicalRecordCreateManyAndReturnArgs} args - Arguments to create many MedicalRecords.
     * @example
     * // Create many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalRecords and only return the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicalRecord.
     * @param {MedicalRecordDeleteArgs} args - Arguments to delete one MedicalRecord.
     * @example
     * // Delete one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.delete({
     *   where: {
     *     // ... filter to delete one MedicalRecord
     *   }
     * })
     * 
     */
    delete<T extends MedicalRecordDeleteArgs>(args: SelectSubset<T, MedicalRecordDeleteArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicalRecord.
     * @param {MedicalRecordUpdateArgs} args - Arguments to update one MedicalRecord.
     * @example
     * // Update one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalRecordUpdateArgs>(args: SelectSubset<T, MedicalRecordUpdateArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicalRecords.
     * @param {MedicalRecordDeleteManyArgs} args - Arguments to filter MedicalRecords to delete.
     * @example
     * // Delete a few MedicalRecords
     * const { count } = await prisma.medicalRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalRecordDeleteManyArgs>(args?: SelectSubset<T, MedicalRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalRecordUpdateManyArgs>(args: SelectSubset<T, MedicalRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecords and returns the data updated in the database.
     * @param {MedicalRecordUpdateManyAndReturnArgs} args - Arguments to update many MedicalRecords.
     * @example
     * // Update many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicalRecords and only return the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicalRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicalRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicalRecord.
     * @param {MedicalRecordUpsertArgs} args - Arguments to update or create a MedicalRecord.
     * @example
     * // Update or create a MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.upsert({
     *   create: {
     *     // ... data to create a MedicalRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalRecord we want to update
     *   }
     * })
     */
    upsert<T extends MedicalRecordUpsertArgs>(args: SelectSubset<T, MedicalRecordUpsertArgs<ExtArgs>>): Prisma__MedicalRecordClient<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordCountArgs} args - Arguments to filter MedicalRecords to count.
     * @example
     * // Count the number of MedicalRecords
     * const count = await prisma.medicalRecord.count({
     *   where: {
     *     // ... the filter for the MedicalRecords we want to count
     *   }
     * })
    **/
    count<T extends MedicalRecordCountArgs>(
      args?: Subset<T, MedicalRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalRecordAggregateArgs>(args: Subset<T, MedicalRecordAggregateArgs>): Prisma.PrismaPromise<GetMedicalRecordAggregateType<T>>

    /**
     * Group by MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalRecordGroupByArgs['orderBy'] }
        : { orderBy?: MedicalRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalRecord model
   */
  readonly fields: MedicalRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalRecord model
   */
  interface MedicalRecordFieldRefs {
    readonly id: FieldRef<"MedicalRecord", 'String'>
    readonly patientId: FieldRef<"MedicalRecord", 'String'>
    readonly doctorId: FieldRef<"MedicalRecord", 'String'>
    readonly hospitalId: FieldRef<"MedicalRecord", 'String'>
    readonly type: FieldRef<"MedicalRecord", 'String'>
    readonly details: FieldRef<"MedicalRecord", 'Json'>
    readonly date: FieldRef<"MedicalRecord", 'DateTime'>
    readonly createdAt: FieldRef<"MedicalRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalRecord findUnique
   */
  export type MedicalRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord findUniqueOrThrow
   */
  export type MedicalRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord findFirst
   */
  export type MedicalRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord findFirstOrThrow
   */
  export type MedicalRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord findMany
   */
  export type MedicalRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * MedicalRecord create
   */
  export type MedicalRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalRecord.
     */
    data: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
  }

  /**
   * MedicalRecord createMany
   */
  export type MedicalRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalRecords.
     */
    data: MedicalRecordCreateManyInput | MedicalRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalRecord createManyAndReturn
   */
  export type MedicalRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * The data used to create many MedicalRecords.
     */
    data: MedicalRecordCreateManyInput | MedicalRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalRecord update
   */
  export type MedicalRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalRecord.
     */
    data: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
    /**
     * Choose, which MedicalRecord to update.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord updateMany
   */
  export type MedicalRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalRecords.
     */
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecords to update
     */
    where?: MedicalRecordWhereInput
    /**
     * Limit how many MedicalRecords to update.
     */
    limit?: number
  }

  /**
   * MedicalRecord updateManyAndReturn
   */
  export type MedicalRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * The data used to update MedicalRecords.
     */
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecords to update
     */
    where?: MedicalRecordWhereInput
    /**
     * Limit how many MedicalRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalRecord upsert
   */
  export type MedicalRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalRecord to update in case it exists.
     */
    where: MedicalRecordWhereUniqueInput
    /**
     * In case the MedicalRecord found by the `where` argument doesn't exist, create a new MedicalRecord with this data.
     */
    create: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
    /**
     * In case the MedicalRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
  }

  /**
   * MedicalRecord delete
   */
  export type MedicalRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter which MedicalRecord to delete.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord deleteMany
   */
  export type MedicalRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecords to delete
     */
    where?: MedicalRecordWhereInput
    /**
     * Limit how many MedicalRecords to delete.
     */
    limit?: number
  }

  /**
   * MedicalRecord without action
   */
  export type MedicalRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
  }


  /**
   * Model NeonatalRecord
   */

  export type AggregateNeonatalRecord = {
    _count: NeonatalRecordCountAggregateOutputType | null
    _avg: NeonatalRecordAvgAggregateOutputType | null
    _sum: NeonatalRecordSumAggregateOutputType | null
    _min: NeonatalRecordMinAggregateOutputType | null
    _max: NeonatalRecordMaxAggregateOutputType | null
  }

  export type NeonatalRecordAvgAggregateOutputType = {
    birthWeight: number | null
    gestationalAgeAtBirth: number | null
    apgarScore: number | null
  }

  export type NeonatalRecordSumAggregateOutputType = {
    birthWeight: number | null
    gestationalAgeAtBirth: number | null
    apgarScore: number | null
  }

  export type NeonatalRecordMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    birthWeight: number | null
    gestationalAgeAtBirth: number | null
    careLevel: $Enums.CareLevel | null
    status: $Enums.NeonatalStatus | null
    dischargeStatus: $Enums.DischargeStatus | null
    apgarScore: number | null
    motherId: string | null
    birthComplications: string | null
    feedingMethod: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdByUserId: string | null
    updatedByUserId: string | null
    mrn: string | null
  }

  export type NeonatalRecordMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    birthWeight: number | null
    gestationalAgeAtBirth: number | null
    careLevel: $Enums.CareLevel | null
    status: $Enums.NeonatalStatus | null
    dischargeStatus: $Enums.DischargeStatus | null
    apgarScore: number | null
    motherId: string | null
    birthComplications: string | null
    feedingMethod: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdByUserId: string | null
    updatedByUserId: string | null
    mrn: string | null
  }

  export type NeonatalRecordCountAggregateOutputType = {
    id: number
    patientId: number
    hospitalId: number
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel: number
    status: number
    dischargeStatus: number
    apgarScore: number
    motherId: number
    birthComplications: number
    feedingMethod: number
    createdAt: number
    updatedAt: number
    createdByUserId: number
    updatedByUserId: number
    mrn: number
    _all: number
  }


  export type NeonatalRecordAvgAggregateInputType = {
    birthWeight?: true
    gestationalAgeAtBirth?: true
    apgarScore?: true
  }

  export type NeonatalRecordSumAggregateInputType = {
    birthWeight?: true
    gestationalAgeAtBirth?: true
    apgarScore?: true
  }

  export type NeonatalRecordMinAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    birthWeight?: true
    gestationalAgeAtBirth?: true
    careLevel?: true
    status?: true
    dischargeStatus?: true
    apgarScore?: true
    motherId?: true
    birthComplications?: true
    feedingMethod?: true
    createdAt?: true
    updatedAt?: true
    createdByUserId?: true
    updatedByUserId?: true
    mrn?: true
  }

  export type NeonatalRecordMaxAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    birthWeight?: true
    gestationalAgeAtBirth?: true
    careLevel?: true
    status?: true
    dischargeStatus?: true
    apgarScore?: true
    motherId?: true
    birthComplications?: true
    feedingMethod?: true
    createdAt?: true
    updatedAt?: true
    createdByUserId?: true
    updatedByUserId?: true
    mrn?: true
  }

  export type NeonatalRecordCountAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    birthWeight?: true
    gestationalAgeAtBirth?: true
    careLevel?: true
    status?: true
    dischargeStatus?: true
    apgarScore?: true
    motherId?: true
    birthComplications?: true
    feedingMethod?: true
    createdAt?: true
    updatedAt?: true
    createdByUserId?: true
    updatedByUserId?: true
    mrn?: true
    _all?: true
  }

  export type NeonatalRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NeonatalRecord to aggregate.
     */
    where?: NeonatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeonatalRecords to fetch.
     */
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NeonatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeonatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeonatalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NeonatalRecords
    **/
    _count?: true | NeonatalRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NeonatalRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NeonatalRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NeonatalRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NeonatalRecordMaxAggregateInputType
  }

  export type GetNeonatalRecordAggregateType<T extends NeonatalRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateNeonatalRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNeonatalRecord[P]>
      : GetScalarType<T[P], AggregateNeonatalRecord[P]>
  }




  export type NeonatalRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeonatalRecordWhereInput
    orderBy?: NeonatalRecordOrderByWithAggregationInput | NeonatalRecordOrderByWithAggregationInput[]
    by: NeonatalRecordScalarFieldEnum[] | NeonatalRecordScalarFieldEnum
    having?: NeonatalRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NeonatalRecordCountAggregateInputType | true
    _avg?: NeonatalRecordAvgAggregateInputType
    _sum?: NeonatalRecordSumAggregateInputType
    _min?: NeonatalRecordMinAggregateInputType
    _max?: NeonatalRecordMaxAggregateInputType
  }

  export type NeonatalRecordGroupByOutputType = {
    id: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel: $Enums.CareLevel
    status: $Enums.NeonatalStatus
    dischargeStatus: $Enums.DischargeStatus | null
    apgarScore: number | null
    motherId: string | null
    birthComplications: string | null
    feedingMethod: string | null
    createdAt: Date
    updatedAt: Date
    createdByUserId: string
    updatedByUserId: string
    mrn: string | null
    _count: NeonatalRecordCountAggregateOutputType | null
    _avg: NeonatalRecordAvgAggregateOutputType | null
    _sum: NeonatalRecordSumAggregateOutputType | null
    _min: NeonatalRecordMinAggregateOutputType | null
    _max: NeonatalRecordMaxAggregateOutputType | null
  }

  type GetNeonatalRecordGroupByPayload<T extends NeonatalRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NeonatalRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NeonatalRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NeonatalRecordGroupByOutputType[P]>
            : GetScalarType<T[P], NeonatalRecordGroupByOutputType[P]>
        }
      >
    >


  export type NeonatalRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    birthWeight?: boolean
    gestationalAgeAtBirth?: boolean
    careLevel?: boolean
    status?: boolean
    dischargeStatus?: boolean
    apgarScore?: boolean
    motherId?: boolean
    birthComplications?: boolean
    feedingMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
    User_NeonatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient_NeonatalRecord_motherIdToPatient?: boolean | NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs>
    Patient_NeonatalRecord_patientIdToPatient?: boolean | PatientDefaultArgs<ExtArgs>
    User_NeonatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["neonatalRecord"]>

  export type NeonatalRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    birthWeight?: boolean
    gestationalAgeAtBirth?: boolean
    careLevel?: boolean
    status?: boolean
    dischargeStatus?: boolean
    apgarScore?: boolean
    motherId?: boolean
    birthComplications?: boolean
    feedingMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
    User_NeonatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient_NeonatalRecord_motherIdToPatient?: boolean | NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs>
    Patient_NeonatalRecord_patientIdToPatient?: boolean | PatientDefaultArgs<ExtArgs>
    User_NeonatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["neonatalRecord"]>

  export type NeonatalRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    birthWeight?: boolean
    gestationalAgeAtBirth?: boolean
    careLevel?: boolean
    status?: boolean
    dischargeStatus?: boolean
    apgarScore?: boolean
    motherId?: boolean
    birthComplications?: boolean
    feedingMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
    User_NeonatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient_NeonatalRecord_motherIdToPatient?: boolean | NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs>
    Patient_NeonatalRecord_patientIdToPatient?: boolean | PatientDefaultArgs<ExtArgs>
    User_NeonatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["neonatalRecord"]>

  export type NeonatalRecordSelectScalar = {
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    birthWeight?: boolean
    gestationalAgeAtBirth?: boolean
    careLevel?: boolean
    status?: boolean
    dischargeStatus?: boolean
    apgarScore?: boolean
    motherId?: boolean
    birthComplications?: boolean
    feedingMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdByUserId?: boolean
    updatedByUserId?: boolean
    mrn?: boolean
  }

  export type NeonatalRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "hospitalId" | "birthWeight" | "gestationalAgeAtBirth" | "careLevel" | "status" | "dischargeStatus" | "apgarScore" | "motherId" | "birthComplications" | "feedingMethod" | "createdAt" | "updatedAt" | "createdByUserId" | "updatedByUserId" | "mrn", ExtArgs["result"]["neonatalRecord"]>
  export type NeonatalRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User_NeonatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient_NeonatalRecord_motherIdToPatient?: boolean | NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs>
    Patient_NeonatalRecord_patientIdToPatient?: boolean | PatientDefaultArgs<ExtArgs>
    User_NeonatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NeonatalRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User_NeonatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient_NeonatalRecord_motherIdToPatient?: boolean | NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs>
    Patient_NeonatalRecord_patientIdToPatient?: boolean | PatientDefaultArgs<ExtArgs>
    User_NeonatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NeonatalRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User_NeonatalRecord_createdByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
    Hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    Patient_NeonatalRecord_motherIdToPatient?: boolean | NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs>
    Patient_NeonatalRecord_patientIdToPatient?: boolean | PatientDefaultArgs<ExtArgs>
    User_NeonatalRecord_updatedByUserIdToUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NeonatalRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NeonatalRecord"
    objects: {
      User_NeonatalRecord_createdByUserIdToUser: Prisma.$UserPayload<ExtArgs>
      Hospital: Prisma.$HospitalPayload<ExtArgs>
      Patient_NeonatalRecord_motherIdToPatient: Prisma.$PatientPayload<ExtArgs> | null
      Patient_NeonatalRecord_patientIdToPatient: Prisma.$PatientPayload<ExtArgs>
      User_NeonatalRecord_updatedByUserIdToUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      hospitalId: string
      birthWeight: number
      gestationalAgeAtBirth: number
      careLevel: $Enums.CareLevel
      status: $Enums.NeonatalStatus
      dischargeStatus: $Enums.DischargeStatus | null
      apgarScore: number | null
      motherId: string | null
      birthComplications: string | null
      feedingMethod: string | null
      createdAt: Date
      updatedAt: Date
      createdByUserId: string
      updatedByUserId: string
      mrn: string | null
    }, ExtArgs["result"]["neonatalRecord"]>
    composites: {}
  }

  type NeonatalRecordGetPayload<S extends boolean | null | undefined | NeonatalRecordDefaultArgs> = $Result.GetResult<Prisma.$NeonatalRecordPayload, S>

  type NeonatalRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NeonatalRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NeonatalRecordCountAggregateInputType | true
    }

  export interface NeonatalRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NeonatalRecord'], meta: { name: 'NeonatalRecord' } }
    /**
     * Find zero or one NeonatalRecord that matches the filter.
     * @param {NeonatalRecordFindUniqueArgs} args - Arguments to find a NeonatalRecord
     * @example
     * // Get one NeonatalRecord
     * const neonatalRecord = await prisma.neonatalRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NeonatalRecordFindUniqueArgs>(args: SelectSubset<T, NeonatalRecordFindUniqueArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NeonatalRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NeonatalRecordFindUniqueOrThrowArgs} args - Arguments to find a NeonatalRecord
     * @example
     * // Get one NeonatalRecord
     * const neonatalRecord = await prisma.neonatalRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NeonatalRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, NeonatalRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NeonatalRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeonatalRecordFindFirstArgs} args - Arguments to find a NeonatalRecord
     * @example
     * // Get one NeonatalRecord
     * const neonatalRecord = await prisma.neonatalRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NeonatalRecordFindFirstArgs>(args?: SelectSubset<T, NeonatalRecordFindFirstArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NeonatalRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeonatalRecordFindFirstOrThrowArgs} args - Arguments to find a NeonatalRecord
     * @example
     * // Get one NeonatalRecord
     * const neonatalRecord = await prisma.neonatalRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NeonatalRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, NeonatalRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NeonatalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeonatalRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NeonatalRecords
     * const neonatalRecords = await prisma.neonatalRecord.findMany()
     * 
     * // Get first 10 NeonatalRecords
     * const neonatalRecords = await prisma.neonatalRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const neonatalRecordWithIdOnly = await prisma.neonatalRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NeonatalRecordFindManyArgs>(args?: SelectSubset<T, NeonatalRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NeonatalRecord.
     * @param {NeonatalRecordCreateArgs} args - Arguments to create a NeonatalRecord.
     * @example
     * // Create one NeonatalRecord
     * const NeonatalRecord = await prisma.neonatalRecord.create({
     *   data: {
     *     // ... data to create a NeonatalRecord
     *   }
     * })
     * 
     */
    create<T extends NeonatalRecordCreateArgs>(args: SelectSubset<T, NeonatalRecordCreateArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NeonatalRecords.
     * @param {NeonatalRecordCreateManyArgs} args - Arguments to create many NeonatalRecords.
     * @example
     * // Create many NeonatalRecords
     * const neonatalRecord = await prisma.neonatalRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NeonatalRecordCreateManyArgs>(args?: SelectSubset<T, NeonatalRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NeonatalRecords and returns the data saved in the database.
     * @param {NeonatalRecordCreateManyAndReturnArgs} args - Arguments to create many NeonatalRecords.
     * @example
     * // Create many NeonatalRecords
     * const neonatalRecord = await prisma.neonatalRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NeonatalRecords and only return the `id`
     * const neonatalRecordWithIdOnly = await prisma.neonatalRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NeonatalRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, NeonatalRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NeonatalRecord.
     * @param {NeonatalRecordDeleteArgs} args - Arguments to delete one NeonatalRecord.
     * @example
     * // Delete one NeonatalRecord
     * const NeonatalRecord = await prisma.neonatalRecord.delete({
     *   where: {
     *     // ... filter to delete one NeonatalRecord
     *   }
     * })
     * 
     */
    delete<T extends NeonatalRecordDeleteArgs>(args: SelectSubset<T, NeonatalRecordDeleteArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NeonatalRecord.
     * @param {NeonatalRecordUpdateArgs} args - Arguments to update one NeonatalRecord.
     * @example
     * // Update one NeonatalRecord
     * const neonatalRecord = await prisma.neonatalRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NeonatalRecordUpdateArgs>(args: SelectSubset<T, NeonatalRecordUpdateArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NeonatalRecords.
     * @param {NeonatalRecordDeleteManyArgs} args - Arguments to filter NeonatalRecords to delete.
     * @example
     * // Delete a few NeonatalRecords
     * const { count } = await prisma.neonatalRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NeonatalRecordDeleteManyArgs>(args?: SelectSubset<T, NeonatalRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NeonatalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeonatalRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NeonatalRecords
     * const neonatalRecord = await prisma.neonatalRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NeonatalRecordUpdateManyArgs>(args: SelectSubset<T, NeonatalRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NeonatalRecords and returns the data updated in the database.
     * @param {NeonatalRecordUpdateManyAndReturnArgs} args - Arguments to update many NeonatalRecords.
     * @example
     * // Update many NeonatalRecords
     * const neonatalRecord = await prisma.neonatalRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NeonatalRecords and only return the `id`
     * const neonatalRecordWithIdOnly = await prisma.neonatalRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NeonatalRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, NeonatalRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NeonatalRecord.
     * @param {NeonatalRecordUpsertArgs} args - Arguments to update or create a NeonatalRecord.
     * @example
     * // Update or create a NeonatalRecord
     * const neonatalRecord = await prisma.neonatalRecord.upsert({
     *   create: {
     *     // ... data to create a NeonatalRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NeonatalRecord we want to update
     *   }
     * })
     */
    upsert<T extends NeonatalRecordUpsertArgs>(args: SelectSubset<T, NeonatalRecordUpsertArgs<ExtArgs>>): Prisma__NeonatalRecordClient<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NeonatalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeonatalRecordCountArgs} args - Arguments to filter NeonatalRecords to count.
     * @example
     * // Count the number of NeonatalRecords
     * const count = await prisma.neonatalRecord.count({
     *   where: {
     *     // ... the filter for the NeonatalRecords we want to count
     *   }
     * })
    **/
    count<T extends NeonatalRecordCountArgs>(
      args?: Subset<T, NeonatalRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NeonatalRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NeonatalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeonatalRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NeonatalRecordAggregateArgs>(args: Subset<T, NeonatalRecordAggregateArgs>): Prisma.PrismaPromise<GetNeonatalRecordAggregateType<T>>

    /**
     * Group by NeonatalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeonatalRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NeonatalRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NeonatalRecordGroupByArgs['orderBy'] }
        : { orderBy?: NeonatalRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NeonatalRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNeonatalRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NeonatalRecord model
   */
  readonly fields: NeonatalRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NeonatalRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NeonatalRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User_NeonatalRecord_createdByUserIdToUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Patient_NeonatalRecord_motherIdToPatient<T extends NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs> = {}>(args?: Subset<T, NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Patient_NeonatalRecord_patientIdToPatient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User_NeonatalRecord_updatedByUserIdToUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NeonatalRecord model
   */
  interface NeonatalRecordFieldRefs {
    readonly id: FieldRef<"NeonatalRecord", 'String'>
    readonly patientId: FieldRef<"NeonatalRecord", 'String'>
    readonly hospitalId: FieldRef<"NeonatalRecord", 'String'>
    readonly birthWeight: FieldRef<"NeonatalRecord", 'Float'>
    readonly gestationalAgeAtBirth: FieldRef<"NeonatalRecord", 'Int'>
    readonly careLevel: FieldRef<"NeonatalRecord", 'CareLevel'>
    readonly status: FieldRef<"NeonatalRecord", 'NeonatalStatus'>
    readonly dischargeStatus: FieldRef<"NeonatalRecord", 'DischargeStatus'>
    readonly apgarScore: FieldRef<"NeonatalRecord", 'Int'>
    readonly motherId: FieldRef<"NeonatalRecord", 'String'>
    readonly birthComplications: FieldRef<"NeonatalRecord", 'String'>
    readonly feedingMethod: FieldRef<"NeonatalRecord", 'String'>
    readonly createdAt: FieldRef<"NeonatalRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"NeonatalRecord", 'DateTime'>
    readonly createdByUserId: FieldRef<"NeonatalRecord", 'String'>
    readonly updatedByUserId: FieldRef<"NeonatalRecord", 'String'>
    readonly mrn: FieldRef<"NeonatalRecord", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NeonatalRecord findUnique
   */
  export type NeonatalRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which NeonatalRecord to fetch.
     */
    where: NeonatalRecordWhereUniqueInput
  }

  /**
   * NeonatalRecord findUniqueOrThrow
   */
  export type NeonatalRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which NeonatalRecord to fetch.
     */
    where: NeonatalRecordWhereUniqueInput
  }

  /**
   * NeonatalRecord findFirst
   */
  export type NeonatalRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which NeonatalRecord to fetch.
     */
    where?: NeonatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeonatalRecords to fetch.
     */
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NeonatalRecords.
     */
    cursor?: NeonatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeonatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeonatalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NeonatalRecords.
     */
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * NeonatalRecord findFirstOrThrow
   */
  export type NeonatalRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which NeonatalRecord to fetch.
     */
    where?: NeonatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeonatalRecords to fetch.
     */
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NeonatalRecords.
     */
    cursor?: NeonatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeonatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeonatalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NeonatalRecords.
     */
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * NeonatalRecord findMany
   */
  export type NeonatalRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * Filter, which NeonatalRecords to fetch.
     */
    where?: NeonatalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeonatalRecords to fetch.
     */
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NeonatalRecords.
     */
    cursor?: NeonatalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeonatalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeonatalRecords.
     */
    skip?: number
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * NeonatalRecord create
   */
  export type NeonatalRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a NeonatalRecord.
     */
    data: XOR<NeonatalRecordCreateInput, NeonatalRecordUncheckedCreateInput>
  }

  /**
   * NeonatalRecord createMany
   */
  export type NeonatalRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NeonatalRecords.
     */
    data: NeonatalRecordCreateManyInput | NeonatalRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NeonatalRecord createManyAndReturn
   */
  export type NeonatalRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * The data used to create many NeonatalRecords.
     */
    data: NeonatalRecordCreateManyInput | NeonatalRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NeonatalRecord update
   */
  export type NeonatalRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a NeonatalRecord.
     */
    data: XOR<NeonatalRecordUpdateInput, NeonatalRecordUncheckedUpdateInput>
    /**
     * Choose, which NeonatalRecord to update.
     */
    where: NeonatalRecordWhereUniqueInput
  }

  /**
   * NeonatalRecord updateMany
   */
  export type NeonatalRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NeonatalRecords.
     */
    data: XOR<NeonatalRecordUpdateManyMutationInput, NeonatalRecordUncheckedUpdateManyInput>
    /**
     * Filter which NeonatalRecords to update
     */
    where?: NeonatalRecordWhereInput
    /**
     * Limit how many NeonatalRecords to update.
     */
    limit?: number
  }

  /**
   * NeonatalRecord updateManyAndReturn
   */
  export type NeonatalRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * The data used to update NeonatalRecords.
     */
    data: XOR<NeonatalRecordUpdateManyMutationInput, NeonatalRecordUncheckedUpdateManyInput>
    /**
     * Filter which NeonatalRecords to update
     */
    where?: NeonatalRecordWhereInput
    /**
     * Limit how many NeonatalRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NeonatalRecord upsert
   */
  export type NeonatalRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the NeonatalRecord to update in case it exists.
     */
    where: NeonatalRecordWhereUniqueInput
    /**
     * In case the NeonatalRecord found by the `where` argument doesn't exist, create a new NeonatalRecord with this data.
     */
    create: XOR<NeonatalRecordCreateInput, NeonatalRecordUncheckedCreateInput>
    /**
     * In case the NeonatalRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NeonatalRecordUpdateInput, NeonatalRecordUncheckedUpdateInput>
  }

  /**
   * NeonatalRecord delete
   */
  export type NeonatalRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    /**
     * Filter which NeonatalRecord to delete.
     */
    where: NeonatalRecordWhereUniqueInput
  }

  /**
   * NeonatalRecord deleteMany
   */
  export type NeonatalRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NeonatalRecords to delete
     */
    where?: NeonatalRecordWhereInput
    /**
     * Limit how many NeonatalRecords to delete.
     */
    limit?: number
  }

  /**
   * NeonatalRecord.Patient_NeonatalRecord_motherIdToPatient
   */
  export type NeonatalRecord$Patient_NeonatalRecord_motherIdToPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * NeonatalRecord without action
   */
  export type NeonatalRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    mrn: string | null
    name: string | null
    gender: string | null
    dateOfBirth: Date | null
    contact: string | null
    note: string | null
    lastVisit: Date | null
    nextVisit: Date | null
    medicalHistory: string | null
    userId: string | null
    hospitalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    qrCode: string | null
    onboardingCompleted: boolean | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    mrn: string | null
    name: string | null
    gender: string | null
    dateOfBirth: Date | null
    contact: string | null
    note: string | null
    lastVisit: Date | null
    nextVisit: Date | null
    medicalHistory: string | null
    userId: string | null
    hospitalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    qrCode: string | null
    onboardingCompleted: boolean | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    mrn: number
    name: number
    gender: number
    dateOfBirth: number
    contact: number
    note: number
    lastVisit: number
    nextVisit: number
    medicalHistory: number
    userId: number
    hospitalId: number
    createdAt: number
    updatedAt: number
    qrCode: number
    onboardingCompleted: number
    _all: number
  }


  export type PatientMinAggregateInputType = {
    id?: true
    mrn?: true
    name?: true
    gender?: true
    dateOfBirth?: true
    contact?: true
    note?: true
    lastVisit?: true
    nextVisit?: true
    medicalHistory?: true
    userId?: true
    hospitalId?: true
    createdAt?: true
    updatedAt?: true
    qrCode?: true
    onboardingCompleted?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    mrn?: true
    name?: true
    gender?: true
    dateOfBirth?: true
    contact?: true
    note?: true
    lastVisit?: true
    nextVisit?: true
    medicalHistory?: true
    userId?: true
    hospitalId?: true
    createdAt?: true
    updatedAt?: true
    qrCode?: true
    onboardingCompleted?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    mrn?: true
    name?: true
    gender?: true
    dateOfBirth?: true
    contact?: true
    note?: true
    lastVisit?: true
    nextVisit?: true
    medicalHistory?: true
    userId?: true
    hospitalId?: true
    createdAt?: true
    updatedAt?: true
    qrCode?: true
    onboardingCompleted?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    mrn: string
    name: string
    gender: string | null
    dateOfBirth: Date | null
    contact: string | null
    note: string | null
    lastVisit: Date | null
    nextVisit: Date | null
    medicalHistory: string | null
    userId: string | null
    hospitalId: string | null
    createdAt: Date
    updatedAt: Date
    qrCode: string | null
    onboardingCompleted: boolean
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mrn?: boolean
    name?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    contact?: boolean
    note?: boolean
    lastVisit?: boolean
    nextVisit?: boolean
    medicalHistory?: boolean
    userId?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qrCode?: boolean
    onboardingCompleted?: boolean
    User?: boolean | Patient$UserArgs<ExtArgs>
    Hospital?: boolean | Patient$HospitalArgs<ExtArgs>
    Appointments?: boolean | Patient$AppointmentsArgs<ExtArgs>
    MedicalRecords?: boolean | Patient$MedicalRecordsArgs<ExtArgs>
    PasswordResets?: boolean | Patient$PasswordResetsArgs<ExtArgs>
    Doctors?: boolean | Patient$DoctorsArgs<ExtArgs>
    ProfilePicture?: boolean | Patient$ProfilePictureArgs<ExtArgs>
    Emails?: boolean | Patient$EmailsArgs<ExtArgs>
    Phones?: boolean | Patient$PhonesArgs<ExtArgs>
    SearchIndex?: boolean | Patient$SearchIndexArgs<ExtArgs>
    WidgetPrefs?: boolean | Patient$WidgetPrefsArgs<ExtArgs>
    HospitalAccesses?: boolean | Patient$HospitalAccessesArgs<ExtArgs>
    AntenatalRecords?: boolean | Patient$AntenatalRecordsArgs<ExtArgs>
    NeonatalRecords_AsPatient?: boolean | Patient$NeonatalRecords_AsPatientArgs<ExtArgs>
    NeonatalRecords_AsMother?: boolean | Patient$NeonatalRecords_AsMotherArgs<ExtArgs>
    ReferralsReceived?: boolean | Patient$ReferralsReceivedArgs<ExtArgs>
    AmbulanceDispatches?: boolean | Patient$AmbulanceDispatchesArgs<ExtArgs>
    AmbulanceRequests?: boolean | Patient$AmbulanceRequestsArgs<ExtArgs>
    Wallet?: boolean | Patient$WalletArgs<ExtArgs>
    BillingRecords?: boolean | Patient$BillingRecordsArgs<ExtArgs>
    Conversations?: boolean | Patient$ConversationsArgs<ExtArgs>
    BirthRecord?: boolean | Patient$BirthRecordArgs<ExtArgs>
    MotherOfBirths?: boolean | Patient$MotherOfBirthsArgs<ExtArgs>
    FatherOfBirths?: boolean | Patient$FatherOfBirthsArgs<ExtArgs>
    DeathRecord?: boolean | Patient$DeathRecordArgs<ExtArgs>
    MarketplaceOrders?: boolean | Patient$MarketplaceOrdersArgs<ExtArgs>
    SavedVendors?: boolean | Patient$SavedVendorsArgs<ExtArgs>
    CartItems?: boolean | Patient$CartItemsArgs<ExtArgs>
    Prescription?: boolean | Patient$PrescriptionArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mrn?: boolean
    name?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    contact?: boolean
    note?: boolean
    lastVisit?: boolean
    nextVisit?: boolean
    medicalHistory?: boolean
    userId?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qrCode?: boolean
    onboardingCompleted?: boolean
    User?: boolean | Patient$UserArgs<ExtArgs>
    Hospital?: boolean | Patient$HospitalArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mrn?: boolean
    name?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    contact?: boolean
    note?: boolean
    lastVisit?: boolean
    nextVisit?: boolean
    medicalHistory?: boolean
    userId?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qrCode?: boolean
    onboardingCompleted?: boolean
    User?: boolean | Patient$UserArgs<ExtArgs>
    Hospital?: boolean | Patient$HospitalArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    mrn?: boolean
    name?: boolean
    gender?: boolean
    dateOfBirth?: boolean
    contact?: boolean
    note?: boolean
    lastVisit?: boolean
    nextVisit?: boolean
    medicalHistory?: boolean
    userId?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qrCode?: boolean
    onboardingCompleted?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "mrn" | "name" | "gender" | "dateOfBirth" | "contact" | "note" | "lastVisit" | "nextVisit" | "medicalHistory" | "userId" | "hospitalId" | "createdAt" | "updatedAt" | "qrCode" | "onboardingCompleted", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Patient$UserArgs<ExtArgs>
    Hospital?: boolean | Patient$HospitalArgs<ExtArgs>
    Appointments?: boolean | Patient$AppointmentsArgs<ExtArgs>
    MedicalRecords?: boolean | Patient$MedicalRecordsArgs<ExtArgs>
    PasswordResets?: boolean | Patient$PasswordResetsArgs<ExtArgs>
    Doctors?: boolean | Patient$DoctorsArgs<ExtArgs>
    ProfilePicture?: boolean | Patient$ProfilePictureArgs<ExtArgs>
    Emails?: boolean | Patient$EmailsArgs<ExtArgs>
    Phones?: boolean | Patient$PhonesArgs<ExtArgs>
    SearchIndex?: boolean | Patient$SearchIndexArgs<ExtArgs>
    WidgetPrefs?: boolean | Patient$WidgetPrefsArgs<ExtArgs>
    HospitalAccesses?: boolean | Patient$HospitalAccessesArgs<ExtArgs>
    AntenatalRecords?: boolean | Patient$AntenatalRecordsArgs<ExtArgs>
    NeonatalRecords_AsPatient?: boolean | Patient$NeonatalRecords_AsPatientArgs<ExtArgs>
    NeonatalRecords_AsMother?: boolean | Patient$NeonatalRecords_AsMotherArgs<ExtArgs>
    ReferralsReceived?: boolean | Patient$ReferralsReceivedArgs<ExtArgs>
    AmbulanceDispatches?: boolean | Patient$AmbulanceDispatchesArgs<ExtArgs>
    AmbulanceRequests?: boolean | Patient$AmbulanceRequestsArgs<ExtArgs>
    Wallet?: boolean | Patient$WalletArgs<ExtArgs>
    BillingRecords?: boolean | Patient$BillingRecordsArgs<ExtArgs>
    Conversations?: boolean | Patient$ConversationsArgs<ExtArgs>
    BirthRecord?: boolean | Patient$BirthRecordArgs<ExtArgs>
    MotherOfBirths?: boolean | Patient$MotherOfBirthsArgs<ExtArgs>
    FatherOfBirths?: boolean | Patient$FatherOfBirthsArgs<ExtArgs>
    DeathRecord?: boolean | Patient$DeathRecordArgs<ExtArgs>
    MarketplaceOrders?: boolean | Patient$MarketplaceOrdersArgs<ExtArgs>
    SavedVendors?: boolean | Patient$SavedVendorsArgs<ExtArgs>
    CartItems?: boolean | Patient$CartItemsArgs<ExtArgs>
    Prescription?: boolean | Patient$PrescriptionArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Patient$UserArgs<ExtArgs>
    Hospital?: boolean | Patient$HospitalArgs<ExtArgs>
  }
  export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | Patient$UserArgs<ExtArgs>
    Hospital?: boolean | Patient$HospitalArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
      Hospital: Prisma.$HospitalPayload<ExtArgs> | null
      Appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      MedicalRecords: Prisma.$MedicalRecordPayload<ExtArgs>[]
      PasswordResets: Prisma.$PasswordResetPayload<ExtArgs>[]
      Doctors: Prisma.$UserPayload<ExtArgs>[]
      ProfilePicture: Prisma.$ProfilePicturePayload<ExtArgs> | null
      Emails: Prisma.$PatientEmailPayload<ExtArgs>[]
      Phones: Prisma.$PatientPhonePayload<ExtArgs>[]
      SearchIndex: Prisma.$PatientSearchIndexPayload<ExtArgs> | null
      WidgetPrefs: Prisma.$PatientWidgetPreferencePayload<ExtArgs> | null
      HospitalAccesses: Prisma.$PatientHospitalAccessPayload<ExtArgs>[]
      AntenatalRecords: Prisma.$AntenatalRecordPayload<ExtArgs>[]
      NeonatalRecords_AsPatient: Prisma.$NeonatalRecordPayload<ExtArgs>[]
      NeonatalRecords_AsMother: Prisma.$NeonatalRecordPayload<ExtArgs>[]
      ReferralsReceived: Prisma.$ReferralPayload<ExtArgs>[]
      AmbulanceDispatches: Prisma.$AmbulanceDispatchPayload<ExtArgs>[]
      AmbulanceRequests: Prisma.$AmbulanceRequestPayload<ExtArgs>[]
      Wallet: Prisma.$WalletPayload<ExtArgs> | null
      BillingRecords: Prisma.$BillingPayload<ExtArgs>[]
      Conversations: Prisma.$ConversationPayload<ExtArgs>[]
      BirthRecord: Prisma.$BirthRecordPayload<ExtArgs> | null
      MotherOfBirths: Prisma.$BirthRecordPayload<ExtArgs>[]
      FatherOfBirths: Prisma.$BirthRecordPayload<ExtArgs>[]
      DeathRecord: Prisma.$DeathRecordPayload<ExtArgs> | null
      MarketplaceOrders: Prisma.$MarketplaceOrderPayload<ExtArgs>[]
      SavedVendors: Prisma.$SavedVendorPayload<ExtArgs>[]
      CartItems: Prisma.$CartItemPayload<ExtArgs>[]
      Prescription: Prisma.$PrescriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mrn: string
      name: string
      gender: string | null
      dateOfBirth: Date | null
      contact: string | null
      note: string | null
      lastVisit: Date | null
      nextVisit: Date | null
      medicalHistory: string | null
      userId: string | null
      hospitalId: string | null
      createdAt: Date
      updatedAt: Date
      qrCode: string | null
      onboardingCompleted: boolean
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends Patient$UserArgs<ExtArgs> = {}>(args?: Subset<T, Patient$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Hospital<T extends Patient$HospitalArgs<ExtArgs> = {}>(args?: Subset<T, Patient$HospitalArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Appointments<T extends Patient$AppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$AppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MedicalRecords<T extends Patient$MedicalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$MedicalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PasswordResets<T extends Patient$PasswordResetsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$PasswordResetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Doctors<T extends Patient$DoctorsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$DoctorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProfilePicture<T extends Patient$ProfilePictureArgs<ExtArgs> = {}>(args?: Subset<T, Patient$ProfilePictureArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Emails<T extends Patient$EmailsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$EmailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Phones<T extends Patient$PhonesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$PhonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    SearchIndex<T extends Patient$SearchIndexArgs<ExtArgs> = {}>(args?: Subset<T, Patient$SearchIndexArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    WidgetPrefs<T extends Patient$WidgetPrefsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$WidgetPrefsArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    HospitalAccesses<T extends Patient$HospitalAccessesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$HospitalAccessesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AntenatalRecords<T extends Patient$AntenatalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$AntenatalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    NeonatalRecords_AsPatient<T extends Patient$NeonatalRecords_AsPatientArgs<ExtArgs> = {}>(args?: Subset<T, Patient$NeonatalRecords_AsPatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    NeonatalRecords_AsMother<T extends Patient$NeonatalRecords_AsMotherArgs<ExtArgs> = {}>(args?: Subset<T, Patient$NeonatalRecords_AsMotherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ReferralsReceived<T extends Patient$ReferralsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, Patient$ReferralsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AmbulanceDispatches<T extends Patient$AmbulanceDispatchesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$AmbulanceDispatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AmbulanceRequests<T extends Patient$AmbulanceRequestsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$AmbulanceRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Wallet<T extends Patient$WalletArgs<ExtArgs> = {}>(args?: Subset<T, Patient$WalletArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    BillingRecords<T extends Patient$BillingRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$BillingRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Conversations<T extends Patient$ConversationsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$ConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BirthRecord<T extends Patient$BirthRecordArgs<ExtArgs> = {}>(args?: Subset<T, Patient$BirthRecordArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    MotherOfBirths<T extends Patient$MotherOfBirthsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$MotherOfBirthsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FatherOfBirths<T extends Patient$FatherOfBirthsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$FatherOfBirthsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DeathRecord<T extends Patient$DeathRecordArgs<ExtArgs> = {}>(args?: Subset<T, Patient$DeathRecordArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    MarketplaceOrders<T extends Patient$MarketplaceOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Patient$MarketplaceOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    SavedVendors<T extends Patient$SavedVendorsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$SavedVendorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CartItems<T extends Patient$CartItemsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$CartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Prescription<T extends Patient$PrescriptionArgs<ExtArgs> = {}>(args?: Subset<T, Patient$PrescriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly mrn: FieldRef<"Patient", 'String'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly gender: FieldRef<"Patient", 'String'>
    readonly dateOfBirth: FieldRef<"Patient", 'DateTime'>
    readonly contact: FieldRef<"Patient", 'String'>
    readonly note: FieldRef<"Patient", 'String'>
    readonly lastVisit: FieldRef<"Patient", 'DateTime'>
    readonly nextVisit: FieldRef<"Patient", 'DateTime'>
    readonly medicalHistory: FieldRef<"Patient", 'String'>
    readonly userId: FieldRef<"Patient", 'String'>
    readonly hospitalId: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
    readonly qrCode: FieldRef<"Patient", 'String'>
    readonly onboardingCompleted: FieldRef<"Patient", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient updateManyAndReturn
   */
  export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.User
   */
  export type Patient$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Patient.Hospital
   */
  export type Patient$HospitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    where?: HospitalWhereInput
  }

  /**
   * Patient.Appointments
   */
  export type Patient$AppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Patient.MedicalRecords
   */
  export type Patient$MedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * Patient.PasswordResets
   */
  export type Patient$PasswordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    cursor?: PasswordResetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * Patient.Doctors
   */
  export type Patient$DoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Patient.ProfilePicture
   */
  export type Patient$ProfilePictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    where?: ProfilePictureWhereInput
  }

  /**
   * Patient.Emails
   */
  export type Patient$EmailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    where?: PatientEmailWhereInput
    orderBy?: PatientEmailOrderByWithRelationInput | PatientEmailOrderByWithRelationInput[]
    cursor?: PatientEmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientEmailScalarFieldEnum | PatientEmailScalarFieldEnum[]
  }

  /**
   * Patient.Phones
   */
  export type Patient$PhonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    where?: PatientPhoneWhereInput
    orderBy?: PatientPhoneOrderByWithRelationInput | PatientPhoneOrderByWithRelationInput[]
    cursor?: PatientPhoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientPhoneScalarFieldEnum | PatientPhoneScalarFieldEnum[]
  }

  /**
   * Patient.SearchIndex
   */
  export type Patient$SearchIndexArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    where?: PatientSearchIndexWhereInput
  }

  /**
   * Patient.WidgetPrefs
   */
  export type Patient$WidgetPrefsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    where?: PatientWidgetPreferenceWhereInput
  }

  /**
   * Patient.HospitalAccesses
   */
  export type Patient$HospitalAccessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    where?: PatientHospitalAccessWhereInput
    orderBy?: PatientHospitalAccessOrderByWithRelationInput | PatientHospitalAccessOrderByWithRelationInput[]
    cursor?: PatientHospitalAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHospitalAccessScalarFieldEnum | PatientHospitalAccessScalarFieldEnum[]
  }

  /**
   * Patient.AntenatalRecords
   */
  export type Patient$AntenatalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    where?: AntenatalRecordWhereInput
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    cursor?: AntenatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AntenatalRecordScalarFieldEnum | AntenatalRecordScalarFieldEnum[]
  }

  /**
   * Patient.NeonatalRecords_AsPatient
   */
  export type Patient$NeonatalRecords_AsPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    where?: NeonatalRecordWhereInput
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    cursor?: NeonatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * Patient.NeonatalRecords_AsMother
   */
  export type Patient$NeonatalRecords_AsMotherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    where?: NeonatalRecordWhereInput
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    cursor?: NeonatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * Patient.ReferralsReceived
   */
  export type Patient$ReferralsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    cursor?: ReferralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Patient.AmbulanceDispatches
   */
  export type Patient$AmbulanceDispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    where?: AmbulanceDispatchWhereInput
    orderBy?: AmbulanceDispatchOrderByWithRelationInput | AmbulanceDispatchOrderByWithRelationInput[]
    cursor?: AmbulanceDispatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbulanceDispatchScalarFieldEnum | AmbulanceDispatchScalarFieldEnum[]
  }

  /**
   * Patient.AmbulanceRequests
   */
  export type Patient$AmbulanceRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    where?: AmbulanceRequestWhereInput
    orderBy?: AmbulanceRequestOrderByWithRelationInput | AmbulanceRequestOrderByWithRelationInput[]
    cursor?: AmbulanceRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbulanceRequestScalarFieldEnum | AmbulanceRequestScalarFieldEnum[]
  }

  /**
   * Patient.Wallet
   */
  export type Patient$WalletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
  }

  /**
   * Patient.BillingRecords
   */
  export type Patient$BillingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    where?: BillingWhereInput
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    cursor?: BillingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Patient.Conversations
   */
  export type Patient$ConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Patient.BirthRecord
   */
  export type Patient$BirthRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    where?: BirthRecordWhereInput
  }

  /**
   * Patient.MotherOfBirths
   */
  export type Patient$MotherOfBirthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    where?: BirthRecordWhereInput
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    cursor?: BirthRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BirthRecordScalarFieldEnum | BirthRecordScalarFieldEnum[]
  }

  /**
   * Patient.FatherOfBirths
   */
  export type Patient$FatherOfBirthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    where?: BirthRecordWhereInput
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    cursor?: BirthRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BirthRecordScalarFieldEnum | BirthRecordScalarFieldEnum[]
  }

  /**
   * Patient.DeathRecord
   */
  export type Patient$DeathRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    where?: DeathRecordWhereInput
  }

  /**
   * Patient.MarketplaceOrders
   */
  export type Patient$MarketplaceOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    where?: MarketplaceOrderWhereInput
    orderBy?: MarketplaceOrderOrderByWithRelationInput | MarketplaceOrderOrderByWithRelationInput[]
    cursor?: MarketplaceOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarketplaceOrderScalarFieldEnum | MarketplaceOrderScalarFieldEnum[]
  }

  /**
   * Patient.SavedVendors
   */
  export type Patient$SavedVendorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    where?: SavedVendorWhereInput
    orderBy?: SavedVendorOrderByWithRelationInput | SavedVendorOrderByWithRelationInput[]
    cursor?: SavedVendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedVendorScalarFieldEnum | SavedVendorScalarFieldEnum[]
  }

  /**
   * Patient.CartItems
   */
  export type Patient$CartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Patient.Prescription
   */
  export type Patient$PrescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    cursor?: PrescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    phone: string | null
    photo: string | null
    isSuperAdmin: boolean | null
    isHospitalAdmin: boolean | null
    hospitalId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    phone: string | null
    photo: string | null
    isSuperAdmin: boolean | null
    isHospitalAdmin: boolean | null
    hospitalId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    phone: number
    photo: number
    isSuperAdmin: number
    isHospitalAdmin: number
    specialties: number
    hospitalId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    phone?: true
    photo?: true
    isSuperAdmin?: true
    isHospitalAdmin?: true
    hospitalId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    phone?: true
    photo?: true
    isSuperAdmin?: true
    isHospitalAdmin?: true
    hospitalId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    phone?: true
    photo?: true
    isSuperAdmin?: true
    isHospitalAdmin?: true
    specialties?: true
    hospitalId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    phone: string | null
    photo: string | null
    isSuperAdmin: boolean
    isHospitalAdmin: boolean
    specialties: string[]
    hospitalId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phone?: boolean
    photo?: boolean
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: boolean
    hospitalId?: boolean
    patientProfile?: boolean | User$patientProfileArgs<ExtArgs>
    Hospital?: boolean | User$HospitalArgs<ExtArgs>
    NeonatalRecords_updated?: boolean | User$NeonatalRecords_updatedArgs<ExtArgs>
    AntenatalRecords_created?: boolean | User$AntenatalRecords_createdArgs<ExtArgs>
    AntenatalRecords_updated?: boolean | User$AntenatalRecords_updatedArgs<ExtArgs>
    Appointments?: boolean | User$AppointmentsArgs<ExtArgs>
    MedicalRecords?: boolean | User$MedicalRecordsArgs<ExtArgs>
    NeonatalRecords_created?: boolean | User$NeonatalRecords_createdArgs<ExtArgs>
    PatientAccess_grantedBy?: boolean | User$PatientAccess_grantedByArgs<ExtArgs>
    DoctorPatients?: boolean | User$DoctorPatientsArgs<ExtArgs>
    ProfilePicture?: boolean | User$ProfilePictureArgs<ExtArgs>
    PasswordResets?: boolean | User$PasswordResetsArgs<ExtArgs>
    StaffProfile?: boolean | User$StaffProfileArgs<ExtArgs>
    DepartmentMemberships?: boolean | User$DepartmentMembershipsArgs<ExtArgs>
    Availability?: boolean | User$AvailabilityArgs<ExtArgs>
    ReferralsSent?: boolean | User$ReferralsSentArgs<ExtArgs>
    ReferralsReceived?: boolean | User$ReferralsReceivedArgs<ExtArgs>
    Conversations?: boolean | User$ConversationsArgs<ExtArgs>
    MessagesSent?: boolean | User$MessagesSentArgs<ExtArgs>
    BirthRecordsRegistered?: boolean | User$BirthRecordsRegisteredArgs<ExtArgs>
    DeathRecordsRegistered?: boolean | User$DeathRecordsRegisteredArgs<ExtArgs>
    Prescriptions?: boolean | User$PrescriptionsArgs<ExtArgs>
    SecurityAuditLog?: boolean | User$SecurityAuditLogArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phone?: boolean
    photo?: boolean
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: boolean
    hospitalId?: boolean
    Hospital?: boolean | User$HospitalArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phone?: boolean
    photo?: boolean
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: boolean
    hospitalId?: boolean
    Hospital?: boolean | User$HospitalArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phone?: boolean
    photo?: boolean
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: boolean
    hospitalId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "role" | "createdAt" | "updatedAt" | "phone" | "photo" | "isSuperAdmin" | "isHospitalAdmin" | "specialties" | "hospitalId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientProfile?: boolean | User$patientProfileArgs<ExtArgs>
    Hospital?: boolean | User$HospitalArgs<ExtArgs>
    NeonatalRecords_updated?: boolean | User$NeonatalRecords_updatedArgs<ExtArgs>
    AntenatalRecords_created?: boolean | User$AntenatalRecords_createdArgs<ExtArgs>
    AntenatalRecords_updated?: boolean | User$AntenatalRecords_updatedArgs<ExtArgs>
    Appointments?: boolean | User$AppointmentsArgs<ExtArgs>
    MedicalRecords?: boolean | User$MedicalRecordsArgs<ExtArgs>
    NeonatalRecords_created?: boolean | User$NeonatalRecords_createdArgs<ExtArgs>
    PatientAccess_grantedBy?: boolean | User$PatientAccess_grantedByArgs<ExtArgs>
    DoctorPatients?: boolean | User$DoctorPatientsArgs<ExtArgs>
    ProfilePicture?: boolean | User$ProfilePictureArgs<ExtArgs>
    PasswordResets?: boolean | User$PasswordResetsArgs<ExtArgs>
    StaffProfile?: boolean | User$StaffProfileArgs<ExtArgs>
    DepartmentMemberships?: boolean | User$DepartmentMembershipsArgs<ExtArgs>
    Availability?: boolean | User$AvailabilityArgs<ExtArgs>
    ReferralsSent?: boolean | User$ReferralsSentArgs<ExtArgs>
    ReferralsReceived?: boolean | User$ReferralsReceivedArgs<ExtArgs>
    Conversations?: boolean | User$ConversationsArgs<ExtArgs>
    MessagesSent?: boolean | User$MessagesSentArgs<ExtArgs>
    BirthRecordsRegistered?: boolean | User$BirthRecordsRegisteredArgs<ExtArgs>
    DeathRecordsRegistered?: boolean | User$DeathRecordsRegisteredArgs<ExtArgs>
    Prescriptions?: boolean | User$PrescriptionsArgs<ExtArgs>
    SecurityAuditLog?: boolean | User$SecurityAuditLogArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | User$HospitalArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Hospital?: boolean | User$HospitalArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      patientProfile: Prisma.$PatientPayload<ExtArgs> | null
      Hospital: Prisma.$HospitalPayload<ExtArgs> | null
      NeonatalRecords_updated: Prisma.$NeonatalRecordPayload<ExtArgs>[]
      AntenatalRecords_created: Prisma.$AntenatalRecordPayload<ExtArgs>[]
      AntenatalRecords_updated: Prisma.$AntenatalRecordPayload<ExtArgs>[]
      Appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      MedicalRecords: Prisma.$MedicalRecordPayload<ExtArgs>[]
      NeonatalRecords_created: Prisma.$NeonatalRecordPayload<ExtArgs>[]
      PatientAccess_grantedBy: Prisma.$PatientHospitalAccessPayload<ExtArgs>[]
      DoctorPatients: Prisma.$PatientPayload<ExtArgs>[]
      ProfilePicture: Prisma.$ProfilePicturePayload<ExtArgs> | null
      PasswordResets: Prisma.$PasswordResetPayload<ExtArgs>[]
      StaffProfile: Prisma.$StaffProfilePayload<ExtArgs> | null
      DepartmentMemberships: Prisma.$DepartmentMembershipPayload<ExtArgs>[]
      Availability: Prisma.$DoctorAvailabilityPayload<ExtArgs> | null
      ReferralsSent: Prisma.$ReferralPayload<ExtArgs>[]
      ReferralsReceived: Prisma.$ReferralPayload<ExtArgs>[]
      Conversations: Prisma.$ConversationPayload<ExtArgs>[]
      MessagesSent: Prisma.$MessagePayload<ExtArgs>[]
      BirthRecordsRegistered: Prisma.$BirthRecordPayload<ExtArgs>[]
      DeathRecordsRegistered: Prisma.$DeathRecordPayload<ExtArgs>[]
      Prescriptions: Prisma.$PrescriptionPayload<ExtArgs>[]
      SecurityAuditLog: Prisma.$SecurityAuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
      phone: string | null
      photo: string | null
      isSuperAdmin: boolean
      isHospitalAdmin: boolean
      specialties: string[]
      hospitalId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientProfile<T extends User$patientProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$patientProfileArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Hospital<T extends User$HospitalArgs<ExtArgs> = {}>(args?: Subset<T, User$HospitalArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    NeonatalRecords_updated<T extends User$NeonatalRecords_updatedArgs<ExtArgs> = {}>(args?: Subset<T, User$NeonatalRecords_updatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AntenatalRecords_created<T extends User$AntenatalRecords_createdArgs<ExtArgs> = {}>(args?: Subset<T, User$AntenatalRecords_createdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    AntenatalRecords_updated<T extends User$AntenatalRecords_updatedArgs<ExtArgs> = {}>(args?: Subset<T, User$AntenatalRecords_updatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AntenatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Appointments<T extends User$AppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$AppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MedicalRecords<T extends User$MedicalRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$MedicalRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    NeonatalRecords_created<T extends User$NeonatalRecords_createdArgs<ExtArgs> = {}>(args?: Subset<T, User$NeonatalRecords_createdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeonatalRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    PatientAccess_grantedBy<T extends User$PatientAccess_grantedByArgs<ExtArgs> = {}>(args?: Subset<T, User$PatientAccess_grantedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DoctorPatients<T extends User$DoctorPatientsArgs<ExtArgs> = {}>(args?: Subset<T, User$DoctorPatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ProfilePicture<T extends User$ProfilePictureArgs<ExtArgs> = {}>(args?: Subset<T, User$ProfilePictureArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    PasswordResets<T extends User$PasswordResetsArgs<ExtArgs> = {}>(args?: Subset<T, User$PasswordResetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StaffProfile<T extends User$StaffProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$StaffProfileArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    DepartmentMemberships<T extends User$DepartmentMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$DepartmentMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Availability<T extends User$AvailabilityArgs<ExtArgs> = {}>(args?: Subset<T, User$AvailabilityArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ReferralsSent<T extends User$ReferralsSentArgs<ExtArgs> = {}>(args?: Subset<T, User$ReferralsSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ReferralsReceived<T extends User$ReferralsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$ReferralsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Conversations<T extends User$ConversationsArgs<ExtArgs> = {}>(args?: Subset<T, User$ConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    MessagesSent<T extends User$MessagesSentArgs<ExtArgs> = {}>(args?: Subset<T, User$MessagesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    BirthRecordsRegistered<T extends User$BirthRecordsRegisteredArgs<ExtArgs> = {}>(args?: Subset<T, User$BirthRecordsRegisteredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    DeathRecordsRegistered<T extends User$DeathRecordsRegisteredArgs<ExtArgs> = {}>(args?: Subset<T, User$DeathRecordsRegisteredArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Prescriptions<T extends User$PrescriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$PrescriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    SecurityAuditLog<T extends User$SecurityAuditLogArgs<ExtArgs> = {}>(args?: Subset<T, User$SecurityAuditLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly phone: FieldRef<"User", 'String'>
    readonly photo: FieldRef<"User", 'String'>
    readonly isSuperAdmin: FieldRef<"User", 'Boolean'>
    readonly isHospitalAdmin: FieldRef<"User", 'Boolean'>
    readonly specialties: FieldRef<"User", 'String[]'>
    readonly hospitalId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.patientProfile
   */
  export type User$patientProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * User.Hospital
   */
  export type User$HospitalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hospital
     */
    select?: HospitalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Hospital
     */
    omit?: HospitalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HospitalInclude<ExtArgs> | null
    where?: HospitalWhereInput
  }

  /**
   * User.NeonatalRecords_updated
   */
  export type User$NeonatalRecords_updatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    where?: NeonatalRecordWhereInput
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    cursor?: NeonatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * User.AntenatalRecords_created
   */
  export type User$AntenatalRecords_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    where?: AntenatalRecordWhereInput
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    cursor?: AntenatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AntenatalRecordScalarFieldEnum | AntenatalRecordScalarFieldEnum[]
  }

  /**
   * User.AntenatalRecords_updated
   */
  export type User$AntenatalRecords_updatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AntenatalRecord
     */
    select?: AntenatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AntenatalRecord
     */
    omit?: AntenatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AntenatalRecordInclude<ExtArgs> | null
    where?: AntenatalRecordWhereInput
    orderBy?: AntenatalRecordOrderByWithRelationInput | AntenatalRecordOrderByWithRelationInput[]
    cursor?: AntenatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AntenatalRecordScalarFieldEnum | AntenatalRecordScalarFieldEnum[]
  }

  /**
   * User.Appointments
   */
  export type User$AppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.MedicalRecords
   */
  export type User$MedicalRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalRecord
     */
    omit?: MedicalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: MedicalRecordOrderByWithRelationInput | MedicalRecordOrderByWithRelationInput[]
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalRecordScalarFieldEnum | MedicalRecordScalarFieldEnum[]
  }

  /**
   * User.NeonatalRecords_created
   */
  export type User$NeonatalRecords_createdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeonatalRecord
     */
    select?: NeonatalRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NeonatalRecord
     */
    omit?: NeonatalRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeonatalRecordInclude<ExtArgs> | null
    where?: NeonatalRecordWhereInput
    orderBy?: NeonatalRecordOrderByWithRelationInput | NeonatalRecordOrderByWithRelationInput[]
    cursor?: NeonatalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NeonatalRecordScalarFieldEnum | NeonatalRecordScalarFieldEnum[]
  }

  /**
   * User.PatientAccess_grantedBy
   */
  export type User$PatientAccess_grantedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    where?: PatientHospitalAccessWhereInput
    orderBy?: PatientHospitalAccessOrderByWithRelationInput | PatientHospitalAccessOrderByWithRelationInput[]
    cursor?: PatientHospitalAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHospitalAccessScalarFieldEnum | PatientHospitalAccessScalarFieldEnum[]
  }

  /**
   * User.DoctorPatients
   */
  export type User$DoctorPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.ProfilePicture
   */
  export type User$ProfilePictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    where?: ProfilePictureWhereInput
  }

  /**
   * User.PasswordResets
   */
  export type User$PasswordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    cursor?: PasswordResetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * User.StaffProfile
   */
  export type User$StaffProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    where?: StaffProfileWhereInput
  }

  /**
   * User.DepartmentMemberships
   */
  export type User$DepartmentMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    where?: DepartmentMembershipWhereInput
    orderBy?: DepartmentMembershipOrderByWithRelationInput | DepartmentMembershipOrderByWithRelationInput[]
    cursor?: DepartmentMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentMembershipScalarFieldEnum | DepartmentMembershipScalarFieldEnum[]
  }

  /**
   * User.Availability
   */
  export type User$AvailabilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    where?: DoctorAvailabilityWhereInput
  }

  /**
   * User.ReferralsSent
   */
  export type User$ReferralsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    cursor?: ReferralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * User.ReferralsReceived
   */
  export type User$ReferralsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    cursor?: ReferralWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * User.Conversations
   */
  export type User$ConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    cursor?: ConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * User.MessagesSent
   */
  export type User$MessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.BirthRecordsRegistered
   */
  export type User$BirthRecordsRegisteredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    where?: BirthRecordWhereInput
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    cursor?: BirthRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BirthRecordScalarFieldEnum | BirthRecordScalarFieldEnum[]
  }

  /**
   * User.DeathRecordsRegistered
   */
  export type User$DeathRecordsRegisteredArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    where?: DeathRecordWhereInput
    orderBy?: DeathRecordOrderByWithRelationInput | DeathRecordOrderByWithRelationInput[]
    cursor?: DeathRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeathRecordScalarFieldEnum | DeathRecordScalarFieldEnum[]
  }

  /**
   * User.Prescriptions
   */
  export type User$PrescriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    cursor?: PrescriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * User.SecurityAuditLog
   */
  export type User$SecurityAuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    where?: SecurityAuditLogWhereInput
    orderBy?: SecurityAuditLogOrderByWithRelationInput | SecurityAuditLogOrderByWithRelationInput[]
    cursor?: SecurityAuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SecurityAuditLogScalarFieldEnum | SecurityAuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model PasswordReset
   */

  export type AggregatePasswordReset = {
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  export type PasswordResetMinAggregateOutputType = {
    id: string | null
    token: string | null
    email: string | null
    expiresAt: Date | null
    usedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
    userId: string | null
  }

  export type PasswordResetMaxAggregateOutputType = {
    id: string | null
    token: string | null
    email: string | null
    expiresAt: Date | null
    usedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
    userId: string | null
  }

  export type PasswordResetCountAggregateOutputType = {
    id: number
    token: number
    email: number
    expiresAt: number
    usedAt: number
    createdAt: number
    updatedAt: number
    patientId: number
    userId: number
    _all: number
  }


  export type PasswordResetMinAggregateInputType = {
    id?: true
    token?: true
    email?: true
    expiresAt?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    userId?: true
  }

  export type PasswordResetMaxAggregateInputType = {
    id?: true
    token?: true
    email?: true
    expiresAt?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    userId?: true
  }

  export type PasswordResetCountAggregateInputType = {
    id?: true
    token?: true
    email?: true
    expiresAt?: true
    usedAt?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    userId?: true
    _all?: true
  }

  export type PasswordResetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordReset to aggregate.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResets
    **/
    _count?: true | PasswordResetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetMaxAggregateInputType
  }

  export type GetPasswordResetAggregateType<T extends PasswordResetAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordReset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordReset[P]>
      : GetScalarType<T[P], AggregatePasswordReset[P]>
  }




  export type PasswordResetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithAggregationInput | PasswordResetOrderByWithAggregationInput[]
    by: PasswordResetScalarFieldEnum[] | PasswordResetScalarFieldEnum
    having?: PasswordResetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetCountAggregateInputType | true
    _min?: PasswordResetMinAggregateInputType
    _max?: PasswordResetMaxAggregateInputType
  }

  export type PasswordResetGroupByOutputType = {
    id: string
    token: string
    email: string | null
    expiresAt: Date
    usedAt: Date | null
    createdAt: Date
    updatedAt: Date
    patientId: string | null
    userId: string | null
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  type GetPasswordResetGroupByPayload<T extends PasswordResetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    email?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    userId?: boolean
    patient?: boolean | PasswordReset$patientArgs<ExtArgs>
    User?: boolean | PasswordReset$UserArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    email?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    userId?: boolean
    patient?: boolean | PasswordReset$patientArgs<ExtArgs>
    User?: boolean | PasswordReset$UserArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    email?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    userId?: boolean
    patient?: boolean | PasswordReset$patientArgs<ExtArgs>
    User?: boolean | PasswordReset$UserArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectScalar = {
    id?: boolean
    token?: boolean
    email?: boolean
    expiresAt?: boolean
    usedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    userId?: boolean
  }

  export type PasswordResetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "email" | "expiresAt" | "usedAt" | "createdAt" | "updatedAt" | "patientId" | "userId", ExtArgs["result"]["passwordReset"]>
  export type PasswordResetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PasswordReset$patientArgs<ExtArgs>
    User?: boolean | PasswordReset$UserArgs<ExtArgs>
  }
  export type PasswordResetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PasswordReset$patientArgs<ExtArgs>
    User?: boolean | PasswordReset$UserArgs<ExtArgs>
  }
  export type PasswordResetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PasswordReset$patientArgs<ExtArgs>
    User?: boolean | PasswordReset$UserArgs<ExtArgs>
  }

  export type $PasswordResetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordReset"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      email: string | null
      expiresAt: Date
      usedAt: Date | null
      createdAt: Date
      updatedAt: Date
      patientId: string | null
      userId: string | null
    }, ExtArgs["result"]["passwordReset"]>
    composites: {}
  }

  type PasswordResetGetPayload<S extends boolean | null | undefined | PasswordResetDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetPayload, S>

  type PasswordResetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetCountAggregateInputType | true
    }

  export interface PasswordResetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordReset'], meta: { name: 'PasswordReset' } }
    /**
     * Find zero or one PasswordReset that matches the filter.
     * @param {PasswordResetFindUniqueArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetFindUniqueArgs>(args: SelectSubset<T, PasswordResetFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordReset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetFindUniqueOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordReset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetFindFirstArgs>(args?: SelectSubset<T, PasswordResetFindFirstArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordReset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetFindManyArgs>(args?: SelectSubset<T, PasswordResetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordReset.
     * @param {PasswordResetCreateArgs} args - Arguments to create a PasswordReset.
     * @example
     * // Create one PasswordReset
     * const PasswordReset = await prisma.passwordReset.create({
     *   data: {
     *     // ... data to create a PasswordReset
     *   }
     * })
     * 
     */
    create<T extends PasswordResetCreateArgs>(args: SelectSubset<T, PasswordResetCreateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordResets.
     * @param {PasswordResetCreateManyArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetCreateManyArgs>(args?: SelectSubset<T, PasswordResetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResets and returns the data saved in the database.
     * @param {PasswordResetCreateManyAndReturnArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResets and only return the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PasswordReset.
     * @param {PasswordResetDeleteArgs} args - Arguments to delete one PasswordReset.
     * @example
     * // Delete one PasswordReset
     * const PasswordReset = await prisma.passwordReset.delete({
     *   where: {
     *     // ... filter to delete one PasswordReset
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetDeleteArgs>(args: SelectSubset<T, PasswordResetDeleteArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordReset.
     * @param {PasswordResetUpdateArgs} args - Arguments to update one PasswordReset.
     * @example
     * // Update one PasswordReset
     * const passwordReset = await prisma.passwordReset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetUpdateArgs>(args: SelectSubset<T, PasswordResetUpdateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordResets.
     * @param {PasswordResetDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordReset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetDeleteManyArgs>(args?: SelectSubset<T, PasswordResetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetUpdateManyArgs>(args: SelectSubset<T, PasswordResetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets and returns the data updated in the database.
     * @param {PasswordResetUpdateManyAndReturnArgs} args - Arguments to update many PasswordResets.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResets and only return the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PasswordReset.
     * @param {PasswordResetUpsertArgs} args - Arguments to update or create a PasswordReset.
     * @example
     * // Update or create a PasswordReset
     * const passwordReset = await prisma.passwordReset.upsert({
     *   create: {
     *     // ... data to create a PasswordReset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordReset we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetUpsertArgs>(args: SelectSubset<T, PasswordResetUpsertArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordReset.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetCountArgs>(
      args?: Subset<T, PasswordResetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetAggregateArgs>(args: Subset<T, PasswordResetAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetAggregateType<T>>

    /**
     * Group by PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordReset model
   */
  readonly fields: PasswordResetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordReset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PasswordReset$patientArgs<ExtArgs> = {}>(args?: Subset<T, PasswordReset$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    User<T extends PasswordReset$UserArgs<ExtArgs> = {}>(args?: Subset<T, PasswordReset$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordReset model
   */
  interface PasswordResetFieldRefs {
    readonly id: FieldRef<"PasswordReset", 'String'>
    readonly token: FieldRef<"PasswordReset", 'String'>
    readonly email: FieldRef<"PasswordReset", 'String'>
    readonly expiresAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly usedAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly createdAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly updatedAt: FieldRef<"PasswordReset", 'DateTime'>
    readonly patientId: FieldRef<"PasswordReset", 'String'>
    readonly userId: FieldRef<"PasswordReset", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PasswordReset findUnique
   */
  export type PasswordResetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findUniqueOrThrow
   */
  export type PasswordResetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findFirst
   */
  export type PasswordResetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findFirstOrThrow
   */
  export type PasswordResetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findMany
   */
  export type PasswordResetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResets to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset create
   */
  export type PasswordResetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordReset.
     */
    data: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
  }

  /**
   * PasswordReset createMany
   */
  export type PasswordResetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordReset createManyAndReturn
   */
  export type PasswordResetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordReset update
   */
  export type PasswordResetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordReset.
     */
    data: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
    /**
     * Choose, which PasswordReset to update.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset updateMany
   */
  export type PasswordResetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to update.
     */
    limit?: number
  }

  /**
   * PasswordReset updateManyAndReturn
   */
  export type PasswordResetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordReset upsert
   */
  export type PasswordResetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordReset to update in case it exists.
     */
    where: PasswordResetWhereUniqueInput
    /**
     * In case the PasswordReset found by the `where` argument doesn't exist, create a new PasswordReset with this data.
     */
    create: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
    /**
     * In case the PasswordReset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
  }

  /**
   * PasswordReset delete
   */
  export type PasswordResetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter which PasswordReset to delete.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset deleteMany
   */
  export type PasswordResetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResets to delete
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to delete.
     */
    limit?: number
  }

  /**
   * PasswordReset.patient
   */
  export type PasswordReset$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * PasswordReset.User
   */
  export type PasswordReset$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * PasswordReset without action
   */
  export type PasswordResetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
  }


  /**
   * Model SecurityAuditLog
   */

  export type AggregateSecurityAuditLog = {
    _count: SecurityAuditLogCountAggregateOutputType | null
    _min: SecurityAuditLogMinAggregateOutputType | null
    _max: SecurityAuditLogMaxAggregateOutputType | null
  }

  export type SecurityAuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
    requestPath: string | null
    success: boolean | null
  }

  export type SecurityAuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
    requestPath: string | null
    success: boolean | null
  }

  export type SecurityAuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    details: number
    ipAddress: number
    userAgent: number
    createdAt: number
    updatedAt: number
    requestPath: number
    success: number
    _all: number
  }


  export type SecurityAuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    requestPath?: true
    success?: true
  }

  export type SecurityAuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    requestPath?: true
    success?: true
  }

  export type SecurityAuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    requestPath?: true
    success?: true
    _all?: true
  }

  export type SecurityAuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityAuditLog to aggregate.
     */
    where?: SecurityAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAuditLogs to fetch.
     */
    orderBy?: SecurityAuditLogOrderByWithRelationInput | SecurityAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SecurityAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SecurityAuditLogs
    **/
    _count?: true | SecurityAuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SecurityAuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SecurityAuditLogMaxAggregateInputType
  }

  export type GetSecurityAuditLogAggregateType<T extends SecurityAuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSecurityAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSecurityAuditLog[P]>
      : GetScalarType<T[P], AggregateSecurityAuditLog[P]>
  }




  export type SecurityAuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityAuditLogWhereInput
    orderBy?: SecurityAuditLogOrderByWithAggregationInput | SecurityAuditLogOrderByWithAggregationInput[]
    by: SecurityAuditLogScalarFieldEnum[] | SecurityAuditLogScalarFieldEnum
    having?: SecurityAuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SecurityAuditLogCountAggregateInputType | true
    _min?: SecurityAuditLogMinAggregateInputType
    _max?: SecurityAuditLogMaxAggregateInputType
  }

  export type SecurityAuditLogGroupByOutputType = {
    id: string
    userId: string
    action: string
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    updatedAt: Date
    requestPath: string | null
    success: boolean
    _count: SecurityAuditLogCountAggregateOutputType | null
    _min: SecurityAuditLogMinAggregateOutputType | null
    _max: SecurityAuditLogMaxAggregateOutputType | null
  }

  type GetSecurityAuditLogGroupByPayload<T extends SecurityAuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SecurityAuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SecurityAuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SecurityAuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], SecurityAuditLogGroupByOutputType[P]>
        }
      >
    >


  export type SecurityAuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestPath?: boolean
    success?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securityAuditLog"]>

  export type SecurityAuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestPath?: boolean
    success?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securityAuditLog"]>

  export type SecurityAuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestPath?: boolean
    success?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["securityAuditLog"]>

  export type SecurityAuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestPath?: boolean
    success?: boolean
  }

  export type SecurityAuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "details" | "ipAddress" | "userAgent" | "createdAt" | "updatedAt" | "requestPath" | "success", ExtArgs["result"]["securityAuditLog"]>
  export type SecurityAuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SecurityAuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SecurityAuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SecurityAuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SecurityAuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      details: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
      updatedAt: Date
      requestPath: string | null
      success: boolean
    }, ExtArgs["result"]["securityAuditLog"]>
    composites: {}
  }

  type SecurityAuditLogGetPayload<S extends boolean | null | undefined | SecurityAuditLogDefaultArgs> = $Result.GetResult<Prisma.$SecurityAuditLogPayload, S>

  type SecurityAuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SecurityAuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SecurityAuditLogCountAggregateInputType | true
    }

  export interface SecurityAuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SecurityAuditLog'], meta: { name: 'SecurityAuditLog' } }
    /**
     * Find zero or one SecurityAuditLog that matches the filter.
     * @param {SecurityAuditLogFindUniqueArgs} args - Arguments to find a SecurityAuditLog
     * @example
     * // Get one SecurityAuditLog
     * const securityAuditLog = await prisma.securityAuditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SecurityAuditLogFindUniqueArgs>(args: SelectSubset<T, SecurityAuditLogFindUniqueArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SecurityAuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SecurityAuditLogFindUniqueOrThrowArgs} args - Arguments to find a SecurityAuditLog
     * @example
     * // Get one SecurityAuditLog
     * const securityAuditLog = await prisma.securityAuditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SecurityAuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SecurityAuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecurityAuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAuditLogFindFirstArgs} args - Arguments to find a SecurityAuditLog
     * @example
     * // Get one SecurityAuditLog
     * const securityAuditLog = await prisma.securityAuditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SecurityAuditLogFindFirstArgs>(args?: SelectSubset<T, SecurityAuditLogFindFirstArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SecurityAuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAuditLogFindFirstOrThrowArgs} args - Arguments to find a SecurityAuditLog
     * @example
     * // Get one SecurityAuditLog
     * const securityAuditLog = await prisma.securityAuditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SecurityAuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SecurityAuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SecurityAuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SecurityAuditLogs
     * const securityAuditLogs = await prisma.securityAuditLog.findMany()
     * 
     * // Get first 10 SecurityAuditLogs
     * const securityAuditLogs = await prisma.securityAuditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const securityAuditLogWithIdOnly = await prisma.securityAuditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SecurityAuditLogFindManyArgs>(args?: SelectSubset<T, SecurityAuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SecurityAuditLog.
     * @param {SecurityAuditLogCreateArgs} args - Arguments to create a SecurityAuditLog.
     * @example
     * // Create one SecurityAuditLog
     * const SecurityAuditLog = await prisma.securityAuditLog.create({
     *   data: {
     *     // ... data to create a SecurityAuditLog
     *   }
     * })
     * 
     */
    create<T extends SecurityAuditLogCreateArgs>(args: SelectSubset<T, SecurityAuditLogCreateArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SecurityAuditLogs.
     * @param {SecurityAuditLogCreateManyArgs} args - Arguments to create many SecurityAuditLogs.
     * @example
     * // Create many SecurityAuditLogs
     * const securityAuditLog = await prisma.securityAuditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SecurityAuditLogCreateManyArgs>(args?: SelectSubset<T, SecurityAuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SecurityAuditLogs and returns the data saved in the database.
     * @param {SecurityAuditLogCreateManyAndReturnArgs} args - Arguments to create many SecurityAuditLogs.
     * @example
     * // Create many SecurityAuditLogs
     * const securityAuditLog = await prisma.securityAuditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SecurityAuditLogs and only return the `id`
     * const securityAuditLogWithIdOnly = await prisma.securityAuditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SecurityAuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SecurityAuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SecurityAuditLog.
     * @param {SecurityAuditLogDeleteArgs} args - Arguments to delete one SecurityAuditLog.
     * @example
     * // Delete one SecurityAuditLog
     * const SecurityAuditLog = await prisma.securityAuditLog.delete({
     *   where: {
     *     // ... filter to delete one SecurityAuditLog
     *   }
     * })
     * 
     */
    delete<T extends SecurityAuditLogDeleteArgs>(args: SelectSubset<T, SecurityAuditLogDeleteArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SecurityAuditLog.
     * @param {SecurityAuditLogUpdateArgs} args - Arguments to update one SecurityAuditLog.
     * @example
     * // Update one SecurityAuditLog
     * const securityAuditLog = await prisma.securityAuditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SecurityAuditLogUpdateArgs>(args: SelectSubset<T, SecurityAuditLogUpdateArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SecurityAuditLogs.
     * @param {SecurityAuditLogDeleteManyArgs} args - Arguments to filter SecurityAuditLogs to delete.
     * @example
     * // Delete a few SecurityAuditLogs
     * const { count } = await prisma.securityAuditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SecurityAuditLogDeleteManyArgs>(args?: SelectSubset<T, SecurityAuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecurityAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SecurityAuditLogs
     * const securityAuditLog = await prisma.securityAuditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SecurityAuditLogUpdateManyArgs>(args: SelectSubset<T, SecurityAuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecurityAuditLogs and returns the data updated in the database.
     * @param {SecurityAuditLogUpdateManyAndReturnArgs} args - Arguments to update many SecurityAuditLogs.
     * @example
     * // Update many SecurityAuditLogs
     * const securityAuditLog = await prisma.securityAuditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SecurityAuditLogs and only return the `id`
     * const securityAuditLogWithIdOnly = await prisma.securityAuditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SecurityAuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, SecurityAuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SecurityAuditLog.
     * @param {SecurityAuditLogUpsertArgs} args - Arguments to update or create a SecurityAuditLog.
     * @example
     * // Update or create a SecurityAuditLog
     * const securityAuditLog = await prisma.securityAuditLog.upsert({
     *   create: {
     *     // ... data to create a SecurityAuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SecurityAuditLog we want to update
     *   }
     * })
     */
    upsert<T extends SecurityAuditLogUpsertArgs>(args: SelectSubset<T, SecurityAuditLogUpsertArgs<ExtArgs>>): Prisma__SecurityAuditLogClient<$Result.GetResult<Prisma.$SecurityAuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SecurityAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAuditLogCountArgs} args - Arguments to filter SecurityAuditLogs to count.
     * @example
     * // Count the number of SecurityAuditLogs
     * const count = await prisma.securityAuditLog.count({
     *   where: {
     *     // ... the filter for the SecurityAuditLogs we want to count
     *   }
     * })
    **/
    count<T extends SecurityAuditLogCountArgs>(
      args?: Subset<T, SecurityAuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SecurityAuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SecurityAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SecurityAuditLogAggregateArgs>(args: Subset<T, SecurityAuditLogAggregateArgs>): Prisma.PrismaPromise<GetSecurityAuditLogAggregateType<T>>

    /**
     * Group by SecurityAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityAuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SecurityAuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SecurityAuditLogGroupByArgs['orderBy'] }
        : { orderBy?: SecurityAuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SecurityAuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecurityAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SecurityAuditLog model
   */
  readonly fields: SecurityAuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SecurityAuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SecurityAuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SecurityAuditLog model
   */
  interface SecurityAuditLogFieldRefs {
    readonly id: FieldRef<"SecurityAuditLog", 'String'>
    readonly userId: FieldRef<"SecurityAuditLog", 'String'>
    readonly action: FieldRef<"SecurityAuditLog", 'String'>
    readonly details: FieldRef<"SecurityAuditLog", 'String'>
    readonly ipAddress: FieldRef<"SecurityAuditLog", 'String'>
    readonly userAgent: FieldRef<"SecurityAuditLog", 'String'>
    readonly createdAt: FieldRef<"SecurityAuditLog", 'DateTime'>
    readonly updatedAt: FieldRef<"SecurityAuditLog", 'DateTime'>
    readonly requestPath: FieldRef<"SecurityAuditLog", 'String'>
    readonly success: FieldRef<"SecurityAuditLog", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * SecurityAuditLog findUnique
   */
  export type SecurityAuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAuditLog to fetch.
     */
    where: SecurityAuditLogWhereUniqueInput
  }

  /**
   * SecurityAuditLog findUniqueOrThrow
   */
  export type SecurityAuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAuditLog to fetch.
     */
    where: SecurityAuditLogWhereUniqueInput
  }

  /**
   * SecurityAuditLog findFirst
   */
  export type SecurityAuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAuditLog to fetch.
     */
    where?: SecurityAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAuditLogs to fetch.
     */
    orderBy?: SecurityAuditLogOrderByWithRelationInput | SecurityAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityAuditLogs.
     */
    cursor?: SecurityAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityAuditLogs.
     */
    distinct?: SecurityAuditLogScalarFieldEnum | SecurityAuditLogScalarFieldEnum[]
  }

  /**
   * SecurityAuditLog findFirstOrThrow
   */
  export type SecurityAuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAuditLog to fetch.
     */
    where?: SecurityAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAuditLogs to fetch.
     */
    orderBy?: SecurityAuditLogOrderByWithRelationInput | SecurityAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityAuditLogs.
     */
    cursor?: SecurityAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityAuditLogs.
     */
    distinct?: SecurityAuditLogScalarFieldEnum | SecurityAuditLogScalarFieldEnum[]
  }

  /**
   * SecurityAuditLog findMany
   */
  export type SecurityAuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which SecurityAuditLogs to fetch.
     */
    where?: SecurityAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityAuditLogs to fetch.
     */
    orderBy?: SecurityAuditLogOrderByWithRelationInput | SecurityAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SecurityAuditLogs.
     */
    cursor?: SecurityAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityAuditLogs.
     */
    skip?: number
    distinct?: SecurityAuditLogScalarFieldEnum | SecurityAuditLogScalarFieldEnum[]
  }

  /**
   * SecurityAuditLog create
   */
  export type SecurityAuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SecurityAuditLog.
     */
    data: XOR<SecurityAuditLogCreateInput, SecurityAuditLogUncheckedCreateInput>
  }

  /**
   * SecurityAuditLog createMany
   */
  export type SecurityAuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SecurityAuditLogs.
     */
    data: SecurityAuditLogCreateManyInput | SecurityAuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SecurityAuditLog createManyAndReturn
   */
  export type SecurityAuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many SecurityAuditLogs.
     */
    data: SecurityAuditLogCreateManyInput | SecurityAuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecurityAuditLog update
   */
  export type SecurityAuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SecurityAuditLog.
     */
    data: XOR<SecurityAuditLogUpdateInput, SecurityAuditLogUncheckedUpdateInput>
    /**
     * Choose, which SecurityAuditLog to update.
     */
    where: SecurityAuditLogWhereUniqueInput
  }

  /**
   * SecurityAuditLog updateMany
   */
  export type SecurityAuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SecurityAuditLogs.
     */
    data: XOR<SecurityAuditLogUpdateManyMutationInput, SecurityAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which SecurityAuditLogs to update
     */
    where?: SecurityAuditLogWhereInput
    /**
     * Limit how many SecurityAuditLogs to update.
     */
    limit?: number
  }

  /**
   * SecurityAuditLog updateManyAndReturn
   */
  export type SecurityAuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * The data used to update SecurityAuditLogs.
     */
    data: XOR<SecurityAuditLogUpdateManyMutationInput, SecurityAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which SecurityAuditLogs to update
     */
    where?: SecurityAuditLogWhereInput
    /**
     * Limit how many SecurityAuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecurityAuditLog upsert
   */
  export type SecurityAuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SecurityAuditLog to update in case it exists.
     */
    where: SecurityAuditLogWhereUniqueInput
    /**
     * In case the SecurityAuditLog found by the `where` argument doesn't exist, create a new SecurityAuditLog with this data.
     */
    create: XOR<SecurityAuditLogCreateInput, SecurityAuditLogUncheckedCreateInput>
    /**
     * In case the SecurityAuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SecurityAuditLogUpdateInput, SecurityAuditLogUncheckedUpdateInput>
  }

  /**
   * SecurityAuditLog delete
   */
  export type SecurityAuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
    /**
     * Filter which SecurityAuditLog to delete.
     */
    where: SecurityAuditLogWhereUniqueInput
  }

  /**
   * SecurityAuditLog deleteMany
   */
  export type SecurityAuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityAuditLogs to delete
     */
    where?: SecurityAuditLogWhereInput
    /**
     * Limit how many SecurityAuditLogs to delete.
     */
    limit?: number
  }

  /**
   * SecurityAuditLog without action
   */
  export type SecurityAuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityAuditLog
     */
    select?: SecurityAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SecurityAuditLog
     */
    omit?: SecurityAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityAuditLogInclude<ExtArgs> | null
  }


  /**
   * Model ProfilePicture
   */

  export type AggregateProfilePicture = {
    _count: ProfilePictureCountAggregateOutputType | null
    _avg: ProfilePictureAvgAggregateOutputType | null
    _sum: ProfilePictureSumAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  export type ProfilePictureAvgAggregateOutputType = {
    size: number | null
    width: number | null
    height: number | null
  }

  export type ProfilePictureSumAggregateOutputType = {
    size: number | null
    width: number | null
    height: number | null
  }

  export type ProfilePictureMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    userId: string | null
    imageUrl: string | null
    imageData: Uint8Array | null
    mimeType: string | null
    filename: string | null
    size: number | null
    width: number | null
    height: number | null
    createdAt: Date | null
    updatedAt: Date | null
    uploadedBy: string | null
    ownerType: string | null
  }

  export type ProfilePictureMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    userId: string | null
    imageUrl: string | null
    imageData: Uint8Array | null
    mimeType: string | null
    filename: string | null
    size: number | null
    width: number | null
    height: number | null
    createdAt: Date | null
    updatedAt: Date | null
    uploadedBy: string | null
    ownerType: string | null
  }

  export type ProfilePictureCountAggregateOutputType = {
    id: number
    patientId: number
    userId: number
    imageUrl: number
    imageData: number
    mimeType: number
    filename: number
    size: number
    width: number
    height: number
    createdAt: number
    updatedAt: number
    uploadedBy: number
    ownerType: number
    _all: number
  }


  export type ProfilePictureAvgAggregateInputType = {
    size?: true
    width?: true
    height?: true
  }

  export type ProfilePictureSumAggregateInputType = {
    size?: true
    width?: true
    height?: true
  }

  export type ProfilePictureMinAggregateInputType = {
    id?: true
    patientId?: true
    userId?: true
    imageUrl?: true
    imageData?: true
    mimeType?: true
    filename?: true
    size?: true
    width?: true
    height?: true
    createdAt?: true
    updatedAt?: true
    uploadedBy?: true
    ownerType?: true
  }

  export type ProfilePictureMaxAggregateInputType = {
    id?: true
    patientId?: true
    userId?: true
    imageUrl?: true
    imageData?: true
    mimeType?: true
    filename?: true
    size?: true
    width?: true
    height?: true
    createdAt?: true
    updatedAt?: true
    uploadedBy?: true
    ownerType?: true
  }

  export type ProfilePictureCountAggregateInputType = {
    id?: true
    patientId?: true
    userId?: true
    imageUrl?: true
    imageData?: true
    mimeType?: true
    filename?: true
    size?: true
    width?: true
    height?: true
    createdAt?: true
    updatedAt?: true
    uploadedBy?: true
    ownerType?: true
    _all?: true
  }

  export type ProfilePictureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePicture to aggregate.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilePictures
    **/
    _count?: true | ProfilePictureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilePictureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilePictureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilePictureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilePictureMaxAggregateInputType
  }

  export type GetProfilePictureAggregateType<T extends ProfilePictureAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilePicture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilePicture[P]>
      : GetScalarType<T[P], AggregateProfilePicture[P]>
  }




  export type ProfilePictureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePictureWhereInput
    orderBy?: ProfilePictureOrderByWithAggregationInput | ProfilePictureOrderByWithAggregationInput[]
    by: ProfilePictureScalarFieldEnum[] | ProfilePictureScalarFieldEnum
    having?: ProfilePictureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilePictureCountAggregateInputType | true
    _avg?: ProfilePictureAvgAggregateInputType
    _sum?: ProfilePictureSumAggregateInputType
    _min?: ProfilePictureMinAggregateInputType
    _max?: ProfilePictureMaxAggregateInputType
  }

  export type ProfilePictureGroupByOutputType = {
    id: string
    patientId: string | null
    userId: string | null
    imageUrl: string
    imageData: Uint8Array | null
    mimeType: string
    filename: string | null
    size: number
    width: number | null
    height: number | null
    createdAt: Date
    updatedAt: Date
    uploadedBy: string | null
    ownerType: string
    _count: ProfilePictureCountAggregateOutputType | null
    _avg: ProfilePictureAvgAggregateOutputType | null
    _sum: ProfilePictureSumAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  type GetProfilePictureGroupByPayload<T extends ProfilePictureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilePictureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilePictureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
        }
      >
    >


  export type ProfilePictureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    userId?: boolean
    imageUrl?: boolean
    imageData?: boolean
    mimeType?: boolean
    filename?: boolean
    size?: boolean
    width?: boolean
    height?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uploadedBy?: boolean
    ownerType?: boolean
    patient?: boolean | ProfilePicture$patientArgs<ExtArgs>
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }, ExtArgs["result"]["profilePicture"]>

  export type ProfilePictureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    userId?: boolean
    imageUrl?: boolean
    imageData?: boolean
    mimeType?: boolean
    filename?: boolean
    size?: boolean
    width?: boolean
    height?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uploadedBy?: boolean
    ownerType?: boolean
    patient?: boolean | ProfilePicture$patientArgs<ExtArgs>
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }, ExtArgs["result"]["profilePicture"]>

  export type ProfilePictureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    userId?: boolean
    imageUrl?: boolean
    imageData?: boolean
    mimeType?: boolean
    filename?: boolean
    size?: boolean
    width?: boolean
    height?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uploadedBy?: boolean
    ownerType?: boolean
    patient?: boolean | ProfilePicture$patientArgs<ExtArgs>
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }, ExtArgs["result"]["profilePicture"]>

  export type ProfilePictureSelectScalar = {
    id?: boolean
    patientId?: boolean
    userId?: boolean
    imageUrl?: boolean
    imageData?: boolean
    mimeType?: boolean
    filename?: boolean
    size?: boolean
    width?: boolean
    height?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uploadedBy?: boolean
    ownerType?: boolean
  }

  export type ProfilePictureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "userId" | "imageUrl" | "imageData" | "mimeType" | "filename" | "size" | "width" | "height" | "createdAt" | "updatedAt" | "uploadedBy" | "ownerType", ExtArgs["result"]["profilePicture"]>
  export type ProfilePictureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | ProfilePicture$patientArgs<ExtArgs>
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }
  export type ProfilePictureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | ProfilePicture$patientArgs<ExtArgs>
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }
  export type ProfilePictureIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | ProfilePicture$patientArgs<ExtArgs>
    user?: boolean | ProfilePicture$userArgs<ExtArgs>
  }

  export type $ProfilePicturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfilePicture"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string | null
      userId: string | null
      imageUrl: string
      imageData: Uint8Array | null
      mimeType: string
      filename: string | null
      size: number
      width: number | null
      height: number | null
      createdAt: Date
      updatedAt: Date
      uploadedBy: string | null
      ownerType: string
    }, ExtArgs["result"]["profilePicture"]>
    composites: {}
  }

  type ProfilePictureGetPayload<S extends boolean | null | undefined | ProfilePictureDefaultArgs> = $Result.GetResult<Prisma.$ProfilePicturePayload, S>

  type ProfilePictureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfilePictureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilePictureCountAggregateInputType | true
    }

  export interface ProfilePictureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfilePicture'], meta: { name: 'ProfilePicture' } }
    /**
     * Find zero or one ProfilePicture that matches the filter.
     * @param {ProfilePictureFindUniqueArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfilePictureFindUniqueArgs>(args: SelectSubset<T, ProfilePictureFindUniqueArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfilePicture that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfilePictureFindUniqueOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfilePictureFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfilePictureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilePicture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfilePictureFindFirstArgs>(args?: SelectSubset<T, ProfilePictureFindFirstArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilePicture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfilePictureFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfilePictureFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfilePictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany()
     * 
     * // Get first 10 ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfilePictureFindManyArgs>(args?: SelectSubset<T, ProfilePictureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfilePicture.
     * @param {ProfilePictureCreateArgs} args - Arguments to create a ProfilePicture.
     * @example
     * // Create one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.create({
     *   data: {
     *     // ... data to create a ProfilePicture
     *   }
     * })
     * 
     */
    create<T extends ProfilePictureCreateArgs>(args: SelectSubset<T, ProfilePictureCreateArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfilePictures.
     * @param {ProfilePictureCreateManyArgs} args - Arguments to create many ProfilePictures.
     * @example
     * // Create many ProfilePictures
     * const profilePicture = await prisma.profilePicture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfilePictureCreateManyArgs>(args?: SelectSubset<T, ProfilePictureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfilePictures and returns the data saved in the database.
     * @param {ProfilePictureCreateManyAndReturnArgs} args - Arguments to create many ProfilePictures.
     * @example
     * // Create many ProfilePictures
     * const profilePicture = await prisma.profilePicture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfilePictures and only return the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfilePictureCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfilePictureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfilePicture.
     * @param {ProfilePictureDeleteArgs} args - Arguments to delete one ProfilePicture.
     * @example
     * // Delete one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.delete({
     *   where: {
     *     // ... filter to delete one ProfilePicture
     *   }
     * })
     * 
     */
    delete<T extends ProfilePictureDeleteArgs>(args: SelectSubset<T, ProfilePictureDeleteArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfilePicture.
     * @param {ProfilePictureUpdateArgs} args - Arguments to update one ProfilePicture.
     * @example
     * // Update one ProfilePicture
     * const profilePicture = await prisma.profilePicture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfilePictureUpdateArgs>(args: SelectSubset<T, ProfilePictureUpdateArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfilePictures.
     * @param {ProfilePictureDeleteManyArgs} args - Arguments to filter ProfilePictures to delete.
     * @example
     * // Delete a few ProfilePictures
     * const { count } = await prisma.profilePicture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfilePictureDeleteManyArgs>(args?: SelectSubset<T, ProfilePictureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilePictures
     * const profilePicture = await prisma.profilePicture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfilePictureUpdateManyArgs>(args: SelectSubset<T, ProfilePictureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePictures and returns the data updated in the database.
     * @param {ProfilePictureUpdateManyAndReturnArgs} args - Arguments to update many ProfilePictures.
     * @example
     * // Update many ProfilePictures
     * const profilePicture = await prisma.profilePicture.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfilePictures and only return the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfilePictureUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfilePictureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfilePicture.
     * @param {ProfilePictureUpsertArgs} args - Arguments to update or create a ProfilePicture.
     * @example
     * // Update or create a ProfilePicture
     * const profilePicture = await prisma.profilePicture.upsert({
     *   create: {
     *     // ... data to create a ProfilePicture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilePicture we want to update
     *   }
     * })
     */
    upsert<T extends ProfilePictureUpsertArgs>(args: SelectSubset<T, ProfilePictureUpsertArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureCountArgs} args - Arguments to filter ProfilePictures to count.
     * @example
     * // Count the number of ProfilePictures
     * const count = await prisma.profilePicture.count({
     *   where: {
     *     // ... the filter for the ProfilePictures we want to count
     *   }
     * })
    **/
    count<T extends ProfilePictureCountArgs>(
      args?: Subset<T, ProfilePictureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilePictureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilePictureAggregateArgs>(args: Subset<T, ProfilePictureAggregateArgs>): Prisma.PrismaPromise<GetProfilePictureAggregateType<T>>

    /**
     * Group by ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilePictureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilePictureGroupByArgs['orderBy'] }
        : { orderBy?: ProfilePictureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilePictureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilePictureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfilePicture model
   */
  readonly fields: ProfilePictureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilePicture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilePictureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends ProfilePicture$patientArgs<ExtArgs> = {}>(args?: Subset<T, ProfilePicture$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends ProfilePicture$userArgs<ExtArgs> = {}>(args?: Subset<T, ProfilePicture$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfilePicture model
   */
  interface ProfilePictureFieldRefs {
    readonly id: FieldRef<"ProfilePicture", 'String'>
    readonly patientId: FieldRef<"ProfilePicture", 'String'>
    readonly userId: FieldRef<"ProfilePicture", 'String'>
    readonly imageUrl: FieldRef<"ProfilePicture", 'String'>
    readonly imageData: FieldRef<"ProfilePicture", 'Bytes'>
    readonly mimeType: FieldRef<"ProfilePicture", 'String'>
    readonly filename: FieldRef<"ProfilePicture", 'String'>
    readonly size: FieldRef<"ProfilePicture", 'Int'>
    readonly width: FieldRef<"ProfilePicture", 'Int'>
    readonly height: FieldRef<"ProfilePicture", 'Int'>
    readonly createdAt: FieldRef<"ProfilePicture", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfilePicture", 'DateTime'>
    readonly uploadedBy: FieldRef<"ProfilePicture", 'String'>
    readonly ownerType: FieldRef<"ProfilePicture", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProfilePicture findUnique
   */
  export type ProfilePictureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture findUniqueOrThrow
   */
  export type ProfilePictureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture findFirst
   */
  export type ProfilePictureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     */
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture findFirstOrThrow
   */
  export type ProfilePictureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     */
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture findMany
   */
  export type ProfilePictureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePictures to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture create
   */
  export type ProfilePictureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfilePicture.
     */
    data: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
  }

  /**
   * ProfilePicture createMany
   */
  export type ProfilePictureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfilePictures.
     */
    data: ProfilePictureCreateManyInput | ProfilePictureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfilePicture createManyAndReturn
   */
  export type ProfilePictureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * The data used to create many ProfilePictures.
     */
    data: ProfilePictureCreateManyInput | ProfilePictureCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfilePicture update
   */
  export type ProfilePictureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfilePicture.
     */
    data: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
    /**
     * Choose, which ProfilePicture to update.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture updateMany
   */
  export type ProfilePictureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfilePictures.
     */
    data: XOR<ProfilePictureUpdateManyMutationInput, ProfilePictureUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePictures to update
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to update.
     */
    limit?: number
  }

  /**
   * ProfilePicture updateManyAndReturn
   */
  export type ProfilePictureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * The data used to update ProfilePictures.
     */
    data: XOR<ProfilePictureUpdateManyMutationInput, ProfilePictureUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePictures to update
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfilePicture upsert
   */
  export type ProfilePictureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfilePicture to update in case it exists.
     */
    where: ProfilePictureWhereUniqueInput
    /**
     * In case the ProfilePicture found by the `where` argument doesn't exist, create a new ProfilePicture with this data.
     */
    create: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
    /**
     * In case the ProfilePicture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
  }

  /**
   * ProfilePicture delete
   */
  export type ProfilePictureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter which ProfilePicture to delete.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture deleteMany
   */
  export type ProfilePictureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePictures to delete
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to delete.
     */
    limit?: number
  }

  /**
   * ProfilePicture.patient
   */
  export type ProfilePicture$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * ProfilePicture.user
   */
  export type ProfilePicture$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ProfilePicture without action
   */
  export type ProfilePictureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
  }


  /**
   * Model PatientEmail
   */

  export type AggregatePatientEmail = {
    _count: PatientEmailCountAggregateOutputType | null
    _min: PatientEmailMinAggregateOutputType | null
    _max: PatientEmailMaxAggregateOutputType | null
  }

  export type PatientEmailMinAggregateOutputType = {
    id: string | null
    email: string | null
    verified: boolean | null
    primary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
  }

  export type PatientEmailMaxAggregateOutputType = {
    id: string | null
    email: string | null
    verified: boolean | null
    primary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
  }

  export type PatientEmailCountAggregateOutputType = {
    id: number
    email: number
    verified: number
    primary: number
    createdAt: number
    updatedAt: number
    patientId: number
    _all: number
  }


  export type PatientEmailMinAggregateInputType = {
    id?: true
    email?: true
    verified?: true
    primary?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
  }

  export type PatientEmailMaxAggregateInputType = {
    id?: true
    email?: true
    verified?: true
    primary?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
  }

  export type PatientEmailCountAggregateInputType = {
    id?: true
    email?: true
    verified?: true
    primary?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    _all?: true
  }

  export type PatientEmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientEmail to aggregate.
     */
    where?: PatientEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEmails to fetch.
     */
    orderBy?: PatientEmailOrderByWithRelationInput | PatientEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientEmails
    **/
    _count?: true | PatientEmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientEmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientEmailMaxAggregateInputType
  }

  export type GetPatientEmailAggregateType<T extends PatientEmailAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientEmail[P]>
      : GetScalarType<T[P], AggregatePatientEmail[P]>
  }




  export type PatientEmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientEmailWhereInput
    orderBy?: PatientEmailOrderByWithAggregationInput | PatientEmailOrderByWithAggregationInput[]
    by: PatientEmailScalarFieldEnum[] | PatientEmailScalarFieldEnum
    having?: PatientEmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientEmailCountAggregateInputType | true
    _min?: PatientEmailMinAggregateInputType
    _max?: PatientEmailMaxAggregateInputType
  }

  export type PatientEmailGroupByOutputType = {
    id: string
    email: string
    verified: boolean
    primary: boolean
    createdAt: Date
    updatedAt: Date
    patientId: string
    _count: PatientEmailCountAggregateOutputType | null
    _min: PatientEmailMinAggregateOutputType | null
    _max: PatientEmailMaxAggregateOutputType | null
  }

  type GetPatientEmailGroupByPayload<T extends PatientEmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientEmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientEmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientEmailGroupByOutputType[P]>
            : GetScalarType<T[P], PatientEmailGroupByOutputType[P]>
        }
      >
    >


  export type PatientEmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    verified?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientEmail"]>

  export type PatientEmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    verified?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientEmail"]>

  export type PatientEmailSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    verified?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientEmail"]>

  export type PatientEmailSelectScalar = {
    id?: boolean
    email?: boolean
    verified?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
  }

  export type PatientEmailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "verified" | "primary" | "createdAt" | "updatedAt" | "patientId", ExtArgs["result"]["patientEmail"]>
  export type PatientEmailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientEmailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientEmailIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $PatientEmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientEmail"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      verified: boolean
      primary: boolean
      createdAt: Date
      updatedAt: Date
      patientId: string
    }, ExtArgs["result"]["patientEmail"]>
    composites: {}
  }

  type PatientEmailGetPayload<S extends boolean | null | undefined | PatientEmailDefaultArgs> = $Result.GetResult<Prisma.$PatientEmailPayload, S>

  type PatientEmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientEmailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientEmailCountAggregateInputType | true
    }

  export interface PatientEmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientEmail'], meta: { name: 'PatientEmail' } }
    /**
     * Find zero or one PatientEmail that matches the filter.
     * @param {PatientEmailFindUniqueArgs} args - Arguments to find a PatientEmail
     * @example
     * // Get one PatientEmail
     * const patientEmail = await prisma.patientEmail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientEmailFindUniqueArgs>(args: SelectSubset<T, PatientEmailFindUniqueArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientEmail that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientEmailFindUniqueOrThrowArgs} args - Arguments to find a PatientEmail
     * @example
     * // Get one PatientEmail
     * const patientEmail = await prisma.patientEmail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientEmailFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientEmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientEmail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEmailFindFirstArgs} args - Arguments to find a PatientEmail
     * @example
     * // Get one PatientEmail
     * const patientEmail = await prisma.patientEmail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientEmailFindFirstArgs>(args?: SelectSubset<T, PatientEmailFindFirstArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientEmail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEmailFindFirstOrThrowArgs} args - Arguments to find a PatientEmail
     * @example
     * // Get one PatientEmail
     * const patientEmail = await prisma.patientEmail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientEmailFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientEmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientEmails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientEmails
     * const patientEmails = await prisma.patientEmail.findMany()
     * 
     * // Get first 10 PatientEmails
     * const patientEmails = await prisma.patientEmail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientEmailWithIdOnly = await prisma.patientEmail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientEmailFindManyArgs>(args?: SelectSubset<T, PatientEmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientEmail.
     * @param {PatientEmailCreateArgs} args - Arguments to create a PatientEmail.
     * @example
     * // Create one PatientEmail
     * const PatientEmail = await prisma.patientEmail.create({
     *   data: {
     *     // ... data to create a PatientEmail
     *   }
     * })
     * 
     */
    create<T extends PatientEmailCreateArgs>(args: SelectSubset<T, PatientEmailCreateArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientEmails.
     * @param {PatientEmailCreateManyArgs} args - Arguments to create many PatientEmails.
     * @example
     * // Create many PatientEmails
     * const patientEmail = await prisma.patientEmail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientEmailCreateManyArgs>(args?: SelectSubset<T, PatientEmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientEmails and returns the data saved in the database.
     * @param {PatientEmailCreateManyAndReturnArgs} args - Arguments to create many PatientEmails.
     * @example
     * // Create many PatientEmails
     * const patientEmail = await prisma.patientEmail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientEmails and only return the `id`
     * const patientEmailWithIdOnly = await prisma.patientEmail.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientEmailCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientEmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientEmail.
     * @param {PatientEmailDeleteArgs} args - Arguments to delete one PatientEmail.
     * @example
     * // Delete one PatientEmail
     * const PatientEmail = await prisma.patientEmail.delete({
     *   where: {
     *     // ... filter to delete one PatientEmail
     *   }
     * })
     * 
     */
    delete<T extends PatientEmailDeleteArgs>(args: SelectSubset<T, PatientEmailDeleteArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientEmail.
     * @param {PatientEmailUpdateArgs} args - Arguments to update one PatientEmail.
     * @example
     * // Update one PatientEmail
     * const patientEmail = await prisma.patientEmail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientEmailUpdateArgs>(args: SelectSubset<T, PatientEmailUpdateArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientEmails.
     * @param {PatientEmailDeleteManyArgs} args - Arguments to filter PatientEmails to delete.
     * @example
     * // Delete a few PatientEmails
     * const { count } = await prisma.patientEmail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientEmailDeleteManyArgs>(args?: SelectSubset<T, PatientEmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientEmails
     * const patientEmail = await prisma.patientEmail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientEmailUpdateManyArgs>(args: SelectSubset<T, PatientEmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientEmails and returns the data updated in the database.
     * @param {PatientEmailUpdateManyAndReturnArgs} args - Arguments to update many PatientEmails.
     * @example
     * // Update many PatientEmails
     * const patientEmail = await prisma.patientEmail.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientEmails and only return the `id`
     * const patientEmailWithIdOnly = await prisma.patientEmail.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientEmailUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientEmailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientEmail.
     * @param {PatientEmailUpsertArgs} args - Arguments to update or create a PatientEmail.
     * @example
     * // Update or create a PatientEmail
     * const patientEmail = await prisma.patientEmail.upsert({
     *   create: {
     *     // ... data to create a PatientEmail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientEmail we want to update
     *   }
     * })
     */
    upsert<T extends PatientEmailUpsertArgs>(args: SelectSubset<T, PatientEmailUpsertArgs<ExtArgs>>): Prisma__PatientEmailClient<$Result.GetResult<Prisma.$PatientEmailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEmailCountArgs} args - Arguments to filter PatientEmails to count.
     * @example
     * // Count the number of PatientEmails
     * const count = await prisma.patientEmail.count({
     *   where: {
     *     // ... the filter for the PatientEmails we want to count
     *   }
     * })
    **/
    count<T extends PatientEmailCountArgs>(
      args?: Subset<T, PatientEmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientEmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientEmailAggregateArgs>(args: Subset<T, PatientEmailAggregateArgs>): Prisma.PrismaPromise<GetPatientEmailAggregateType<T>>

    /**
     * Group by PatientEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientEmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientEmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientEmailGroupByArgs['orderBy'] }
        : { orderBy?: PatientEmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientEmail model
   */
  readonly fields: PatientEmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientEmail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientEmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientEmail model
   */
  interface PatientEmailFieldRefs {
    readonly id: FieldRef<"PatientEmail", 'String'>
    readonly email: FieldRef<"PatientEmail", 'String'>
    readonly verified: FieldRef<"PatientEmail", 'Boolean'>
    readonly primary: FieldRef<"PatientEmail", 'Boolean'>
    readonly createdAt: FieldRef<"PatientEmail", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientEmail", 'DateTime'>
    readonly patientId: FieldRef<"PatientEmail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PatientEmail findUnique
   */
  export type PatientEmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * Filter, which PatientEmail to fetch.
     */
    where: PatientEmailWhereUniqueInput
  }

  /**
   * PatientEmail findUniqueOrThrow
   */
  export type PatientEmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * Filter, which PatientEmail to fetch.
     */
    where: PatientEmailWhereUniqueInput
  }

  /**
   * PatientEmail findFirst
   */
  export type PatientEmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * Filter, which PatientEmail to fetch.
     */
    where?: PatientEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEmails to fetch.
     */
    orderBy?: PatientEmailOrderByWithRelationInput | PatientEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientEmails.
     */
    cursor?: PatientEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientEmails.
     */
    distinct?: PatientEmailScalarFieldEnum | PatientEmailScalarFieldEnum[]
  }

  /**
   * PatientEmail findFirstOrThrow
   */
  export type PatientEmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * Filter, which PatientEmail to fetch.
     */
    where?: PatientEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEmails to fetch.
     */
    orderBy?: PatientEmailOrderByWithRelationInput | PatientEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientEmails.
     */
    cursor?: PatientEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientEmails.
     */
    distinct?: PatientEmailScalarFieldEnum | PatientEmailScalarFieldEnum[]
  }

  /**
   * PatientEmail findMany
   */
  export type PatientEmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * Filter, which PatientEmails to fetch.
     */
    where?: PatientEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientEmails to fetch.
     */
    orderBy?: PatientEmailOrderByWithRelationInput | PatientEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientEmails.
     */
    cursor?: PatientEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientEmails.
     */
    skip?: number
    distinct?: PatientEmailScalarFieldEnum | PatientEmailScalarFieldEnum[]
  }

  /**
   * PatientEmail create
   */
  export type PatientEmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientEmail.
     */
    data: XOR<PatientEmailCreateInput, PatientEmailUncheckedCreateInput>
  }

  /**
   * PatientEmail createMany
   */
  export type PatientEmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientEmails.
     */
    data: PatientEmailCreateManyInput | PatientEmailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientEmail createManyAndReturn
   */
  export type PatientEmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * The data used to create many PatientEmails.
     */
    data: PatientEmailCreateManyInput | PatientEmailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientEmail update
   */
  export type PatientEmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientEmail.
     */
    data: XOR<PatientEmailUpdateInput, PatientEmailUncheckedUpdateInput>
    /**
     * Choose, which PatientEmail to update.
     */
    where: PatientEmailWhereUniqueInput
  }

  /**
   * PatientEmail updateMany
   */
  export type PatientEmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientEmails.
     */
    data: XOR<PatientEmailUpdateManyMutationInput, PatientEmailUncheckedUpdateManyInput>
    /**
     * Filter which PatientEmails to update
     */
    where?: PatientEmailWhereInput
    /**
     * Limit how many PatientEmails to update.
     */
    limit?: number
  }

  /**
   * PatientEmail updateManyAndReturn
   */
  export type PatientEmailUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * The data used to update PatientEmails.
     */
    data: XOR<PatientEmailUpdateManyMutationInput, PatientEmailUncheckedUpdateManyInput>
    /**
     * Filter which PatientEmails to update
     */
    where?: PatientEmailWhereInput
    /**
     * Limit how many PatientEmails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientEmail upsert
   */
  export type PatientEmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientEmail to update in case it exists.
     */
    where: PatientEmailWhereUniqueInput
    /**
     * In case the PatientEmail found by the `where` argument doesn't exist, create a new PatientEmail with this data.
     */
    create: XOR<PatientEmailCreateInput, PatientEmailUncheckedCreateInput>
    /**
     * In case the PatientEmail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientEmailUpdateInput, PatientEmailUncheckedUpdateInput>
  }

  /**
   * PatientEmail delete
   */
  export type PatientEmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
    /**
     * Filter which PatientEmail to delete.
     */
    where: PatientEmailWhereUniqueInput
  }

  /**
   * PatientEmail deleteMany
   */
  export type PatientEmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientEmails to delete
     */
    where?: PatientEmailWhereInput
    /**
     * Limit how many PatientEmails to delete.
     */
    limit?: number
  }

  /**
   * PatientEmail without action
   */
  export type PatientEmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientEmail
     */
    select?: PatientEmailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientEmail
     */
    omit?: PatientEmailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientEmailInclude<ExtArgs> | null
  }


  /**
   * Model PatientPhone
   */

  export type AggregatePatientPhone = {
    _count: PatientPhoneCountAggregateOutputType | null
    _min: PatientPhoneMinAggregateOutputType | null
    _max: PatientPhoneMaxAggregateOutputType | null
  }

  export type PatientPhoneMinAggregateOutputType = {
    id: string | null
    phone: string | null
    verified: boolean | null
    primary: boolean | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
  }

  export type PatientPhoneMaxAggregateOutputType = {
    id: string | null
    phone: string | null
    verified: boolean | null
    primary: boolean | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    patientId: string | null
  }

  export type PatientPhoneCountAggregateOutputType = {
    id: number
    phone: number
    verified: number
    primary: number
    type: number
    createdAt: number
    updatedAt: number
    patientId: number
    _all: number
  }


  export type PatientPhoneMinAggregateInputType = {
    id?: true
    phone?: true
    verified?: true
    primary?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
  }

  export type PatientPhoneMaxAggregateInputType = {
    id?: true
    phone?: true
    verified?: true
    primary?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
  }

  export type PatientPhoneCountAggregateInputType = {
    id?: true
    phone?: true
    verified?: true
    primary?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    patientId?: true
    _all?: true
  }

  export type PatientPhoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientPhone to aggregate.
     */
    where?: PatientPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPhones to fetch.
     */
    orderBy?: PatientPhoneOrderByWithRelationInput | PatientPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPhones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientPhones
    **/
    _count?: true | PatientPhoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientPhoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientPhoneMaxAggregateInputType
  }

  export type GetPatientPhoneAggregateType<T extends PatientPhoneAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientPhone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientPhone[P]>
      : GetScalarType<T[P], AggregatePatientPhone[P]>
  }




  export type PatientPhoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPhoneWhereInput
    orderBy?: PatientPhoneOrderByWithAggregationInput | PatientPhoneOrderByWithAggregationInput[]
    by: PatientPhoneScalarFieldEnum[] | PatientPhoneScalarFieldEnum
    having?: PatientPhoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientPhoneCountAggregateInputType | true
    _min?: PatientPhoneMinAggregateInputType
    _max?: PatientPhoneMaxAggregateInputType
  }

  export type PatientPhoneGroupByOutputType = {
    id: string
    phone: string
    verified: boolean
    primary: boolean
    type: string
    createdAt: Date
    updatedAt: Date
    patientId: string
    _count: PatientPhoneCountAggregateOutputType | null
    _min: PatientPhoneMinAggregateOutputType | null
    _max: PatientPhoneMaxAggregateOutputType | null
  }

  type GetPatientPhoneGroupByPayload<T extends PatientPhoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientPhoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientPhoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientPhoneGroupByOutputType[P]>
            : GetScalarType<T[P], PatientPhoneGroupByOutputType[P]>
        }
      >
    >


  export type PatientPhoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    verified?: boolean
    primary?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientPhone"]>

  export type PatientPhoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    verified?: boolean
    primary?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientPhone"]>

  export type PatientPhoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    verified?: boolean
    primary?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientPhone"]>

  export type PatientPhoneSelectScalar = {
    id?: boolean
    phone?: boolean
    verified?: boolean
    primary?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientId?: boolean
  }

  export type PatientPhoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "phone" | "verified" | "primary" | "type" | "createdAt" | "updatedAt" | "patientId", ExtArgs["result"]["patientPhone"]>
  export type PatientPhoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientPhoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientPhoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $PatientPhonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientPhone"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      phone: string
      verified: boolean
      primary: boolean
      type: string
      createdAt: Date
      updatedAt: Date
      patientId: string
    }, ExtArgs["result"]["patientPhone"]>
    composites: {}
  }

  type PatientPhoneGetPayload<S extends boolean | null | undefined | PatientPhoneDefaultArgs> = $Result.GetResult<Prisma.$PatientPhonePayload, S>

  type PatientPhoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientPhoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientPhoneCountAggregateInputType | true
    }

  export interface PatientPhoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientPhone'], meta: { name: 'PatientPhone' } }
    /**
     * Find zero or one PatientPhone that matches the filter.
     * @param {PatientPhoneFindUniqueArgs} args - Arguments to find a PatientPhone
     * @example
     * // Get one PatientPhone
     * const patientPhone = await prisma.patientPhone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientPhoneFindUniqueArgs>(args: SelectSubset<T, PatientPhoneFindUniqueArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientPhone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientPhoneFindUniqueOrThrowArgs} args - Arguments to find a PatientPhone
     * @example
     * // Get one PatientPhone
     * const patientPhone = await prisma.patientPhone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientPhoneFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientPhoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientPhone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPhoneFindFirstArgs} args - Arguments to find a PatientPhone
     * @example
     * // Get one PatientPhone
     * const patientPhone = await prisma.patientPhone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientPhoneFindFirstArgs>(args?: SelectSubset<T, PatientPhoneFindFirstArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientPhone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPhoneFindFirstOrThrowArgs} args - Arguments to find a PatientPhone
     * @example
     * // Get one PatientPhone
     * const patientPhone = await prisma.patientPhone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientPhoneFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientPhoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientPhones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPhoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientPhones
     * const patientPhones = await prisma.patientPhone.findMany()
     * 
     * // Get first 10 PatientPhones
     * const patientPhones = await prisma.patientPhone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientPhoneWithIdOnly = await prisma.patientPhone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientPhoneFindManyArgs>(args?: SelectSubset<T, PatientPhoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientPhone.
     * @param {PatientPhoneCreateArgs} args - Arguments to create a PatientPhone.
     * @example
     * // Create one PatientPhone
     * const PatientPhone = await prisma.patientPhone.create({
     *   data: {
     *     // ... data to create a PatientPhone
     *   }
     * })
     * 
     */
    create<T extends PatientPhoneCreateArgs>(args: SelectSubset<T, PatientPhoneCreateArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientPhones.
     * @param {PatientPhoneCreateManyArgs} args - Arguments to create many PatientPhones.
     * @example
     * // Create many PatientPhones
     * const patientPhone = await prisma.patientPhone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientPhoneCreateManyArgs>(args?: SelectSubset<T, PatientPhoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientPhones and returns the data saved in the database.
     * @param {PatientPhoneCreateManyAndReturnArgs} args - Arguments to create many PatientPhones.
     * @example
     * // Create many PatientPhones
     * const patientPhone = await prisma.patientPhone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientPhones and only return the `id`
     * const patientPhoneWithIdOnly = await prisma.patientPhone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientPhoneCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientPhoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientPhone.
     * @param {PatientPhoneDeleteArgs} args - Arguments to delete one PatientPhone.
     * @example
     * // Delete one PatientPhone
     * const PatientPhone = await prisma.patientPhone.delete({
     *   where: {
     *     // ... filter to delete one PatientPhone
     *   }
     * })
     * 
     */
    delete<T extends PatientPhoneDeleteArgs>(args: SelectSubset<T, PatientPhoneDeleteArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientPhone.
     * @param {PatientPhoneUpdateArgs} args - Arguments to update one PatientPhone.
     * @example
     * // Update one PatientPhone
     * const patientPhone = await prisma.patientPhone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientPhoneUpdateArgs>(args: SelectSubset<T, PatientPhoneUpdateArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientPhones.
     * @param {PatientPhoneDeleteManyArgs} args - Arguments to filter PatientPhones to delete.
     * @example
     * // Delete a few PatientPhones
     * const { count } = await prisma.patientPhone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientPhoneDeleteManyArgs>(args?: SelectSubset<T, PatientPhoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientPhones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPhoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientPhones
     * const patientPhone = await prisma.patientPhone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientPhoneUpdateManyArgs>(args: SelectSubset<T, PatientPhoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientPhones and returns the data updated in the database.
     * @param {PatientPhoneUpdateManyAndReturnArgs} args - Arguments to update many PatientPhones.
     * @example
     * // Update many PatientPhones
     * const patientPhone = await prisma.patientPhone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientPhones and only return the `id`
     * const patientPhoneWithIdOnly = await prisma.patientPhone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientPhoneUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientPhoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientPhone.
     * @param {PatientPhoneUpsertArgs} args - Arguments to update or create a PatientPhone.
     * @example
     * // Update or create a PatientPhone
     * const patientPhone = await prisma.patientPhone.upsert({
     *   create: {
     *     // ... data to create a PatientPhone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientPhone we want to update
     *   }
     * })
     */
    upsert<T extends PatientPhoneUpsertArgs>(args: SelectSubset<T, PatientPhoneUpsertArgs<ExtArgs>>): Prisma__PatientPhoneClient<$Result.GetResult<Prisma.$PatientPhonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientPhones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPhoneCountArgs} args - Arguments to filter PatientPhones to count.
     * @example
     * // Count the number of PatientPhones
     * const count = await prisma.patientPhone.count({
     *   where: {
     *     // ... the filter for the PatientPhones we want to count
     *   }
     * })
    **/
    count<T extends PatientPhoneCountArgs>(
      args?: Subset<T, PatientPhoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientPhoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientPhone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPhoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientPhoneAggregateArgs>(args: Subset<T, PatientPhoneAggregateArgs>): Prisma.PrismaPromise<GetPatientPhoneAggregateType<T>>

    /**
     * Group by PatientPhone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPhoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientPhoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientPhoneGroupByArgs['orderBy'] }
        : { orderBy?: PatientPhoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientPhoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientPhoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientPhone model
   */
  readonly fields: PatientPhoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientPhone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientPhoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientPhone model
   */
  interface PatientPhoneFieldRefs {
    readonly id: FieldRef<"PatientPhone", 'String'>
    readonly phone: FieldRef<"PatientPhone", 'String'>
    readonly verified: FieldRef<"PatientPhone", 'Boolean'>
    readonly primary: FieldRef<"PatientPhone", 'Boolean'>
    readonly type: FieldRef<"PatientPhone", 'String'>
    readonly createdAt: FieldRef<"PatientPhone", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientPhone", 'DateTime'>
    readonly patientId: FieldRef<"PatientPhone", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PatientPhone findUnique
   */
  export type PatientPhoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * Filter, which PatientPhone to fetch.
     */
    where: PatientPhoneWhereUniqueInput
  }

  /**
   * PatientPhone findUniqueOrThrow
   */
  export type PatientPhoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * Filter, which PatientPhone to fetch.
     */
    where: PatientPhoneWhereUniqueInput
  }

  /**
   * PatientPhone findFirst
   */
  export type PatientPhoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * Filter, which PatientPhone to fetch.
     */
    where?: PatientPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPhones to fetch.
     */
    orderBy?: PatientPhoneOrderByWithRelationInput | PatientPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientPhones.
     */
    cursor?: PatientPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPhones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientPhones.
     */
    distinct?: PatientPhoneScalarFieldEnum | PatientPhoneScalarFieldEnum[]
  }

  /**
   * PatientPhone findFirstOrThrow
   */
  export type PatientPhoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * Filter, which PatientPhone to fetch.
     */
    where?: PatientPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPhones to fetch.
     */
    orderBy?: PatientPhoneOrderByWithRelationInput | PatientPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientPhones.
     */
    cursor?: PatientPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPhones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientPhones.
     */
    distinct?: PatientPhoneScalarFieldEnum | PatientPhoneScalarFieldEnum[]
  }

  /**
   * PatientPhone findMany
   */
  export type PatientPhoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * Filter, which PatientPhones to fetch.
     */
    where?: PatientPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPhones to fetch.
     */
    orderBy?: PatientPhoneOrderByWithRelationInput | PatientPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientPhones.
     */
    cursor?: PatientPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPhones.
     */
    skip?: number
    distinct?: PatientPhoneScalarFieldEnum | PatientPhoneScalarFieldEnum[]
  }

  /**
   * PatientPhone create
   */
  export type PatientPhoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientPhone.
     */
    data: XOR<PatientPhoneCreateInput, PatientPhoneUncheckedCreateInput>
  }

  /**
   * PatientPhone createMany
   */
  export type PatientPhoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientPhones.
     */
    data: PatientPhoneCreateManyInput | PatientPhoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientPhone createManyAndReturn
   */
  export type PatientPhoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * The data used to create many PatientPhones.
     */
    data: PatientPhoneCreateManyInput | PatientPhoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientPhone update
   */
  export type PatientPhoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientPhone.
     */
    data: XOR<PatientPhoneUpdateInput, PatientPhoneUncheckedUpdateInput>
    /**
     * Choose, which PatientPhone to update.
     */
    where: PatientPhoneWhereUniqueInput
  }

  /**
   * PatientPhone updateMany
   */
  export type PatientPhoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientPhones.
     */
    data: XOR<PatientPhoneUpdateManyMutationInput, PatientPhoneUncheckedUpdateManyInput>
    /**
     * Filter which PatientPhones to update
     */
    where?: PatientPhoneWhereInput
    /**
     * Limit how many PatientPhones to update.
     */
    limit?: number
  }

  /**
   * PatientPhone updateManyAndReturn
   */
  export type PatientPhoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * The data used to update PatientPhones.
     */
    data: XOR<PatientPhoneUpdateManyMutationInput, PatientPhoneUncheckedUpdateManyInput>
    /**
     * Filter which PatientPhones to update
     */
    where?: PatientPhoneWhereInput
    /**
     * Limit how many PatientPhones to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientPhone upsert
   */
  export type PatientPhoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientPhone to update in case it exists.
     */
    where: PatientPhoneWhereUniqueInput
    /**
     * In case the PatientPhone found by the `where` argument doesn't exist, create a new PatientPhone with this data.
     */
    create: XOR<PatientPhoneCreateInput, PatientPhoneUncheckedCreateInput>
    /**
     * In case the PatientPhone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientPhoneUpdateInput, PatientPhoneUncheckedUpdateInput>
  }

  /**
   * PatientPhone delete
   */
  export type PatientPhoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
    /**
     * Filter which PatientPhone to delete.
     */
    where: PatientPhoneWhereUniqueInput
  }

  /**
   * PatientPhone deleteMany
   */
  export type PatientPhoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientPhones to delete
     */
    where?: PatientPhoneWhereInput
    /**
     * Limit how many PatientPhones to delete.
     */
    limit?: number
  }

  /**
   * PatientPhone without action
   */
  export type PatientPhoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPhone
     */
    select?: PatientPhoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientPhone
     */
    omit?: PatientPhoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPhoneInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    hospitalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    hospitalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    hospitalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    hospitalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    hospitalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    hospitalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    hospitalId: string
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    members?: boolean | Department$membersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    hospitalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "hospitalId" | "createdAt" | "updatedAt", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    members?: boolean | Department$membersArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      hospital: Prisma.$HospitalPayload<ExtArgs>
      members: Prisma.$DepartmentMembershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      hospitalId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends Department$membersArgs<ExtArgs> = {}>(args?: Subset<T, Department$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly hospitalId: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.members
   */
  export type Department$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    where?: DepartmentMembershipWhereInput
    orderBy?: DepartmentMembershipOrderByWithRelationInput | DepartmentMembershipOrderByWithRelationInput[]
    cursor?: DepartmentMembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentMembershipScalarFieldEnum | DepartmentMembershipScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model DepartmentMembership
   */

  export type AggregateDepartmentMembership = {
    _count: DepartmentMembershipCountAggregateOutputType | null
    _min: DepartmentMembershipMinAggregateOutputType | null
    _max: DepartmentMembershipMaxAggregateOutputType | null
  }

  export type DepartmentMembershipMinAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
    role: string | null
    joinedAt: Date | null
  }

  export type DepartmentMembershipMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    departmentId: string | null
    role: string | null
    joinedAt: Date | null
  }

  export type DepartmentMembershipCountAggregateOutputType = {
    id: number
    userId: number
    departmentId: number
    role: number
    joinedAt: number
    _all: number
  }


  export type DepartmentMembershipMinAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    role?: true
    joinedAt?: true
  }

  export type DepartmentMembershipMaxAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    role?: true
    joinedAt?: true
  }

  export type DepartmentMembershipCountAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    role?: true
    joinedAt?: true
    _all?: true
  }

  export type DepartmentMembershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentMembership to aggregate.
     */
    where?: DepartmentMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMemberships to fetch.
     */
    orderBy?: DepartmentMembershipOrderByWithRelationInput | DepartmentMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentMemberships
    **/
    _count?: true | DepartmentMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMembershipMaxAggregateInputType
  }

  export type GetDepartmentMembershipAggregateType<T extends DepartmentMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentMembership[P]>
      : GetScalarType<T[P], AggregateDepartmentMembership[P]>
  }




  export type DepartmentMembershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMembershipWhereInput
    orderBy?: DepartmentMembershipOrderByWithAggregationInput | DepartmentMembershipOrderByWithAggregationInput[]
    by: DepartmentMembershipScalarFieldEnum[] | DepartmentMembershipScalarFieldEnum
    having?: DepartmentMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentMembershipCountAggregateInputType | true
    _min?: DepartmentMembershipMinAggregateInputType
    _max?: DepartmentMembershipMaxAggregateInputType
  }

  export type DepartmentMembershipGroupByOutputType = {
    id: string
    userId: string
    departmentId: string
    role: string
    joinedAt: Date
    _count: DepartmentMembershipCountAggregateOutputType | null
    _min: DepartmentMembershipMinAggregateOutputType | null
    _max: DepartmentMembershipMaxAggregateOutputType | null
  }

  type GetDepartmentMembershipGroupByPayload<T extends DepartmentMembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentMembershipGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentMembershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    role?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMembership"]>

  export type DepartmentMembershipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    role?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMembership"]>

  export type DepartmentMembershipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    role?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMembership"]>

  export type DepartmentMembershipSelectScalar = {
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    role?: boolean
    joinedAt?: boolean
  }

  export type DepartmentMembershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "departmentId" | "role" | "joinedAt", ExtArgs["result"]["departmentMembership"]>
  export type DepartmentMembershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type DepartmentMembershipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type DepartmentMembershipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $DepartmentMembershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepartmentMembership"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      departmentId: string
      role: string
      joinedAt: Date
    }, ExtArgs["result"]["departmentMembership"]>
    composites: {}
  }

  type DepartmentMembershipGetPayload<S extends boolean | null | undefined | DepartmentMembershipDefaultArgs> = $Result.GetResult<Prisma.$DepartmentMembershipPayload, S>

  type DepartmentMembershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentMembershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentMembershipCountAggregateInputType | true
    }

  export interface DepartmentMembershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartmentMembership'], meta: { name: 'DepartmentMembership' } }
    /**
     * Find zero or one DepartmentMembership that matches the filter.
     * @param {DepartmentMembershipFindUniqueArgs} args - Arguments to find a DepartmentMembership
     * @example
     * // Get one DepartmentMembership
     * const departmentMembership = await prisma.departmentMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentMembershipFindUniqueArgs>(args: SelectSubset<T, DepartmentMembershipFindUniqueArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DepartmentMembership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentMembershipFindUniqueOrThrowArgs} args - Arguments to find a DepartmentMembership
     * @example
     * // Get one DepartmentMembership
     * const departmentMembership = await prisma.departmentMembership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentMembershipFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentMembershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMembershipFindFirstArgs} args - Arguments to find a DepartmentMembership
     * @example
     * // Get one DepartmentMembership
     * const departmentMembership = await prisma.departmentMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentMembershipFindFirstArgs>(args?: SelectSubset<T, DepartmentMembershipFindFirstArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentMembership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMembershipFindFirstOrThrowArgs} args - Arguments to find a DepartmentMembership
     * @example
     * // Get one DepartmentMembership
     * const departmentMembership = await prisma.departmentMembership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentMembershipFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentMembershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DepartmentMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMembershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentMemberships
     * const departmentMemberships = await prisma.departmentMembership.findMany()
     * 
     * // Get first 10 DepartmentMemberships
     * const departmentMemberships = await prisma.departmentMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentMembershipWithIdOnly = await prisma.departmentMembership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentMembershipFindManyArgs>(args?: SelectSubset<T, DepartmentMembershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DepartmentMembership.
     * @param {DepartmentMembershipCreateArgs} args - Arguments to create a DepartmentMembership.
     * @example
     * // Create one DepartmentMembership
     * const DepartmentMembership = await prisma.departmentMembership.create({
     *   data: {
     *     // ... data to create a DepartmentMembership
     *   }
     * })
     * 
     */
    create<T extends DepartmentMembershipCreateArgs>(args: SelectSubset<T, DepartmentMembershipCreateArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DepartmentMemberships.
     * @param {DepartmentMembershipCreateManyArgs} args - Arguments to create many DepartmentMemberships.
     * @example
     * // Create many DepartmentMemberships
     * const departmentMembership = await prisma.departmentMembership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentMembershipCreateManyArgs>(args?: SelectSubset<T, DepartmentMembershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepartmentMemberships and returns the data saved in the database.
     * @param {DepartmentMembershipCreateManyAndReturnArgs} args - Arguments to create many DepartmentMemberships.
     * @example
     * // Create many DepartmentMemberships
     * const departmentMembership = await prisma.departmentMembership.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepartmentMemberships and only return the `id`
     * const departmentMembershipWithIdOnly = await prisma.departmentMembership.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentMembershipCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentMembershipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DepartmentMembership.
     * @param {DepartmentMembershipDeleteArgs} args - Arguments to delete one DepartmentMembership.
     * @example
     * // Delete one DepartmentMembership
     * const DepartmentMembership = await prisma.departmentMembership.delete({
     *   where: {
     *     // ... filter to delete one DepartmentMembership
     *   }
     * })
     * 
     */
    delete<T extends DepartmentMembershipDeleteArgs>(args: SelectSubset<T, DepartmentMembershipDeleteArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DepartmentMembership.
     * @param {DepartmentMembershipUpdateArgs} args - Arguments to update one DepartmentMembership.
     * @example
     * // Update one DepartmentMembership
     * const departmentMembership = await prisma.departmentMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentMembershipUpdateArgs>(args: SelectSubset<T, DepartmentMembershipUpdateArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DepartmentMemberships.
     * @param {DepartmentMembershipDeleteManyArgs} args - Arguments to filter DepartmentMemberships to delete.
     * @example
     * // Delete a few DepartmentMemberships
     * const { count } = await prisma.departmentMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentMembershipDeleteManyArgs>(args?: SelectSubset<T, DepartmentMembershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentMemberships
     * const departmentMembership = await prisma.departmentMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentMembershipUpdateManyArgs>(args: SelectSubset<T, DepartmentMembershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentMemberships and returns the data updated in the database.
     * @param {DepartmentMembershipUpdateManyAndReturnArgs} args - Arguments to update many DepartmentMemberships.
     * @example
     * // Update many DepartmentMemberships
     * const departmentMembership = await prisma.departmentMembership.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DepartmentMemberships and only return the `id`
     * const departmentMembershipWithIdOnly = await prisma.departmentMembership.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentMembershipUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentMembershipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DepartmentMembership.
     * @param {DepartmentMembershipUpsertArgs} args - Arguments to update or create a DepartmentMembership.
     * @example
     * // Update or create a DepartmentMembership
     * const departmentMembership = await prisma.departmentMembership.upsert({
     *   create: {
     *     // ... data to create a DepartmentMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentMembership we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentMembershipUpsertArgs>(args: SelectSubset<T, DepartmentMembershipUpsertArgs<ExtArgs>>): Prisma__DepartmentMembershipClient<$Result.GetResult<Prisma.$DepartmentMembershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DepartmentMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMembershipCountArgs} args - Arguments to filter DepartmentMemberships to count.
     * @example
     * // Count the number of DepartmentMemberships
     * const count = await prisma.departmentMembership.count({
     *   where: {
     *     // ... the filter for the DepartmentMemberships we want to count
     *   }
     * })
    **/
    count<T extends DepartmentMembershipCountArgs>(
      args?: Subset<T, DepartmentMembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentMembershipAggregateArgs>(args: Subset<T, DepartmentMembershipAggregateArgs>): Prisma.PrismaPromise<GetDepartmentMembershipAggregateType<T>>

    /**
     * Group by DepartmentMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentMembershipGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepartmentMembership model
   */
  readonly fields: DepartmentMembershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentMembershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepartmentMembership model
   */
  interface DepartmentMembershipFieldRefs {
    readonly id: FieldRef<"DepartmentMembership", 'String'>
    readonly userId: FieldRef<"DepartmentMembership", 'String'>
    readonly departmentId: FieldRef<"DepartmentMembership", 'String'>
    readonly role: FieldRef<"DepartmentMembership", 'String'>
    readonly joinedAt: FieldRef<"DepartmentMembership", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DepartmentMembership findUnique
   */
  export type DepartmentMembershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMembership to fetch.
     */
    where: DepartmentMembershipWhereUniqueInput
  }

  /**
   * DepartmentMembership findUniqueOrThrow
   */
  export type DepartmentMembershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMembership to fetch.
     */
    where: DepartmentMembershipWhereUniqueInput
  }

  /**
   * DepartmentMembership findFirst
   */
  export type DepartmentMembershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMembership to fetch.
     */
    where?: DepartmentMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMemberships to fetch.
     */
    orderBy?: DepartmentMembershipOrderByWithRelationInput | DepartmentMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentMemberships.
     */
    cursor?: DepartmentMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentMemberships.
     */
    distinct?: DepartmentMembershipScalarFieldEnum | DepartmentMembershipScalarFieldEnum[]
  }

  /**
   * DepartmentMembership findFirstOrThrow
   */
  export type DepartmentMembershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMembership to fetch.
     */
    where?: DepartmentMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMemberships to fetch.
     */
    orderBy?: DepartmentMembershipOrderByWithRelationInput | DepartmentMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentMemberships.
     */
    cursor?: DepartmentMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMemberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentMemberships.
     */
    distinct?: DepartmentMembershipScalarFieldEnum | DepartmentMembershipScalarFieldEnum[]
  }

  /**
   * DepartmentMembership findMany
   */
  export type DepartmentMembershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMemberships to fetch.
     */
    where?: DepartmentMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMemberships to fetch.
     */
    orderBy?: DepartmentMembershipOrderByWithRelationInput | DepartmentMembershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentMemberships.
     */
    cursor?: DepartmentMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMemberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMemberships.
     */
    skip?: number
    distinct?: DepartmentMembershipScalarFieldEnum | DepartmentMembershipScalarFieldEnum[]
  }

  /**
   * DepartmentMembership create
   */
  export type DepartmentMembershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * The data needed to create a DepartmentMembership.
     */
    data: XOR<DepartmentMembershipCreateInput, DepartmentMembershipUncheckedCreateInput>
  }

  /**
   * DepartmentMembership createMany
   */
  export type DepartmentMembershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepartmentMemberships.
     */
    data: DepartmentMembershipCreateManyInput | DepartmentMembershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentMembership createManyAndReturn
   */
  export type DepartmentMembershipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * The data used to create many DepartmentMemberships.
     */
    data: DepartmentMembershipCreateManyInput | DepartmentMembershipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentMembership update
   */
  export type DepartmentMembershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * The data needed to update a DepartmentMembership.
     */
    data: XOR<DepartmentMembershipUpdateInput, DepartmentMembershipUncheckedUpdateInput>
    /**
     * Choose, which DepartmentMembership to update.
     */
    where: DepartmentMembershipWhereUniqueInput
  }

  /**
   * DepartmentMembership updateMany
   */
  export type DepartmentMembershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepartmentMemberships.
     */
    data: XOR<DepartmentMembershipUpdateManyMutationInput, DepartmentMembershipUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentMemberships to update
     */
    where?: DepartmentMembershipWhereInput
    /**
     * Limit how many DepartmentMemberships to update.
     */
    limit?: number
  }

  /**
   * DepartmentMembership updateManyAndReturn
   */
  export type DepartmentMembershipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * The data used to update DepartmentMemberships.
     */
    data: XOR<DepartmentMembershipUpdateManyMutationInput, DepartmentMembershipUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentMemberships to update
     */
    where?: DepartmentMembershipWhereInput
    /**
     * Limit how many DepartmentMemberships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentMembership upsert
   */
  export type DepartmentMembershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * The filter to search for the DepartmentMembership to update in case it exists.
     */
    where: DepartmentMembershipWhereUniqueInput
    /**
     * In case the DepartmentMembership found by the `where` argument doesn't exist, create a new DepartmentMembership with this data.
     */
    create: XOR<DepartmentMembershipCreateInput, DepartmentMembershipUncheckedCreateInput>
    /**
     * In case the DepartmentMembership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentMembershipUpdateInput, DepartmentMembershipUncheckedUpdateInput>
  }

  /**
   * DepartmentMembership delete
   */
  export type DepartmentMembershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
    /**
     * Filter which DepartmentMembership to delete.
     */
    where: DepartmentMembershipWhereUniqueInput
  }

  /**
   * DepartmentMembership deleteMany
   */
  export type DepartmentMembershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentMemberships to delete
     */
    where?: DepartmentMembershipWhereInput
    /**
     * Limit how many DepartmentMemberships to delete.
     */
    limit?: number
  }

  /**
   * DepartmentMembership without action
   */
  export type DepartmentMembershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMembership
     */
    select?: DepartmentMembershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentMembership
     */
    omit?: DepartmentMembershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMembershipInclude<ExtArgs> | null
  }


  /**
   * Model StaffProfile
   */

  export type AggregateStaffProfile = {
    _count: StaffProfileCountAggregateOutputType | null
    _min: StaffProfileMinAggregateOutputType | null
    _max: StaffProfileMaxAggregateOutputType | null
  }

  export type StaffProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    hospitalId: string | null
    staffId: string | null
    specialization: string | null
    joiningDate: Date | null
    employmentStatus: $Enums.EmploymentStatus | null
  }

  export type StaffProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    hospitalId: string | null
    staffId: string | null
    specialization: string | null
    joiningDate: Date | null
    employmentStatus: $Enums.EmploymentStatus | null
  }

  export type StaffProfileCountAggregateOutputType = {
    id: number
    userId: number
    hospitalId: number
    staffId: number
    specialization: number
    qualifications: number
    joiningDate: number
    employmentStatus: number
    contactInformation: number
    _all: number
  }


  export type StaffProfileMinAggregateInputType = {
    id?: true
    userId?: true
    hospitalId?: true
    staffId?: true
    specialization?: true
    joiningDate?: true
    employmentStatus?: true
  }

  export type StaffProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    hospitalId?: true
    staffId?: true
    specialization?: true
    joiningDate?: true
    employmentStatus?: true
  }

  export type StaffProfileCountAggregateInputType = {
    id?: true
    userId?: true
    hospitalId?: true
    staffId?: true
    specialization?: true
    qualifications?: true
    joiningDate?: true
    employmentStatus?: true
    contactInformation?: true
    _all?: true
  }

  export type StaffProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffProfile to aggregate.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffProfiles
    **/
    _count?: true | StaffProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffProfileMaxAggregateInputType
  }

  export type GetStaffProfileAggregateType<T extends StaffProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffProfile[P]>
      : GetScalarType<T[P], AggregateStaffProfile[P]>
  }




  export type StaffProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffProfileWhereInput
    orderBy?: StaffProfileOrderByWithAggregationInput | StaffProfileOrderByWithAggregationInput[]
    by: StaffProfileScalarFieldEnum[] | StaffProfileScalarFieldEnum
    having?: StaffProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffProfileCountAggregateInputType | true
    _min?: StaffProfileMinAggregateInputType
    _max?: StaffProfileMaxAggregateInputType
  }

  export type StaffProfileGroupByOutputType = {
    id: string
    userId: string
    hospitalId: string
    staffId: string
    specialization: string | null
    qualifications: JsonValue | null
    joiningDate: Date
    employmentStatus: $Enums.EmploymentStatus
    contactInformation: JsonValue | null
    _count: StaffProfileCountAggregateOutputType | null
    _min: StaffProfileMinAggregateOutputType | null
    _max: StaffProfileMaxAggregateOutputType | null
  }

  type GetStaffProfileGroupByPayload<T extends StaffProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffProfileGroupByOutputType[P]>
            : GetScalarType<T[P], StaffProfileGroupByOutputType[P]>
        }
      >
    >


  export type StaffProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hospitalId?: boolean
    staffId?: boolean
    specialization?: boolean
    qualifications?: boolean
    joiningDate?: boolean
    employmentStatus?: boolean
    contactInformation?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffProfile"]>

  export type StaffProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hospitalId?: boolean
    staffId?: boolean
    specialization?: boolean
    qualifications?: boolean
    joiningDate?: boolean
    employmentStatus?: boolean
    contactInformation?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffProfile"]>

  export type StaffProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    hospitalId?: boolean
    staffId?: boolean
    specialization?: boolean
    qualifications?: boolean
    joiningDate?: boolean
    employmentStatus?: boolean
    contactInformation?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffProfile"]>

  export type StaffProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    hospitalId?: boolean
    staffId?: boolean
    specialization?: boolean
    qualifications?: boolean
    joiningDate?: boolean
    employmentStatus?: boolean
    contactInformation?: boolean
  }

  export type StaffProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "hospitalId" | "staffId" | "specialization" | "qualifications" | "joiningDate" | "employmentStatus" | "contactInformation", ExtArgs["result"]["staffProfile"]>
  export type StaffProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type StaffProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type StaffProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $StaffProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      hospitalId: string
      staffId: string
      specialization: string | null
      qualifications: Prisma.JsonValue | null
      joiningDate: Date
      employmentStatus: $Enums.EmploymentStatus
      contactInformation: Prisma.JsonValue | null
    }, ExtArgs["result"]["staffProfile"]>
    composites: {}
  }

  type StaffProfileGetPayload<S extends boolean | null | undefined | StaffProfileDefaultArgs> = $Result.GetResult<Prisma.$StaffProfilePayload, S>

  type StaffProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffProfileCountAggregateInputType | true
    }

  export interface StaffProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffProfile'], meta: { name: 'StaffProfile' } }
    /**
     * Find zero or one StaffProfile that matches the filter.
     * @param {StaffProfileFindUniqueArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffProfileFindUniqueArgs>(args: SelectSubset<T, StaffProfileFindUniqueArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffProfileFindUniqueOrThrowArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileFindFirstArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffProfileFindFirstArgs>(args?: SelectSubset<T, StaffProfileFindFirstArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileFindFirstOrThrowArgs} args - Arguments to find a StaffProfile
     * @example
     * // Get one StaffProfile
     * const staffProfile = await prisma.staffProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffProfiles
     * const staffProfiles = await prisma.staffProfile.findMany()
     * 
     * // Get first 10 StaffProfiles
     * const staffProfiles = await prisma.staffProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffProfileWithIdOnly = await prisma.staffProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffProfileFindManyArgs>(args?: SelectSubset<T, StaffProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffProfile.
     * @param {StaffProfileCreateArgs} args - Arguments to create a StaffProfile.
     * @example
     * // Create one StaffProfile
     * const StaffProfile = await prisma.staffProfile.create({
     *   data: {
     *     // ... data to create a StaffProfile
     *   }
     * })
     * 
     */
    create<T extends StaffProfileCreateArgs>(args: SelectSubset<T, StaffProfileCreateArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffProfiles.
     * @param {StaffProfileCreateManyArgs} args - Arguments to create many StaffProfiles.
     * @example
     * // Create many StaffProfiles
     * const staffProfile = await prisma.staffProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffProfileCreateManyArgs>(args?: SelectSubset<T, StaffProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffProfiles and returns the data saved in the database.
     * @param {StaffProfileCreateManyAndReturnArgs} args - Arguments to create many StaffProfiles.
     * @example
     * // Create many StaffProfiles
     * const staffProfile = await prisma.staffProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffProfiles and only return the `id`
     * const staffProfileWithIdOnly = await prisma.staffProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StaffProfile.
     * @param {StaffProfileDeleteArgs} args - Arguments to delete one StaffProfile.
     * @example
     * // Delete one StaffProfile
     * const StaffProfile = await prisma.staffProfile.delete({
     *   where: {
     *     // ... filter to delete one StaffProfile
     *   }
     * })
     * 
     */
    delete<T extends StaffProfileDeleteArgs>(args: SelectSubset<T, StaffProfileDeleteArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffProfile.
     * @param {StaffProfileUpdateArgs} args - Arguments to update one StaffProfile.
     * @example
     * // Update one StaffProfile
     * const staffProfile = await prisma.staffProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffProfileUpdateArgs>(args: SelectSubset<T, StaffProfileUpdateArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffProfiles.
     * @param {StaffProfileDeleteManyArgs} args - Arguments to filter StaffProfiles to delete.
     * @example
     * // Delete a few StaffProfiles
     * const { count } = await prisma.staffProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffProfileDeleteManyArgs>(args?: SelectSubset<T, StaffProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffProfiles
     * const staffProfile = await prisma.staffProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffProfileUpdateManyArgs>(args: SelectSubset<T, StaffProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffProfiles and returns the data updated in the database.
     * @param {StaffProfileUpdateManyAndReturnArgs} args - Arguments to update many StaffProfiles.
     * @example
     * // Update many StaffProfiles
     * const staffProfile = await prisma.staffProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaffProfiles and only return the `id`
     * const staffProfileWithIdOnly = await prisma.staffProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StaffProfile.
     * @param {StaffProfileUpsertArgs} args - Arguments to update or create a StaffProfile.
     * @example
     * // Update or create a StaffProfile
     * const staffProfile = await prisma.staffProfile.upsert({
     *   create: {
     *     // ... data to create a StaffProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffProfile we want to update
     *   }
     * })
     */
    upsert<T extends StaffProfileUpsertArgs>(args: SelectSubset<T, StaffProfileUpsertArgs<ExtArgs>>): Prisma__StaffProfileClient<$Result.GetResult<Prisma.$StaffProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileCountArgs} args - Arguments to filter StaffProfiles to count.
     * @example
     * // Count the number of StaffProfiles
     * const count = await prisma.staffProfile.count({
     *   where: {
     *     // ... the filter for the StaffProfiles we want to count
     *   }
     * })
    **/
    count<T extends StaffProfileCountArgs>(
      args?: Subset<T, StaffProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffProfileAggregateArgs>(args: Subset<T, StaffProfileAggregateArgs>): Prisma.PrismaPromise<GetStaffProfileAggregateType<T>>

    /**
     * Group by StaffProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffProfileGroupByArgs['orderBy'] }
        : { orderBy?: StaffProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffProfile model
   */
  readonly fields: StaffProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffProfile model
   */
  interface StaffProfileFieldRefs {
    readonly id: FieldRef<"StaffProfile", 'String'>
    readonly userId: FieldRef<"StaffProfile", 'String'>
    readonly hospitalId: FieldRef<"StaffProfile", 'String'>
    readonly staffId: FieldRef<"StaffProfile", 'String'>
    readonly specialization: FieldRef<"StaffProfile", 'String'>
    readonly qualifications: FieldRef<"StaffProfile", 'Json'>
    readonly joiningDate: FieldRef<"StaffProfile", 'DateTime'>
    readonly employmentStatus: FieldRef<"StaffProfile", 'EmploymentStatus'>
    readonly contactInformation: FieldRef<"StaffProfile", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * StaffProfile findUnique
   */
  export type StaffProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile findUniqueOrThrow
   */
  export type StaffProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile findFirst
   */
  export type StaffProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffProfiles.
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffProfiles.
     */
    distinct?: StaffProfileScalarFieldEnum | StaffProfileScalarFieldEnum[]
  }

  /**
   * StaffProfile findFirstOrThrow
   */
  export type StaffProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfile to fetch.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffProfiles.
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffProfiles.
     */
    distinct?: StaffProfileScalarFieldEnum | StaffProfileScalarFieldEnum[]
  }

  /**
   * StaffProfile findMany
   */
  export type StaffProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter, which StaffProfiles to fetch.
     */
    where?: StaffProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffProfiles to fetch.
     */
    orderBy?: StaffProfileOrderByWithRelationInput | StaffProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffProfiles.
     */
    cursor?: StaffProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffProfiles.
     */
    skip?: number
    distinct?: StaffProfileScalarFieldEnum | StaffProfileScalarFieldEnum[]
  }

  /**
   * StaffProfile create
   */
  export type StaffProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffProfile.
     */
    data: XOR<StaffProfileCreateInput, StaffProfileUncheckedCreateInput>
  }

  /**
   * StaffProfile createMany
   */
  export type StaffProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffProfiles.
     */
    data: StaffProfileCreateManyInput | StaffProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffProfile createManyAndReturn
   */
  export type StaffProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * The data used to create many StaffProfiles.
     */
    data: StaffProfileCreateManyInput | StaffProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffProfile update
   */
  export type StaffProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffProfile.
     */
    data: XOR<StaffProfileUpdateInput, StaffProfileUncheckedUpdateInput>
    /**
     * Choose, which StaffProfile to update.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile updateMany
   */
  export type StaffProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffProfiles.
     */
    data: XOR<StaffProfileUpdateManyMutationInput, StaffProfileUncheckedUpdateManyInput>
    /**
     * Filter which StaffProfiles to update
     */
    where?: StaffProfileWhereInput
    /**
     * Limit how many StaffProfiles to update.
     */
    limit?: number
  }

  /**
   * StaffProfile updateManyAndReturn
   */
  export type StaffProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * The data used to update StaffProfiles.
     */
    data: XOR<StaffProfileUpdateManyMutationInput, StaffProfileUncheckedUpdateManyInput>
    /**
     * Filter which StaffProfiles to update
     */
    where?: StaffProfileWhereInput
    /**
     * Limit how many StaffProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffProfile upsert
   */
  export type StaffProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffProfile to update in case it exists.
     */
    where: StaffProfileWhereUniqueInput
    /**
     * In case the StaffProfile found by the `where` argument doesn't exist, create a new StaffProfile with this data.
     */
    create: XOR<StaffProfileCreateInput, StaffProfileUncheckedCreateInput>
    /**
     * In case the StaffProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffProfileUpdateInput, StaffProfileUncheckedUpdateInput>
  }

  /**
   * StaffProfile delete
   */
  export type StaffProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
    /**
     * Filter which StaffProfile to delete.
     */
    where: StaffProfileWhereUniqueInput
  }

  /**
   * StaffProfile deleteMany
   */
  export type StaffProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffProfiles to delete
     */
    where?: StaffProfileWhereInput
    /**
     * Limit how many StaffProfiles to delete.
     */
    limit?: number
  }

  /**
   * StaffProfile without action
   */
  export type StaffProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffProfile
     */
    select?: StaffProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffProfile
     */
    omit?: StaffProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffProfileInclude<ExtArgs> | null
  }


  /**
   * Model PatientHospitalAccess
   */

  export type AggregatePatientHospitalAccess = {
    _count: PatientHospitalAccessCountAggregateOutputType | null
    _min: PatientHospitalAccessMinAggregateOutputType | null
    _max: PatientHospitalAccessMaxAggregateOutputType | null
  }

  export type PatientHospitalAccessMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    accessLevel: $Enums.AccessLevel | null
    grantedAt: Date | null
    grantedBy: string | null
    expiresAt: Date | null
  }

  export type PatientHospitalAccessMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    accessLevel: $Enums.AccessLevel | null
    grantedAt: Date | null
    grantedBy: string | null
    expiresAt: Date | null
  }

  export type PatientHospitalAccessCountAggregateOutputType = {
    id: number
    patientId: number
    hospitalId: number
    accessLevel: number
    grantedAt: number
    grantedBy: number
    expiresAt: number
    _all: number
  }


  export type PatientHospitalAccessMinAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    accessLevel?: true
    grantedAt?: true
    grantedBy?: true
    expiresAt?: true
  }

  export type PatientHospitalAccessMaxAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    accessLevel?: true
    grantedAt?: true
    grantedBy?: true
    expiresAt?: true
  }

  export type PatientHospitalAccessCountAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    accessLevel?: true
    grantedAt?: true
    grantedBy?: true
    expiresAt?: true
    _all?: true
  }

  export type PatientHospitalAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientHospitalAccess to aggregate.
     */
    where?: PatientHospitalAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHospitalAccesses to fetch.
     */
    orderBy?: PatientHospitalAccessOrderByWithRelationInput | PatientHospitalAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientHospitalAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHospitalAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHospitalAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientHospitalAccesses
    **/
    _count?: true | PatientHospitalAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientHospitalAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientHospitalAccessMaxAggregateInputType
  }

  export type GetPatientHospitalAccessAggregateType<T extends PatientHospitalAccessAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientHospitalAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientHospitalAccess[P]>
      : GetScalarType<T[P], AggregatePatientHospitalAccess[P]>
  }




  export type PatientHospitalAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHospitalAccessWhereInput
    orderBy?: PatientHospitalAccessOrderByWithAggregationInput | PatientHospitalAccessOrderByWithAggregationInput[]
    by: PatientHospitalAccessScalarFieldEnum[] | PatientHospitalAccessScalarFieldEnum
    having?: PatientHospitalAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientHospitalAccessCountAggregateInputType | true
    _min?: PatientHospitalAccessMinAggregateInputType
    _max?: PatientHospitalAccessMaxAggregateInputType
  }

  export type PatientHospitalAccessGroupByOutputType = {
    id: string
    patientId: string
    hospitalId: string
    accessLevel: $Enums.AccessLevel
    grantedAt: Date
    grantedBy: string
    expiresAt: Date | null
    _count: PatientHospitalAccessCountAggregateOutputType | null
    _min: PatientHospitalAccessMinAggregateOutputType | null
    _max: PatientHospitalAccessMaxAggregateOutputType | null
  }

  type GetPatientHospitalAccessGroupByPayload<T extends PatientHospitalAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientHospitalAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientHospitalAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientHospitalAccessGroupByOutputType[P]>
            : GetScalarType<T[P], PatientHospitalAccessGroupByOutputType[P]>
        }
      >
    >


  export type PatientHospitalAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    accessLevel?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    expiresAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    granter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientHospitalAccess"]>

  export type PatientHospitalAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    accessLevel?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    expiresAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    granter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientHospitalAccess"]>

  export type PatientHospitalAccessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    accessLevel?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    expiresAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    granter?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientHospitalAccess"]>

  export type PatientHospitalAccessSelectScalar = {
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    accessLevel?: boolean
    grantedAt?: boolean
    grantedBy?: boolean
    expiresAt?: boolean
  }

  export type PatientHospitalAccessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "hospitalId" | "accessLevel" | "grantedAt" | "grantedBy" | "expiresAt", ExtArgs["result"]["patientHospitalAccess"]>
  export type PatientHospitalAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    granter?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientHospitalAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    granter?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientHospitalAccessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    granter?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientHospitalAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientHospitalAccess"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
      granter: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      hospitalId: string
      accessLevel: $Enums.AccessLevel
      grantedAt: Date
      grantedBy: string
      expiresAt: Date | null
    }, ExtArgs["result"]["patientHospitalAccess"]>
    composites: {}
  }

  type PatientHospitalAccessGetPayload<S extends boolean | null | undefined | PatientHospitalAccessDefaultArgs> = $Result.GetResult<Prisma.$PatientHospitalAccessPayload, S>

  type PatientHospitalAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientHospitalAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientHospitalAccessCountAggregateInputType | true
    }

  export interface PatientHospitalAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientHospitalAccess'], meta: { name: 'PatientHospitalAccess' } }
    /**
     * Find zero or one PatientHospitalAccess that matches the filter.
     * @param {PatientHospitalAccessFindUniqueArgs} args - Arguments to find a PatientHospitalAccess
     * @example
     * // Get one PatientHospitalAccess
     * const patientHospitalAccess = await prisma.patientHospitalAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientHospitalAccessFindUniqueArgs>(args: SelectSubset<T, PatientHospitalAccessFindUniqueArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientHospitalAccess that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientHospitalAccessFindUniqueOrThrowArgs} args - Arguments to find a PatientHospitalAccess
     * @example
     * // Get one PatientHospitalAccess
     * const patientHospitalAccess = await prisma.patientHospitalAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientHospitalAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientHospitalAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientHospitalAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHospitalAccessFindFirstArgs} args - Arguments to find a PatientHospitalAccess
     * @example
     * // Get one PatientHospitalAccess
     * const patientHospitalAccess = await prisma.patientHospitalAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientHospitalAccessFindFirstArgs>(args?: SelectSubset<T, PatientHospitalAccessFindFirstArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientHospitalAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHospitalAccessFindFirstOrThrowArgs} args - Arguments to find a PatientHospitalAccess
     * @example
     * // Get one PatientHospitalAccess
     * const patientHospitalAccess = await prisma.patientHospitalAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientHospitalAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientHospitalAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientHospitalAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHospitalAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientHospitalAccesses
     * const patientHospitalAccesses = await prisma.patientHospitalAccess.findMany()
     * 
     * // Get first 10 PatientHospitalAccesses
     * const patientHospitalAccesses = await prisma.patientHospitalAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientHospitalAccessWithIdOnly = await prisma.patientHospitalAccess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientHospitalAccessFindManyArgs>(args?: SelectSubset<T, PatientHospitalAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientHospitalAccess.
     * @param {PatientHospitalAccessCreateArgs} args - Arguments to create a PatientHospitalAccess.
     * @example
     * // Create one PatientHospitalAccess
     * const PatientHospitalAccess = await prisma.patientHospitalAccess.create({
     *   data: {
     *     // ... data to create a PatientHospitalAccess
     *   }
     * })
     * 
     */
    create<T extends PatientHospitalAccessCreateArgs>(args: SelectSubset<T, PatientHospitalAccessCreateArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientHospitalAccesses.
     * @param {PatientHospitalAccessCreateManyArgs} args - Arguments to create many PatientHospitalAccesses.
     * @example
     * // Create many PatientHospitalAccesses
     * const patientHospitalAccess = await prisma.patientHospitalAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientHospitalAccessCreateManyArgs>(args?: SelectSubset<T, PatientHospitalAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientHospitalAccesses and returns the data saved in the database.
     * @param {PatientHospitalAccessCreateManyAndReturnArgs} args - Arguments to create many PatientHospitalAccesses.
     * @example
     * // Create many PatientHospitalAccesses
     * const patientHospitalAccess = await prisma.patientHospitalAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientHospitalAccesses and only return the `id`
     * const patientHospitalAccessWithIdOnly = await prisma.patientHospitalAccess.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientHospitalAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientHospitalAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientHospitalAccess.
     * @param {PatientHospitalAccessDeleteArgs} args - Arguments to delete one PatientHospitalAccess.
     * @example
     * // Delete one PatientHospitalAccess
     * const PatientHospitalAccess = await prisma.patientHospitalAccess.delete({
     *   where: {
     *     // ... filter to delete one PatientHospitalAccess
     *   }
     * })
     * 
     */
    delete<T extends PatientHospitalAccessDeleteArgs>(args: SelectSubset<T, PatientHospitalAccessDeleteArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientHospitalAccess.
     * @param {PatientHospitalAccessUpdateArgs} args - Arguments to update one PatientHospitalAccess.
     * @example
     * // Update one PatientHospitalAccess
     * const patientHospitalAccess = await prisma.patientHospitalAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientHospitalAccessUpdateArgs>(args: SelectSubset<T, PatientHospitalAccessUpdateArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientHospitalAccesses.
     * @param {PatientHospitalAccessDeleteManyArgs} args - Arguments to filter PatientHospitalAccesses to delete.
     * @example
     * // Delete a few PatientHospitalAccesses
     * const { count } = await prisma.patientHospitalAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientHospitalAccessDeleteManyArgs>(args?: SelectSubset<T, PatientHospitalAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientHospitalAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHospitalAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientHospitalAccesses
     * const patientHospitalAccess = await prisma.patientHospitalAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientHospitalAccessUpdateManyArgs>(args: SelectSubset<T, PatientHospitalAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientHospitalAccesses and returns the data updated in the database.
     * @param {PatientHospitalAccessUpdateManyAndReturnArgs} args - Arguments to update many PatientHospitalAccesses.
     * @example
     * // Update many PatientHospitalAccesses
     * const patientHospitalAccess = await prisma.patientHospitalAccess.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientHospitalAccesses and only return the `id`
     * const patientHospitalAccessWithIdOnly = await prisma.patientHospitalAccess.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientHospitalAccessUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientHospitalAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientHospitalAccess.
     * @param {PatientHospitalAccessUpsertArgs} args - Arguments to update or create a PatientHospitalAccess.
     * @example
     * // Update or create a PatientHospitalAccess
     * const patientHospitalAccess = await prisma.patientHospitalAccess.upsert({
     *   create: {
     *     // ... data to create a PatientHospitalAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientHospitalAccess we want to update
     *   }
     * })
     */
    upsert<T extends PatientHospitalAccessUpsertArgs>(args: SelectSubset<T, PatientHospitalAccessUpsertArgs<ExtArgs>>): Prisma__PatientHospitalAccessClient<$Result.GetResult<Prisma.$PatientHospitalAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientHospitalAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHospitalAccessCountArgs} args - Arguments to filter PatientHospitalAccesses to count.
     * @example
     * // Count the number of PatientHospitalAccesses
     * const count = await prisma.patientHospitalAccess.count({
     *   where: {
     *     // ... the filter for the PatientHospitalAccesses we want to count
     *   }
     * })
    **/
    count<T extends PatientHospitalAccessCountArgs>(
      args?: Subset<T, PatientHospitalAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientHospitalAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientHospitalAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHospitalAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientHospitalAccessAggregateArgs>(args: Subset<T, PatientHospitalAccessAggregateArgs>): Prisma.PrismaPromise<GetPatientHospitalAccessAggregateType<T>>

    /**
     * Group by PatientHospitalAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHospitalAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientHospitalAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientHospitalAccessGroupByArgs['orderBy'] }
        : { orderBy?: PatientHospitalAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientHospitalAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientHospitalAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientHospitalAccess model
   */
  readonly fields: PatientHospitalAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientHospitalAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientHospitalAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    granter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientHospitalAccess model
   */
  interface PatientHospitalAccessFieldRefs {
    readonly id: FieldRef<"PatientHospitalAccess", 'String'>
    readonly patientId: FieldRef<"PatientHospitalAccess", 'String'>
    readonly hospitalId: FieldRef<"PatientHospitalAccess", 'String'>
    readonly accessLevel: FieldRef<"PatientHospitalAccess", 'AccessLevel'>
    readonly grantedAt: FieldRef<"PatientHospitalAccess", 'DateTime'>
    readonly grantedBy: FieldRef<"PatientHospitalAccess", 'String'>
    readonly expiresAt: FieldRef<"PatientHospitalAccess", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientHospitalAccess findUnique
   */
  export type PatientHospitalAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * Filter, which PatientHospitalAccess to fetch.
     */
    where: PatientHospitalAccessWhereUniqueInput
  }

  /**
   * PatientHospitalAccess findUniqueOrThrow
   */
  export type PatientHospitalAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * Filter, which PatientHospitalAccess to fetch.
     */
    where: PatientHospitalAccessWhereUniqueInput
  }

  /**
   * PatientHospitalAccess findFirst
   */
  export type PatientHospitalAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * Filter, which PatientHospitalAccess to fetch.
     */
    where?: PatientHospitalAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHospitalAccesses to fetch.
     */
    orderBy?: PatientHospitalAccessOrderByWithRelationInput | PatientHospitalAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientHospitalAccesses.
     */
    cursor?: PatientHospitalAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHospitalAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHospitalAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientHospitalAccesses.
     */
    distinct?: PatientHospitalAccessScalarFieldEnum | PatientHospitalAccessScalarFieldEnum[]
  }

  /**
   * PatientHospitalAccess findFirstOrThrow
   */
  export type PatientHospitalAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * Filter, which PatientHospitalAccess to fetch.
     */
    where?: PatientHospitalAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHospitalAccesses to fetch.
     */
    orderBy?: PatientHospitalAccessOrderByWithRelationInput | PatientHospitalAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientHospitalAccesses.
     */
    cursor?: PatientHospitalAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHospitalAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHospitalAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientHospitalAccesses.
     */
    distinct?: PatientHospitalAccessScalarFieldEnum | PatientHospitalAccessScalarFieldEnum[]
  }

  /**
   * PatientHospitalAccess findMany
   */
  export type PatientHospitalAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * Filter, which PatientHospitalAccesses to fetch.
     */
    where?: PatientHospitalAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHospitalAccesses to fetch.
     */
    orderBy?: PatientHospitalAccessOrderByWithRelationInput | PatientHospitalAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientHospitalAccesses.
     */
    cursor?: PatientHospitalAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHospitalAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHospitalAccesses.
     */
    skip?: number
    distinct?: PatientHospitalAccessScalarFieldEnum | PatientHospitalAccessScalarFieldEnum[]
  }

  /**
   * PatientHospitalAccess create
   */
  export type PatientHospitalAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientHospitalAccess.
     */
    data: XOR<PatientHospitalAccessCreateInput, PatientHospitalAccessUncheckedCreateInput>
  }

  /**
   * PatientHospitalAccess createMany
   */
  export type PatientHospitalAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientHospitalAccesses.
     */
    data: PatientHospitalAccessCreateManyInput | PatientHospitalAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientHospitalAccess createManyAndReturn
   */
  export type PatientHospitalAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * The data used to create many PatientHospitalAccesses.
     */
    data: PatientHospitalAccessCreateManyInput | PatientHospitalAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientHospitalAccess update
   */
  export type PatientHospitalAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientHospitalAccess.
     */
    data: XOR<PatientHospitalAccessUpdateInput, PatientHospitalAccessUncheckedUpdateInput>
    /**
     * Choose, which PatientHospitalAccess to update.
     */
    where: PatientHospitalAccessWhereUniqueInput
  }

  /**
   * PatientHospitalAccess updateMany
   */
  export type PatientHospitalAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientHospitalAccesses.
     */
    data: XOR<PatientHospitalAccessUpdateManyMutationInput, PatientHospitalAccessUncheckedUpdateManyInput>
    /**
     * Filter which PatientHospitalAccesses to update
     */
    where?: PatientHospitalAccessWhereInput
    /**
     * Limit how many PatientHospitalAccesses to update.
     */
    limit?: number
  }

  /**
   * PatientHospitalAccess updateManyAndReturn
   */
  export type PatientHospitalAccessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * The data used to update PatientHospitalAccesses.
     */
    data: XOR<PatientHospitalAccessUpdateManyMutationInput, PatientHospitalAccessUncheckedUpdateManyInput>
    /**
     * Filter which PatientHospitalAccesses to update
     */
    where?: PatientHospitalAccessWhereInput
    /**
     * Limit how many PatientHospitalAccesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientHospitalAccess upsert
   */
  export type PatientHospitalAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientHospitalAccess to update in case it exists.
     */
    where: PatientHospitalAccessWhereUniqueInput
    /**
     * In case the PatientHospitalAccess found by the `where` argument doesn't exist, create a new PatientHospitalAccess with this data.
     */
    create: XOR<PatientHospitalAccessCreateInput, PatientHospitalAccessUncheckedCreateInput>
    /**
     * In case the PatientHospitalAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientHospitalAccessUpdateInput, PatientHospitalAccessUncheckedUpdateInput>
  }

  /**
   * PatientHospitalAccess delete
   */
  export type PatientHospitalAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
    /**
     * Filter which PatientHospitalAccess to delete.
     */
    where: PatientHospitalAccessWhereUniqueInput
  }

  /**
   * PatientHospitalAccess deleteMany
   */
  export type PatientHospitalAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientHospitalAccesses to delete
     */
    where?: PatientHospitalAccessWhereInput
    /**
     * Limit how many PatientHospitalAccesses to delete.
     */
    limit?: number
  }

  /**
   * PatientHospitalAccess without action
   */
  export type PatientHospitalAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHospitalAccess
     */
    select?: PatientHospitalAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHospitalAccess
     */
    omit?: PatientHospitalAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHospitalAccessInclude<ExtArgs> | null
  }


  /**
   * Model PatientSearchIndex
   */

  export type AggregatePatientSearchIndex = {
    _count: PatientSearchIndexCountAggregateOutputType | null
    _min: PatientSearchIndexMinAggregateOutputType | null
    _max: PatientSearchIndexMaxAggregateOutputType | null
  }

  export type PatientSearchIndexMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    mrn: string | null
    name: string | null
    phone: string | null
    email: string | null
    qrCode: string | null
    searchVector: string | null
  }

  export type PatientSearchIndexMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    mrn: string | null
    name: string | null
    phone: string | null
    email: string | null
    qrCode: string | null
    searchVector: string | null
  }

  export type PatientSearchIndexCountAggregateOutputType = {
    id: number
    patientId: number
    mrn: number
    name: number
    phone: number
    email: number
    qrCode: number
    searchVector: number
    _all: number
  }


  export type PatientSearchIndexMinAggregateInputType = {
    id?: true
    patientId?: true
    mrn?: true
    name?: true
    phone?: true
    email?: true
    qrCode?: true
    searchVector?: true
  }

  export type PatientSearchIndexMaxAggregateInputType = {
    id?: true
    patientId?: true
    mrn?: true
    name?: true
    phone?: true
    email?: true
    qrCode?: true
    searchVector?: true
  }

  export type PatientSearchIndexCountAggregateInputType = {
    id?: true
    patientId?: true
    mrn?: true
    name?: true
    phone?: true
    email?: true
    qrCode?: true
    searchVector?: true
    _all?: true
  }

  export type PatientSearchIndexAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientSearchIndex to aggregate.
     */
    where?: PatientSearchIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientSearchIndices to fetch.
     */
    orderBy?: PatientSearchIndexOrderByWithRelationInput | PatientSearchIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientSearchIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientSearchIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientSearchIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientSearchIndices
    **/
    _count?: true | PatientSearchIndexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientSearchIndexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientSearchIndexMaxAggregateInputType
  }

  export type GetPatientSearchIndexAggregateType<T extends PatientSearchIndexAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientSearchIndex]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientSearchIndex[P]>
      : GetScalarType<T[P], AggregatePatientSearchIndex[P]>
  }




  export type PatientSearchIndexGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientSearchIndexWhereInput
    orderBy?: PatientSearchIndexOrderByWithAggregationInput | PatientSearchIndexOrderByWithAggregationInput[]
    by: PatientSearchIndexScalarFieldEnum[] | PatientSearchIndexScalarFieldEnum
    having?: PatientSearchIndexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientSearchIndexCountAggregateInputType | true
    _min?: PatientSearchIndexMinAggregateInputType
    _max?: PatientSearchIndexMaxAggregateInputType
  }

  export type PatientSearchIndexGroupByOutputType = {
    id: string
    patientId: string
    mrn: string
    name: string
    phone: string | null
    email: string | null
    qrCode: string
    searchVector: string | null
    _count: PatientSearchIndexCountAggregateOutputType | null
    _min: PatientSearchIndexMinAggregateOutputType | null
    _max: PatientSearchIndexMaxAggregateOutputType | null
  }

  type GetPatientSearchIndexGroupByPayload<T extends PatientSearchIndexGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientSearchIndexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientSearchIndexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientSearchIndexGroupByOutputType[P]>
            : GetScalarType<T[P], PatientSearchIndexGroupByOutputType[P]>
        }
      >
    >


  export type PatientSearchIndexSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    mrn?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    qrCode?: boolean
    searchVector?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientSearchIndex"]>

  export type PatientSearchIndexSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    mrn?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    qrCode?: boolean
    searchVector?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientSearchIndex"]>

  export type PatientSearchIndexSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    mrn?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    qrCode?: boolean
    searchVector?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientSearchIndex"]>

  export type PatientSearchIndexSelectScalar = {
    id?: boolean
    patientId?: boolean
    mrn?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    qrCode?: boolean
    searchVector?: boolean
  }

  export type PatientSearchIndexOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "mrn" | "name" | "phone" | "email" | "qrCode" | "searchVector", ExtArgs["result"]["patientSearchIndex"]>
  export type PatientSearchIndexInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientSearchIndexIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientSearchIndexIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $PatientSearchIndexPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientSearchIndex"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      mrn: string
      name: string
      phone: string | null
      email: string | null
      qrCode: string
      searchVector: string | null
    }, ExtArgs["result"]["patientSearchIndex"]>
    composites: {}
  }

  type PatientSearchIndexGetPayload<S extends boolean | null | undefined | PatientSearchIndexDefaultArgs> = $Result.GetResult<Prisma.$PatientSearchIndexPayload, S>

  type PatientSearchIndexCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientSearchIndexFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientSearchIndexCountAggregateInputType | true
    }

  export interface PatientSearchIndexDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientSearchIndex'], meta: { name: 'PatientSearchIndex' } }
    /**
     * Find zero or one PatientSearchIndex that matches the filter.
     * @param {PatientSearchIndexFindUniqueArgs} args - Arguments to find a PatientSearchIndex
     * @example
     * // Get one PatientSearchIndex
     * const patientSearchIndex = await prisma.patientSearchIndex.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientSearchIndexFindUniqueArgs>(args: SelectSubset<T, PatientSearchIndexFindUniqueArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientSearchIndex that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientSearchIndexFindUniqueOrThrowArgs} args - Arguments to find a PatientSearchIndex
     * @example
     * // Get one PatientSearchIndex
     * const patientSearchIndex = await prisma.patientSearchIndex.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientSearchIndexFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientSearchIndexFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientSearchIndex that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientSearchIndexFindFirstArgs} args - Arguments to find a PatientSearchIndex
     * @example
     * // Get one PatientSearchIndex
     * const patientSearchIndex = await prisma.patientSearchIndex.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientSearchIndexFindFirstArgs>(args?: SelectSubset<T, PatientSearchIndexFindFirstArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientSearchIndex that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientSearchIndexFindFirstOrThrowArgs} args - Arguments to find a PatientSearchIndex
     * @example
     * // Get one PatientSearchIndex
     * const patientSearchIndex = await prisma.patientSearchIndex.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientSearchIndexFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientSearchIndexFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientSearchIndices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientSearchIndexFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientSearchIndices
     * const patientSearchIndices = await prisma.patientSearchIndex.findMany()
     * 
     * // Get first 10 PatientSearchIndices
     * const patientSearchIndices = await prisma.patientSearchIndex.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientSearchIndexWithIdOnly = await prisma.patientSearchIndex.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientSearchIndexFindManyArgs>(args?: SelectSubset<T, PatientSearchIndexFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientSearchIndex.
     * @param {PatientSearchIndexCreateArgs} args - Arguments to create a PatientSearchIndex.
     * @example
     * // Create one PatientSearchIndex
     * const PatientSearchIndex = await prisma.patientSearchIndex.create({
     *   data: {
     *     // ... data to create a PatientSearchIndex
     *   }
     * })
     * 
     */
    create<T extends PatientSearchIndexCreateArgs>(args: SelectSubset<T, PatientSearchIndexCreateArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientSearchIndices.
     * @param {PatientSearchIndexCreateManyArgs} args - Arguments to create many PatientSearchIndices.
     * @example
     * // Create many PatientSearchIndices
     * const patientSearchIndex = await prisma.patientSearchIndex.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientSearchIndexCreateManyArgs>(args?: SelectSubset<T, PatientSearchIndexCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientSearchIndices and returns the data saved in the database.
     * @param {PatientSearchIndexCreateManyAndReturnArgs} args - Arguments to create many PatientSearchIndices.
     * @example
     * // Create many PatientSearchIndices
     * const patientSearchIndex = await prisma.patientSearchIndex.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientSearchIndices and only return the `id`
     * const patientSearchIndexWithIdOnly = await prisma.patientSearchIndex.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientSearchIndexCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientSearchIndexCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientSearchIndex.
     * @param {PatientSearchIndexDeleteArgs} args - Arguments to delete one PatientSearchIndex.
     * @example
     * // Delete one PatientSearchIndex
     * const PatientSearchIndex = await prisma.patientSearchIndex.delete({
     *   where: {
     *     // ... filter to delete one PatientSearchIndex
     *   }
     * })
     * 
     */
    delete<T extends PatientSearchIndexDeleteArgs>(args: SelectSubset<T, PatientSearchIndexDeleteArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientSearchIndex.
     * @param {PatientSearchIndexUpdateArgs} args - Arguments to update one PatientSearchIndex.
     * @example
     * // Update one PatientSearchIndex
     * const patientSearchIndex = await prisma.patientSearchIndex.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientSearchIndexUpdateArgs>(args: SelectSubset<T, PatientSearchIndexUpdateArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientSearchIndices.
     * @param {PatientSearchIndexDeleteManyArgs} args - Arguments to filter PatientSearchIndices to delete.
     * @example
     * // Delete a few PatientSearchIndices
     * const { count } = await prisma.patientSearchIndex.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientSearchIndexDeleteManyArgs>(args?: SelectSubset<T, PatientSearchIndexDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientSearchIndices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientSearchIndexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientSearchIndices
     * const patientSearchIndex = await prisma.patientSearchIndex.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientSearchIndexUpdateManyArgs>(args: SelectSubset<T, PatientSearchIndexUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientSearchIndices and returns the data updated in the database.
     * @param {PatientSearchIndexUpdateManyAndReturnArgs} args - Arguments to update many PatientSearchIndices.
     * @example
     * // Update many PatientSearchIndices
     * const patientSearchIndex = await prisma.patientSearchIndex.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientSearchIndices and only return the `id`
     * const patientSearchIndexWithIdOnly = await prisma.patientSearchIndex.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientSearchIndexUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientSearchIndexUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientSearchIndex.
     * @param {PatientSearchIndexUpsertArgs} args - Arguments to update or create a PatientSearchIndex.
     * @example
     * // Update or create a PatientSearchIndex
     * const patientSearchIndex = await prisma.patientSearchIndex.upsert({
     *   create: {
     *     // ... data to create a PatientSearchIndex
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientSearchIndex we want to update
     *   }
     * })
     */
    upsert<T extends PatientSearchIndexUpsertArgs>(args: SelectSubset<T, PatientSearchIndexUpsertArgs<ExtArgs>>): Prisma__PatientSearchIndexClient<$Result.GetResult<Prisma.$PatientSearchIndexPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientSearchIndices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientSearchIndexCountArgs} args - Arguments to filter PatientSearchIndices to count.
     * @example
     * // Count the number of PatientSearchIndices
     * const count = await prisma.patientSearchIndex.count({
     *   where: {
     *     // ... the filter for the PatientSearchIndices we want to count
     *   }
     * })
    **/
    count<T extends PatientSearchIndexCountArgs>(
      args?: Subset<T, PatientSearchIndexCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientSearchIndexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientSearchIndex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientSearchIndexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientSearchIndexAggregateArgs>(args: Subset<T, PatientSearchIndexAggregateArgs>): Prisma.PrismaPromise<GetPatientSearchIndexAggregateType<T>>

    /**
     * Group by PatientSearchIndex.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientSearchIndexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientSearchIndexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientSearchIndexGroupByArgs['orderBy'] }
        : { orderBy?: PatientSearchIndexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientSearchIndexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientSearchIndexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientSearchIndex model
   */
  readonly fields: PatientSearchIndexFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientSearchIndex.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientSearchIndexClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientSearchIndex model
   */
  interface PatientSearchIndexFieldRefs {
    readonly id: FieldRef<"PatientSearchIndex", 'String'>
    readonly patientId: FieldRef<"PatientSearchIndex", 'String'>
    readonly mrn: FieldRef<"PatientSearchIndex", 'String'>
    readonly name: FieldRef<"PatientSearchIndex", 'String'>
    readonly phone: FieldRef<"PatientSearchIndex", 'String'>
    readonly email: FieldRef<"PatientSearchIndex", 'String'>
    readonly qrCode: FieldRef<"PatientSearchIndex", 'String'>
    readonly searchVector: FieldRef<"PatientSearchIndex", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PatientSearchIndex findUnique
   */
  export type PatientSearchIndexFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * Filter, which PatientSearchIndex to fetch.
     */
    where: PatientSearchIndexWhereUniqueInput
  }

  /**
   * PatientSearchIndex findUniqueOrThrow
   */
  export type PatientSearchIndexFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * Filter, which PatientSearchIndex to fetch.
     */
    where: PatientSearchIndexWhereUniqueInput
  }

  /**
   * PatientSearchIndex findFirst
   */
  export type PatientSearchIndexFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * Filter, which PatientSearchIndex to fetch.
     */
    where?: PatientSearchIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientSearchIndices to fetch.
     */
    orderBy?: PatientSearchIndexOrderByWithRelationInput | PatientSearchIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientSearchIndices.
     */
    cursor?: PatientSearchIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientSearchIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientSearchIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientSearchIndices.
     */
    distinct?: PatientSearchIndexScalarFieldEnum | PatientSearchIndexScalarFieldEnum[]
  }

  /**
   * PatientSearchIndex findFirstOrThrow
   */
  export type PatientSearchIndexFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * Filter, which PatientSearchIndex to fetch.
     */
    where?: PatientSearchIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientSearchIndices to fetch.
     */
    orderBy?: PatientSearchIndexOrderByWithRelationInput | PatientSearchIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientSearchIndices.
     */
    cursor?: PatientSearchIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientSearchIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientSearchIndices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientSearchIndices.
     */
    distinct?: PatientSearchIndexScalarFieldEnum | PatientSearchIndexScalarFieldEnum[]
  }

  /**
   * PatientSearchIndex findMany
   */
  export type PatientSearchIndexFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * Filter, which PatientSearchIndices to fetch.
     */
    where?: PatientSearchIndexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientSearchIndices to fetch.
     */
    orderBy?: PatientSearchIndexOrderByWithRelationInput | PatientSearchIndexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientSearchIndices.
     */
    cursor?: PatientSearchIndexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientSearchIndices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientSearchIndices.
     */
    skip?: number
    distinct?: PatientSearchIndexScalarFieldEnum | PatientSearchIndexScalarFieldEnum[]
  }

  /**
   * PatientSearchIndex create
   */
  export type PatientSearchIndexCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientSearchIndex.
     */
    data: XOR<PatientSearchIndexCreateInput, PatientSearchIndexUncheckedCreateInput>
  }

  /**
   * PatientSearchIndex createMany
   */
  export type PatientSearchIndexCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientSearchIndices.
     */
    data: PatientSearchIndexCreateManyInput | PatientSearchIndexCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientSearchIndex createManyAndReturn
   */
  export type PatientSearchIndexCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * The data used to create many PatientSearchIndices.
     */
    data: PatientSearchIndexCreateManyInput | PatientSearchIndexCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientSearchIndex update
   */
  export type PatientSearchIndexUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientSearchIndex.
     */
    data: XOR<PatientSearchIndexUpdateInput, PatientSearchIndexUncheckedUpdateInput>
    /**
     * Choose, which PatientSearchIndex to update.
     */
    where: PatientSearchIndexWhereUniqueInput
  }

  /**
   * PatientSearchIndex updateMany
   */
  export type PatientSearchIndexUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientSearchIndices.
     */
    data: XOR<PatientSearchIndexUpdateManyMutationInput, PatientSearchIndexUncheckedUpdateManyInput>
    /**
     * Filter which PatientSearchIndices to update
     */
    where?: PatientSearchIndexWhereInput
    /**
     * Limit how many PatientSearchIndices to update.
     */
    limit?: number
  }

  /**
   * PatientSearchIndex updateManyAndReturn
   */
  export type PatientSearchIndexUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * The data used to update PatientSearchIndices.
     */
    data: XOR<PatientSearchIndexUpdateManyMutationInput, PatientSearchIndexUncheckedUpdateManyInput>
    /**
     * Filter which PatientSearchIndices to update
     */
    where?: PatientSearchIndexWhereInput
    /**
     * Limit how many PatientSearchIndices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientSearchIndex upsert
   */
  export type PatientSearchIndexUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientSearchIndex to update in case it exists.
     */
    where: PatientSearchIndexWhereUniqueInput
    /**
     * In case the PatientSearchIndex found by the `where` argument doesn't exist, create a new PatientSearchIndex with this data.
     */
    create: XOR<PatientSearchIndexCreateInput, PatientSearchIndexUncheckedCreateInput>
    /**
     * In case the PatientSearchIndex was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientSearchIndexUpdateInput, PatientSearchIndexUncheckedUpdateInput>
  }

  /**
   * PatientSearchIndex delete
   */
  export type PatientSearchIndexDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
    /**
     * Filter which PatientSearchIndex to delete.
     */
    where: PatientSearchIndexWhereUniqueInput
  }

  /**
   * PatientSearchIndex deleteMany
   */
  export type PatientSearchIndexDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientSearchIndices to delete
     */
    where?: PatientSearchIndexWhereInput
    /**
     * Limit how many PatientSearchIndices to delete.
     */
    limit?: number
  }

  /**
   * PatientSearchIndex without action
   */
  export type PatientSearchIndexDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientSearchIndex
     */
    select?: PatientSearchIndexSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientSearchIndex
     */
    omit?: PatientSearchIndexOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientSearchIndexInclude<ExtArgs> | null
  }


  /**
   * Model DoctorAvailability
   */

  export type AggregateDoctorAvailability = {
    _count: DoctorAvailabilityCountAggregateOutputType | null
    _min: DoctorAvailabilityMinAggregateOutputType | null
    _max: DoctorAvailabilityMaxAggregateOutputType | null
  }

  export type DoctorAvailabilityMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    hospitalId: string | null
    available: boolean | null
    nextAvailable: Date | null
  }

  export type DoctorAvailabilityMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    hospitalId: string | null
    available: boolean | null
    nextAvailable: Date | null
  }

  export type DoctorAvailabilityCountAggregateOutputType = {
    id: number
    doctorId: number
    hospitalId: number
    available: number
    schedule: number
    serviceTypes: number
    nextAvailable: number
    _all: number
  }


  export type DoctorAvailabilityMinAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    available?: true
    nextAvailable?: true
  }

  export type DoctorAvailabilityMaxAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    available?: true
    nextAvailable?: true
  }

  export type DoctorAvailabilityCountAggregateInputType = {
    id?: true
    doctorId?: true
    hospitalId?: true
    available?: true
    schedule?: true
    serviceTypes?: true
    nextAvailable?: true
    _all?: true
  }

  export type DoctorAvailabilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorAvailability to aggregate.
     */
    where?: DoctorAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorAvailabilities to fetch.
     */
    orderBy?: DoctorAvailabilityOrderByWithRelationInput | DoctorAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorAvailabilities
    **/
    _count?: true | DoctorAvailabilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorAvailabilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorAvailabilityMaxAggregateInputType
  }

  export type GetDoctorAvailabilityAggregateType<T extends DoctorAvailabilityAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorAvailability]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorAvailability[P]>
      : GetScalarType<T[P], AggregateDoctorAvailability[P]>
  }




  export type DoctorAvailabilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorAvailabilityWhereInput
    orderBy?: DoctorAvailabilityOrderByWithAggregationInput | DoctorAvailabilityOrderByWithAggregationInput[]
    by: DoctorAvailabilityScalarFieldEnum[] | DoctorAvailabilityScalarFieldEnum
    having?: DoctorAvailabilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorAvailabilityCountAggregateInputType | true
    _min?: DoctorAvailabilityMinAggregateInputType
    _max?: DoctorAvailabilityMaxAggregateInputType
  }

  export type DoctorAvailabilityGroupByOutputType = {
    id: string
    doctorId: string
    hospitalId: string
    available: boolean
    schedule: JsonValue
    serviceTypes: string[]
    nextAvailable: Date | null
    _count: DoctorAvailabilityCountAggregateOutputType | null
    _min: DoctorAvailabilityMinAggregateOutputType | null
    _max: DoctorAvailabilityMaxAggregateOutputType | null
  }

  type GetDoctorAvailabilityGroupByPayload<T extends DoctorAvailabilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorAvailabilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorAvailabilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorAvailabilityGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorAvailabilityGroupByOutputType[P]>
        }
      >
    >


  export type DoctorAvailabilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    available?: boolean
    schedule?: boolean
    serviceTypes?: boolean
    nextAvailable?: boolean
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorAvailability"]>

  export type DoctorAvailabilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    available?: boolean
    schedule?: boolean
    serviceTypes?: boolean
    nextAvailable?: boolean
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorAvailability"]>

  export type DoctorAvailabilitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    available?: boolean
    schedule?: boolean
    serviceTypes?: boolean
    nextAvailable?: boolean
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorAvailability"]>

  export type DoctorAvailabilitySelectScalar = {
    id?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    available?: boolean
    schedule?: boolean
    serviceTypes?: boolean
    nextAvailable?: boolean
  }

  export type DoctorAvailabilityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "hospitalId" | "available" | "schedule" | "serviceTypes" | "nextAvailable", ExtArgs["result"]["doctorAvailability"]>
  export type DoctorAvailabilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type DoctorAvailabilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type DoctorAvailabilityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $DoctorAvailabilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoctorAvailability"
    objects: {
      doctor: Prisma.$UserPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      hospitalId: string
      available: boolean
      schedule: Prisma.JsonValue
      serviceTypes: string[]
      nextAvailable: Date | null
    }, ExtArgs["result"]["doctorAvailability"]>
    composites: {}
  }

  type DoctorAvailabilityGetPayload<S extends boolean | null | undefined | DoctorAvailabilityDefaultArgs> = $Result.GetResult<Prisma.$DoctorAvailabilityPayload, S>

  type DoctorAvailabilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorAvailabilityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorAvailabilityCountAggregateInputType | true
    }

  export interface DoctorAvailabilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorAvailability'], meta: { name: 'DoctorAvailability' } }
    /**
     * Find zero or one DoctorAvailability that matches the filter.
     * @param {DoctorAvailabilityFindUniqueArgs} args - Arguments to find a DoctorAvailability
     * @example
     * // Get one DoctorAvailability
     * const doctorAvailability = await prisma.doctorAvailability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorAvailabilityFindUniqueArgs>(args: SelectSubset<T, DoctorAvailabilityFindUniqueArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DoctorAvailability that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorAvailabilityFindUniqueOrThrowArgs} args - Arguments to find a DoctorAvailability
     * @example
     * // Get one DoctorAvailability
     * const doctorAvailability = await prisma.doctorAvailability.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorAvailabilityFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorAvailabilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorAvailability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAvailabilityFindFirstArgs} args - Arguments to find a DoctorAvailability
     * @example
     * // Get one DoctorAvailability
     * const doctorAvailability = await prisma.doctorAvailability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorAvailabilityFindFirstArgs>(args?: SelectSubset<T, DoctorAvailabilityFindFirstArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DoctorAvailability that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAvailabilityFindFirstOrThrowArgs} args - Arguments to find a DoctorAvailability
     * @example
     * // Get one DoctorAvailability
     * const doctorAvailability = await prisma.doctorAvailability.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorAvailabilityFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorAvailabilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DoctorAvailabilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAvailabilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorAvailabilities
     * const doctorAvailabilities = await prisma.doctorAvailability.findMany()
     * 
     * // Get first 10 DoctorAvailabilities
     * const doctorAvailabilities = await prisma.doctorAvailability.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorAvailabilityWithIdOnly = await prisma.doctorAvailability.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorAvailabilityFindManyArgs>(args?: SelectSubset<T, DoctorAvailabilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DoctorAvailability.
     * @param {DoctorAvailabilityCreateArgs} args - Arguments to create a DoctorAvailability.
     * @example
     * // Create one DoctorAvailability
     * const DoctorAvailability = await prisma.doctorAvailability.create({
     *   data: {
     *     // ... data to create a DoctorAvailability
     *   }
     * })
     * 
     */
    create<T extends DoctorAvailabilityCreateArgs>(args: SelectSubset<T, DoctorAvailabilityCreateArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DoctorAvailabilities.
     * @param {DoctorAvailabilityCreateManyArgs} args - Arguments to create many DoctorAvailabilities.
     * @example
     * // Create many DoctorAvailabilities
     * const doctorAvailability = await prisma.doctorAvailability.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorAvailabilityCreateManyArgs>(args?: SelectSubset<T, DoctorAvailabilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoctorAvailabilities and returns the data saved in the database.
     * @param {DoctorAvailabilityCreateManyAndReturnArgs} args - Arguments to create many DoctorAvailabilities.
     * @example
     * // Create many DoctorAvailabilities
     * const doctorAvailability = await prisma.doctorAvailability.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoctorAvailabilities and only return the `id`
     * const doctorAvailabilityWithIdOnly = await prisma.doctorAvailability.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorAvailabilityCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorAvailabilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DoctorAvailability.
     * @param {DoctorAvailabilityDeleteArgs} args - Arguments to delete one DoctorAvailability.
     * @example
     * // Delete one DoctorAvailability
     * const DoctorAvailability = await prisma.doctorAvailability.delete({
     *   where: {
     *     // ... filter to delete one DoctorAvailability
     *   }
     * })
     * 
     */
    delete<T extends DoctorAvailabilityDeleteArgs>(args: SelectSubset<T, DoctorAvailabilityDeleteArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DoctorAvailability.
     * @param {DoctorAvailabilityUpdateArgs} args - Arguments to update one DoctorAvailability.
     * @example
     * // Update one DoctorAvailability
     * const doctorAvailability = await prisma.doctorAvailability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorAvailabilityUpdateArgs>(args: SelectSubset<T, DoctorAvailabilityUpdateArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DoctorAvailabilities.
     * @param {DoctorAvailabilityDeleteManyArgs} args - Arguments to filter DoctorAvailabilities to delete.
     * @example
     * // Delete a few DoctorAvailabilities
     * const { count } = await prisma.doctorAvailability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorAvailabilityDeleteManyArgs>(args?: SelectSubset<T, DoctorAvailabilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorAvailabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAvailabilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorAvailabilities
     * const doctorAvailability = await prisma.doctorAvailability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorAvailabilityUpdateManyArgs>(args: SelectSubset<T, DoctorAvailabilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorAvailabilities and returns the data updated in the database.
     * @param {DoctorAvailabilityUpdateManyAndReturnArgs} args - Arguments to update many DoctorAvailabilities.
     * @example
     * // Update many DoctorAvailabilities
     * const doctorAvailability = await prisma.doctorAvailability.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DoctorAvailabilities and only return the `id`
     * const doctorAvailabilityWithIdOnly = await prisma.doctorAvailability.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorAvailabilityUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorAvailabilityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DoctorAvailability.
     * @param {DoctorAvailabilityUpsertArgs} args - Arguments to update or create a DoctorAvailability.
     * @example
     * // Update or create a DoctorAvailability
     * const doctorAvailability = await prisma.doctorAvailability.upsert({
     *   create: {
     *     // ... data to create a DoctorAvailability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorAvailability we want to update
     *   }
     * })
     */
    upsert<T extends DoctorAvailabilityUpsertArgs>(args: SelectSubset<T, DoctorAvailabilityUpsertArgs<ExtArgs>>): Prisma__DoctorAvailabilityClient<$Result.GetResult<Prisma.$DoctorAvailabilityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DoctorAvailabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAvailabilityCountArgs} args - Arguments to filter DoctorAvailabilities to count.
     * @example
     * // Count the number of DoctorAvailabilities
     * const count = await prisma.doctorAvailability.count({
     *   where: {
     *     // ... the filter for the DoctorAvailabilities we want to count
     *   }
     * })
    **/
    count<T extends DoctorAvailabilityCountArgs>(
      args?: Subset<T, DoctorAvailabilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorAvailabilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorAvailability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAvailabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAvailabilityAggregateArgs>(args: Subset<T, DoctorAvailabilityAggregateArgs>): Prisma.PrismaPromise<GetDoctorAvailabilityAggregateType<T>>

    /**
     * Group by DoctorAvailability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAvailabilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorAvailabilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorAvailabilityGroupByArgs['orderBy'] }
        : { orderBy?: DoctorAvailabilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorAvailabilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorAvailabilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorAvailability model
   */
  readonly fields: DoctorAvailabilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorAvailability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorAvailabilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoctorAvailability model
   */
  interface DoctorAvailabilityFieldRefs {
    readonly id: FieldRef<"DoctorAvailability", 'String'>
    readonly doctorId: FieldRef<"DoctorAvailability", 'String'>
    readonly hospitalId: FieldRef<"DoctorAvailability", 'String'>
    readonly available: FieldRef<"DoctorAvailability", 'Boolean'>
    readonly schedule: FieldRef<"DoctorAvailability", 'Json'>
    readonly serviceTypes: FieldRef<"DoctorAvailability", 'String[]'>
    readonly nextAvailable: FieldRef<"DoctorAvailability", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DoctorAvailability findUnique
   */
  export type DoctorAvailabilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which DoctorAvailability to fetch.
     */
    where: DoctorAvailabilityWhereUniqueInput
  }

  /**
   * DoctorAvailability findUniqueOrThrow
   */
  export type DoctorAvailabilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which DoctorAvailability to fetch.
     */
    where: DoctorAvailabilityWhereUniqueInput
  }

  /**
   * DoctorAvailability findFirst
   */
  export type DoctorAvailabilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which DoctorAvailability to fetch.
     */
    where?: DoctorAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorAvailabilities to fetch.
     */
    orderBy?: DoctorAvailabilityOrderByWithRelationInput | DoctorAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorAvailabilities.
     */
    cursor?: DoctorAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorAvailabilities.
     */
    distinct?: DoctorAvailabilityScalarFieldEnum | DoctorAvailabilityScalarFieldEnum[]
  }

  /**
   * DoctorAvailability findFirstOrThrow
   */
  export type DoctorAvailabilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which DoctorAvailability to fetch.
     */
    where?: DoctorAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorAvailabilities to fetch.
     */
    orderBy?: DoctorAvailabilityOrderByWithRelationInput | DoctorAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorAvailabilities.
     */
    cursor?: DoctorAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorAvailabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorAvailabilities.
     */
    distinct?: DoctorAvailabilityScalarFieldEnum | DoctorAvailabilityScalarFieldEnum[]
  }

  /**
   * DoctorAvailability findMany
   */
  export type DoctorAvailabilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which DoctorAvailabilities to fetch.
     */
    where?: DoctorAvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorAvailabilities to fetch.
     */
    orderBy?: DoctorAvailabilityOrderByWithRelationInput | DoctorAvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorAvailabilities.
     */
    cursor?: DoctorAvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorAvailabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorAvailabilities.
     */
    skip?: number
    distinct?: DoctorAvailabilityScalarFieldEnum | DoctorAvailabilityScalarFieldEnum[]
  }

  /**
   * DoctorAvailability create
   */
  export type DoctorAvailabilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorAvailability.
     */
    data: XOR<DoctorAvailabilityCreateInput, DoctorAvailabilityUncheckedCreateInput>
  }

  /**
   * DoctorAvailability createMany
   */
  export type DoctorAvailabilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorAvailabilities.
     */
    data: DoctorAvailabilityCreateManyInput | DoctorAvailabilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DoctorAvailability createManyAndReturn
   */
  export type DoctorAvailabilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * The data used to create many DoctorAvailabilities.
     */
    data: DoctorAvailabilityCreateManyInput | DoctorAvailabilityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorAvailability update
   */
  export type DoctorAvailabilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorAvailability.
     */
    data: XOR<DoctorAvailabilityUpdateInput, DoctorAvailabilityUncheckedUpdateInput>
    /**
     * Choose, which DoctorAvailability to update.
     */
    where: DoctorAvailabilityWhereUniqueInput
  }

  /**
   * DoctorAvailability updateMany
   */
  export type DoctorAvailabilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorAvailabilities.
     */
    data: XOR<DoctorAvailabilityUpdateManyMutationInput, DoctorAvailabilityUncheckedUpdateManyInput>
    /**
     * Filter which DoctorAvailabilities to update
     */
    where?: DoctorAvailabilityWhereInput
    /**
     * Limit how many DoctorAvailabilities to update.
     */
    limit?: number
  }

  /**
   * DoctorAvailability updateManyAndReturn
   */
  export type DoctorAvailabilityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * The data used to update DoctorAvailabilities.
     */
    data: XOR<DoctorAvailabilityUpdateManyMutationInput, DoctorAvailabilityUncheckedUpdateManyInput>
    /**
     * Filter which DoctorAvailabilities to update
     */
    where?: DoctorAvailabilityWhereInput
    /**
     * Limit how many DoctorAvailabilities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoctorAvailability upsert
   */
  export type DoctorAvailabilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorAvailability to update in case it exists.
     */
    where: DoctorAvailabilityWhereUniqueInput
    /**
     * In case the DoctorAvailability found by the `where` argument doesn't exist, create a new DoctorAvailability with this data.
     */
    create: XOR<DoctorAvailabilityCreateInput, DoctorAvailabilityUncheckedCreateInput>
    /**
     * In case the DoctorAvailability was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorAvailabilityUpdateInput, DoctorAvailabilityUncheckedUpdateInput>
  }

  /**
   * DoctorAvailability delete
   */
  export type DoctorAvailabilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
    /**
     * Filter which DoctorAvailability to delete.
     */
    where: DoctorAvailabilityWhereUniqueInput
  }

  /**
   * DoctorAvailability deleteMany
   */
  export type DoctorAvailabilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorAvailabilities to delete
     */
    where?: DoctorAvailabilityWhereInput
    /**
     * Limit how many DoctorAvailabilities to delete.
     */
    limit?: number
  }

  /**
   * DoctorAvailability without action
   */
  export type DoctorAvailabilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorAvailability
     */
    select?: DoctorAvailabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DoctorAvailability
     */
    omit?: DoctorAvailabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorAvailabilityInclude<ExtArgs> | null
  }


  /**
   * Model PatientWidgetPreference
   */

  export type AggregatePatientWidgetPreference = {
    _count: PatientWidgetPreferenceCountAggregateOutputType | null
    _min: PatientWidgetPreferenceMinAggregateOutputType | null
    _max: PatientWidgetPreferenceMaxAggregateOutputType | null
  }

  export type PatientWidgetPreferenceMinAggregateOutputType = {
    id: string | null
    patientId: string | null
  }

  export type PatientWidgetPreferenceMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
  }

  export type PatientWidgetPreferenceCountAggregateOutputType = {
    id: number
    patientId: number
    recentDoctors: number
    preferredHospitals: number
    searchHistory: number
    _all: number
  }


  export type PatientWidgetPreferenceMinAggregateInputType = {
    id?: true
    patientId?: true
  }

  export type PatientWidgetPreferenceMaxAggregateInputType = {
    id?: true
    patientId?: true
  }

  export type PatientWidgetPreferenceCountAggregateInputType = {
    id?: true
    patientId?: true
    recentDoctors?: true
    preferredHospitals?: true
    searchHistory?: true
    _all?: true
  }

  export type PatientWidgetPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientWidgetPreference to aggregate.
     */
    where?: PatientWidgetPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientWidgetPreferences to fetch.
     */
    orderBy?: PatientWidgetPreferenceOrderByWithRelationInput | PatientWidgetPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWidgetPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientWidgetPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientWidgetPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientWidgetPreferences
    **/
    _count?: true | PatientWidgetPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientWidgetPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientWidgetPreferenceMaxAggregateInputType
  }

  export type GetPatientWidgetPreferenceAggregateType<T extends PatientWidgetPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientWidgetPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientWidgetPreference[P]>
      : GetScalarType<T[P], AggregatePatientWidgetPreference[P]>
  }




  export type PatientWidgetPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWidgetPreferenceWhereInput
    orderBy?: PatientWidgetPreferenceOrderByWithAggregationInput | PatientWidgetPreferenceOrderByWithAggregationInput[]
    by: PatientWidgetPreferenceScalarFieldEnum[] | PatientWidgetPreferenceScalarFieldEnum
    having?: PatientWidgetPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientWidgetPreferenceCountAggregateInputType | true
    _min?: PatientWidgetPreferenceMinAggregateInputType
    _max?: PatientWidgetPreferenceMaxAggregateInputType
  }

  export type PatientWidgetPreferenceGroupByOutputType = {
    id: string
    patientId: string
    recentDoctors: string[]
    preferredHospitals: string[]
    searchHistory: JsonValue | null
    _count: PatientWidgetPreferenceCountAggregateOutputType | null
    _min: PatientWidgetPreferenceMinAggregateOutputType | null
    _max: PatientWidgetPreferenceMaxAggregateOutputType | null
  }

  type GetPatientWidgetPreferenceGroupByPayload<T extends PatientWidgetPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientWidgetPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientWidgetPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientWidgetPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], PatientWidgetPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type PatientWidgetPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    recentDoctors?: boolean
    preferredHospitals?: boolean
    searchHistory?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientWidgetPreference"]>

  export type PatientWidgetPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    recentDoctors?: boolean
    preferredHospitals?: boolean
    searchHistory?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientWidgetPreference"]>

  export type PatientWidgetPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    recentDoctors?: boolean
    preferredHospitals?: boolean
    searchHistory?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientWidgetPreference"]>

  export type PatientWidgetPreferenceSelectScalar = {
    id?: boolean
    patientId?: boolean
    recentDoctors?: boolean
    preferredHospitals?: boolean
    searchHistory?: boolean
  }

  export type PatientWidgetPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "recentDoctors" | "preferredHospitals" | "searchHistory", ExtArgs["result"]["patientWidgetPreference"]>
  export type PatientWidgetPreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientWidgetPreferenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type PatientWidgetPreferenceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $PatientWidgetPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientWidgetPreference"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      recentDoctors: string[]
      preferredHospitals: string[]
      searchHistory: Prisma.JsonValue | null
    }, ExtArgs["result"]["patientWidgetPreference"]>
    composites: {}
  }

  type PatientWidgetPreferenceGetPayload<S extends boolean | null | undefined | PatientWidgetPreferenceDefaultArgs> = $Result.GetResult<Prisma.$PatientWidgetPreferencePayload, S>

  type PatientWidgetPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientWidgetPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientWidgetPreferenceCountAggregateInputType | true
    }

  export interface PatientWidgetPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientWidgetPreference'], meta: { name: 'PatientWidgetPreference' } }
    /**
     * Find zero or one PatientWidgetPreference that matches the filter.
     * @param {PatientWidgetPreferenceFindUniqueArgs} args - Arguments to find a PatientWidgetPreference
     * @example
     * // Get one PatientWidgetPreference
     * const patientWidgetPreference = await prisma.patientWidgetPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientWidgetPreferenceFindUniqueArgs>(args: SelectSubset<T, PatientWidgetPreferenceFindUniqueArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientWidgetPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientWidgetPreferenceFindUniqueOrThrowArgs} args - Arguments to find a PatientWidgetPreference
     * @example
     * // Get one PatientWidgetPreference
     * const patientWidgetPreference = await prisma.patientWidgetPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientWidgetPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientWidgetPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientWidgetPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientWidgetPreferenceFindFirstArgs} args - Arguments to find a PatientWidgetPreference
     * @example
     * // Get one PatientWidgetPreference
     * const patientWidgetPreference = await prisma.patientWidgetPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientWidgetPreferenceFindFirstArgs>(args?: SelectSubset<T, PatientWidgetPreferenceFindFirstArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientWidgetPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientWidgetPreferenceFindFirstOrThrowArgs} args - Arguments to find a PatientWidgetPreference
     * @example
     * // Get one PatientWidgetPreference
     * const patientWidgetPreference = await prisma.patientWidgetPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientWidgetPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientWidgetPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientWidgetPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientWidgetPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientWidgetPreferences
     * const patientWidgetPreferences = await prisma.patientWidgetPreference.findMany()
     * 
     * // Get first 10 PatientWidgetPreferences
     * const patientWidgetPreferences = await prisma.patientWidgetPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWidgetPreferenceWithIdOnly = await prisma.patientWidgetPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientWidgetPreferenceFindManyArgs>(args?: SelectSubset<T, PatientWidgetPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientWidgetPreference.
     * @param {PatientWidgetPreferenceCreateArgs} args - Arguments to create a PatientWidgetPreference.
     * @example
     * // Create one PatientWidgetPreference
     * const PatientWidgetPreference = await prisma.patientWidgetPreference.create({
     *   data: {
     *     // ... data to create a PatientWidgetPreference
     *   }
     * })
     * 
     */
    create<T extends PatientWidgetPreferenceCreateArgs>(args: SelectSubset<T, PatientWidgetPreferenceCreateArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientWidgetPreferences.
     * @param {PatientWidgetPreferenceCreateManyArgs} args - Arguments to create many PatientWidgetPreferences.
     * @example
     * // Create many PatientWidgetPreferences
     * const patientWidgetPreference = await prisma.patientWidgetPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientWidgetPreferenceCreateManyArgs>(args?: SelectSubset<T, PatientWidgetPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientWidgetPreferences and returns the data saved in the database.
     * @param {PatientWidgetPreferenceCreateManyAndReturnArgs} args - Arguments to create many PatientWidgetPreferences.
     * @example
     * // Create many PatientWidgetPreferences
     * const patientWidgetPreference = await prisma.patientWidgetPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientWidgetPreferences and only return the `id`
     * const patientWidgetPreferenceWithIdOnly = await prisma.patientWidgetPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientWidgetPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientWidgetPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientWidgetPreference.
     * @param {PatientWidgetPreferenceDeleteArgs} args - Arguments to delete one PatientWidgetPreference.
     * @example
     * // Delete one PatientWidgetPreference
     * const PatientWidgetPreference = await prisma.patientWidgetPreference.delete({
     *   where: {
     *     // ... filter to delete one PatientWidgetPreference
     *   }
     * })
     * 
     */
    delete<T extends PatientWidgetPreferenceDeleteArgs>(args: SelectSubset<T, PatientWidgetPreferenceDeleteArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientWidgetPreference.
     * @param {PatientWidgetPreferenceUpdateArgs} args - Arguments to update one PatientWidgetPreference.
     * @example
     * // Update one PatientWidgetPreference
     * const patientWidgetPreference = await prisma.patientWidgetPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientWidgetPreferenceUpdateArgs>(args: SelectSubset<T, PatientWidgetPreferenceUpdateArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientWidgetPreferences.
     * @param {PatientWidgetPreferenceDeleteManyArgs} args - Arguments to filter PatientWidgetPreferences to delete.
     * @example
     * // Delete a few PatientWidgetPreferences
     * const { count } = await prisma.patientWidgetPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientWidgetPreferenceDeleteManyArgs>(args?: SelectSubset<T, PatientWidgetPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientWidgetPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientWidgetPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientWidgetPreferences
     * const patientWidgetPreference = await prisma.patientWidgetPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientWidgetPreferenceUpdateManyArgs>(args: SelectSubset<T, PatientWidgetPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientWidgetPreferences and returns the data updated in the database.
     * @param {PatientWidgetPreferenceUpdateManyAndReturnArgs} args - Arguments to update many PatientWidgetPreferences.
     * @example
     * // Update many PatientWidgetPreferences
     * const patientWidgetPreference = await prisma.patientWidgetPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientWidgetPreferences and only return the `id`
     * const patientWidgetPreferenceWithIdOnly = await prisma.patientWidgetPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientWidgetPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientWidgetPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientWidgetPreference.
     * @param {PatientWidgetPreferenceUpsertArgs} args - Arguments to update or create a PatientWidgetPreference.
     * @example
     * // Update or create a PatientWidgetPreference
     * const patientWidgetPreference = await prisma.patientWidgetPreference.upsert({
     *   create: {
     *     // ... data to create a PatientWidgetPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientWidgetPreference we want to update
     *   }
     * })
     */
    upsert<T extends PatientWidgetPreferenceUpsertArgs>(args: SelectSubset<T, PatientWidgetPreferenceUpsertArgs<ExtArgs>>): Prisma__PatientWidgetPreferenceClient<$Result.GetResult<Prisma.$PatientWidgetPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientWidgetPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientWidgetPreferenceCountArgs} args - Arguments to filter PatientWidgetPreferences to count.
     * @example
     * // Count the number of PatientWidgetPreferences
     * const count = await prisma.patientWidgetPreference.count({
     *   where: {
     *     // ... the filter for the PatientWidgetPreferences we want to count
     *   }
     * })
    **/
    count<T extends PatientWidgetPreferenceCountArgs>(
      args?: Subset<T, PatientWidgetPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientWidgetPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientWidgetPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientWidgetPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientWidgetPreferenceAggregateArgs>(args: Subset<T, PatientWidgetPreferenceAggregateArgs>): Prisma.PrismaPromise<GetPatientWidgetPreferenceAggregateType<T>>

    /**
     * Group by PatientWidgetPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientWidgetPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientWidgetPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientWidgetPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: PatientWidgetPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientWidgetPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientWidgetPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientWidgetPreference model
   */
  readonly fields: PatientWidgetPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientWidgetPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientWidgetPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientWidgetPreference model
   */
  interface PatientWidgetPreferenceFieldRefs {
    readonly id: FieldRef<"PatientWidgetPreference", 'String'>
    readonly patientId: FieldRef<"PatientWidgetPreference", 'String'>
    readonly recentDoctors: FieldRef<"PatientWidgetPreference", 'String[]'>
    readonly preferredHospitals: FieldRef<"PatientWidgetPreference", 'String[]'>
    readonly searchHistory: FieldRef<"PatientWidgetPreference", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * PatientWidgetPreference findUnique
   */
  export type PatientWidgetPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which PatientWidgetPreference to fetch.
     */
    where: PatientWidgetPreferenceWhereUniqueInput
  }

  /**
   * PatientWidgetPreference findUniqueOrThrow
   */
  export type PatientWidgetPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which PatientWidgetPreference to fetch.
     */
    where: PatientWidgetPreferenceWhereUniqueInput
  }

  /**
   * PatientWidgetPreference findFirst
   */
  export type PatientWidgetPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which PatientWidgetPreference to fetch.
     */
    where?: PatientWidgetPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientWidgetPreferences to fetch.
     */
    orderBy?: PatientWidgetPreferenceOrderByWithRelationInput | PatientWidgetPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientWidgetPreferences.
     */
    cursor?: PatientWidgetPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientWidgetPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientWidgetPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientWidgetPreferences.
     */
    distinct?: PatientWidgetPreferenceScalarFieldEnum | PatientWidgetPreferenceScalarFieldEnum[]
  }

  /**
   * PatientWidgetPreference findFirstOrThrow
   */
  export type PatientWidgetPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which PatientWidgetPreference to fetch.
     */
    where?: PatientWidgetPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientWidgetPreferences to fetch.
     */
    orderBy?: PatientWidgetPreferenceOrderByWithRelationInput | PatientWidgetPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientWidgetPreferences.
     */
    cursor?: PatientWidgetPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientWidgetPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientWidgetPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientWidgetPreferences.
     */
    distinct?: PatientWidgetPreferenceScalarFieldEnum | PatientWidgetPreferenceScalarFieldEnum[]
  }

  /**
   * PatientWidgetPreference findMany
   */
  export type PatientWidgetPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * Filter, which PatientWidgetPreferences to fetch.
     */
    where?: PatientWidgetPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientWidgetPreferences to fetch.
     */
    orderBy?: PatientWidgetPreferenceOrderByWithRelationInput | PatientWidgetPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientWidgetPreferences.
     */
    cursor?: PatientWidgetPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientWidgetPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientWidgetPreferences.
     */
    skip?: number
    distinct?: PatientWidgetPreferenceScalarFieldEnum | PatientWidgetPreferenceScalarFieldEnum[]
  }

  /**
   * PatientWidgetPreference create
   */
  export type PatientWidgetPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientWidgetPreference.
     */
    data: XOR<PatientWidgetPreferenceCreateInput, PatientWidgetPreferenceUncheckedCreateInput>
  }

  /**
   * PatientWidgetPreference createMany
   */
  export type PatientWidgetPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientWidgetPreferences.
     */
    data: PatientWidgetPreferenceCreateManyInput | PatientWidgetPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientWidgetPreference createManyAndReturn
   */
  export type PatientWidgetPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many PatientWidgetPreferences.
     */
    data: PatientWidgetPreferenceCreateManyInput | PatientWidgetPreferenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientWidgetPreference update
   */
  export type PatientWidgetPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientWidgetPreference.
     */
    data: XOR<PatientWidgetPreferenceUpdateInput, PatientWidgetPreferenceUncheckedUpdateInput>
    /**
     * Choose, which PatientWidgetPreference to update.
     */
    where: PatientWidgetPreferenceWhereUniqueInput
  }

  /**
   * PatientWidgetPreference updateMany
   */
  export type PatientWidgetPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientWidgetPreferences.
     */
    data: XOR<PatientWidgetPreferenceUpdateManyMutationInput, PatientWidgetPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which PatientWidgetPreferences to update
     */
    where?: PatientWidgetPreferenceWhereInput
    /**
     * Limit how many PatientWidgetPreferences to update.
     */
    limit?: number
  }

  /**
   * PatientWidgetPreference updateManyAndReturn
   */
  export type PatientWidgetPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update PatientWidgetPreferences.
     */
    data: XOR<PatientWidgetPreferenceUpdateManyMutationInput, PatientWidgetPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which PatientWidgetPreferences to update
     */
    where?: PatientWidgetPreferenceWhereInput
    /**
     * Limit how many PatientWidgetPreferences to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientWidgetPreference upsert
   */
  export type PatientWidgetPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientWidgetPreference to update in case it exists.
     */
    where: PatientWidgetPreferenceWhereUniqueInput
    /**
     * In case the PatientWidgetPreference found by the `where` argument doesn't exist, create a new PatientWidgetPreference with this data.
     */
    create: XOR<PatientWidgetPreferenceCreateInput, PatientWidgetPreferenceUncheckedCreateInput>
    /**
     * In case the PatientWidgetPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientWidgetPreferenceUpdateInput, PatientWidgetPreferenceUncheckedUpdateInput>
  }

  /**
   * PatientWidgetPreference delete
   */
  export type PatientWidgetPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
    /**
     * Filter which PatientWidgetPreference to delete.
     */
    where: PatientWidgetPreferenceWhereUniqueInput
  }

  /**
   * PatientWidgetPreference deleteMany
   */
  export type PatientWidgetPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientWidgetPreferences to delete
     */
    where?: PatientWidgetPreferenceWhereInput
    /**
     * Limit how many PatientWidgetPreferences to delete.
     */
    limit?: number
  }

  /**
   * PatientWidgetPreference without action
   */
  export type PatientWidgetPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientWidgetPreference
     */
    select?: PatientWidgetPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientWidgetPreference
     */
    omit?: PatientWidgetPreferenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientWidgetPreferenceInclude<ExtArgs> | null
  }


  /**
   * Model Referral
   */

  export type AggregateReferral = {
    _count: ReferralCountAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  export type ReferralMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    fromHospitalId: string | null
    toHospitalId: string | null
    referringDoctorId: string | null
    receivingDoctorId: string | null
    reason: string | null
    notes: string | null
    priority: $Enums.ReferralPriority | null
    status: $Enums.ReferralStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
  }

  export type ReferralMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    fromHospitalId: string | null
    toHospitalId: string | null
    referringDoctorId: string | null
    receivingDoctorId: string | null
    reason: string | null
    notes: string | null
    priority: $Enums.ReferralPriority | null
    status: $Enums.ReferralStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
  }

  export type ReferralCountAggregateOutputType = {
    id: number
    patientId: number
    fromHospitalId: number
    toHospitalId: number
    referringDoctorId: number
    receivingDoctorId: number
    reason: number
    notes: number
    priority: number
    status: number
    medicalRecords: number
    createdAt: number
    updatedAt: number
    completedAt: number
    _all: number
  }


  export type ReferralMinAggregateInputType = {
    id?: true
    patientId?: true
    fromHospitalId?: true
    toHospitalId?: true
    referringDoctorId?: true
    receivingDoctorId?: true
    reason?: true
    notes?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
  }

  export type ReferralMaxAggregateInputType = {
    id?: true
    patientId?: true
    fromHospitalId?: true
    toHospitalId?: true
    referringDoctorId?: true
    receivingDoctorId?: true
    reason?: true
    notes?: true
    priority?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
  }

  export type ReferralCountAggregateInputType = {
    id?: true
    patientId?: true
    fromHospitalId?: true
    toHospitalId?: true
    referringDoctorId?: true
    receivingDoctorId?: true
    reason?: true
    notes?: true
    priority?: true
    status?: true
    medicalRecords?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    _all?: true
  }

  export type ReferralAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referral to aggregate.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referrals
    **/
    _count?: true | ReferralCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferralMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferralMaxAggregateInputType
  }

  export type GetReferralAggregateType<T extends ReferralAggregateArgs> = {
        [P in keyof T & keyof AggregateReferral]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferral[P]>
      : GetScalarType<T[P], AggregateReferral[P]>
  }




  export type ReferralGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferralWhereInput
    orderBy?: ReferralOrderByWithAggregationInput | ReferralOrderByWithAggregationInput[]
    by: ReferralScalarFieldEnum[] | ReferralScalarFieldEnum
    having?: ReferralScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferralCountAggregateInputType | true
    _min?: ReferralMinAggregateInputType
    _max?: ReferralMaxAggregateInputType
  }

  export type ReferralGroupByOutputType = {
    id: string
    patientId: string
    fromHospitalId: string
    toHospitalId: string
    referringDoctorId: string
    receivingDoctorId: string | null
    reason: string
    notes: string | null
    priority: $Enums.ReferralPriority
    status: $Enums.ReferralStatus
    medicalRecords: JsonValue | null
    createdAt: Date
    updatedAt: Date
    completedAt: Date | null
    _count: ReferralCountAggregateOutputType | null
    _min: ReferralMinAggregateOutputType | null
    _max: ReferralMaxAggregateOutputType | null
  }

  type GetReferralGroupByPayload<T extends ReferralGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferralGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferralGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferralGroupByOutputType[P]>
            : GetScalarType<T[P], ReferralGroupByOutputType[P]>
        }
      >
    >


  export type ReferralSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    fromHospitalId?: boolean
    toHospitalId?: boolean
    referringDoctorId?: boolean
    receivingDoctorId?: boolean
    reason?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    medicalRecords?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    fromHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    toHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    referringDoctor?: boolean | UserDefaultArgs<ExtArgs>
    receivingDoctor?: boolean | Referral$receivingDoctorArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    fromHospitalId?: boolean
    toHospitalId?: boolean
    referringDoctorId?: boolean
    receivingDoctorId?: boolean
    reason?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    medicalRecords?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    fromHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    toHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    referringDoctor?: boolean | UserDefaultArgs<ExtArgs>
    receivingDoctor?: boolean | Referral$receivingDoctorArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    fromHospitalId?: boolean
    toHospitalId?: boolean
    referringDoctorId?: boolean
    receivingDoctorId?: boolean
    reason?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    medicalRecords?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    fromHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    toHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    referringDoctor?: boolean | UserDefaultArgs<ExtArgs>
    receivingDoctor?: boolean | Referral$receivingDoctorArgs<ExtArgs>
  }, ExtArgs["result"]["referral"]>

  export type ReferralSelectScalar = {
    id?: boolean
    patientId?: boolean
    fromHospitalId?: boolean
    toHospitalId?: boolean
    referringDoctorId?: boolean
    receivingDoctorId?: boolean
    reason?: boolean
    notes?: boolean
    priority?: boolean
    status?: boolean
    medicalRecords?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
  }

  export type ReferralOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "fromHospitalId" | "toHospitalId" | "referringDoctorId" | "receivingDoctorId" | "reason" | "notes" | "priority" | "status" | "medicalRecords" | "createdAt" | "updatedAt" | "completedAt", ExtArgs["result"]["referral"]>
  export type ReferralInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    fromHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    toHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    referringDoctor?: boolean | UserDefaultArgs<ExtArgs>
    receivingDoctor?: boolean | Referral$receivingDoctorArgs<ExtArgs>
  }
  export type ReferralIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    fromHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    toHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    referringDoctor?: boolean | UserDefaultArgs<ExtArgs>
    receivingDoctor?: boolean | Referral$receivingDoctorArgs<ExtArgs>
  }
  export type ReferralIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    fromHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    toHospital?: boolean | HospitalDefaultArgs<ExtArgs>
    referringDoctor?: boolean | UserDefaultArgs<ExtArgs>
    receivingDoctor?: boolean | Referral$receivingDoctorArgs<ExtArgs>
  }

  export type $ReferralPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referral"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      fromHospital: Prisma.$HospitalPayload<ExtArgs>
      toHospital: Prisma.$HospitalPayload<ExtArgs>
      referringDoctor: Prisma.$UserPayload<ExtArgs>
      receivingDoctor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      fromHospitalId: string
      toHospitalId: string
      referringDoctorId: string
      receivingDoctorId: string | null
      reason: string
      notes: string | null
      priority: $Enums.ReferralPriority
      status: $Enums.ReferralStatus
      medicalRecords: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["referral"]>
    composites: {}
  }

  type ReferralGetPayload<S extends boolean | null | undefined | ReferralDefaultArgs> = $Result.GetResult<Prisma.$ReferralPayload, S>

  type ReferralCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferralFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferralCountAggregateInputType | true
    }

  export interface ReferralDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referral'], meta: { name: 'Referral' } }
    /**
     * Find zero or one Referral that matches the filter.
     * @param {ReferralFindUniqueArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferralFindUniqueArgs>(args: SelectSubset<T, ReferralFindUniqueArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Referral that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferralFindUniqueOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferralFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferralFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referral that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferralFindFirstArgs>(args?: SelectSubset<T, ReferralFindFirstArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referral that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindFirstOrThrowArgs} args - Arguments to find a Referral
     * @example
     * // Get one Referral
     * const referral = await prisma.referral.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferralFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferralFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Referrals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referrals
     * const referrals = await prisma.referral.findMany()
     * 
     * // Get first 10 Referrals
     * const referrals = await prisma.referral.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referralWithIdOnly = await prisma.referral.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferralFindManyArgs>(args?: SelectSubset<T, ReferralFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Referral.
     * @param {ReferralCreateArgs} args - Arguments to create a Referral.
     * @example
     * // Create one Referral
     * const Referral = await prisma.referral.create({
     *   data: {
     *     // ... data to create a Referral
     *   }
     * })
     * 
     */
    create<T extends ReferralCreateArgs>(args: SelectSubset<T, ReferralCreateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Referrals.
     * @param {ReferralCreateManyArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferralCreateManyArgs>(args?: SelectSubset<T, ReferralCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Referrals and returns the data saved in the database.
     * @param {ReferralCreateManyAndReturnArgs} args - Arguments to create many Referrals.
     * @example
     * // Create many Referrals
     * const referral = await prisma.referral.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Referrals and only return the `id`
     * const referralWithIdOnly = await prisma.referral.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReferralCreateManyAndReturnArgs>(args?: SelectSubset<T, ReferralCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Referral.
     * @param {ReferralDeleteArgs} args - Arguments to delete one Referral.
     * @example
     * // Delete one Referral
     * const Referral = await prisma.referral.delete({
     *   where: {
     *     // ... filter to delete one Referral
     *   }
     * })
     * 
     */
    delete<T extends ReferralDeleteArgs>(args: SelectSubset<T, ReferralDeleteArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Referral.
     * @param {ReferralUpdateArgs} args - Arguments to update one Referral.
     * @example
     * // Update one Referral
     * const referral = await prisma.referral.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferralUpdateArgs>(args: SelectSubset<T, ReferralUpdateArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Referrals.
     * @param {ReferralDeleteManyArgs} args - Arguments to filter Referrals to delete.
     * @example
     * // Delete a few Referrals
     * const { count } = await prisma.referral.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferralDeleteManyArgs>(args?: SelectSubset<T, ReferralDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferralUpdateManyArgs>(args: SelectSubset<T, ReferralUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referrals and returns the data updated in the database.
     * @param {ReferralUpdateManyAndReturnArgs} args - Arguments to update many Referrals.
     * @example
     * // Update many Referrals
     * const referral = await prisma.referral.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Referrals and only return the `id`
     * const referralWithIdOnly = await prisma.referral.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReferralUpdateManyAndReturnArgs>(args: SelectSubset<T, ReferralUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Referral.
     * @param {ReferralUpsertArgs} args - Arguments to update or create a Referral.
     * @example
     * // Update or create a Referral
     * const referral = await prisma.referral.upsert({
     *   create: {
     *     // ... data to create a Referral
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referral we want to update
     *   }
     * })
     */
    upsert<T extends ReferralUpsertArgs>(args: SelectSubset<T, ReferralUpsertArgs<ExtArgs>>): Prisma__ReferralClient<$Result.GetResult<Prisma.$ReferralPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Referrals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralCountArgs} args - Arguments to filter Referrals to count.
     * @example
     * // Count the number of Referrals
     * const count = await prisma.referral.count({
     *   where: {
     *     // ... the filter for the Referrals we want to count
     *   }
     * })
    **/
    count<T extends ReferralCountArgs>(
      args?: Subset<T, ReferralCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferralCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferralAggregateArgs>(args: Subset<T, ReferralAggregateArgs>): Prisma.PrismaPromise<GetReferralAggregateType<T>>

    /**
     * Group by Referral.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferralGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferralGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferralGroupByArgs['orderBy'] }
        : { orderBy?: ReferralGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferralGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferralGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referral model
   */
  readonly fields: ReferralFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referral.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferralClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fromHospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    toHospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    referringDoctor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receivingDoctor<T extends Referral$receivingDoctorArgs<ExtArgs> = {}>(args?: Subset<T, Referral$receivingDoctorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referral model
   */
  interface ReferralFieldRefs {
    readonly id: FieldRef<"Referral", 'String'>
    readonly patientId: FieldRef<"Referral", 'String'>
    readonly fromHospitalId: FieldRef<"Referral", 'String'>
    readonly toHospitalId: FieldRef<"Referral", 'String'>
    readonly referringDoctorId: FieldRef<"Referral", 'String'>
    readonly receivingDoctorId: FieldRef<"Referral", 'String'>
    readonly reason: FieldRef<"Referral", 'String'>
    readonly notes: FieldRef<"Referral", 'String'>
    readonly priority: FieldRef<"Referral", 'ReferralPriority'>
    readonly status: FieldRef<"Referral", 'ReferralStatus'>
    readonly medicalRecords: FieldRef<"Referral", 'Json'>
    readonly createdAt: FieldRef<"Referral", 'DateTime'>
    readonly updatedAt: FieldRef<"Referral", 'DateTime'>
    readonly completedAt: FieldRef<"Referral", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Referral findUnique
   */
  export type ReferralFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findUniqueOrThrow
   */
  export type ReferralFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral findFirst
   */
  export type ReferralFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findFirstOrThrow
   */
  export type ReferralFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referral to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referrals.
     */
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral findMany
   */
  export type ReferralFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter, which Referrals to fetch.
     */
    where?: ReferralWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referrals to fetch.
     */
    orderBy?: ReferralOrderByWithRelationInput | ReferralOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referrals.
     */
    cursor?: ReferralWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referrals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referrals.
     */
    skip?: number
    distinct?: ReferralScalarFieldEnum | ReferralScalarFieldEnum[]
  }

  /**
   * Referral create
   */
  export type ReferralCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The data needed to create a Referral.
     */
    data: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
  }

  /**
   * Referral createMany
   */
  export type ReferralCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referral createManyAndReturn
   */
  export type ReferralCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to create many Referrals.
     */
    data: ReferralCreateManyInput | ReferralCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referral update
   */
  export type ReferralUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The data needed to update a Referral.
     */
    data: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
    /**
     * Choose, which Referral to update.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral updateMany
   */
  export type ReferralUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
  }

  /**
   * Referral updateManyAndReturn
   */
  export type ReferralUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * The data used to update Referrals.
     */
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyInput>
    /**
     * Filter which Referrals to update
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Referral upsert
   */
  export type ReferralUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * The filter to search for the Referral to update in case it exists.
     */
    where: ReferralWhereUniqueInput
    /**
     * In case the Referral found by the `where` argument doesn't exist, create a new Referral with this data.
     */
    create: XOR<ReferralCreateInput, ReferralUncheckedCreateInput>
    /**
     * In case the Referral was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferralUpdateInput, ReferralUncheckedUpdateInput>
  }

  /**
   * Referral delete
   */
  export type ReferralDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
    /**
     * Filter which Referral to delete.
     */
    where: ReferralWhereUniqueInput
  }

  /**
   * Referral deleteMany
   */
  export type ReferralDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referrals to delete
     */
    where?: ReferralWhereInput
    /**
     * Limit how many Referrals to delete.
     */
    limit?: number
  }

  /**
   * Referral.receivingDoctor
   */
  export type Referral$receivingDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Referral without action
   */
  export type ReferralDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referral
     */
    select?: ReferralSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referral
     */
    omit?: ReferralOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferralInclude<ExtArgs> | null
  }


  /**
   * Model Ambulance
   */

  export type AggregateAmbulance = {
    _count: AmbulanceCountAggregateOutputType | null
    _avg: AmbulanceAvgAggregateOutputType | null
    _sum: AmbulanceSumAggregateOutputType | null
    _min: AmbulanceMinAggregateOutputType | null
    _max: AmbulanceMaxAggregateOutputType | null
  }

  export type AmbulanceAvgAggregateOutputType = {
    capacity: number | null
  }

  export type AmbulanceSumAggregateOutputType = {
    capacity: number | null
  }

  export type AmbulanceMinAggregateOutputType = {
    id: string | null
    registrationNo: string | null
    type: $Enums.AmbulanceType | null
    status: $Enums.AmbulanceStatus | null
    hospitalId: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    lastMaintenance: Date | null
  }

  export type AmbulanceMaxAggregateOutputType = {
    id: string | null
    registrationNo: string | null
    type: $Enums.AmbulanceType | null
    status: $Enums.AmbulanceStatus | null
    hospitalId: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    lastMaintenance: Date | null
  }

  export type AmbulanceCountAggregateOutputType = {
    id: number
    registrationNo: number
    type: number
    status: number
    hospitalId: number
    capacity: number
    equipment: number
    features: number
    gpsTracking: number
    createdAt: number
    updatedAt: number
    lastMaintenance: number
    _all: number
  }


  export type AmbulanceAvgAggregateInputType = {
    capacity?: true
  }

  export type AmbulanceSumAggregateInputType = {
    capacity?: true
  }

  export type AmbulanceMinAggregateInputType = {
    id?: true
    registrationNo?: true
    type?: true
    status?: true
    hospitalId?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
    lastMaintenance?: true
  }

  export type AmbulanceMaxAggregateInputType = {
    id?: true
    registrationNo?: true
    type?: true
    status?: true
    hospitalId?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
    lastMaintenance?: true
  }

  export type AmbulanceCountAggregateInputType = {
    id?: true
    registrationNo?: true
    type?: true
    status?: true
    hospitalId?: true
    capacity?: true
    equipment?: true
    features?: true
    gpsTracking?: true
    createdAt?: true
    updatedAt?: true
    lastMaintenance?: true
    _all?: true
  }

  export type AmbulanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ambulance to aggregate.
     */
    where?: AmbulanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambulances to fetch.
     */
    orderBy?: AmbulanceOrderByWithRelationInput | AmbulanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AmbulanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambulances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambulances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ambulances
    **/
    _count?: true | AmbulanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AmbulanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AmbulanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmbulanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmbulanceMaxAggregateInputType
  }

  export type GetAmbulanceAggregateType<T extends AmbulanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAmbulance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmbulance[P]>
      : GetScalarType<T[P], AggregateAmbulance[P]>
  }




  export type AmbulanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceWhereInput
    orderBy?: AmbulanceOrderByWithAggregationInput | AmbulanceOrderByWithAggregationInput[]
    by: AmbulanceScalarFieldEnum[] | AmbulanceScalarFieldEnum
    having?: AmbulanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmbulanceCountAggregateInputType | true
    _avg?: AmbulanceAvgAggregateInputType
    _sum?: AmbulanceSumAggregateInputType
    _min?: AmbulanceMinAggregateInputType
    _max?: AmbulanceMaxAggregateInputType
  }

  export type AmbulanceGroupByOutputType = {
    id: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status: $Enums.AmbulanceStatus
    hospitalId: string
    capacity: number
    equipment: JsonValue | null
    features: string[]
    gpsTracking: JsonValue | null
    createdAt: Date
    updatedAt: Date
    lastMaintenance: Date | null
    _count: AmbulanceCountAggregateOutputType | null
    _avg: AmbulanceAvgAggregateOutputType | null
    _sum: AmbulanceSumAggregateOutputType | null
    _min: AmbulanceMinAggregateOutputType | null
    _max: AmbulanceMaxAggregateOutputType | null
  }

  type GetAmbulanceGroupByPayload<T extends AmbulanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmbulanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmbulanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmbulanceGroupByOutputType[P]>
            : GetScalarType<T[P], AmbulanceGroupByOutputType[P]>
        }
      >
    >


  export type AmbulanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationNo?: boolean
    type?: boolean
    status?: boolean
    hospitalId?: boolean
    capacity?: boolean
    equipment?: boolean
    features?: boolean
    gpsTracking?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastMaintenance?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    dispatches?: boolean | Ambulance$dispatchesArgs<ExtArgs>
    _count?: boolean | AmbulanceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulance"]>

  export type AmbulanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationNo?: boolean
    type?: boolean
    status?: boolean
    hospitalId?: boolean
    capacity?: boolean
    equipment?: boolean
    features?: boolean
    gpsTracking?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastMaintenance?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulance"]>

  export type AmbulanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationNo?: boolean
    type?: boolean
    status?: boolean
    hospitalId?: boolean
    capacity?: boolean
    equipment?: boolean
    features?: boolean
    gpsTracking?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastMaintenance?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulance"]>

  export type AmbulanceSelectScalar = {
    id?: boolean
    registrationNo?: boolean
    type?: boolean
    status?: boolean
    hospitalId?: boolean
    capacity?: boolean
    equipment?: boolean
    features?: boolean
    gpsTracking?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastMaintenance?: boolean
  }

  export type AmbulanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrationNo" | "type" | "status" | "hospitalId" | "capacity" | "equipment" | "features" | "gpsTracking" | "createdAt" | "updatedAt" | "lastMaintenance", ExtArgs["result"]["ambulance"]>
  export type AmbulanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    dispatches?: boolean | Ambulance$dispatchesArgs<ExtArgs>
    _count?: boolean | AmbulanceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AmbulanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type AmbulanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $AmbulancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ambulance"
    objects: {
      hospital: Prisma.$HospitalPayload<ExtArgs>
      dispatches: Prisma.$AmbulanceDispatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      registrationNo: string
      type: $Enums.AmbulanceType
      status: $Enums.AmbulanceStatus
      hospitalId: string
      capacity: number
      equipment: Prisma.JsonValue | null
      features: string[]
      gpsTracking: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      lastMaintenance: Date | null
    }, ExtArgs["result"]["ambulance"]>
    composites: {}
  }

  type AmbulanceGetPayload<S extends boolean | null | undefined | AmbulanceDefaultArgs> = $Result.GetResult<Prisma.$AmbulancePayload, S>

  type AmbulanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AmbulanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AmbulanceCountAggregateInputType | true
    }

  export interface AmbulanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ambulance'], meta: { name: 'Ambulance' } }
    /**
     * Find zero or one Ambulance that matches the filter.
     * @param {AmbulanceFindUniqueArgs} args - Arguments to find a Ambulance
     * @example
     * // Get one Ambulance
     * const ambulance = await prisma.ambulance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AmbulanceFindUniqueArgs>(args: SelectSubset<T, AmbulanceFindUniqueArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ambulance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AmbulanceFindUniqueOrThrowArgs} args - Arguments to find a Ambulance
     * @example
     * // Get one Ambulance
     * const ambulance = await prisma.ambulance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AmbulanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AmbulanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ambulance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceFindFirstArgs} args - Arguments to find a Ambulance
     * @example
     * // Get one Ambulance
     * const ambulance = await prisma.ambulance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AmbulanceFindFirstArgs>(args?: SelectSubset<T, AmbulanceFindFirstArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ambulance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceFindFirstOrThrowArgs} args - Arguments to find a Ambulance
     * @example
     * // Get one Ambulance
     * const ambulance = await prisma.ambulance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AmbulanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AmbulanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ambulances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ambulances
     * const ambulances = await prisma.ambulance.findMany()
     * 
     * // Get first 10 Ambulances
     * const ambulances = await prisma.ambulance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ambulanceWithIdOnly = await prisma.ambulance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AmbulanceFindManyArgs>(args?: SelectSubset<T, AmbulanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ambulance.
     * @param {AmbulanceCreateArgs} args - Arguments to create a Ambulance.
     * @example
     * // Create one Ambulance
     * const Ambulance = await prisma.ambulance.create({
     *   data: {
     *     // ... data to create a Ambulance
     *   }
     * })
     * 
     */
    create<T extends AmbulanceCreateArgs>(args: SelectSubset<T, AmbulanceCreateArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ambulances.
     * @param {AmbulanceCreateManyArgs} args - Arguments to create many Ambulances.
     * @example
     * // Create many Ambulances
     * const ambulance = await prisma.ambulance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AmbulanceCreateManyArgs>(args?: SelectSubset<T, AmbulanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ambulances and returns the data saved in the database.
     * @param {AmbulanceCreateManyAndReturnArgs} args - Arguments to create many Ambulances.
     * @example
     * // Create many Ambulances
     * const ambulance = await prisma.ambulance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ambulances and only return the `id`
     * const ambulanceWithIdOnly = await prisma.ambulance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AmbulanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AmbulanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ambulance.
     * @param {AmbulanceDeleteArgs} args - Arguments to delete one Ambulance.
     * @example
     * // Delete one Ambulance
     * const Ambulance = await prisma.ambulance.delete({
     *   where: {
     *     // ... filter to delete one Ambulance
     *   }
     * })
     * 
     */
    delete<T extends AmbulanceDeleteArgs>(args: SelectSubset<T, AmbulanceDeleteArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ambulance.
     * @param {AmbulanceUpdateArgs} args - Arguments to update one Ambulance.
     * @example
     * // Update one Ambulance
     * const ambulance = await prisma.ambulance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AmbulanceUpdateArgs>(args: SelectSubset<T, AmbulanceUpdateArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ambulances.
     * @param {AmbulanceDeleteManyArgs} args - Arguments to filter Ambulances to delete.
     * @example
     * // Delete a few Ambulances
     * const { count } = await prisma.ambulance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AmbulanceDeleteManyArgs>(args?: SelectSubset<T, AmbulanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ambulances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ambulances
     * const ambulance = await prisma.ambulance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AmbulanceUpdateManyArgs>(args: SelectSubset<T, AmbulanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ambulances and returns the data updated in the database.
     * @param {AmbulanceUpdateManyAndReturnArgs} args - Arguments to update many Ambulances.
     * @example
     * // Update many Ambulances
     * const ambulance = await prisma.ambulance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ambulances and only return the `id`
     * const ambulanceWithIdOnly = await prisma.ambulance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AmbulanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AmbulanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ambulance.
     * @param {AmbulanceUpsertArgs} args - Arguments to update or create a Ambulance.
     * @example
     * // Update or create a Ambulance
     * const ambulance = await prisma.ambulance.upsert({
     *   create: {
     *     // ... data to create a Ambulance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ambulance we want to update
     *   }
     * })
     */
    upsert<T extends AmbulanceUpsertArgs>(args: SelectSubset<T, AmbulanceUpsertArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ambulances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceCountArgs} args - Arguments to filter Ambulances to count.
     * @example
     * // Count the number of Ambulances
     * const count = await prisma.ambulance.count({
     *   where: {
     *     // ... the filter for the Ambulances we want to count
     *   }
     * })
    **/
    count<T extends AmbulanceCountArgs>(
      args?: Subset<T, AmbulanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmbulanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ambulance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmbulanceAggregateArgs>(args: Subset<T, AmbulanceAggregateArgs>): Prisma.PrismaPromise<GetAmbulanceAggregateType<T>>

    /**
     * Group by Ambulance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmbulanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmbulanceGroupByArgs['orderBy'] }
        : { orderBy?: AmbulanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmbulanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmbulanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ambulance model
   */
  readonly fields: AmbulanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ambulance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AmbulanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    dispatches<T extends Ambulance$dispatchesArgs<ExtArgs> = {}>(args?: Subset<T, Ambulance$dispatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ambulance model
   */
  interface AmbulanceFieldRefs {
    readonly id: FieldRef<"Ambulance", 'String'>
    readonly registrationNo: FieldRef<"Ambulance", 'String'>
    readonly type: FieldRef<"Ambulance", 'AmbulanceType'>
    readonly status: FieldRef<"Ambulance", 'AmbulanceStatus'>
    readonly hospitalId: FieldRef<"Ambulance", 'String'>
    readonly capacity: FieldRef<"Ambulance", 'Int'>
    readonly equipment: FieldRef<"Ambulance", 'Json'>
    readonly features: FieldRef<"Ambulance", 'String[]'>
    readonly gpsTracking: FieldRef<"Ambulance", 'Json'>
    readonly createdAt: FieldRef<"Ambulance", 'DateTime'>
    readonly updatedAt: FieldRef<"Ambulance", 'DateTime'>
    readonly lastMaintenance: FieldRef<"Ambulance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Ambulance findUnique
   */
  export type AmbulanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * Filter, which Ambulance to fetch.
     */
    where: AmbulanceWhereUniqueInput
  }

  /**
   * Ambulance findUniqueOrThrow
   */
  export type AmbulanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * Filter, which Ambulance to fetch.
     */
    where: AmbulanceWhereUniqueInput
  }

  /**
   * Ambulance findFirst
   */
  export type AmbulanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * Filter, which Ambulance to fetch.
     */
    where?: AmbulanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambulances to fetch.
     */
    orderBy?: AmbulanceOrderByWithRelationInput | AmbulanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ambulances.
     */
    cursor?: AmbulanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambulances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambulances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ambulances.
     */
    distinct?: AmbulanceScalarFieldEnum | AmbulanceScalarFieldEnum[]
  }

  /**
   * Ambulance findFirstOrThrow
   */
  export type AmbulanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * Filter, which Ambulance to fetch.
     */
    where?: AmbulanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambulances to fetch.
     */
    orderBy?: AmbulanceOrderByWithRelationInput | AmbulanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ambulances.
     */
    cursor?: AmbulanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambulances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambulances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ambulances.
     */
    distinct?: AmbulanceScalarFieldEnum | AmbulanceScalarFieldEnum[]
  }

  /**
   * Ambulance findMany
   */
  export type AmbulanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * Filter, which Ambulances to fetch.
     */
    where?: AmbulanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ambulances to fetch.
     */
    orderBy?: AmbulanceOrderByWithRelationInput | AmbulanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ambulances.
     */
    cursor?: AmbulanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ambulances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ambulances.
     */
    skip?: number
    distinct?: AmbulanceScalarFieldEnum | AmbulanceScalarFieldEnum[]
  }

  /**
   * Ambulance create
   */
  export type AmbulanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Ambulance.
     */
    data: XOR<AmbulanceCreateInput, AmbulanceUncheckedCreateInput>
  }

  /**
   * Ambulance createMany
   */
  export type AmbulanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ambulances.
     */
    data: AmbulanceCreateManyInput | AmbulanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ambulance createManyAndReturn
   */
  export type AmbulanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * The data used to create many Ambulances.
     */
    data: AmbulanceCreateManyInput | AmbulanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ambulance update
   */
  export type AmbulanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Ambulance.
     */
    data: XOR<AmbulanceUpdateInput, AmbulanceUncheckedUpdateInput>
    /**
     * Choose, which Ambulance to update.
     */
    where: AmbulanceWhereUniqueInput
  }

  /**
   * Ambulance updateMany
   */
  export type AmbulanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ambulances.
     */
    data: XOR<AmbulanceUpdateManyMutationInput, AmbulanceUncheckedUpdateManyInput>
    /**
     * Filter which Ambulances to update
     */
    where?: AmbulanceWhereInput
    /**
     * Limit how many Ambulances to update.
     */
    limit?: number
  }

  /**
   * Ambulance updateManyAndReturn
   */
  export type AmbulanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * The data used to update Ambulances.
     */
    data: XOR<AmbulanceUpdateManyMutationInput, AmbulanceUncheckedUpdateManyInput>
    /**
     * Filter which Ambulances to update
     */
    where?: AmbulanceWhereInput
    /**
     * Limit how many Ambulances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ambulance upsert
   */
  export type AmbulanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Ambulance to update in case it exists.
     */
    where: AmbulanceWhereUniqueInput
    /**
     * In case the Ambulance found by the `where` argument doesn't exist, create a new Ambulance with this data.
     */
    create: XOR<AmbulanceCreateInput, AmbulanceUncheckedCreateInput>
    /**
     * In case the Ambulance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AmbulanceUpdateInput, AmbulanceUncheckedUpdateInput>
  }

  /**
   * Ambulance delete
   */
  export type AmbulanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
    /**
     * Filter which Ambulance to delete.
     */
    where: AmbulanceWhereUniqueInput
  }

  /**
   * Ambulance deleteMany
   */
  export type AmbulanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ambulances to delete
     */
    where?: AmbulanceWhereInput
    /**
     * Limit how many Ambulances to delete.
     */
    limit?: number
  }

  /**
   * Ambulance.dispatches
   */
  export type Ambulance$dispatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    where?: AmbulanceDispatchWhereInput
    orderBy?: AmbulanceDispatchOrderByWithRelationInput | AmbulanceDispatchOrderByWithRelationInput[]
    cursor?: AmbulanceDispatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AmbulanceDispatchScalarFieldEnum | AmbulanceDispatchScalarFieldEnum[]
  }

  /**
   * Ambulance without action
   */
  export type AmbulanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ambulance
     */
    select?: AmbulanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ambulance
     */
    omit?: AmbulanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceInclude<ExtArgs> | null
  }


  /**
   * Model AmbulanceDispatch
   */

  export type AggregateAmbulanceDispatch = {
    _count: AmbulanceDispatchCountAggregateOutputType | null
    _min: AmbulanceDispatchMinAggregateOutputType | null
    _max: AmbulanceDispatchMaxAggregateOutputType | null
  }

  export type AmbulanceDispatchMinAggregateOutputType = {
    id: string | null
    ambulanceId: string | null
    patientId: string | null
    hospitalId: string | null
    pickupLocation: string | null
    dropLocation: string | null
    dispatchTime: Date | null
    arrivalTime: Date | null
    completionTime: Date | null
    priority: $Enums.DispatchPriority | null
    status: $Enums.DispatchStatus | null
    dispatchedBy: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AmbulanceDispatchMaxAggregateOutputType = {
    id: string | null
    ambulanceId: string | null
    patientId: string | null
    hospitalId: string | null
    pickupLocation: string | null
    dropLocation: string | null
    dispatchTime: Date | null
    arrivalTime: Date | null
    completionTime: Date | null
    priority: $Enums.DispatchPriority | null
    status: $Enums.DispatchStatus | null
    dispatchedBy: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AmbulanceDispatchCountAggregateOutputType = {
    id: number
    ambulanceId: number
    patientId: number
    hospitalId: number
    pickupLocation: number
    dropLocation: number
    dispatchTime: number
    arrivalTime: number
    completionTime: number
    priority: number
    status: number
    dispatchedBy: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AmbulanceDispatchMinAggregateInputType = {
    id?: true
    ambulanceId?: true
    patientId?: true
    hospitalId?: true
    pickupLocation?: true
    dropLocation?: true
    dispatchTime?: true
    arrivalTime?: true
    completionTime?: true
    priority?: true
    status?: true
    dispatchedBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AmbulanceDispatchMaxAggregateInputType = {
    id?: true
    ambulanceId?: true
    patientId?: true
    hospitalId?: true
    pickupLocation?: true
    dropLocation?: true
    dispatchTime?: true
    arrivalTime?: true
    completionTime?: true
    priority?: true
    status?: true
    dispatchedBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AmbulanceDispatchCountAggregateInputType = {
    id?: true
    ambulanceId?: true
    patientId?: true
    hospitalId?: true
    pickupLocation?: true
    dropLocation?: true
    dispatchTime?: true
    arrivalTime?: true
    completionTime?: true
    priority?: true
    status?: true
    dispatchedBy?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AmbulanceDispatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AmbulanceDispatch to aggregate.
     */
    where?: AmbulanceDispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceDispatches to fetch.
     */
    orderBy?: AmbulanceDispatchOrderByWithRelationInput | AmbulanceDispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AmbulanceDispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceDispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceDispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AmbulanceDispatches
    **/
    _count?: true | AmbulanceDispatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmbulanceDispatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmbulanceDispatchMaxAggregateInputType
  }

  export type GetAmbulanceDispatchAggregateType<T extends AmbulanceDispatchAggregateArgs> = {
        [P in keyof T & keyof AggregateAmbulanceDispatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmbulanceDispatch[P]>
      : GetScalarType<T[P], AggregateAmbulanceDispatch[P]>
  }




  export type AmbulanceDispatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceDispatchWhereInput
    orderBy?: AmbulanceDispatchOrderByWithAggregationInput | AmbulanceDispatchOrderByWithAggregationInput[]
    by: AmbulanceDispatchScalarFieldEnum[] | AmbulanceDispatchScalarFieldEnum
    having?: AmbulanceDispatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmbulanceDispatchCountAggregateInputType | true
    _min?: AmbulanceDispatchMinAggregateInputType
    _max?: AmbulanceDispatchMaxAggregateInputType
  }

  export type AmbulanceDispatchGroupByOutputType = {
    id: string
    ambulanceId: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date
    arrivalTime: Date | null
    completionTime: Date | null
    priority: $Enums.DispatchPriority
    status: $Enums.DispatchStatus
    dispatchedBy: string
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: AmbulanceDispatchCountAggregateOutputType | null
    _min: AmbulanceDispatchMinAggregateOutputType | null
    _max: AmbulanceDispatchMaxAggregateOutputType | null
  }

  type GetAmbulanceDispatchGroupByPayload<T extends AmbulanceDispatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmbulanceDispatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmbulanceDispatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmbulanceDispatchGroupByOutputType[P]>
            : GetScalarType<T[P], AmbulanceDispatchGroupByOutputType[P]>
        }
      >
    >


  export type AmbulanceDispatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ambulanceId?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    dropLocation?: boolean
    dispatchTime?: boolean
    arrivalTime?: boolean
    completionTime?: boolean
    priority?: boolean
    status?: boolean
    dispatchedBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ambulance?: boolean | AmbulanceDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulanceDispatch"]>

  export type AmbulanceDispatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ambulanceId?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    dropLocation?: boolean
    dispatchTime?: boolean
    arrivalTime?: boolean
    completionTime?: boolean
    priority?: boolean
    status?: boolean
    dispatchedBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ambulance?: boolean | AmbulanceDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulanceDispatch"]>

  export type AmbulanceDispatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ambulanceId?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    dropLocation?: boolean
    dispatchTime?: boolean
    arrivalTime?: boolean
    completionTime?: boolean
    priority?: boolean
    status?: boolean
    dispatchedBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ambulance?: boolean | AmbulanceDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulanceDispatch"]>

  export type AmbulanceDispatchSelectScalar = {
    id?: boolean
    ambulanceId?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    dropLocation?: boolean
    dispatchTime?: boolean
    arrivalTime?: boolean
    completionTime?: boolean
    priority?: boolean
    status?: boolean
    dispatchedBy?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AmbulanceDispatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ambulanceId" | "patientId" | "hospitalId" | "pickupLocation" | "dropLocation" | "dispatchTime" | "arrivalTime" | "completionTime" | "priority" | "status" | "dispatchedBy" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["ambulanceDispatch"]>
  export type AmbulanceDispatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ambulance?: boolean | AmbulanceDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type AmbulanceDispatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ambulance?: boolean | AmbulanceDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type AmbulanceDispatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ambulance?: boolean | AmbulanceDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $AmbulanceDispatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AmbulanceDispatch"
    objects: {
      ambulance: Prisma.$AmbulancePayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ambulanceId: string
      patientId: string
      hospitalId: string
      pickupLocation: string
      dropLocation: string
      dispatchTime: Date
      arrivalTime: Date | null
      completionTime: Date | null
      priority: $Enums.DispatchPriority
      status: $Enums.DispatchStatus
      dispatchedBy: string
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ambulanceDispatch"]>
    composites: {}
  }

  type AmbulanceDispatchGetPayload<S extends boolean | null | undefined | AmbulanceDispatchDefaultArgs> = $Result.GetResult<Prisma.$AmbulanceDispatchPayload, S>

  type AmbulanceDispatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AmbulanceDispatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AmbulanceDispatchCountAggregateInputType | true
    }

  export interface AmbulanceDispatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AmbulanceDispatch'], meta: { name: 'AmbulanceDispatch' } }
    /**
     * Find zero or one AmbulanceDispatch that matches the filter.
     * @param {AmbulanceDispatchFindUniqueArgs} args - Arguments to find a AmbulanceDispatch
     * @example
     * // Get one AmbulanceDispatch
     * const ambulanceDispatch = await prisma.ambulanceDispatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AmbulanceDispatchFindUniqueArgs>(args: SelectSubset<T, AmbulanceDispatchFindUniqueArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AmbulanceDispatch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AmbulanceDispatchFindUniqueOrThrowArgs} args - Arguments to find a AmbulanceDispatch
     * @example
     * // Get one AmbulanceDispatch
     * const ambulanceDispatch = await prisma.ambulanceDispatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AmbulanceDispatchFindUniqueOrThrowArgs>(args: SelectSubset<T, AmbulanceDispatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AmbulanceDispatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceDispatchFindFirstArgs} args - Arguments to find a AmbulanceDispatch
     * @example
     * // Get one AmbulanceDispatch
     * const ambulanceDispatch = await prisma.ambulanceDispatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AmbulanceDispatchFindFirstArgs>(args?: SelectSubset<T, AmbulanceDispatchFindFirstArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AmbulanceDispatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceDispatchFindFirstOrThrowArgs} args - Arguments to find a AmbulanceDispatch
     * @example
     * // Get one AmbulanceDispatch
     * const ambulanceDispatch = await prisma.ambulanceDispatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AmbulanceDispatchFindFirstOrThrowArgs>(args?: SelectSubset<T, AmbulanceDispatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AmbulanceDispatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceDispatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AmbulanceDispatches
     * const ambulanceDispatches = await prisma.ambulanceDispatch.findMany()
     * 
     * // Get first 10 AmbulanceDispatches
     * const ambulanceDispatches = await prisma.ambulanceDispatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ambulanceDispatchWithIdOnly = await prisma.ambulanceDispatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AmbulanceDispatchFindManyArgs>(args?: SelectSubset<T, AmbulanceDispatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AmbulanceDispatch.
     * @param {AmbulanceDispatchCreateArgs} args - Arguments to create a AmbulanceDispatch.
     * @example
     * // Create one AmbulanceDispatch
     * const AmbulanceDispatch = await prisma.ambulanceDispatch.create({
     *   data: {
     *     // ... data to create a AmbulanceDispatch
     *   }
     * })
     * 
     */
    create<T extends AmbulanceDispatchCreateArgs>(args: SelectSubset<T, AmbulanceDispatchCreateArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AmbulanceDispatches.
     * @param {AmbulanceDispatchCreateManyArgs} args - Arguments to create many AmbulanceDispatches.
     * @example
     * // Create many AmbulanceDispatches
     * const ambulanceDispatch = await prisma.ambulanceDispatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AmbulanceDispatchCreateManyArgs>(args?: SelectSubset<T, AmbulanceDispatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AmbulanceDispatches and returns the data saved in the database.
     * @param {AmbulanceDispatchCreateManyAndReturnArgs} args - Arguments to create many AmbulanceDispatches.
     * @example
     * // Create many AmbulanceDispatches
     * const ambulanceDispatch = await prisma.ambulanceDispatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AmbulanceDispatches and only return the `id`
     * const ambulanceDispatchWithIdOnly = await prisma.ambulanceDispatch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AmbulanceDispatchCreateManyAndReturnArgs>(args?: SelectSubset<T, AmbulanceDispatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AmbulanceDispatch.
     * @param {AmbulanceDispatchDeleteArgs} args - Arguments to delete one AmbulanceDispatch.
     * @example
     * // Delete one AmbulanceDispatch
     * const AmbulanceDispatch = await prisma.ambulanceDispatch.delete({
     *   where: {
     *     // ... filter to delete one AmbulanceDispatch
     *   }
     * })
     * 
     */
    delete<T extends AmbulanceDispatchDeleteArgs>(args: SelectSubset<T, AmbulanceDispatchDeleteArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AmbulanceDispatch.
     * @param {AmbulanceDispatchUpdateArgs} args - Arguments to update one AmbulanceDispatch.
     * @example
     * // Update one AmbulanceDispatch
     * const ambulanceDispatch = await prisma.ambulanceDispatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AmbulanceDispatchUpdateArgs>(args: SelectSubset<T, AmbulanceDispatchUpdateArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AmbulanceDispatches.
     * @param {AmbulanceDispatchDeleteManyArgs} args - Arguments to filter AmbulanceDispatches to delete.
     * @example
     * // Delete a few AmbulanceDispatches
     * const { count } = await prisma.ambulanceDispatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AmbulanceDispatchDeleteManyArgs>(args?: SelectSubset<T, AmbulanceDispatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AmbulanceDispatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceDispatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AmbulanceDispatches
     * const ambulanceDispatch = await prisma.ambulanceDispatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AmbulanceDispatchUpdateManyArgs>(args: SelectSubset<T, AmbulanceDispatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AmbulanceDispatches and returns the data updated in the database.
     * @param {AmbulanceDispatchUpdateManyAndReturnArgs} args - Arguments to update many AmbulanceDispatches.
     * @example
     * // Update many AmbulanceDispatches
     * const ambulanceDispatch = await prisma.ambulanceDispatch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AmbulanceDispatches and only return the `id`
     * const ambulanceDispatchWithIdOnly = await prisma.ambulanceDispatch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AmbulanceDispatchUpdateManyAndReturnArgs>(args: SelectSubset<T, AmbulanceDispatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AmbulanceDispatch.
     * @param {AmbulanceDispatchUpsertArgs} args - Arguments to update or create a AmbulanceDispatch.
     * @example
     * // Update or create a AmbulanceDispatch
     * const ambulanceDispatch = await prisma.ambulanceDispatch.upsert({
     *   create: {
     *     // ... data to create a AmbulanceDispatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AmbulanceDispatch we want to update
     *   }
     * })
     */
    upsert<T extends AmbulanceDispatchUpsertArgs>(args: SelectSubset<T, AmbulanceDispatchUpsertArgs<ExtArgs>>): Prisma__AmbulanceDispatchClient<$Result.GetResult<Prisma.$AmbulanceDispatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AmbulanceDispatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceDispatchCountArgs} args - Arguments to filter AmbulanceDispatches to count.
     * @example
     * // Count the number of AmbulanceDispatches
     * const count = await prisma.ambulanceDispatch.count({
     *   where: {
     *     // ... the filter for the AmbulanceDispatches we want to count
     *   }
     * })
    **/
    count<T extends AmbulanceDispatchCountArgs>(
      args?: Subset<T, AmbulanceDispatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmbulanceDispatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AmbulanceDispatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceDispatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmbulanceDispatchAggregateArgs>(args: Subset<T, AmbulanceDispatchAggregateArgs>): Prisma.PrismaPromise<GetAmbulanceDispatchAggregateType<T>>

    /**
     * Group by AmbulanceDispatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceDispatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmbulanceDispatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmbulanceDispatchGroupByArgs['orderBy'] }
        : { orderBy?: AmbulanceDispatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmbulanceDispatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmbulanceDispatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AmbulanceDispatch model
   */
  readonly fields: AmbulanceDispatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AmbulanceDispatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AmbulanceDispatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ambulance<T extends AmbulanceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AmbulanceDefaultArgs<ExtArgs>>): Prisma__AmbulanceClient<$Result.GetResult<Prisma.$AmbulancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AmbulanceDispatch model
   */
  interface AmbulanceDispatchFieldRefs {
    readonly id: FieldRef<"AmbulanceDispatch", 'String'>
    readonly ambulanceId: FieldRef<"AmbulanceDispatch", 'String'>
    readonly patientId: FieldRef<"AmbulanceDispatch", 'String'>
    readonly hospitalId: FieldRef<"AmbulanceDispatch", 'String'>
    readonly pickupLocation: FieldRef<"AmbulanceDispatch", 'String'>
    readonly dropLocation: FieldRef<"AmbulanceDispatch", 'String'>
    readonly dispatchTime: FieldRef<"AmbulanceDispatch", 'DateTime'>
    readonly arrivalTime: FieldRef<"AmbulanceDispatch", 'DateTime'>
    readonly completionTime: FieldRef<"AmbulanceDispatch", 'DateTime'>
    readonly priority: FieldRef<"AmbulanceDispatch", 'DispatchPriority'>
    readonly status: FieldRef<"AmbulanceDispatch", 'DispatchStatus'>
    readonly dispatchedBy: FieldRef<"AmbulanceDispatch", 'String'>
    readonly notes: FieldRef<"AmbulanceDispatch", 'String'>
    readonly createdAt: FieldRef<"AmbulanceDispatch", 'DateTime'>
    readonly updatedAt: FieldRef<"AmbulanceDispatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AmbulanceDispatch findUnique
   */
  export type AmbulanceDispatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceDispatch to fetch.
     */
    where: AmbulanceDispatchWhereUniqueInput
  }

  /**
   * AmbulanceDispatch findUniqueOrThrow
   */
  export type AmbulanceDispatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceDispatch to fetch.
     */
    where: AmbulanceDispatchWhereUniqueInput
  }

  /**
   * AmbulanceDispatch findFirst
   */
  export type AmbulanceDispatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceDispatch to fetch.
     */
    where?: AmbulanceDispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceDispatches to fetch.
     */
    orderBy?: AmbulanceDispatchOrderByWithRelationInput | AmbulanceDispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AmbulanceDispatches.
     */
    cursor?: AmbulanceDispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceDispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceDispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AmbulanceDispatches.
     */
    distinct?: AmbulanceDispatchScalarFieldEnum | AmbulanceDispatchScalarFieldEnum[]
  }

  /**
   * AmbulanceDispatch findFirstOrThrow
   */
  export type AmbulanceDispatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceDispatch to fetch.
     */
    where?: AmbulanceDispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceDispatches to fetch.
     */
    orderBy?: AmbulanceDispatchOrderByWithRelationInput | AmbulanceDispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AmbulanceDispatches.
     */
    cursor?: AmbulanceDispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceDispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceDispatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AmbulanceDispatches.
     */
    distinct?: AmbulanceDispatchScalarFieldEnum | AmbulanceDispatchScalarFieldEnum[]
  }

  /**
   * AmbulanceDispatch findMany
   */
  export type AmbulanceDispatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceDispatches to fetch.
     */
    where?: AmbulanceDispatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceDispatches to fetch.
     */
    orderBy?: AmbulanceDispatchOrderByWithRelationInput | AmbulanceDispatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AmbulanceDispatches.
     */
    cursor?: AmbulanceDispatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceDispatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceDispatches.
     */
    skip?: number
    distinct?: AmbulanceDispatchScalarFieldEnum | AmbulanceDispatchScalarFieldEnum[]
  }

  /**
   * AmbulanceDispatch create
   */
  export type AmbulanceDispatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * The data needed to create a AmbulanceDispatch.
     */
    data: XOR<AmbulanceDispatchCreateInput, AmbulanceDispatchUncheckedCreateInput>
  }

  /**
   * AmbulanceDispatch createMany
   */
  export type AmbulanceDispatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AmbulanceDispatches.
     */
    data: AmbulanceDispatchCreateManyInput | AmbulanceDispatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AmbulanceDispatch createManyAndReturn
   */
  export type AmbulanceDispatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * The data used to create many AmbulanceDispatches.
     */
    data: AmbulanceDispatchCreateManyInput | AmbulanceDispatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AmbulanceDispatch update
   */
  export type AmbulanceDispatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * The data needed to update a AmbulanceDispatch.
     */
    data: XOR<AmbulanceDispatchUpdateInput, AmbulanceDispatchUncheckedUpdateInput>
    /**
     * Choose, which AmbulanceDispatch to update.
     */
    where: AmbulanceDispatchWhereUniqueInput
  }

  /**
   * AmbulanceDispatch updateMany
   */
  export type AmbulanceDispatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AmbulanceDispatches.
     */
    data: XOR<AmbulanceDispatchUpdateManyMutationInput, AmbulanceDispatchUncheckedUpdateManyInput>
    /**
     * Filter which AmbulanceDispatches to update
     */
    where?: AmbulanceDispatchWhereInput
    /**
     * Limit how many AmbulanceDispatches to update.
     */
    limit?: number
  }

  /**
   * AmbulanceDispatch updateManyAndReturn
   */
  export type AmbulanceDispatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * The data used to update AmbulanceDispatches.
     */
    data: XOR<AmbulanceDispatchUpdateManyMutationInput, AmbulanceDispatchUncheckedUpdateManyInput>
    /**
     * Filter which AmbulanceDispatches to update
     */
    where?: AmbulanceDispatchWhereInput
    /**
     * Limit how many AmbulanceDispatches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AmbulanceDispatch upsert
   */
  export type AmbulanceDispatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * The filter to search for the AmbulanceDispatch to update in case it exists.
     */
    where: AmbulanceDispatchWhereUniqueInput
    /**
     * In case the AmbulanceDispatch found by the `where` argument doesn't exist, create a new AmbulanceDispatch with this data.
     */
    create: XOR<AmbulanceDispatchCreateInput, AmbulanceDispatchUncheckedCreateInput>
    /**
     * In case the AmbulanceDispatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AmbulanceDispatchUpdateInput, AmbulanceDispatchUncheckedUpdateInput>
  }

  /**
   * AmbulanceDispatch delete
   */
  export type AmbulanceDispatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
    /**
     * Filter which AmbulanceDispatch to delete.
     */
    where: AmbulanceDispatchWhereUniqueInput
  }

  /**
   * AmbulanceDispatch deleteMany
   */
  export type AmbulanceDispatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AmbulanceDispatches to delete
     */
    where?: AmbulanceDispatchWhereInput
    /**
     * Limit how many AmbulanceDispatches to delete.
     */
    limit?: number
  }

  /**
   * AmbulanceDispatch without action
   */
  export type AmbulanceDispatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceDispatch
     */
    select?: AmbulanceDispatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceDispatch
     */
    omit?: AmbulanceDispatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceDispatchInclude<ExtArgs> | null
  }


  /**
   * Model AmbulanceRequest
   */

  export type AggregateAmbulanceRequest = {
    _count: AmbulanceRequestCountAggregateOutputType | null
    _min: AmbulanceRequestMinAggregateOutputType | null
    _max: AmbulanceRequestMaxAggregateOutputType | null
  }

  export type AmbulanceRequestMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    pickupLocation: string | null
    reason: string | null
    requestTime: Date | null
    status: $Enums.DispatchStatus | null
    priority: $Enums.DispatchPriority | null
    contactName: string | null
    contactPhone: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AmbulanceRequestMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    pickupLocation: string | null
    reason: string | null
    requestTime: Date | null
    status: $Enums.DispatchStatus | null
    priority: $Enums.DispatchPriority | null
    contactName: string | null
    contactPhone: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AmbulanceRequestCountAggregateOutputType = {
    id: number
    patientId: number
    hospitalId: number
    pickupLocation: number
    reason: number
    requestTime: number
    status: number
    priority: number
    contactName: number
    contactPhone: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AmbulanceRequestMinAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    pickupLocation?: true
    reason?: true
    requestTime?: true
    status?: true
    priority?: true
    contactName?: true
    contactPhone?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AmbulanceRequestMaxAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    pickupLocation?: true
    reason?: true
    requestTime?: true
    status?: true
    priority?: true
    contactName?: true
    contactPhone?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AmbulanceRequestCountAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    pickupLocation?: true
    reason?: true
    requestTime?: true
    status?: true
    priority?: true
    contactName?: true
    contactPhone?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AmbulanceRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AmbulanceRequest to aggregate.
     */
    where?: AmbulanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceRequests to fetch.
     */
    orderBy?: AmbulanceRequestOrderByWithRelationInput | AmbulanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AmbulanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AmbulanceRequests
    **/
    _count?: true | AmbulanceRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmbulanceRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmbulanceRequestMaxAggregateInputType
  }

  export type GetAmbulanceRequestAggregateType<T extends AmbulanceRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateAmbulanceRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmbulanceRequest[P]>
      : GetScalarType<T[P], AggregateAmbulanceRequest[P]>
  }




  export type AmbulanceRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AmbulanceRequestWhereInput
    orderBy?: AmbulanceRequestOrderByWithAggregationInput | AmbulanceRequestOrderByWithAggregationInput[]
    by: AmbulanceRequestScalarFieldEnum[] | AmbulanceRequestScalarFieldEnum
    having?: AmbulanceRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmbulanceRequestCountAggregateInputType | true
    _min?: AmbulanceRequestMinAggregateInputType
    _max?: AmbulanceRequestMaxAggregateInputType
  }

  export type AmbulanceRequestGroupByOutputType = {
    id: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    reason: string
    requestTime: Date
    status: $Enums.DispatchStatus
    priority: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: AmbulanceRequestCountAggregateOutputType | null
    _min: AmbulanceRequestMinAggregateOutputType | null
    _max: AmbulanceRequestMaxAggregateOutputType | null
  }

  type GetAmbulanceRequestGroupByPayload<T extends AmbulanceRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AmbulanceRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AmbulanceRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AmbulanceRequestGroupByOutputType[P]>
            : GetScalarType<T[P], AmbulanceRequestGroupByOutputType[P]>
        }
      >
    >


  export type AmbulanceRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    reason?: boolean
    requestTime?: boolean
    status?: boolean
    priority?: boolean
    contactName?: boolean
    contactPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulanceRequest"]>

  export type AmbulanceRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    reason?: boolean
    requestTime?: boolean
    status?: boolean
    priority?: boolean
    contactName?: boolean
    contactPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulanceRequest"]>

  export type AmbulanceRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    reason?: boolean
    requestTime?: boolean
    status?: boolean
    priority?: boolean
    contactName?: boolean
    contactPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ambulanceRequest"]>

  export type AmbulanceRequestSelectScalar = {
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    pickupLocation?: boolean
    reason?: boolean
    requestTime?: boolean
    status?: boolean
    priority?: boolean
    contactName?: boolean
    contactPhone?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AmbulanceRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "hospitalId" | "pickupLocation" | "reason" | "requestTime" | "status" | "priority" | "contactName" | "contactPhone" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["ambulanceRequest"]>
  export type AmbulanceRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type AmbulanceRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type AmbulanceRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $AmbulanceRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AmbulanceRequest"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      hospitalId: string
      pickupLocation: string
      reason: string
      requestTime: Date
      status: $Enums.DispatchStatus
      priority: $Enums.DispatchPriority
      contactName: string
      contactPhone: string
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ambulanceRequest"]>
    composites: {}
  }

  type AmbulanceRequestGetPayload<S extends boolean | null | undefined | AmbulanceRequestDefaultArgs> = $Result.GetResult<Prisma.$AmbulanceRequestPayload, S>

  type AmbulanceRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AmbulanceRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AmbulanceRequestCountAggregateInputType | true
    }

  export interface AmbulanceRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AmbulanceRequest'], meta: { name: 'AmbulanceRequest' } }
    /**
     * Find zero or one AmbulanceRequest that matches the filter.
     * @param {AmbulanceRequestFindUniqueArgs} args - Arguments to find a AmbulanceRequest
     * @example
     * // Get one AmbulanceRequest
     * const ambulanceRequest = await prisma.ambulanceRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AmbulanceRequestFindUniqueArgs>(args: SelectSubset<T, AmbulanceRequestFindUniqueArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AmbulanceRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AmbulanceRequestFindUniqueOrThrowArgs} args - Arguments to find a AmbulanceRequest
     * @example
     * // Get one AmbulanceRequest
     * const ambulanceRequest = await prisma.ambulanceRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AmbulanceRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, AmbulanceRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AmbulanceRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceRequestFindFirstArgs} args - Arguments to find a AmbulanceRequest
     * @example
     * // Get one AmbulanceRequest
     * const ambulanceRequest = await prisma.ambulanceRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AmbulanceRequestFindFirstArgs>(args?: SelectSubset<T, AmbulanceRequestFindFirstArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AmbulanceRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceRequestFindFirstOrThrowArgs} args - Arguments to find a AmbulanceRequest
     * @example
     * // Get one AmbulanceRequest
     * const ambulanceRequest = await prisma.ambulanceRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AmbulanceRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, AmbulanceRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AmbulanceRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AmbulanceRequests
     * const ambulanceRequests = await prisma.ambulanceRequest.findMany()
     * 
     * // Get first 10 AmbulanceRequests
     * const ambulanceRequests = await prisma.ambulanceRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ambulanceRequestWithIdOnly = await prisma.ambulanceRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AmbulanceRequestFindManyArgs>(args?: SelectSubset<T, AmbulanceRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AmbulanceRequest.
     * @param {AmbulanceRequestCreateArgs} args - Arguments to create a AmbulanceRequest.
     * @example
     * // Create one AmbulanceRequest
     * const AmbulanceRequest = await prisma.ambulanceRequest.create({
     *   data: {
     *     // ... data to create a AmbulanceRequest
     *   }
     * })
     * 
     */
    create<T extends AmbulanceRequestCreateArgs>(args: SelectSubset<T, AmbulanceRequestCreateArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AmbulanceRequests.
     * @param {AmbulanceRequestCreateManyArgs} args - Arguments to create many AmbulanceRequests.
     * @example
     * // Create many AmbulanceRequests
     * const ambulanceRequest = await prisma.ambulanceRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AmbulanceRequestCreateManyArgs>(args?: SelectSubset<T, AmbulanceRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AmbulanceRequests and returns the data saved in the database.
     * @param {AmbulanceRequestCreateManyAndReturnArgs} args - Arguments to create many AmbulanceRequests.
     * @example
     * // Create many AmbulanceRequests
     * const ambulanceRequest = await prisma.ambulanceRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AmbulanceRequests and only return the `id`
     * const ambulanceRequestWithIdOnly = await prisma.ambulanceRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AmbulanceRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, AmbulanceRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AmbulanceRequest.
     * @param {AmbulanceRequestDeleteArgs} args - Arguments to delete one AmbulanceRequest.
     * @example
     * // Delete one AmbulanceRequest
     * const AmbulanceRequest = await prisma.ambulanceRequest.delete({
     *   where: {
     *     // ... filter to delete one AmbulanceRequest
     *   }
     * })
     * 
     */
    delete<T extends AmbulanceRequestDeleteArgs>(args: SelectSubset<T, AmbulanceRequestDeleteArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AmbulanceRequest.
     * @param {AmbulanceRequestUpdateArgs} args - Arguments to update one AmbulanceRequest.
     * @example
     * // Update one AmbulanceRequest
     * const ambulanceRequest = await prisma.ambulanceRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AmbulanceRequestUpdateArgs>(args: SelectSubset<T, AmbulanceRequestUpdateArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AmbulanceRequests.
     * @param {AmbulanceRequestDeleteManyArgs} args - Arguments to filter AmbulanceRequests to delete.
     * @example
     * // Delete a few AmbulanceRequests
     * const { count } = await prisma.ambulanceRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AmbulanceRequestDeleteManyArgs>(args?: SelectSubset<T, AmbulanceRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AmbulanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AmbulanceRequests
     * const ambulanceRequest = await prisma.ambulanceRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AmbulanceRequestUpdateManyArgs>(args: SelectSubset<T, AmbulanceRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AmbulanceRequests and returns the data updated in the database.
     * @param {AmbulanceRequestUpdateManyAndReturnArgs} args - Arguments to update many AmbulanceRequests.
     * @example
     * // Update many AmbulanceRequests
     * const ambulanceRequest = await prisma.ambulanceRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AmbulanceRequests and only return the `id`
     * const ambulanceRequestWithIdOnly = await prisma.ambulanceRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AmbulanceRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, AmbulanceRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AmbulanceRequest.
     * @param {AmbulanceRequestUpsertArgs} args - Arguments to update or create a AmbulanceRequest.
     * @example
     * // Update or create a AmbulanceRequest
     * const ambulanceRequest = await prisma.ambulanceRequest.upsert({
     *   create: {
     *     // ... data to create a AmbulanceRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AmbulanceRequest we want to update
     *   }
     * })
     */
    upsert<T extends AmbulanceRequestUpsertArgs>(args: SelectSubset<T, AmbulanceRequestUpsertArgs<ExtArgs>>): Prisma__AmbulanceRequestClient<$Result.GetResult<Prisma.$AmbulanceRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AmbulanceRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceRequestCountArgs} args - Arguments to filter AmbulanceRequests to count.
     * @example
     * // Count the number of AmbulanceRequests
     * const count = await prisma.ambulanceRequest.count({
     *   where: {
     *     // ... the filter for the AmbulanceRequests we want to count
     *   }
     * })
    **/
    count<T extends AmbulanceRequestCountArgs>(
      args?: Subset<T, AmbulanceRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmbulanceRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AmbulanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmbulanceRequestAggregateArgs>(args: Subset<T, AmbulanceRequestAggregateArgs>): Prisma.PrismaPromise<GetAmbulanceRequestAggregateType<T>>

    /**
     * Group by AmbulanceRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmbulanceRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmbulanceRequestGroupByArgs['orderBy'] }
        : { orderBy?: AmbulanceRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmbulanceRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmbulanceRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AmbulanceRequest model
   */
  readonly fields: AmbulanceRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AmbulanceRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AmbulanceRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AmbulanceRequest model
   */
  interface AmbulanceRequestFieldRefs {
    readonly id: FieldRef<"AmbulanceRequest", 'String'>
    readonly patientId: FieldRef<"AmbulanceRequest", 'String'>
    readonly hospitalId: FieldRef<"AmbulanceRequest", 'String'>
    readonly pickupLocation: FieldRef<"AmbulanceRequest", 'String'>
    readonly reason: FieldRef<"AmbulanceRequest", 'String'>
    readonly requestTime: FieldRef<"AmbulanceRequest", 'DateTime'>
    readonly status: FieldRef<"AmbulanceRequest", 'DispatchStatus'>
    readonly priority: FieldRef<"AmbulanceRequest", 'DispatchPriority'>
    readonly contactName: FieldRef<"AmbulanceRequest", 'String'>
    readonly contactPhone: FieldRef<"AmbulanceRequest", 'String'>
    readonly notes: FieldRef<"AmbulanceRequest", 'String'>
    readonly createdAt: FieldRef<"AmbulanceRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"AmbulanceRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AmbulanceRequest findUnique
   */
  export type AmbulanceRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceRequest to fetch.
     */
    where: AmbulanceRequestWhereUniqueInput
  }

  /**
   * AmbulanceRequest findUniqueOrThrow
   */
  export type AmbulanceRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceRequest to fetch.
     */
    where: AmbulanceRequestWhereUniqueInput
  }

  /**
   * AmbulanceRequest findFirst
   */
  export type AmbulanceRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceRequest to fetch.
     */
    where?: AmbulanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceRequests to fetch.
     */
    orderBy?: AmbulanceRequestOrderByWithRelationInput | AmbulanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AmbulanceRequests.
     */
    cursor?: AmbulanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AmbulanceRequests.
     */
    distinct?: AmbulanceRequestScalarFieldEnum | AmbulanceRequestScalarFieldEnum[]
  }

  /**
   * AmbulanceRequest findFirstOrThrow
   */
  export type AmbulanceRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceRequest to fetch.
     */
    where?: AmbulanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceRequests to fetch.
     */
    orderBy?: AmbulanceRequestOrderByWithRelationInput | AmbulanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AmbulanceRequests.
     */
    cursor?: AmbulanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AmbulanceRequests.
     */
    distinct?: AmbulanceRequestScalarFieldEnum | AmbulanceRequestScalarFieldEnum[]
  }

  /**
   * AmbulanceRequest findMany
   */
  export type AmbulanceRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * Filter, which AmbulanceRequests to fetch.
     */
    where?: AmbulanceRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceRequests to fetch.
     */
    orderBy?: AmbulanceRequestOrderByWithRelationInput | AmbulanceRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AmbulanceRequests.
     */
    cursor?: AmbulanceRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceRequests.
     */
    skip?: number
    distinct?: AmbulanceRequestScalarFieldEnum | AmbulanceRequestScalarFieldEnum[]
  }

  /**
   * AmbulanceRequest create
   */
  export type AmbulanceRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a AmbulanceRequest.
     */
    data: XOR<AmbulanceRequestCreateInput, AmbulanceRequestUncheckedCreateInput>
  }

  /**
   * AmbulanceRequest createMany
   */
  export type AmbulanceRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AmbulanceRequests.
     */
    data: AmbulanceRequestCreateManyInput | AmbulanceRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AmbulanceRequest createManyAndReturn
   */
  export type AmbulanceRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * The data used to create many AmbulanceRequests.
     */
    data: AmbulanceRequestCreateManyInput | AmbulanceRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AmbulanceRequest update
   */
  export type AmbulanceRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a AmbulanceRequest.
     */
    data: XOR<AmbulanceRequestUpdateInput, AmbulanceRequestUncheckedUpdateInput>
    /**
     * Choose, which AmbulanceRequest to update.
     */
    where: AmbulanceRequestWhereUniqueInput
  }

  /**
   * AmbulanceRequest updateMany
   */
  export type AmbulanceRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AmbulanceRequests.
     */
    data: XOR<AmbulanceRequestUpdateManyMutationInput, AmbulanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which AmbulanceRequests to update
     */
    where?: AmbulanceRequestWhereInput
    /**
     * Limit how many AmbulanceRequests to update.
     */
    limit?: number
  }

  /**
   * AmbulanceRequest updateManyAndReturn
   */
  export type AmbulanceRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * The data used to update AmbulanceRequests.
     */
    data: XOR<AmbulanceRequestUpdateManyMutationInput, AmbulanceRequestUncheckedUpdateManyInput>
    /**
     * Filter which AmbulanceRequests to update
     */
    where?: AmbulanceRequestWhereInput
    /**
     * Limit how many AmbulanceRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AmbulanceRequest upsert
   */
  export type AmbulanceRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the AmbulanceRequest to update in case it exists.
     */
    where: AmbulanceRequestWhereUniqueInput
    /**
     * In case the AmbulanceRequest found by the `where` argument doesn't exist, create a new AmbulanceRequest with this data.
     */
    create: XOR<AmbulanceRequestCreateInput, AmbulanceRequestUncheckedCreateInput>
    /**
     * In case the AmbulanceRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AmbulanceRequestUpdateInput, AmbulanceRequestUncheckedUpdateInput>
  }

  /**
   * AmbulanceRequest delete
   */
  export type AmbulanceRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
    /**
     * Filter which AmbulanceRequest to delete.
     */
    where: AmbulanceRequestWhereUniqueInput
  }

  /**
   * AmbulanceRequest deleteMany
   */
  export type AmbulanceRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AmbulanceRequests to delete
     */
    where?: AmbulanceRequestWhereInput
    /**
     * Limit how many AmbulanceRequests to delete.
     */
    limit?: number
  }

  /**
   * AmbulanceRequest without action
   */
  export type AmbulanceRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AmbulanceRequest
     */
    select?: AmbulanceRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AmbulanceRequest
     */
    omit?: AmbulanceRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AmbulanceRequestInclude<ExtArgs> | null
  }


  /**
   * Model Wallet
   */

  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    balance: number | null
  }

  export type WalletSumAggregateOutputType = {
    balance: number | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    balance: number | null
    currency: string | null
    status: $Enums.WalletStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    balance: number | null
    currency: string | null
    status: $Enums.WalletStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    patientId: number
    balance: number
    currency: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    balance?: true
  }

  export type WalletSumAggregateInputType = {
    balance?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    patientId?: true
    balance?: true
    currency?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    patientId?: true
    balance?: true
    currency?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    patientId?: true
    balance?: true
    currency?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithAggregationInput | WalletOrderByWithAggregationInput[]
    by: WalletScalarFieldEnum[] | WalletScalarFieldEnum
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }

  export type WalletGroupByOutputType = {
    id: string
    patientId: string
    balance: number
    currency: string
    status: $Enums.WalletStatus
    createdAt: Date
    updatedAt: Date
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    balance?: boolean
    currency?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    transactions?: boolean | Wallet$transactionsArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    balance?: boolean
    currency?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    balance?: boolean
    currency?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    patientId?: boolean
    balance?: boolean
    currency?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WalletOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "balance" | "currency" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["wallet"]>
  export type WalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    transactions?: boolean | Wallet$transactionsArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WalletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type WalletIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $WalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wallet"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      transactions: Prisma.$WalletTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      balance: number
      currency: string
      status: $Enums.WalletStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wallet"]>
    composites: {}
  }

  type WalletGetPayload<S extends boolean | null | undefined | WalletDefaultArgs> = $Result.GetResult<Prisma.$WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WalletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletFindUniqueArgs>(args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wallet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletFindFirstArgs>(args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletFindManyArgs>(args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
     */
    create<T extends WalletCreateArgs>(args: SelectSubset<T, WalletCreateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wallets.
     * @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletCreateManyArgs>(args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets and returns the data saved in the database.
     * @param {WalletCreateManyAndReturnArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
     */
    delete<T extends WalletDeleteArgs>(args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletUpdateArgs>(args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletDeleteManyArgs>(args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletUpdateManyArgs>(args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets and returns the data updated in the database.
     * @param {WalletUpdateManyAndReturnArgs} args - Arguments to update many Wallets.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WalletUpdateManyAndReturnArgs>(args: SelectSubset<T, WalletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
     */
    upsert<T extends WalletUpsertArgs>(args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wallet model
   */
  readonly fields: WalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Wallet$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wallet model
   */
  interface WalletFieldRefs {
    readonly id: FieldRef<"Wallet", 'String'>
    readonly patientId: FieldRef<"Wallet", 'String'>
    readonly balance: FieldRef<"Wallet", 'Float'>
    readonly currency: FieldRef<"Wallet", 'String'>
    readonly status: FieldRef<"Wallet", 'WalletStatus'>
    readonly createdAt: FieldRef<"Wallet", 'DateTime'>
    readonly updatedAt: FieldRef<"Wallet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Wallet findUnique
   */
  export type WalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findFirst
   */
  export type WalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }

  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wallet createManyAndReturn
   */
  export type WalletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
  }

  /**
   * Wallet updateManyAndReturn
   */
  export type WalletUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }

  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to delete.
     */
    limit?: number
  }

  /**
   * Wallet.transactions
   */
  export type Wallet$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    where?: WalletTransactionWhereInput
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    cursor?: WalletTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * Wallet without action
   */
  export type WalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
  }


  /**
   * Model WalletTransaction
   */

  export type AggregateWalletTransaction = {
    _count: WalletTransactionCountAggregateOutputType | null
    _avg: WalletTransactionAvgAggregateOutputType | null
    _sum: WalletTransactionSumAggregateOutputType | null
    _min: WalletTransactionMinAggregateOutputType | null
    _max: WalletTransactionMaxAggregateOutputType | null
  }

  export type WalletTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type WalletTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type WalletTransactionMinAggregateOutputType = {
    id: string | null
    walletId: string | null
    amount: number | null
    type: $Enums.TransactionType | null
    status: $Enums.TransactionStatus | null
    reference: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
  }

  export type WalletTransactionMaxAggregateOutputType = {
    id: string | null
    walletId: string | null
    amount: number | null
    type: $Enums.TransactionType | null
    status: $Enums.TransactionStatus | null
    reference: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    completedAt: Date | null
  }

  export type WalletTransactionCountAggregateOutputType = {
    id: number
    walletId: number
    amount: number
    type: number
    status: number
    reference: number
    description: number
    metadata: number
    createdAt: number
    updatedAt: number
    completedAt: number
    _all: number
  }


  export type WalletTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type WalletTransactionSumAggregateInputType = {
    amount?: true
  }

  export type WalletTransactionMinAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    type?: true
    status?: true
    reference?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
  }

  export type WalletTransactionMaxAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    type?: true
    status?: true
    reference?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
  }

  export type WalletTransactionCountAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    type?: true
    status?: true
    reference?: true
    description?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    completedAt?: true
    _all?: true
  }

  export type WalletTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletTransaction to aggregate.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WalletTransactions
    **/
    _count?: true | WalletTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletTransactionMaxAggregateInputType
  }

  export type GetWalletTransactionAggregateType<T extends WalletTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateWalletTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWalletTransaction[P]>
      : GetScalarType<T[P], AggregateWalletTransaction[P]>
  }




  export type WalletTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletTransactionWhereInput
    orderBy?: WalletTransactionOrderByWithAggregationInput | WalletTransactionOrderByWithAggregationInput[]
    by: WalletTransactionScalarFieldEnum[] | WalletTransactionScalarFieldEnum
    having?: WalletTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletTransactionCountAggregateInputType | true
    _avg?: WalletTransactionAvgAggregateInputType
    _sum?: WalletTransactionSumAggregateInputType
    _min?: WalletTransactionMinAggregateInputType
    _max?: WalletTransactionMaxAggregateInputType
  }

  export type WalletTransactionGroupByOutputType = {
    id: string
    walletId: string
    amount: number
    type: $Enums.TransactionType
    status: $Enums.TransactionStatus
    reference: string
    description: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    completedAt: Date | null
    _count: WalletTransactionCountAggregateOutputType | null
    _avg: WalletTransactionAvgAggregateOutputType | null
    _sum: WalletTransactionSumAggregateOutputType | null
    _min: WalletTransactionMinAggregateOutputType | null
    _max: WalletTransactionMaxAggregateOutputType | null
  }

  type GetWalletTransactionGroupByPayload<T extends WalletTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
        }
      >
    >


  export type WalletTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    reference?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    payment?: boolean | WalletTransaction$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["walletTransaction"]>

  export type WalletTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    reference?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletTransaction"]>

  export type WalletTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    reference?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletTransaction"]>

  export type WalletTransactionSelectScalar = {
    id?: boolean
    walletId?: boolean
    amount?: boolean
    type?: boolean
    status?: boolean
    reference?: boolean
    description?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    completedAt?: boolean
  }

  export type WalletTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletId" | "amount" | "type" | "status" | "reference" | "description" | "metadata" | "createdAt" | "updatedAt" | "completedAt", ExtArgs["result"]["walletTransaction"]>
  export type WalletTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    payment?: boolean | WalletTransaction$paymentArgs<ExtArgs>
  }
  export type WalletTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }
  export type WalletTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }

  export type $WalletTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WalletTransaction"
    objects: {
      wallet: Prisma.$WalletPayload<ExtArgs>
      payment: Prisma.$PaymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletId: string
      amount: number
      type: $Enums.TransactionType
      status: $Enums.TransactionStatus
      reference: string
      description: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["walletTransaction"]>
    composites: {}
  }

  type WalletTransactionGetPayload<S extends boolean | null | undefined | WalletTransactionDefaultArgs> = $Result.GetResult<Prisma.$WalletTransactionPayload, S>

  type WalletTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WalletTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletTransactionCountAggregateInputType | true
    }

  export interface WalletTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletTransaction'], meta: { name: 'WalletTransaction' } }
    /**
     * Find zero or one WalletTransaction that matches the filter.
     * @param {WalletTransactionFindUniqueArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletTransactionFindUniqueArgs>(args: SelectSubset<T, WalletTransactionFindUniqueArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WalletTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WalletTransactionFindUniqueOrThrowArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WalletTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindFirstArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletTransactionFindFirstArgs>(args?: SelectSubset<T, WalletTransactionFindFirstArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WalletTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindFirstOrThrowArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WalletTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WalletTransactions
     * const walletTransactions = await prisma.walletTransaction.findMany()
     * 
     * // Get first 10 WalletTransactions
     * const walletTransactions = await prisma.walletTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletTransactionWithIdOnly = await prisma.walletTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletTransactionFindManyArgs>(args?: SelectSubset<T, WalletTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WalletTransaction.
     * @param {WalletTransactionCreateArgs} args - Arguments to create a WalletTransaction.
     * @example
     * // Create one WalletTransaction
     * const WalletTransaction = await prisma.walletTransaction.create({
     *   data: {
     *     // ... data to create a WalletTransaction
     *   }
     * })
     * 
     */
    create<T extends WalletTransactionCreateArgs>(args: SelectSubset<T, WalletTransactionCreateArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WalletTransactions.
     * @param {WalletTransactionCreateManyArgs} args - Arguments to create many WalletTransactions.
     * @example
     * // Create many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletTransactionCreateManyArgs>(args?: SelectSubset<T, WalletTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WalletTransactions and returns the data saved in the database.
     * @param {WalletTransactionCreateManyAndReturnArgs} args - Arguments to create many WalletTransactions.
     * @example
     * // Create many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WalletTransactions and only return the `id`
     * const walletTransactionWithIdOnly = await prisma.walletTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WalletTransaction.
     * @param {WalletTransactionDeleteArgs} args - Arguments to delete one WalletTransaction.
     * @example
     * // Delete one WalletTransaction
     * const WalletTransaction = await prisma.walletTransaction.delete({
     *   where: {
     *     // ... filter to delete one WalletTransaction
     *   }
     * })
     * 
     */
    delete<T extends WalletTransactionDeleteArgs>(args: SelectSubset<T, WalletTransactionDeleteArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WalletTransaction.
     * @param {WalletTransactionUpdateArgs} args - Arguments to update one WalletTransaction.
     * @example
     * // Update one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletTransactionUpdateArgs>(args: SelectSubset<T, WalletTransactionUpdateArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WalletTransactions.
     * @param {WalletTransactionDeleteManyArgs} args - Arguments to filter WalletTransactions to delete.
     * @example
     * // Delete a few WalletTransactions
     * const { count } = await prisma.walletTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletTransactionDeleteManyArgs>(args?: SelectSubset<T, WalletTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletTransactionUpdateManyArgs>(args: SelectSubset<T, WalletTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletTransactions and returns the data updated in the database.
     * @param {WalletTransactionUpdateManyAndReturnArgs} args - Arguments to update many WalletTransactions.
     * @example
     * // Update many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WalletTransactions and only return the `id`
     * const walletTransactionWithIdOnly = await prisma.walletTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WalletTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, WalletTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WalletTransaction.
     * @param {WalletTransactionUpsertArgs} args - Arguments to update or create a WalletTransaction.
     * @example
     * // Update or create a WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.upsert({
     *   create: {
     *     // ... data to create a WalletTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WalletTransaction we want to update
     *   }
     * })
     */
    upsert<T extends WalletTransactionUpsertArgs>(args: SelectSubset<T, WalletTransactionUpsertArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WalletTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionCountArgs} args - Arguments to filter WalletTransactions to count.
     * @example
     * // Count the number of WalletTransactions
     * const count = await prisma.walletTransaction.count({
     *   where: {
     *     // ... the filter for the WalletTransactions we want to count
     *   }
     * })
    **/
    count<T extends WalletTransactionCountArgs>(
      args?: Subset<T, WalletTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WalletTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletTransactionAggregateArgs>(args: Subset<T, WalletTransactionAggregateArgs>): Prisma.PrismaPromise<GetWalletTransactionAggregateType<T>>

    /**
     * Group by WalletTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletTransactionGroupByArgs['orderBy'] }
        : { orderBy?: WalletTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WalletTransaction model
   */
  readonly fields: WalletTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WalletTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wallet<T extends WalletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WalletDefaultArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payment<T extends WalletTransaction$paymentArgs<ExtArgs> = {}>(args?: Subset<T, WalletTransaction$paymentArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WalletTransaction model
   */
  interface WalletTransactionFieldRefs {
    readonly id: FieldRef<"WalletTransaction", 'String'>
    readonly walletId: FieldRef<"WalletTransaction", 'String'>
    readonly amount: FieldRef<"WalletTransaction", 'Float'>
    readonly type: FieldRef<"WalletTransaction", 'TransactionType'>
    readonly status: FieldRef<"WalletTransaction", 'TransactionStatus'>
    readonly reference: FieldRef<"WalletTransaction", 'String'>
    readonly description: FieldRef<"WalletTransaction", 'String'>
    readonly metadata: FieldRef<"WalletTransaction", 'Json'>
    readonly createdAt: FieldRef<"WalletTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"WalletTransaction", 'DateTime'>
    readonly completedAt: FieldRef<"WalletTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WalletTransaction findUnique
   */
  export type WalletTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction findUniqueOrThrow
   */
  export type WalletTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction findFirst
   */
  export type WalletTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletTransactions.
     */
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * WalletTransaction findFirstOrThrow
   */
  export type WalletTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletTransactions.
     */
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * WalletTransaction findMany
   */
  export type WalletTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransactions to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * WalletTransaction create
   */
  export type WalletTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a WalletTransaction.
     */
    data: XOR<WalletTransactionCreateInput, WalletTransactionUncheckedCreateInput>
  }

  /**
   * WalletTransaction createMany
   */
  export type WalletTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WalletTransactions.
     */
    data: WalletTransactionCreateManyInput | WalletTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WalletTransaction createManyAndReturn
   */
  export type WalletTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many WalletTransactions.
     */
    data: WalletTransactionCreateManyInput | WalletTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WalletTransaction update
   */
  export type WalletTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a WalletTransaction.
     */
    data: XOR<WalletTransactionUpdateInput, WalletTransactionUncheckedUpdateInput>
    /**
     * Choose, which WalletTransaction to update.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction updateMany
   */
  export type WalletTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WalletTransactions.
     */
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyInput>
    /**
     * Filter which WalletTransactions to update
     */
    where?: WalletTransactionWhereInput
    /**
     * Limit how many WalletTransactions to update.
     */
    limit?: number
  }

  /**
   * WalletTransaction updateManyAndReturn
   */
  export type WalletTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * The data used to update WalletTransactions.
     */
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyInput>
    /**
     * Filter which WalletTransactions to update
     */
    where?: WalletTransactionWhereInput
    /**
     * Limit how many WalletTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WalletTransaction upsert
   */
  export type WalletTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the WalletTransaction to update in case it exists.
     */
    where: WalletTransactionWhereUniqueInput
    /**
     * In case the WalletTransaction found by the `where` argument doesn't exist, create a new WalletTransaction with this data.
     */
    create: XOR<WalletTransactionCreateInput, WalletTransactionUncheckedCreateInput>
    /**
     * In case the WalletTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletTransactionUpdateInput, WalletTransactionUncheckedUpdateInput>
  }

  /**
   * WalletTransaction delete
   */
  export type WalletTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter which WalletTransaction to delete.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction deleteMany
   */
  export type WalletTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletTransactions to delete
     */
    where?: WalletTransactionWhereInput
    /**
     * Limit how many WalletTransactions to delete.
     */
    limit?: number
  }

  /**
   * WalletTransaction.payment
   */
  export type WalletTransaction$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
  }

  /**
   * WalletTransaction without action
   */
  export type WalletTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Billing
   */

  export type AggregateBilling = {
    _count: BillingCountAggregateOutputType | null
    _avg: BillingAvgAggregateOutputType | null
    _sum: BillingSumAggregateOutputType | null
    _min: BillingMinAggregateOutputType | null
    _max: BillingMaxAggregateOutputType | null
  }

  export type BillingAvgAggregateOutputType = {
    amount: number | null
  }

  export type BillingSumAggregateOutputType = {
    amount: number | null
  }

  export type BillingMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    amount: number | null
    dueDate: Date | null
    status: $Enums.BillingStatus | null
    description: string | null
    invoiceNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    paidAt: Date | null
  }

  export type BillingMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    amount: number | null
    dueDate: Date | null
    status: $Enums.BillingStatus | null
    description: string | null
    invoiceNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    paidAt: Date | null
  }

  export type BillingCountAggregateOutputType = {
    id: number
    patientId: number
    hospitalId: number
    amount: number
    dueDate: number
    status: number
    description: number
    invoiceNumber: number
    items: number
    createdAt: number
    updatedAt: number
    paidAt: number
    _all: number
  }


  export type BillingAvgAggregateInputType = {
    amount?: true
  }

  export type BillingSumAggregateInputType = {
    amount?: true
  }

  export type BillingMinAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    amount?: true
    dueDate?: true
    status?: true
    description?: true
    invoiceNumber?: true
    createdAt?: true
    updatedAt?: true
    paidAt?: true
  }

  export type BillingMaxAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    amount?: true
    dueDate?: true
    status?: true
    description?: true
    invoiceNumber?: true
    createdAt?: true
    updatedAt?: true
    paidAt?: true
  }

  export type BillingCountAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    amount?: true
    dueDate?: true
    status?: true
    description?: true
    invoiceNumber?: true
    items?: true
    createdAt?: true
    updatedAt?: true
    paidAt?: true
    _all?: true
  }

  export type BillingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Billing to aggregate.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Billings
    **/
    _count?: true | BillingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingMaxAggregateInputType
  }

  export type GetBillingAggregateType<T extends BillingAggregateArgs> = {
        [P in keyof T & keyof AggregateBilling]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBilling[P]>
      : GetScalarType<T[P], AggregateBilling[P]>
  }




  export type BillingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingWhereInput
    orderBy?: BillingOrderByWithAggregationInput | BillingOrderByWithAggregationInput[]
    by: BillingScalarFieldEnum[] | BillingScalarFieldEnum
    having?: BillingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingCountAggregateInputType | true
    _avg?: BillingAvgAggregateInputType
    _sum?: BillingSumAggregateInputType
    _min?: BillingMinAggregateInputType
    _max?: BillingMaxAggregateInputType
  }

  export type BillingGroupByOutputType = {
    id: string
    patientId: string
    hospitalId: string
    amount: number
    dueDate: Date
    status: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonValue
    createdAt: Date
    updatedAt: Date
    paidAt: Date | null
    _count: BillingCountAggregateOutputType | null
    _avg: BillingAvgAggregateOutputType | null
    _sum: BillingSumAggregateOutputType | null
    _min: BillingMinAggregateOutputType | null
    _max: BillingMaxAggregateOutputType | null
  }

  type GetBillingGroupByPayload<T extends BillingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingGroupByOutputType[P]>
            : GetScalarType<T[P], BillingGroupByOutputType[P]>
        }
      >
    >


  export type BillingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    amount?: boolean
    dueDate?: boolean
    status?: boolean
    description?: boolean
    invoiceNumber?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    paidAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    payments?: boolean | Billing$paymentsArgs<ExtArgs>
    _count?: boolean | BillingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billing"]>

  export type BillingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    amount?: boolean
    dueDate?: boolean
    status?: boolean
    description?: boolean
    invoiceNumber?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    paidAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billing"]>

  export type BillingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    amount?: boolean
    dueDate?: boolean
    status?: boolean
    description?: boolean
    invoiceNumber?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    paidAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billing"]>

  export type BillingSelectScalar = {
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    amount?: boolean
    dueDate?: boolean
    status?: boolean
    description?: boolean
    invoiceNumber?: boolean
    items?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    paidAt?: boolean
  }

  export type BillingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "hospitalId" | "amount" | "dueDate" | "status" | "description" | "invoiceNumber" | "items" | "createdAt" | "updatedAt" | "paidAt", ExtArgs["result"]["billing"]>
  export type BillingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    payments?: boolean | Billing$paymentsArgs<ExtArgs>
    _count?: boolean | BillingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BillingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type BillingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $BillingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Billing"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      hospitalId: string
      amount: number
      dueDate: Date
      status: $Enums.BillingStatus
      description: string
      invoiceNumber: string
      items: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
      paidAt: Date | null
    }, ExtArgs["result"]["billing"]>
    composites: {}
  }

  type BillingGetPayload<S extends boolean | null | undefined | BillingDefaultArgs> = $Result.GetResult<Prisma.$BillingPayload, S>

  type BillingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BillingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BillingCountAggregateInputType | true
    }

  export interface BillingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Billing'], meta: { name: 'Billing' } }
    /**
     * Find zero or one Billing that matches the filter.
     * @param {BillingFindUniqueArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingFindUniqueArgs>(args: SelectSubset<T, BillingFindUniqueArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Billing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BillingFindUniqueOrThrowArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Billing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingFindFirstArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingFindFirstArgs>(args?: SelectSubset<T, BillingFindFirstArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Billing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingFindFirstOrThrowArgs} args - Arguments to find a Billing
     * @example
     * // Get one Billing
     * const billing = await prisma.billing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Billings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Billings
     * const billings = await prisma.billing.findMany()
     * 
     * // Get first 10 Billings
     * const billings = await prisma.billing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingWithIdOnly = await prisma.billing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingFindManyArgs>(args?: SelectSubset<T, BillingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Billing.
     * @param {BillingCreateArgs} args - Arguments to create a Billing.
     * @example
     * // Create one Billing
     * const Billing = await prisma.billing.create({
     *   data: {
     *     // ... data to create a Billing
     *   }
     * })
     * 
     */
    create<T extends BillingCreateArgs>(args: SelectSubset<T, BillingCreateArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Billings.
     * @param {BillingCreateManyArgs} args - Arguments to create many Billings.
     * @example
     * // Create many Billings
     * const billing = await prisma.billing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingCreateManyArgs>(args?: SelectSubset<T, BillingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Billings and returns the data saved in the database.
     * @param {BillingCreateManyAndReturnArgs} args - Arguments to create many Billings.
     * @example
     * // Create many Billings
     * const billing = await prisma.billing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Billings and only return the `id`
     * const billingWithIdOnly = await prisma.billing.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Billing.
     * @param {BillingDeleteArgs} args - Arguments to delete one Billing.
     * @example
     * // Delete one Billing
     * const Billing = await prisma.billing.delete({
     *   where: {
     *     // ... filter to delete one Billing
     *   }
     * })
     * 
     */
    delete<T extends BillingDeleteArgs>(args: SelectSubset<T, BillingDeleteArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Billing.
     * @param {BillingUpdateArgs} args - Arguments to update one Billing.
     * @example
     * // Update one Billing
     * const billing = await prisma.billing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingUpdateArgs>(args: SelectSubset<T, BillingUpdateArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Billings.
     * @param {BillingDeleteManyArgs} args - Arguments to filter Billings to delete.
     * @example
     * // Delete a few Billings
     * const { count } = await prisma.billing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingDeleteManyArgs>(args?: SelectSubset<T, BillingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Billings
     * const billing = await prisma.billing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingUpdateManyArgs>(args: SelectSubset<T, BillingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Billings and returns the data updated in the database.
     * @param {BillingUpdateManyAndReturnArgs} args - Arguments to update many Billings.
     * @example
     * // Update many Billings
     * const billing = await prisma.billing.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Billings and only return the `id`
     * const billingWithIdOnly = await prisma.billing.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BillingUpdateManyAndReturnArgs>(args: SelectSubset<T, BillingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Billing.
     * @param {BillingUpsertArgs} args - Arguments to update or create a Billing.
     * @example
     * // Update or create a Billing
     * const billing = await prisma.billing.upsert({
     *   create: {
     *     // ... data to create a Billing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Billing we want to update
     *   }
     * })
     */
    upsert<T extends BillingUpsertArgs>(args: SelectSubset<T, BillingUpsertArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingCountArgs} args - Arguments to filter Billings to count.
     * @example
     * // Count the number of Billings
     * const count = await prisma.billing.count({
     *   where: {
     *     // ... the filter for the Billings we want to count
     *   }
     * })
    **/
    count<T extends BillingCountArgs>(
      args?: Subset<T, BillingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Billing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingAggregateArgs>(args: Subset<T, BillingAggregateArgs>): Prisma.PrismaPromise<GetBillingAggregateType<T>>

    /**
     * Group by Billing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingGroupByArgs['orderBy'] }
        : { orderBy?: BillingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Billing model
   */
  readonly fields: BillingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Billing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends Billing$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Billing$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Billing model
   */
  interface BillingFieldRefs {
    readonly id: FieldRef<"Billing", 'String'>
    readonly patientId: FieldRef<"Billing", 'String'>
    readonly hospitalId: FieldRef<"Billing", 'String'>
    readonly amount: FieldRef<"Billing", 'Float'>
    readonly dueDate: FieldRef<"Billing", 'DateTime'>
    readonly status: FieldRef<"Billing", 'BillingStatus'>
    readonly description: FieldRef<"Billing", 'String'>
    readonly invoiceNumber: FieldRef<"Billing", 'String'>
    readonly items: FieldRef<"Billing", 'Json'>
    readonly createdAt: FieldRef<"Billing", 'DateTime'>
    readonly updatedAt: FieldRef<"Billing", 'DateTime'>
    readonly paidAt: FieldRef<"Billing", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Billing findUnique
   */
  export type BillingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing findUniqueOrThrow
   */
  export type BillingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing findFirst
   */
  export type BillingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Billings.
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Billings.
     */
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Billing findFirstOrThrow
   */
  export type BillingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * Filter, which Billing to fetch.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Billings.
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Billings.
     */
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Billing findMany
   */
  export type BillingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * Filter, which Billings to fetch.
     */
    where?: BillingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingOrderByWithRelationInput | BillingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Billings.
     */
    cursor?: BillingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    distinct?: BillingScalarFieldEnum | BillingScalarFieldEnum[]
  }

  /**
   * Billing create
   */
  export type BillingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * The data needed to create a Billing.
     */
    data: XOR<BillingCreateInput, BillingUncheckedCreateInput>
  }

  /**
   * Billing createMany
   */
  export type BillingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Billings.
     */
    data: BillingCreateManyInput | BillingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Billing createManyAndReturn
   */
  export type BillingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * The data used to create many Billings.
     */
    data: BillingCreateManyInput | BillingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Billing update
   */
  export type BillingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * The data needed to update a Billing.
     */
    data: XOR<BillingUpdateInput, BillingUncheckedUpdateInput>
    /**
     * Choose, which Billing to update.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing updateMany
   */
  export type BillingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Billings.
     */
    data: XOR<BillingUpdateManyMutationInput, BillingUncheckedUpdateManyInput>
    /**
     * Filter which Billings to update
     */
    where?: BillingWhereInput
    /**
     * Limit how many Billings to update.
     */
    limit?: number
  }

  /**
   * Billing updateManyAndReturn
   */
  export type BillingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * The data used to update Billings.
     */
    data: XOR<BillingUpdateManyMutationInput, BillingUncheckedUpdateManyInput>
    /**
     * Filter which Billings to update
     */
    where?: BillingWhereInput
    /**
     * Limit how many Billings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Billing upsert
   */
  export type BillingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * The filter to search for the Billing to update in case it exists.
     */
    where: BillingWhereUniqueInput
    /**
     * In case the Billing found by the `where` argument doesn't exist, create a new Billing with this data.
     */
    create: XOR<BillingCreateInput, BillingUncheckedCreateInput>
    /**
     * In case the Billing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingUpdateInput, BillingUncheckedUpdateInput>
  }

  /**
   * Billing delete
   */
  export type BillingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
    /**
     * Filter which Billing to delete.
     */
    where: BillingWhereUniqueInput
  }

  /**
   * Billing deleteMany
   */
  export type BillingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Billings to delete
     */
    where?: BillingWhereInput
    /**
     * Limit how many Billings to delete.
     */
    limit?: number
  }

  /**
   * Billing.payments
   */
  export type Billing$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Billing without action
   */
  export type BillingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billing
     */
    select?: BillingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Billing
     */
    omit?: BillingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    billingId: string | null
    amount: number | null
    method: $Enums.PaymentMethod | null
    reference: string | null
    status: $Enums.TransactionStatus | null
    transactionId: string | null
    receiptNumber: string | null
    paymentDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    billingId: string | null
    amount: number | null
    method: $Enums.PaymentMethod | null
    reference: string | null
    status: $Enums.TransactionStatus | null
    transactionId: string | null
    receiptNumber: string | null
    paymentDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    billingId: number
    amount: number
    method: number
    reference: number
    status: number
    transactionId: number
    receiptNumber: number
    paymentDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    billingId?: true
    amount?: true
    method?: true
    reference?: true
    status?: true
    transactionId?: true
    receiptNumber?: true
    paymentDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    billingId?: true
    amount?: true
    method?: true
    reference?: true
    status?: true
    transactionId?: true
    receiptNumber?: true
    paymentDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    billingId?: true
    amount?: true
    method?: true
    reference?: true
    status?: true
    transactionId?: true
    receiptNumber?: true
    paymentDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    billingId: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status: $Enums.TransactionStatus
    transactionId: string | null
    receiptNumber: string
    paymentDate: Date
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingId?: boolean
    amount?: boolean
    method?: boolean
    reference?: boolean
    status?: boolean
    transactionId?: boolean
    receiptNumber?: boolean
    paymentDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billing?: boolean | BillingDefaultArgs<ExtArgs>
    transaction?: boolean | Payment$transactionArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingId?: boolean
    amount?: boolean
    method?: boolean
    reference?: boolean
    status?: boolean
    transactionId?: boolean
    receiptNumber?: boolean
    paymentDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billing?: boolean | BillingDefaultArgs<ExtArgs>
    transaction?: boolean | Payment$transactionArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    billingId?: boolean
    amount?: boolean
    method?: boolean
    reference?: boolean
    status?: boolean
    transactionId?: boolean
    receiptNumber?: boolean
    paymentDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    billing?: boolean | BillingDefaultArgs<ExtArgs>
    transaction?: boolean | Payment$transactionArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    billingId?: boolean
    amount?: boolean
    method?: boolean
    reference?: boolean
    status?: boolean
    transactionId?: boolean
    receiptNumber?: boolean
    paymentDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "billingId" | "amount" | "method" | "reference" | "status" | "transactionId" | "receiptNumber" | "paymentDate" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billing?: boolean | BillingDefaultArgs<ExtArgs>
    transaction?: boolean | Payment$transactionArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billing?: boolean | BillingDefaultArgs<ExtArgs>
    transaction?: boolean | Payment$transactionArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billing?: boolean | BillingDefaultArgs<ExtArgs>
    transaction?: boolean | Payment$transactionArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      billing: Prisma.$BillingPayload<ExtArgs>
      transaction: Prisma.$WalletTransactionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      billingId: string
      amount: number
      method: $Enums.PaymentMethod
      reference: string
      status: $Enums.TransactionStatus
      transactionId: string | null
      receiptNumber: string
      paymentDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billing<T extends BillingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BillingDefaultArgs<ExtArgs>>): Prisma__BillingClient<$Result.GetResult<Prisma.$BillingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transaction<T extends Payment$transactionArgs<ExtArgs> = {}>(args?: Subset<T, Payment$transactionArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly billingId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Float'>
    readonly method: FieldRef<"Payment", 'PaymentMethod'>
    readonly reference: FieldRef<"Payment", 'String'>
    readonly status: FieldRef<"Payment", 'TransactionStatus'>
    readonly transactionId: FieldRef<"Payment", 'String'>
    readonly receiptNumber: FieldRef<"Payment", 'String'>
    readonly paymentDate: FieldRef<"Payment", 'DateTime'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment.transaction
   */
  export type Payment$transactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    where?: WalletTransactionWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Conversation
   */

  export type AggregateConversation = {
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    doctorId: string | null
    title: string | null
    status: $Enums.ConversationStatus | null
    lastMessageAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    doctorId: string | null
    title: string | null
    status: $Enums.ConversationStatus | null
    lastMessageAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    patientId: number
    hospitalId: number
    doctorId: number
    title: number
    status: number
    lastMessageAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConversationMinAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    doctorId?: true
    title?: true
    status?: true
    lastMessageAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    doctorId?: true
    title?: true
    status?: true
    lastMessageAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    doctorId?: true
    title?: true
    status?: true
    lastMessageAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversation to aggregate.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    _count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }




  export type ConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConversationWhereInput
    orderBy?: ConversationOrderByWithAggregationInput | ConversationOrderByWithAggregationInput[]
    by: ConversationScalarFieldEnum[] | ConversationScalarFieldEnum
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConversationCountAggregateInputType | true
    _min?: ConversationMinAggregateInputType
    _max?: ConversationMaxAggregateInputType
  }

  export type ConversationGroupByOutputType = {
    id: string
    patientId: string
    hospitalId: string
    doctorId: string | null
    title: string | null
    status: $Enums.ConversationStatus
    lastMessageAt: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ConversationCountAggregateOutputType | null
    _min: ConversationMinAggregateOutputType | null
    _max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConversationGroupByOutputType[P]>
            : GetScalarType<T[P], ConversationGroupByOutputType[P]>
        }
      >
    >


  export type ConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    doctorId?: boolean
    title?: boolean
    status?: boolean
    lastMessageAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    doctor?: boolean | Conversation$doctorArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    doctorId?: boolean
    title?: boolean
    status?: boolean
    lastMessageAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    doctor?: boolean | Conversation$doctorArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    doctorId?: boolean
    title?: boolean
    status?: boolean
    lastMessageAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    doctor?: boolean | Conversation$doctorArgs<ExtArgs>
  }, ExtArgs["result"]["conversation"]>

  export type ConversationSelectScalar = {
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    doctorId?: boolean
    title?: boolean
    status?: boolean
    lastMessageAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConversationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "hospitalId" | "doctorId" | "title" | "status" | "lastMessageAt" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["conversation"]>
  export type ConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    doctor?: boolean | Conversation$doctorArgs<ExtArgs>
    messages?: boolean | Conversation$messagesArgs<ExtArgs>
    _count?: boolean | ConversationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConversationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    doctor?: boolean | Conversation$doctorArgs<ExtArgs>
  }
  export type ConversationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    doctor?: boolean | Conversation$doctorArgs<ExtArgs>
  }

  export type $ConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Conversation"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
      doctor: Prisma.$UserPayload<ExtArgs> | null
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      hospitalId: string
      doctorId: string | null
      title: string | null
      status: $Enums.ConversationStatus
      lastMessageAt: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["conversation"]>
    composites: {}
  }

  type ConversationGetPayload<S extends boolean | null | undefined | ConversationDefaultArgs> = $Result.GetResult<Prisma.$ConversationPayload, S>

  type ConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConversationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConversationCountAggregateInputType | true
    }

  export interface ConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Conversation'], meta: { name: 'Conversation' } }
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConversationFindUniqueArgs>(args: SelectSubset<T, ConversationFindUniqueArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Conversation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConversationFindUniqueOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConversationFindUniqueOrThrowArgs>(args: SelectSubset<T, ConversationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConversationFindFirstArgs>(args?: SelectSubset<T, ConversationFindFirstArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Conversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstOrThrowArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConversationFindFirstOrThrowArgs>(args?: SelectSubset<T, ConversationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConversationFindManyArgs>(args?: SelectSubset<T, ConversationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
     */
    create<T extends ConversationCreateArgs>(args: SelectSubset<T, ConversationCreateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Conversations.
     * @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConversationCreateManyArgs>(args?: SelectSubset<T, ConversationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Conversations and returns the data saved in the database.
     * @param {ConversationCreateManyAndReturnArgs} args - Arguments to create many Conversations.
     * @example
     * // Create many Conversations
     * const conversation = await prisma.conversation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Conversations and only return the `id`
     * const conversationWithIdOnly = await prisma.conversation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConversationCreateManyAndReturnArgs>(args?: SelectSubset<T, ConversationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
     */
    delete<T extends ConversationDeleteArgs>(args: SelectSubset<T, ConversationDeleteArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConversationUpdateArgs>(args: SelectSubset<T, ConversationUpdateArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConversationDeleteManyArgs>(args?: SelectSubset<T, ConversationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConversationUpdateManyArgs>(args: SelectSubset<T, ConversationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations and returns the data updated in the database.
     * @param {ConversationUpdateManyAndReturnArgs} args - Arguments to update many Conversations.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Conversations and only return the `id`
     * const conversationWithIdOnly = await prisma.conversation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConversationUpdateManyAndReturnArgs>(args: SelectSubset<T, ConversationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
     */
    upsert<T extends ConversationUpsertArgs>(args: SelectSubset<T, ConversationUpsertArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): Prisma.PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Conversation model
   */
  readonly fields: ConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctor<T extends Conversation$doctorArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$doctorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    messages<T extends Conversation$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Conversation$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Conversation model
   */
  interface ConversationFieldRefs {
    readonly id: FieldRef<"Conversation", 'String'>
    readonly patientId: FieldRef<"Conversation", 'String'>
    readonly hospitalId: FieldRef<"Conversation", 'String'>
    readonly doctorId: FieldRef<"Conversation", 'String'>
    readonly title: FieldRef<"Conversation", 'String'>
    readonly status: FieldRef<"Conversation", 'ConversationStatus'>
    readonly lastMessageAt: FieldRef<"Conversation", 'DateTime'>
    readonly metadata: FieldRef<"Conversation", 'Json'>
    readonly createdAt: FieldRef<"Conversation", 'DateTime'>
    readonly updatedAt: FieldRef<"Conversation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findUniqueOrThrow
   */
  export type ConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findFirstOrThrow
   */
  export type ConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversation to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
     */
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter, which Conversations to fetch.
     */
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
     */
    orderBy?: ConversationOrderByWithRelationInput | ConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
     */
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
     */
    skip?: number
    distinct?: ConversationScalarFieldEnum | ConversationScalarFieldEnum[]
  }

  /**
   * Conversation create
   */
  export type ConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a Conversation.
     */
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }

  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Conversation createManyAndReturn
   */
  export type ConversationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * The data used to create many Conversations.
     */
    data: ConversationCreateManyInput | ConversationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Conversation update
   */
  export type ConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a Conversation.
     */
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
    /**
     * Limit how many Conversations to update.
     */
    limit?: number
  }

  /**
   * Conversation updateManyAndReturn
   */
  export type ConversationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * The data used to update Conversations.
     */
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    /**
     * Filter which Conversations to update
     */
    where?: ConversationWhereInput
    /**
     * Limit how many Conversations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the Conversation to update in case it exists.
     */
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
     */
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }

  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
    /**
     * Filter which Conversation to delete.
     */
    where: ConversationWhereUniqueInput
  }

  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conversations to delete
     */
    where?: ConversationWhereInput
    /**
     * Limit how many Conversations to delete.
     */
    limit?: number
  }

  /**
   * Conversation.doctor
   */
  export type Conversation$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Conversation.messages
   */
  export type Conversation$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Conversation without action
   */
  export type ConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Conversation
     */
    select?: ConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Conversation
     */
    omit?: ConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConversationInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    conversationId: string | null
    senderId: string | null
    content: string | null
    status: $Enums.MessageStatus | null
    sentAt: Date | null
    deliveredAt: Date | null
    readAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    conversationId: string | null
    senderId: string | null
    content: string | null
    status: $Enums.MessageStatus | null
    sentAt: Date | null
    deliveredAt: Date | null
    readAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    conversationId: number
    senderId: number
    content: number
    attachments: number
    status: number
    sentAt: number
    deliveredAt: number
    readAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    conversationId?: true
    senderId?: true
    content?: true
    status?: true
    sentAt?: true
    deliveredAt?: true
    readAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    conversationId?: true
    senderId?: true
    content?: true
    status?: true
    sentAt?: true
    deliveredAt?: true
    readAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    conversationId?: true
    senderId?: true
    content?: true
    attachments?: true
    status?: true
    sentAt?: true
    deliveredAt?: true
    readAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    conversationId: string
    senderId: string
    content: string
    attachments: JsonValue | null
    status: $Enums.MessageStatus
    sentAt: Date
    deliveredAt: Date | null
    readAt: Date | null
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    senderId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    senderId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    conversationId?: boolean
    senderId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    conversationId?: boolean
    senderId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    readAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "conversationId" | "senderId" | "content" | "attachments" | "status" | "sentAt" | "deliveredAt" | "readAt", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversation?: boolean | ConversationDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      conversation: Prisma.$ConversationPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      conversationId: string
      senderId: string
      content: string
      attachments: Prisma.JsonValue | null
      status: $Enums.MessageStatus
      sentAt: Date
      deliveredAt: Date | null
      readAt: Date | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    conversation<T extends ConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConversationDefaultArgs<ExtArgs>>): Prisma__ConversationClient<$Result.GetResult<Prisma.$ConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly conversationId: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly attachments: FieldRef<"Message", 'Json'>
    readonly status: FieldRef<"Message", 'MessageStatus'>
    readonly sentAt: FieldRef<"Message", 'DateTime'>
    readonly deliveredAt: FieldRef<"Message", 'DateTime'>
    readonly readAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model BirthRecord
   */

  export type AggregateBirthRecord = {
    _count: BirthRecordCountAggregateOutputType | null
    _avg: BirthRecordAvgAggregateOutputType | null
    _sum: BirthRecordSumAggregateOutputType | null
    _min: BirthRecordMinAggregateOutputType | null
    _max: BirthRecordMaxAggregateOutputType | null
  }

  export type BirthRecordAvgAggregateOutputType = {
    birthWeight: number | null
    apgarScore: number | null
    gestationalAge: number | null
  }

  export type BirthRecordSumAggregateOutputType = {
    birthWeight: number | null
    apgarScore: number | null
    gestationalAge: number | null
  }

  export type BirthRecordMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    motherId: string | null
    fatherId: string | null
    hospitalId: string | null
    birthDate: Date | null
    birthTime: string | null
    birthWeight: number | null
    deliveryMethod: $Enums.DeliveryMethod | null
    attendingDoctorId: string | null
    birthPlace: string | null
    certificateNumber: string | null
    registeredAt: Date | null
    notes: string | null
    apgarScore: number | null
    gestationalAge: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BirthRecordMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    motherId: string | null
    fatherId: string | null
    hospitalId: string | null
    birthDate: Date | null
    birthTime: string | null
    birthWeight: number | null
    deliveryMethod: $Enums.DeliveryMethod | null
    attendingDoctorId: string | null
    birthPlace: string | null
    certificateNumber: string | null
    registeredAt: Date | null
    notes: string | null
    apgarScore: number | null
    gestationalAge: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BirthRecordCountAggregateOutputType = {
    id: number
    patientId: number
    motherId: number
    fatherId: number
    hospitalId: number
    birthDate: number
    birthTime: number
    birthWeight: number
    deliveryMethod: number
    attendingDoctorId: number
    birthPlace: number
    certificateNumber: number
    registeredAt: number
    notes: number
    complications: number
    apgarScore: number
    gestationalAge: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BirthRecordAvgAggregateInputType = {
    birthWeight?: true
    apgarScore?: true
    gestationalAge?: true
  }

  export type BirthRecordSumAggregateInputType = {
    birthWeight?: true
    apgarScore?: true
    gestationalAge?: true
  }

  export type BirthRecordMinAggregateInputType = {
    id?: true
    patientId?: true
    motherId?: true
    fatherId?: true
    hospitalId?: true
    birthDate?: true
    birthTime?: true
    birthWeight?: true
    deliveryMethod?: true
    attendingDoctorId?: true
    birthPlace?: true
    certificateNumber?: true
    registeredAt?: true
    notes?: true
    apgarScore?: true
    gestationalAge?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BirthRecordMaxAggregateInputType = {
    id?: true
    patientId?: true
    motherId?: true
    fatherId?: true
    hospitalId?: true
    birthDate?: true
    birthTime?: true
    birthWeight?: true
    deliveryMethod?: true
    attendingDoctorId?: true
    birthPlace?: true
    certificateNumber?: true
    registeredAt?: true
    notes?: true
    apgarScore?: true
    gestationalAge?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BirthRecordCountAggregateInputType = {
    id?: true
    patientId?: true
    motherId?: true
    fatherId?: true
    hospitalId?: true
    birthDate?: true
    birthTime?: true
    birthWeight?: true
    deliveryMethod?: true
    attendingDoctorId?: true
    birthPlace?: true
    certificateNumber?: true
    registeredAt?: true
    notes?: true
    complications?: true
    apgarScore?: true
    gestationalAge?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BirthRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BirthRecord to aggregate.
     */
    where?: BirthRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BirthRecords to fetch.
     */
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BirthRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BirthRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BirthRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BirthRecords
    **/
    _count?: true | BirthRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BirthRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BirthRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BirthRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BirthRecordMaxAggregateInputType
  }

  export type GetBirthRecordAggregateType<T extends BirthRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateBirthRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBirthRecord[P]>
      : GetScalarType<T[P], AggregateBirthRecord[P]>
  }




  export type BirthRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BirthRecordWhereInput
    orderBy?: BirthRecordOrderByWithAggregationInput | BirthRecordOrderByWithAggregationInput[]
    by: BirthRecordScalarFieldEnum[] | BirthRecordScalarFieldEnum
    having?: BirthRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BirthRecordCountAggregateInputType | true
    _avg?: BirthRecordAvgAggregateInputType
    _sum?: BirthRecordSumAggregateInputType
    _min?: BirthRecordMinAggregateInputType
    _max?: BirthRecordMaxAggregateInputType
  }

  export type BirthRecordGroupByOutputType = {
    id: string
    patientId: string
    motherId: string | null
    fatherId: string | null
    hospitalId: string
    birthDate: Date
    birthTime: string | null
    birthWeight: number | null
    deliveryMethod: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace: string | null
    certificateNumber: string
    registeredAt: Date
    notes: string | null
    complications: string[]
    apgarScore: number | null
    gestationalAge: number | null
    createdAt: Date
    updatedAt: Date
    _count: BirthRecordCountAggregateOutputType | null
    _avg: BirthRecordAvgAggregateOutputType | null
    _sum: BirthRecordSumAggregateOutputType | null
    _min: BirthRecordMinAggregateOutputType | null
    _max: BirthRecordMaxAggregateOutputType | null
  }

  type GetBirthRecordGroupByPayload<T extends BirthRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BirthRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BirthRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BirthRecordGroupByOutputType[P]>
            : GetScalarType<T[P], BirthRecordGroupByOutputType[P]>
        }
      >
    >


  export type BirthRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    motherId?: boolean
    fatherId?: boolean
    hospitalId?: boolean
    birthDate?: boolean
    birthTime?: boolean
    birthWeight?: boolean
    deliveryMethod?: boolean
    attendingDoctorId?: boolean
    birthPlace?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    complications?: boolean
    apgarScore?: boolean
    gestationalAge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    mother?: boolean | BirthRecord$motherArgs<ExtArgs>
    father?: boolean | BirthRecord$fatherArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["birthRecord"]>

  export type BirthRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    motherId?: boolean
    fatherId?: boolean
    hospitalId?: boolean
    birthDate?: boolean
    birthTime?: boolean
    birthWeight?: boolean
    deliveryMethod?: boolean
    attendingDoctorId?: boolean
    birthPlace?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    complications?: boolean
    apgarScore?: boolean
    gestationalAge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    mother?: boolean | BirthRecord$motherArgs<ExtArgs>
    father?: boolean | BirthRecord$fatherArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["birthRecord"]>

  export type BirthRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    motherId?: boolean
    fatherId?: boolean
    hospitalId?: boolean
    birthDate?: boolean
    birthTime?: boolean
    birthWeight?: boolean
    deliveryMethod?: boolean
    attendingDoctorId?: boolean
    birthPlace?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    complications?: boolean
    apgarScore?: boolean
    gestationalAge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    mother?: boolean | BirthRecord$motherArgs<ExtArgs>
    father?: boolean | BirthRecord$fatherArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["birthRecord"]>

  export type BirthRecordSelectScalar = {
    id?: boolean
    patientId?: boolean
    motherId?: boolean
    fatherId?: boolean
    hospitalId?: boolean
    birthDate?: boolean
    birthTime?: boolean
    birthWeight?: boolean
    deliveryMethod?: boolean
    attendingDoctorId?: boolean
    birthPlace?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    complications?: boolean
    apgarScore?: boolean
    gestationalAge?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BirthRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "motherId" | "fatherId" | "hospitalId" | "birthDate" | "birthTime" | "birthWeight" | "deliveryMethod" | "attendingDoctorId" | "birthPlace" | "certificateNumber" | "registeredAt" | "notes" | "complications" | "apgarScore" | "gestationalAge" | "createdAt" | "updatedAt", ExtArgs["result"]["birthRecord"]>
  export type BirthRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    mother?: boolean | BirthRecord$motherArgs<ExtArgs>
    father?: boolean | BirthRecord$fatherArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BirthRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    mother?: boolean | BirthRecord$motherArgs<ExtArgs>
    father?: boolean | BirthRecord$fatherArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BirthRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    mother?: boolean | BirthRecord$motherArgs<ExtArgs>
    father?: boolean | BirthRecord$fatherArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BirthRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BirthRecord"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      mother: Prisma.$PatientPayload<ExtArgs> | null
      father: Prisma.$PatientPayload<ExtArgs> | null
      hospital: Prisma.$HospitalPayload<ExtArgs>
      attendingDoctor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      motherId: string | null
      fatherId: string | null
      hospitalId: string
      birthDate: Date
      birthTime: string | null
      birthWeight: number | null
      deliveryMethod: $Enums.DeliveryMethod
      attendingDoctorId: string
      birthPlace: string | null
      certificateNumber: string
      registeredAt: Date
      notes: string | null
      complications: string[]
      apgarScore: number | null
      gestationalAge: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["birthRecord"]>
    composites: {}
  }

  type BirthRecordGetPayload<S extends boolean | null | undefined | BirthRecordDefaultArgs> = $Result.GetResult<Prisma.$BirthRecordPayload, S>

  type BirthRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BirthRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BirthRecordCountAggregateInputType | true
    }

  export interface BirthRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BirthRecord'], meta: { name: 'BirthRecord' } }
    /**
     * Find zero or one BirthRecord that matches the filter.
     * @param {BirthRecordFindUniqueArgs} args - Arguments to find a BirthRecord
     * @example
     * // Get one BirthRecord
     * const birthRecord = await prisma.birthRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BirthRecordFindUniqueArgs>(args: SelectSubset<T, BirthRecordFindUniqueArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BirthRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BirthRecordFindUniqueOrThrowArgs} args - Arguments to find a BirthRecord
     * @example
     * // Get one BirthRecord
     * const birthRecord = await prisma.birthRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BirthRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, BirthRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BirthRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BirthRecordFindFirstArgs} args - Arguments to find a BirthRecord
     * @example
     * // Get one BirthRecord
     * const birthRecord = await prisma.birthRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BirthRecordFindFirstArgs>(args?: SelectSubset<T, BirthRecordFindFirstArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BirthRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BirthRecordFindFirstOrThrowArgs} args - Arguments to find a BirthRecord
     * @example
     * // Get one BirthRecord
     * const birthRecord = await prisma.birthRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BirthRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, BirthRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BirthRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BirthRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BirthRecords
     * const birthRecords = await prisma.birthRecord.findMany()
     * 
     * // Get first 10 BirthRecords
     * const birthRecords = await prisma.birthRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const birthRecordWithIdOnly = await prisma.birthRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BirthRecordFindManyArgs>(args?: SelectSubset<T, BirthRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BirthRecord.
     * @param {BirthRecordCreateArgs} args - Arguments to create a BirthRecord.
     * @example
     * // Create one BirthRecord
     * const BirthRecord = await prisma.birthRecord.create({
     *   data: {
     *     // ... data to create a BirthRecord
     *   }
     * })
     * 
     */
    create<T extends BirthRecordCreateArgs>(args: SelectSubset<T, BirthRecordCreateArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BirthRecords.
     * @param {BirthRecordCreateManyArgs} args - Arguments to create many BirthRecords.
     * @example
     * // Create many BirthRecords
     * const birthRecord = await prisma.birthRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BirthRecordCreateManyArgs>(args?: SelectSubset<T, BirthRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BirthRecords and returns the data saved in the database.
     * @param {BirthRecordCreateManyAndReturnArgs} args - Arguments to create many BirthRecords.
     * @example
     * // Create many BirthRecords
     * const birthRecord = await prisma.birthRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BirthRecords and only return the `id`
     * const birthRecordWithIdOnly = await prisma.birthRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BirthRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, BirthRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BirthRecord.
     * @param {BirthRecordDeleteArgs} args - Arguments to delete one BirthRecord.
     * @example
     * // Delete one BirthRecord
     * const BirthRecord = await prisma.birthRecord.delete({
     *   where: {
     *     // ... filter to delete one BirthRecord
     *   }
     * })
     * 
     */
    delete<T extends BirthRecordDeleteArgs>(args: SelectSubset<T, BirthRecordDeleteArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BirthRecord.
     * @param {BirthRecordUpdateArgs} args - Arguments to update one BirthRecord.
     * @example
     * // Update one BirthRecord
     * const birthRecord = await prisma.birthRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BirthRecordUpdateArgs>(args: SelectSubset<T, BirthRecordUpdateArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BirthRecords.
     * @param {BirthRecordDeleteManyArgs} args - Arguments to filter BirthRecords to delete.
     * @example
     * // Delete a few BirthRecords
     * const { count } = await prisma.birthRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BirthRecordDeleteManyArgs>(args?: SelectSubset<T, BirthRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BirthRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BirthRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BirthRecords
     * const birthRecord = await prisma.birthRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BirthRecordUpdateManyArgs>(args: SelectSubset<T, BirthRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BirthRecords and returns the data updated in the database.
     * @param {BirthRecordUpdateManyAndReturnArgs} args - Arguments to update many BirthRecords.
     * @example
     * // Update many BirthRecords
     * const birthRecord = await prisma.birthRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BirthRecords and only return the `id`
     * const birthRecordWithIdOnly = await prisma.birthRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BirthRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, BirthRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BirthRecord.
     * @param {BirthRecordUpsertArgs} args - Arguments to update or create a BirthRecord.
     * @example
     * // Update or create a BirthRecord
     * const birthRecord = await prisma.birthRecord.upsert({
     *   create: {
     *     // ... data to create a BirthRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BirthRecord we want to update
     *   }
     * })
     */
    upsert<T extends BirthRecordUpsertArgs>(args: SelectSubset<T, BirthRecordUpsertArgs<ExtArgs>>): Prisma__BirthRecordClient<$Result.GetResult<Prisma.$BirthRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BirthRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BirthRecordCountArgs} args - Arguments to filter BirthRecords to count.
     * @example
     * // Count the number of BirthRecords
     * const count = await prisma.birthRecord.count({
     *   where: {
     *     // ... the filter for the BirthRecords we want to count
     *   }
     * })
    **/
    count<T extends BirthRecordCountArgs>(
      args?: Subset<T, BirthRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BirthRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BirthRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BirthRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BirthRecordAggregateArgs>(args: Subset<T, BirthRecordAggregateArgs>): Prisma.PrismaPromise<GetBirthRecordAggregateType<T>>

    /**
     * Group by BirthRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BirthRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BirthRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BirthRecordGroupByArgs['orderBy'] }
        : { orderBy?: BirthRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BirthRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBirthRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BirthRecord model
   */
  readonly fields: BirthRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BirthRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BirthRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    mother<T extends BirthRecord$motherArgs<ExtArgs> = {}>(args?: Subset<T, BirthRecord$motherArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    father<T extends BirthRecord$fatherArgs<ExtArgs> = {}>(args?: Subset<T, BirthRecord$fatherArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendingDoctor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BirthRecord model
   */
  interface BirthRecordFieldRefs {
    readonly id: FieldRef<"BirthRecord", 'String'>
    readonly patientId: FieldRef<"BirthRecord", 'String'>
    readonly motherId: FieldRef<"BirthRecord", 'String'>
    readonly fatherId: FieldRef<"BirthRecord", 'String'>
    readonly hospitalId: FieldRef<"BirthRecord", 'String'>
    readonly birthDate: FieldRef<"BirthRecord", 'DateTime'>
    readonly birthTime: FieldRef<"BirthRecord", 'String'>
    readonly birthWeight: FieldRef<"BirthRecord", 'Float'>
    readonly deliveryMethod: FieldRef<"BirthRecord", 'DeliveryMethod'>
    readonly attendingDoctorId: FieldRef<"BirthRecord", 'String'>
    readonly birthPlace: FieldRef<"BirthRecord", 'String'>
    readonly certificateNumber: FieldRef<"BirthRecord", 'String'>
    readonly registeredAt: FieldRef<"BirthRecord", 'DateTime'>
    readonly notes: FieldRef<"BirthRecord", 'String'>
    readonly complications: FieldRef<"BirthRecord", 'String[]'>
    readonly apgarScore: FieldRef<"BirthRecord", 'Int'>
    readonly gestationalAge: FieldRef<"BirthRecord", 'Int'>
    readonly createdAt: FieldRef<"BirthRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"BirthRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BirthRecord findUnique
   */
  export type BirthRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * Filter, which BirthRecord to fetch.
     */
    where: BirthRecordWhereUniqueInput
  }

  /**
   * BirthRecord findUniqueOrThrow
   */
  export type BirthRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * Filter, which BirthRecord to fetch.
     */
    where: BirthRecordWhereUniqueInput
  }

  /**
   * BirthRecord findFirst
   */
  export type BirthRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * Filter, which BirthRecord to fetch.
     */
    where?: BirthRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BirthRecords to fetch.
     */
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BirthRecords.
     */
    cursor?: BirthRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BirthRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BirthRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BirthRecords.
     */
    distinct?: BirthRecordScalarFieldEnum | BirthRecordScalarFieldEnum[]
  }

  /**
   * BirthRecord findFirstOrThrow
   */
  export type BirthRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * Filter, which BirthRecord to fetch.
     */
    where?: BirthRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BirthRecords to fetch.
     */
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BirthRecords.
     */
    cursor?: BirthRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BirthRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BirthRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BirthRecords.
     */
    distinct?: BirthRecordScalarFieldEnum | BirthRecordScalarFieldEnum[]
  }

  /**
   * BirthRecord findMany
   */
  export type BirthRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * Filter, which BirthRecords to fetch.
     */
    where?: BirthRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BirthRecords to fetch.
     */
    orderBy?: BirthRecordOrderByWithRelationInput | BirthRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BirthRecords.
     */
    cursor?: BirthRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BirthRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BirthRecords.
     */
    skip?: number
    distinct?: BirthRecordScalarFieldEnum | BirthRecordScalarFieldEnum[]
  }

  /**
   * BirthRecord create
   */
  export type BirthRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a BirthRecord.
     */
    data: XOR<BirthRecordCreateInput, BirthRecordUncheckedCreateInput>
  }

  /**
   * BirthRecord createMany
   */
  export type BirthRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BirthRecords.
     */
    data: BirthRecordCreateManyInput | BirthRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BirthRecord createManyAndReturn
   */
  export type BirthRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * The data used to create many BirthRecords.
     */
    data: BirthRecordCreateManyInput | BirthRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BirthRecord update
   */
  export type BirthRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a BirthRecord.
     */
    data: XOR<BirthRecordUpdateInput, BirthRecordUncheckedUpdateInput>
    /**
     * Choose, which BirthRecord to update.
     */
    where: BirthRecordWhereUniqueInput
  }

  /**
   * BirthRecord updateMany
   */
  export type BirthRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BirthRecords.
     */
    data: XOR<BirthRecordUpdateManyMutationInput, BirthRecordUncheckedUpdateManyInput>
    /**
     * Filter which BirthRecords to update
     */
    where?: BirthRecordWhereInput
    /**
     * Limit how many BirthRecords to update.
     */
    limit?: number
  }

  /**
   * BirthRecord updateManyAndReturn
   */
  export type BirthRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * The data used to update BirthRecords.
     */
    data: XOR<BirthRecordUpdateManyMutationInput, BirthRecordUncheckedUpdateManyInput>
    /**
     * Filter which BirthRecords to update
     */
    where?: BirthRecordWhereInput
    /**
     * Limit how many BirthRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BirthRecord upsert
   */
  export type BirthRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the BirthRecord to update in case it exists.
     */
    where: BirthRecordWhereUniqueInput
    /**
     * In case the BirthRecord found by the `where` argument doesn't exist, create a new BirthRecord with this data.
     */
    create: XOR<BirthRecordCreateInput, BirthRecordUncheckedCreateInput>
    /**
     * In case the BirthRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BirthRecordUpdateInput, BirthRecordUncheckedUpdateInput>
  }

  /**
   * BirthRecord delete
   */
  export type BirthRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
    /**
     * Filter which BirthRecord to delete.
     */
    where: BirthRecordWhereUniqueInput
  }

  /**
   * BirthRecord deleteMany
   */
  export type BirthRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BirthRecords to delete
     */
    where?: BirthRecordWhereInput
    /**
     * Limit how many BirthRecords to delete.
     */
    limit?: number
  }

  /**
   * BirthRecord.mother
   */
  export type BirthRecord$motherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * BirthRecord.father
   */
  export type BirthRecord$fatherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * BirthRecord without action
   */
  export type BirthRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BirthRecord
     */
    select?: BirthRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BirthRecord
     */
    omit?: BirthRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BirthRecordInclude<ExtArgs> | null
  }


  /**
   * Model DeathRecord
   */

  export type AggregateDeathRecord = {
    _count: DeathRecordCountAggregateOutputType | null
    _min: DeathRecordMinAggregateOutputType | null
    _max: DeathRecordMaxAggregateOutputType | null
  }

  export type DeathRecordMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    dateOfDeath: Date | null
    timeOfDeath: string | null
    causeOfDeath: string | null
    attendingDoctorId: string | null
    placeOfDeath: string | null
    certificateNumber: string | null
    registeredAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeathRecordMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    hospitalId: string | null
    dateOfDeath: Date | null
    timeOfDeath: string | null
    causeOfDeath: string | null
    attendingDoctorId: string | null
    placeOfDeath: string | null
    certificateNumber: string | null
    registeredAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DeathRecordCountAggregateOutputType = {
    id: number
    patientId: number
    hospitalId: number
    dateOfDeath: number
    timeOfDeath: number
    causeOfDeath: number
    attendingDoctorId: number
    placeOfDeath: number
    certificateNumber: number
    registeredAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DeathRecordMinAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    dateOfDeath?: true
    timeOfDeath?: true
    causeOfDeath?: true
    attendingDoctorId?: true
    placeOfDeath?: true
    certificateNumber?: true
    registeredAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeathRecordMaxAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    dateOfDeath?: true
    timeOfDeath?: true
    causeOfDeath?: true
    attendingDoctorId?: true
    placeOfDeath?: true
    certificateNumber?: true
    registeredAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DeathRecordCountAggregateInputType = {
    id?: true
    patientId?: true
    hospitalId?: true
    dateOfDeath?: true
    timeOfDeath?: true
    causeOfDeath?: true
    attendingDoctorId?: true
    placeOfDeath?: true
    certificateNumber?: true
    registeredAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DeathRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeathRecord to aggregate.
     */
    where?: DeathRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeathRecords to fetch.
     */
    orderBy?: DeathRecordOrderByWithRelationInput | DeathRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeathRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeathRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeathRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeathRecords
    **/
    _count?: true | DeathRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeathRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeathRecordMaxAggregateInputType
  }

  export type GetDeathRecordAggregateType<T extends DeathRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateDeathRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeathRecord[P]>
      : GetScalarType<T[P], AggregateDeathRecord[P]>
  }




  export type DeathRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeathRecordWhereInput
    orderBy?: DeathRecordOrderByWithAggregationInput | DeathRecordOrderByWithAggregationInput[]
    by: DeathRecordScalarFieldEnum[] | DeathRecordScalarFieldEnum
    having?: DeathRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeathRecordCountAggregateInputType | true
    _min?: DeathRecordMinAggregateInputType
    _max?: DeathRecordMaxAggregateInputType
  }

  export type DeathRecordGroupByOutputType = {
    id: string
    patientId: string
    hospitalId: string
    dateOfDeath: Date
    timeOfDeath: string | null
    causeOfDeath: string | null
    attendingDoctorId: string
    placeOfDeath: string
    certificateNumber: string
    registeredAt: Date
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: DeathRecordCountAggregateOutputType | null
    _min: DeathRecordMinAggregateOutputType | null
    _max: DeathRecordMaxAggregateOutputType | null
  }

  type GetDeathRecordGroupByPayload<T extends DeathRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeathRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeathRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeathRecordGroupByOutputType[P]>
            : GetScalarType<T[P], DeathRecordGroupByOutputType[P]>
        }
      >
    >


  export type DeathRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    dateOfDeath?: boolean
    timeOfDeath?: boolean
    causeOfDeath?: boolean
    attendingDoctorId?: boolean
    placeOfDeath?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deathRecord"]>

  export type DeathRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    dateOfDeath?: boolean
    timeOfDeath?: boolean
    causeOfDeath?: boolean
    attendingDoctorId?: boolean
    placeOfDeath?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deathRecord"]>

  export type DeathRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    dateOfDeath?: boolean
    timeOfDeath?: boolean
    causeOfDeath?: boolean
    attendingDoctorId?: boolean
    placeOfDeath?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deathRecord"]>

  export type DeathRecordSelectScalar = {
    id?: boolean
    patientId?: boolean
    hospitalId?: boolean
    dateOfDeath?: boolean
    timeOfDeath?: boolean
    causeOfDeath?: boolean
    attendingDoctorId?: boolean
    placeOfDeath?: boolean
    certificateNumber?: boolean
    registeredAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DeathRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "hospitalId" | "dateOfDeath" | "timeOfDeath" | "causeOfDeath" | "attendingDoctorId" | "placeOfDeath" | "certificateNumber" | "registeredAt" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["deathRecord"]>
  export type DeathRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DeathRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DeathRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    attendingDoctor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DeathRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeathRecord"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
      attendingDoctor: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      hospitalId: string
      dateOfDeath: Date
      timeOfDeath: string | null
      causeOfDeath: string | null
      attendingDoctorId: string
      placeOfDeath: string
      certificateNumber: string
      registeredAt: Date
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["deathRecord"]>
    composites: {}
  }

  type DeathRecordGetPayload<S extends boolean | null | undefined | DeathRecordDefaultArgs> = $Result.GetResult<Prisma.$DeathRecordPayload, S>

  type DeathRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeathRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeathRecordCountAggregateInputType | true
    }

  export interface DeathRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeathRecord'], meta: { name: 'DeathRecord' } }
    /**
     * Find zero or one DeathRecord that matches the filter.
     * @param {DeathRecordFindUniqueArgs} args - Arguments to find a DeathRecord
     * @example
     * // Get one DeathRecord
     * const deathRecord = await prisma.deathRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeathRecordFindUniqueArgs>(args: SelectSubset<T, DeathRecordFindUniqueArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DeathRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeathRecordFindUniqueOrThrowArgs} args - Arguments to find a DeathRecord
     * @example
     * // Get one DeathRecord
     * const deathRecord = await prisma.deathRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeathRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, DeathRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeathRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathRecordFindFirstArgs} args - Arguments to find a DeathRecord
     * @example
     * // Get one DeathRecord
     * const deathRecord = await prisma.deathRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeathRecordFindFirstArgs>(args?: SelectSubset<T, DeathRecordFindFirstArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DeathRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathRecordFindFirstOrThrowArgs} args - Arguments to find a DeathRecord
     * @example
     * // Get one DeathRecord
     * const deathRecord = await prisma.deathRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeathRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, DeathRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DeathRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeathRecords
     * const deathRecords = await prisma.deathRecord.findMany()
     * 
     * // Get first 10 DeathRecords
     * const deathRecords = await prisma.deathRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deathRecordWithIdOnly = await prisma.deathRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeathRecordFindManyArgs>(args?: SelectSubset<T, DeathRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DeathRecord.
     * @param {DeathRecordCreateArgs} args - Arguments to create a DeathRecord.
     * @example
     * // Create one DeathRecord
     * const DeathRecord = await prisma.deathRecord.create({
     *   data: {
     *     // ... data to create a DeathRecord
     *   }
     * })
     * 
     */
    create<T extends DeathRecordCreateArgs>(args: SelectSubset<T, DeathRecordCreateArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DeathRecords.
     * @param {DeathRecordCreateManyArgs} args - Arguments to create many DeathRecords.
     * @example
     * // Create many DeathRecords
     * const deathRecord = await prisma.deathRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeathRecordCreateManyArgs>(args?: SelectSubset<T, DeathRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeathRecords and returns the data saved in the database.
     * @param {DeathRecordCreateManyAndReturnArgs} args - Arguments to create many DeathRecords.
     * @example
     * // Create many DeathRecords
     * const deathRecord = await prisma.deathRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeathRecords and only return the `id`
     * const deathRecordWithIdOnly = await prisma.deathRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeathRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, DeathRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DeathRecord.
     * @param {DeathRecordDeleteArgs} args - Arguments to delete one DeathRecord.
     * @example
     * // Delete one DeathRecord
     * const DeathRecord = await prisma.deathRecord.delete({
     *   where: {
     *     // ... filter to delete one DeathRecord
     *   }
     * })
     * 
     */
    delete<T extends DeathRecordDeleteArgs>(args: SelectSubset<T, DeathRecordDeleteArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DeathRecord.
     * @param {DeathRecordUpdateArgs} args - Arguments to update one DeathRecord.
     * @example
     * // Update one DeathRecord
     * const deathRecord = await prisma.deathRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeathRecordUpdateArgs>(args: SelectSubset<T, DeathRecordUpdateArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DeathRecords.
     * @param {DeathRecordDeleteManyArgs} args - Arguments to filter DeathRecords to delete.
     * @example
     * // Delete a few DeathRecords
     * const { count } = await prisma.deathRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeathRecordDeleteManyArgs>(args?: SelectSubset<T, DeathRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeathRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeathRecords
     * const deathRecord = await prisma.deathRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeathRecordUpdateManyArgs>(args: SelectSubset<T, DeathRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeathRecords and returns the data updated in the database.
     * @param {DeathRecordUpdateManyAndReturnArgs} args - Arguments to update many DeathRecords.
     * @example
     * // Update many DeathRecords
     * const deathRecord = await prisma.deathRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeathRecords and only return the `id`
     * const deathRecordWithIdOnly = await prisma.deathRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeathRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, DeathRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DeathRecord.
     * @param {DeathRecordUpsertArgs} args - Arguments to update or create a DeathRecord.
     * @example
     * // Update or create a DeathRecord
     * const deathRecord = await prisma.deathRecord.upsert({
     *   create: {
     *     // ... data to create a DeathRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeathRecord we want to update
     *   }
     * })
     */
    upsert<T extends DeathRecordUpsertArgs>(args: SelectSubset<T, DeathRecordUpsertArgs<ExtArgs>>): Prisma__DeathRecordClient<$Result.GetResult<Prisma.$DeathRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DeathRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathRecordCountArgs} args - Arguments to filter DeathRecords to count.
     * @example
     * // Count the number of DeathRecords
     * const count = await prisma.deathRecord.count({
     *   where: {
     *     // ... the filter for the DeathRecords we want to count
     *   }
     * })
    **/
    count<T extends DeathRecordCountArgs>(
      args?: Subset<T, DeathRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeathRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeathRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeathRecordAggregateArgs>(args: Subset<T, DeathRecordAggregateArgs>): Prisma.PrismaPromise<GetDeathRecordAggregateType<T>>

    /**
     * Group by DeathRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeathRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeathRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeathRecordGroupByArgs['orderBy'] }
        : { orderBy?: DeathRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeathRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeathRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeathRecord model
   */
  readonly fields: DeathRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeathRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeathRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendingDoctor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeathRecord model
   */
  interface DeathRecordFieldRefs {
    readonly id: FieldRef<"DeathRecord", 'String'>
    readonly patientId: FieldRef<"DeathRecord", 'String'>
    readonly hospitalId: FieldRef<"DeathRecord", 'String'>
    readonly dateOfDeath: FieldRef<"DeathRecord", 'DateTime'>
    readonly timeOfDeath: FieldRef<"DeathRecord", 'String'>
    readonly causeOfDeath: FieldRef<"DeathRecord", 'String'>
    readonly attendingDoctorId: FieldRef<"DeathRecord", 'String'>
    readonly placeOfDeath: FieldRef<"DeathRecord", 'String'>
    readonly certificateNumber: FieldRef<"DeathRecord", 'String'>
    readonly registeredAt: FieldRef<"DeathRecord", 'DateTime'>
    readonly notes: FieldRef<"DeathRecord", 'String'>
    readonly createdAt: FieldRef<"DeathRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"DeathRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DeathRecord findUnique
   */
  export type DeathRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeathRecord to fetch.
     */
    where: DeathRecordWhereUniqueInput
  }

  /**
   * DeathRecord findUniqueOrThrow
   */
  export type DeathRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeathRecord to fetch.
     */
    where: DeathRecordWhereUniqueInput
  }

  /**
   * DeathRecord findFirst
   */
  export type DeathRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeathRecord to fetch.
     */
    where?: DeathRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeathRecords to fetch.
     */
    orderBy?: DeathRecordOrderByWithRelationInput | DeathRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeathRecords.
     */
    cursor?: DeathRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeathRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeathRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeathRecords.
     */
    distinct?: DeathRecordScalarFieldEnum | DeathRecordScalarFieldEnum[]
  }

  /**
   * DeathRecord findFirstOrThrow
   */
  export type DeathRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeathRecord to fetch.
     */
    where?: DeathRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeathRecords to fetch.
     */
    orderBy?: DeathRecordOrderByWithRelationInput | DeathRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeathRecords.
     */
    cursor?: DeathRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeathRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeathRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeathRecords.
     */
    distinct?: DeathRecordScalarFieldEnum | DeathRecordScalarFieldEnum[]
  }

  /**
   * DeathRecord findMany
   */
  export type DeathRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * Filter, which DeathRecords to fetch.
     */
    where?: DeathRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeathRecords to fetch.
     */
    orderBy?: DeathRecordOrderByWithRelationInput | DeathRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeathRecords.
     */
    cursor?: DeathRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeathRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeathRecords.
     */
    skip?: number
    distinct?: DeathRecordScalarFieldEnum | DeathRecordScalarFieldEnum[]
  }

  /**
   * DeathRecord create
   */
  export type DeathRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a DeathRecord.
     */
    data: XOR<DeathRecordCreateInput, DeathRecordUncheckedCreateInput>
  }

  /**
   * DeathRecord createMany
   */
  export type DeathRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeathRecords.
     */
    data: DeathRecordCreateManyInput | DeathRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeathRecord createManyAndReturn
   */
  export type DeathRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * The data used to create many DeathRecords.
     */
    data: DeathRecordCreateManyInput | DeathRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeathRecord update
   */
  export type DeathRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a DeathRecord.
     */
    data: XOR<DeathRecordUpdateInput, DeathRecordUncheckedUpdateInput>
    /**
     * Choose, which DeathRecord to update.
     */
    where: DeathRecordWhereUniqueInput
  }

  /**
   * DeathRecord updateMany
   */
  export type DeathRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeathRecords.
     */
    data: XOR<DeathRecordUpdateManyMutationInput, DeathRecordUncheckedUpdateManyInput>
    /**
     * Filter which DeathRecords to update
     */
    where?: DeathRecordWhereInput
    /**
     * Limit how many DeathRecords to update.
     */
    limit?: number
  }

  /**
   * DeathRecord updateManyAndReturn
   */
  export type DeathRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * The data used to update DeathRecords.
     */
    data: XOR<DeathRecordUpdateManyMutationInput, DeathRecordUncheckedUpdateManyInput>
    /**
     * Filter which DeathRecords to update
     */
    where?: DeathRecordWhereInput
    /**
     * Limit how many DeathRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeathRecord upsert
   */
  export type DeathRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the DeathRecord to update in case it exists.
     */
    where: DeathRecordWhereUniqueInput
    /**
     * In case the DeathRecord found by the `where` argument doesn't exist, create a new DeathRecord with this data.
     */
    create: XOR<DeathRecordCreateInput, DeathRecordUncheckedCreateInput>
    /**
     * In case the DeathRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeathRecordUpdateInput, DeathRecordUncheckedUpdateInput>
  }

  /**
   * DeathRecord delete
   */
  export type DeathRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
    /**
     * Filter which DeathRecord to delete.
     */
    where: DeathRecordWhereUniqueInput
  }

  /**
   * DeathRecord deleteMany
   */
  export type DeathRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeathRecords to delete
     */
    where?: DeathRecordWhereInput
    /**
     * Limit how many DeathRecords to delete.
     */
    limit?: number
  }

  /**
   * DeathRecord without action
   */
  export type DeathRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeathRecord
     */
    select?: DeathRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeathRecord
     */
    omit?: DeathRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeathRecordInclude<ExtArgs> | null
  }


  /**
   * Model MarketplaceVendor
   */

  export type AggregateMarketplaceVendor = {
    _count: MarketplaceVendorCountAggregateOutputType | null
    _avg: MarketplaceVendorAvgAggregateOutputType | null
    _sum: MarketplaceVendorSumAggregateOutputType | null
    _min: MarketplaceVendorMinAggregateOutputType | null
    _max: MarketplaceVendorMaxAggregateOutputType | null
  }

  export type MarketplaceVendorAvgAggregateOutputType = {
    rating: number | null
  }

  export type MarketplaceVendorSumAggregateOutputType = {
    rating: number | null
  }

  export type MarketplaceVendorMinAggregateOutputType = {
    id: string | null
    hospitalId: string | null
    name: string | null
    description: string | null
    contactEmail: string | null
    contactPhone: string | null
    address: string | null
    logo: string | null
    websiteUrl: string | null
    verified: boolean | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarketplaceVendorMaxAggregateOutputType = {
    id: string | null
    hospitalId: string | null
    name: string | null
    description: string | null
    contactEmail: string | null
    contactPhone: string | null
    address: string | null
    logo: string | null
    websiteUrl: string | null
    verified: boolean | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarketplaceVendorCountAggregateOutputType = {
    id: number
    hospitalId: number
    name: number
    description: number
    contactEmail: number
    contactPhone: number
    address: number
    logo: number
    websiteUrl: number
    verified: number
    rating: number
    specialties: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MarketplaceVendorAvgAggregateInputType = {
    rating?: true
  }

  export type MarketplaceVendorSumAggregateInputType = {
    rating?: true
  }

  export type MarketplaceVendorMinAggregateInputType = {
    id?: true
    hospitalId?: true
    name?: true
    description?: true
    contactEmail?: true
    contactPhone?: true
    address?: true
    logo?: true
    websiteUrl?: true
    verified?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarketplaceVendorMaxAggregateInputType = {
    id?: true
    hospitalId?: true
    name?: true
    description?: true
    contactEmail?: true
    contactPhone?: true
    address?: true
    logo?: true
    websiteUrl?: true
    verified?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarketplaceVendorCountAggregateInputType = {
    id?: true
    hospitalId?: true
    name?: true
    description?: true
    contactEmail?: true
    contactPhone?: true
    address?: true
    logo?: true
    websiteUrl?: true
    verified?: true
    rating?: true
    specialties?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MarketplaceVendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketplaceVendor to aggregate.
     */
    where?: MarketplaceVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceVendors to fetch.
     */
    orderBy?: MarketplaceVendorOrderByWithRelationInput | MarketplaceVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketplaceVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketplaceVendors
    **/
    _count?: true | MarketplaceVendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketplaceVendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketplaceVendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketplaceVendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketplaceVendorMaxAggregateInputType
  }

  export type GetMarketplaceVendorAggregateType<T extends MarketplaceVendorAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketplaceVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketplaceVendor[P]>
      : GetScalarType<T[P], AggregateMarketplaceVendor[P]>
  }




  export type MarketplaceVendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketplaceVendorWhereInput
    orderBy?: MarketplaceVendorOrderByWithAggregationInput | MarketplaceVendorOrderByWithAggregationInput[]
    by: MarketplaceVendorScalarFieldEnum[] | MarketplaceVendorScalarFieldEnum
    having?: MarketplaceVendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketplaceVendorCountAggregateInputType | true
    _avg?: MarketplaceVendorAvgAggregateInputType
    _sum?: MarketplaceVendorSumAggregateInputType
    _min?: MarketplaceVendorMinAggregateInputType
    _max?: MarketplaceVendorMaxAggregateInputType
  }

  export type MarketplaceVendorGroupByOutputType = {
    id: string
    hospitalId: string
    name: string
    description: string | null
    contactEmail: string | null
    contactPhone: string | null
    address: string | null
    logo: string | null
    websiteUrl: string | null
    verified: boolean
    rating: number | null
    specialties: string[]
    createdAt: Date
    updatedAt: Date
    _count: MarketplaceVendorCountAggregateOutputType | null
    _avg: MarketplaceVendorAvgAggregateOutputType | null
    _sum: MarketplaceVendorSumAggregateOutputType | null
    _min: MarketplaceVendorMinAggregateOutputType | null
    _max: MarketplaceVendorMaxAggregateOutputType | null
  }

  type GetMarketplaceVendorGroupByPayload<T extends MarketplaceVendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketplaceVendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketplaceVendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketplaceVendorGroupByOutputType[P]>
            : GetScalarType<T[P], MarketplaceVendorGroupByOutputType[P]>
        }
      >
    >


  export type MarketplaceVendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hospitalId?: boolean
    name?: boolean
    description?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    address?: boolean
    logo?: boolean
    websiteUrl?: boolean
    verified?: boolean
    rating?: boolean
    specialties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    products?: boolean | MarketplaceVendor$productsArgs<ExtArgs>
    savedBy?: boolean | MarketplaceVendor$savedByArgs<ExtArgs>
    _count?: boolean | MarketplaceVendorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceVendor"]>

  export type MarketplaceVendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hospitalId?: boolean
    name?: boolean
    description?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    address?: boolean
    logo?: boolean
    websiteUrl?: boolean
    verified?: boolean
    rating?: boolean
    specialties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceVendor"]>

  export type MarketplaceVendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hospitalId?: boolean
    name?: boolean
    description?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    address?: boolean
    logo?: boolean
    websiteUrl?: boolean
    verified?: boolean
    rating?: boolean
    specialties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceVendor"]>

  export type MarketplaceVendorSelectScalar = {
    id?: boolean
    hospitalId?: boolean
    name?: boolean
    description?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    address?: boolean
    logo?: boolean
    websiteUrl?: boolean
    verified?: boolean
    rating?: boolean
    specialties?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MarketplaceVendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hospitalId" | "name" | "description" | "contactEmail" | "contactPhone" | "address" | "logo" | "websiteUrl" | "verified" | "rating" | "specialties" | "createdAt" | "updatedAt", ExtArgs["result"]["marketplaceVendor"]>
  export type MarketplaceVendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    products?: boolean | MarketplaceVendor$productsArgs<ExtArgs>
    savedBy?: boolean | MarketplaceVendor$savedByArgs<ExtArgs>
    _count?: boolean | MarketplaceVendorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MarketplaceVendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type MarketplaceVendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $MarketplaceVendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketplaceVendor"
    objects: {
      hospital: Prisma.$HospitalPayload<ExtArgs>
      products: Prisma.$MarketplaceProductPayload<ExtArgs>[]
      savedBy: Prisma.$SavedVendorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hospitalId: string
      name: string
      description: string | null
      contactEmail: string | null
      contactPhone: string | null
      address: string | null
      logo: string | null
      websiteUrl: string | null
      verified: boolean
      rating: number | null
      specialties: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["marketplaceVendor"]>
    composites: {}
  }

  type MarketplaceVendorGetPayload<S extends boolean | null | undefined | MarketplaceVendorDefaultArgs> = $Result.GetResult<Prisma.$MarketplaceVendorPayload, S>

  type MarketplaceVendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketplaceVendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketplaceVendorCountAggregateInputType | true
    }

  export interface MarketplaceVendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketplaceVendor'], meta: { name: 'MarketplaceVendor' } }
    /**
     * Find zero or one MarketplaceVendor that matches the filter.
     * @param {MarketplaceVendorFindUniqueArgs} args - Arguments to find a MarketplaceVendor
     * @example
     * // Get one MarketplaceVendor
     * const marketplaceVendor = await prisma.marketplaceVendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketplaceVendorFindUniqueArgs>(args: SelectSubset<T, MarketplaceVendorFindUniqueArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketplaceVendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketplaceVendorFindUniqueOrThrowArgs} args - Arguments to find a MarketplaceVendor
     * @example
     * // Get one MarketplaceVendor
     * const marketplaceVendor = await prisma.marketplaceVendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketplaceVendorFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketplaceVendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketplaceVendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceVendorFindFirstArgs} args - Arguments to find a MarketplaceVendor
     * @example
     * // Get one MarketplaceVendor
     * const marketplaceVendor = await prisma.marketplaceVendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketplaceVendorFindFirstArgs>(args?: SelectSubset<T, MarketplaceVendorFindFirstArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketplaceVendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceVendorFindFirstOrThrowArgs} args - Arguments to find a MarketplaceVendor
     * @example
     * // Get one MarketplaceVendor
     * const marketplaceVendor = await prisma.marketplaceVendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketplaceVendorFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketplaceVendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketplaceVendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceVendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketplaceVendors
     * const marketplaceVendors = await prisma.marketplaceVendor.findMany()
     * 
     * // Get first 10 MarketplaceVendors
     * const marketplaceVendors = await prisma.marketplaceVendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketplaceVendorWithIdOnly = await prisma.marketplaceVendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketplaceVendorFindManyArgs>(args?: SelectSubset<T, MarketplaceVendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketplaceVendor.
     * @param {MarketplaceVendorCreateArgs} args - Arguments to create a MarketplaceVendor.
     * @example
     * // Create one MarketplaceVendor
     * const MarketplaceVendor = await prisma.marketplaceVendor.create({
     *   data: {
     *     // ... data to create a MarketplaceVendor
     *   }
     * })
     * 
     */
    create<T extends MarketplaceVendorCreateArgs>(args: SelectSubset<T, MarketplaceVendorCreateArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketplaceVendors.
     * @param {MarketplaceVendorCreateManyArgs} args - Arguments to create many MarketplaceVendors.
     * @example
     * // Create many MarketplaceVendors
     * const marketplaceVendor = await prisma.marketplaceVendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketplaceVendorCreateManyArgs>(args?: SelectSubset<T, MarketplaceVendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketplaceVendors and returns the data saved in the database.
     * @param {MarketplaceVendorCreateManyAndReturnArgs} args - Arguments to create many MarketplaceVendors.
     * @example
     * // Create many MarketplaceVendors
     * const marketplaceVendor = await prisma.marketplaceVendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketplaceVendors and only return the `id`
     * const marketplaceVendorWithIdOnly = await prisma.marketplaceVendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketplaceVendorCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketplaceVendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketplaceVendor.
     * @param {MarketplaceVendorDeleteArgs} args - Arguments to delete one MarketplaceVendor.
     * @example
     * // Delete one MarketplaceVendor
     * const MarketplaceVendor = await prisma.marketplaceVendor.delete({
     *   where: {
     *     // ... filter to delete one MarketplaceVendor
     *   }
     * })
     * 
     */
    delete<T extends MarketplaceVendorDeleteArgs>(args: SelectSubset<T, MarketplaceVendorDeleteArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketplaceVendor.
     * @param {MarketplaceVendorUpdateArgs} args - Arguments to update one MarketplaceVendor.
     * @example
     * // Update one MarketplaceVendor
     * const marketplaceVendor = await prisma.marketplaceVendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketplaceVendorUpdateArgs>(args: SelectSubset<T, MarketplaceVendorUpdateArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketplaceVendors.
     * @param {MarketplaceVendorDeleteManyArgs} args - Arguments to filter MarketplaceVendors to delete.
     * @example
     * // Delete a few MarketplaceVendors
     * const { count } = await prisma.marketplaceVendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketplaceVendorDeleteManyArgs>(args?: SelectSubset<T, MarketplaceVendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketplaceVendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceVendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketplaceVendors
     * const marketplaceVendor = await prisma.marketplaceVendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketplaceVendorUpdateManyArgs>(args: SelectSubset<T, MarketplaceVendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketplaceVendors and returns the data updated in the database.
     * @param {MarketplaceVendorUpdateManyAndReturnArgs} args - Arguments to update many MarketplaceVendors.
     * @example
     * // Update many MarketplaceVendors
     * const marketplaceVendor = await prisma.marketplaceVendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketplaceVendors and only return the `id`
     * const marketplaceVendorWithIdOnly = await prisma.marketplaceVendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketplaceVendorUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketplaceVendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketplaceVendor.
     * @param {MarketplaceVendorUpsertArgs} args - Arguments to update or create a MarketplaceVendor.
     * @example
     * // Update or create a MarketplaceVendor
     * const marketplaceVendor = await prisma.marketplaceVendor.upsert({
     *   create: {
     *     // ... data to create a MarketplaceVendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketplaceVendor we want to update
     *   }
     * })
     */
    upsert<T extends MarketplaceVendorUpsertArgs>(args: SelectSubset<T, MarketplaceVendorUpsertArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketplaceVendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceVendorCountArgs} args - Arguments to filter MarketplaceVendors to count.
     * @example
     * // Count the number of MarketplaceVendors
     * const count = await prisma.marketplaceVendor.count({
     *   where: {
     *     // ... the filter for the MarketplaceVendors we want to count
     *   }
     * })
    **/
    count<T extends MarketplaceVendorCountArgs>(
      args?: Subset<T, MarketplaceVendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketplaceVendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketplaceVendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceVendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketplaceVendorAggregateArgs>(args: Subset<T, MarketplaceVendorAggregateArgs>): Prisma.PrismaPromise<GetMarketplaceVendorAggregateType<T>>

    /**
     * Group by MarketplaceVendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceVendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketplaceVendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketplaceVendorGroupByArgs['orderBy'] }
        : { orderBy?: MarketplaceVendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketplaceVendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketplaceVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketplaceVendor model
   */
  readonly fields: MarketplaceVendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketplaceVendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketplaceVendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    products<T extends MarketplaceVendor$productsArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceVendor$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    savedBy<T extends MarketplaceVendor$savedByArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceVendor$savedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketplaceVendor model
   */
  interface MarketplaceVendorFieldRefs {
    readonly id: FieldRef<"MarketplaceVendor", 'String'>
    readonly hospitalId: FieldRef<"MarketplaceVendor", 'String'>
    readonly name: FieldRef<"MarketplaceVendor", 'String'>
    readonly description: FieldRef<"MarketplaceVendor", 'String'>
    readonly contactEmail: FieldRef<"MarketplaceVendor", 'String'>
    readonly contactPhone: FieldRef<"MarketplaceVendor", 'String'>
    readonly address: FieldRef<"MarketplaceVendor", 'String'>
    readonly logo: FieldRef<"MarketplaceVendor", 'String'>
    readonly websiteUrl: FieldRef<"MarketplaceVendor", 'String'>
    readonly verified: FieldRef<"MarketplaceVendor", 'Boolean'>
    readonly rating: FieldRef<"MarketplaceVendor", 'Float'>
    readonly specialties: FieldRef<"MarketplaceVendor", 'String[]'>
    readonly createdAt: FieldRef<"MarketplaceVendor", 'DateTime'>
    readonly updatedAt: FieldRef<"MarketplaceVendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MarketplaceVendor findUnique
   */
  export type MarketplaceVendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceVendor to fetch.
     */
    where: MarketplaceVendorWhereUniqueInput
  }

  /**
   * MarketplaceVendor findUniqueOrThrow
   */
  export type MarketplaceVendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceVendor to fetch.
     */
    where: MarketplaceVendorWhereUniqueInput
  }

  /**
   * MarketplaceVendor findFirst
   */
  export type MarketplaceVendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceVendor to fetch.
     */
    where?: MarketplaceVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceVendors to fetch.
     */
    orderBy?: MarketplaceVendorOrderByWithRelationInput | MarketplaceVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketplaceVendors.
     */
    cursor?: MarketplaceVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketplaceVendors.
     */
    distinct?: MarketplaceVendorScalarFieldEnum | MarketplaceVendorScalarFieldEnum[]
  }

  /**
   * MarketplaceVendor findFirstOrThrow
   */
  export type MarketplaceVendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceVendor to fetch.
     */
    where?: MarketplaceVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceVendors to fetch.
     */
    orderBy?: MarketplaceVendorOrderByWithRelationInput | MarketplaceVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketplaceVendors.
     */
    cursor?: MarketplaceVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketplaceVendors.
     */
    distinct?: MarketplaceVendorScalarFieldEnum | MarketplaceVendorScalarFieldEnum[]
  }

  /**
   * MarketplaceVendor findMany
   */
  export type MarketplaceVendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceVendors to fetch.
     */
    where?: MarketplaceVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceVendors to fetch.
     */
    orderBy?: MarketplaceVendorOrderByWithRelationInput | MarketplaceVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketplaceVendors.
     */
    cursor?: MarketplaceVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceVendors.
     */
    skip?: number
    distinct?: MarketplaceVendorScalarFieldEnum | MarketplaceVendorScalarFieldEnum[]
  }

  /**
   * MarketplaceVendor create
   */
  export type MarketplaceVendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * The data needed to create a MarketplaceVendor.
     */
    data: XOR<MarketplaceVendorCreateInput, MarketplaceVendorUncheckedCreateInput>
  }

  /**
   * MarketplaceVendor createMany
   */
  export type MarketplaceVendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketplaceVendors.
     */
    data: MarketplaceVendorCreateManyInput | MarketplaceVendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketplaceVendor createManyAndReturn
   */
  export type MarketplaceVendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * The data used to create many MarketplaceVendors.
     */
    data: MarketplaceVendorCreateManyInput | MarketplaceVendorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketplaceVendor update
   */
  export type MarketplaceVendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * The data needed to update a MarketplaceVendor.
     */
    data: XOR<MarketplaceVendorUpdateInput, MarketplaceVendorUncheckedUpdateInput>
    /**
     * Choose, which MarketplaceVendor to update.
     */
    where: MarketplaceVendorWhereUniqueInput
  }

  /**
   * MarketplaceVendor updateMany
   */
  export type MarketplaceVendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketplaceVendors.
     */
    data: XOR<MarketplaceVendorUpdateManyMutationInput, MarketplaceVendorUncheckedUpdateManyInput>
    /**
     * Filter which MarketplaceVendors to update
     */
    where?: MarketplaceVendorWhereInput
    /**
     * Limit how many MarketplaceVendors to update.
     */
    limit?: number
  }

  /**
   * MarketplaceVendor updateManyAndReturn
   */
  export type MarketplaceVendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * The data used to update MarketplaceVendors.
     */
    data: XOR<MarketplaceVendorUpdateManyMutationInput, MarketplaceVendorUncheckedUpdateManyInput>
    /**
     * Filter which MarketplaceVendors to update
     */
    where?: MarketplaceVendorWhereInput
    /**
     * Limit how many MarketplaceVendors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketplaceVendor upsert
   */
  export type MarketplaceVendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * The filter to search for the MarketplaceVendor to update in case it exists.
     */
    where: MarketplaceVendorWhereUniqueInput
    /**
     * In case the MarketplaceVendor found by the `where` argument doesn't exist, create a new MarketplaceVendor with this data.
     */
    create: XOR<MarketplaceVendorCreateInput, MarketplaceVendorUncheckedCreateInput>
    /**
     * In case the MarketplaceVendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketplaceVendorUpdateInput, MarketplaceVendorUncheckedUpdateInput>
  }

  /**
   * MarketplaceVendor delete
   */
  export type MarketplaceVendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
    /**
     * Filter which MarketplaceVendor to delete.
     */
    where: MarketplaceVendorWhereUniqueInput
  }

  /**
   * MarketplaceVendor deleteMany
   */
  export type MarketplaceVendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketplaceVendors to delete
     */
    where?: MarketplaceVendorWhereInput
    /**
     * Limit how many MarketplaceVendors to delete.
     */
    limit?: number
  }

  /**
   * MarketplaceVendor.products
   */
  export type MarketplaceVendor$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    where?: MarketplaceProductWhereInput
    orderBy?: MarketplaceProductOrderByWithRelationInput | MarketplaceProductOrderByWithRelationInput[]
    cursor?: MarketplaceProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarketplaceProductScalarFieldEnum | MarketplaceProductScalarFieldEnum[]
  }

  /**
   * MarketplaceVendor.savedBy
   */
  export type MarketplaceVendor$savedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    where?: SavedVendorWhereInput
    orderBy?: SavedVendorOrderByWithRelationInput | SavedVendorOrderByWithRelationInput[]
    cursor?: SavedVendorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedVendorScalarFieldEnum | SavedVendorScalarFieldEnum[]
  }

  /**
   * MarketplaceVendor without action
   */
  export type MarketplaceVendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceVendor
     */
    select?: MarketplaceVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceVendor
     */
    omit?: MarketplaceVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceVendorInclude<ExtArgs> | null
  }


  /**
   * Model MarketplaceProduct
   */

  export type AggregateMarketplaceProduct = {
    _count: MarketplaceProductCountAggregateOutputType | null
    _avg: MarketplaceProductAvgAggregateOutputType | null
    _sum: MarketplaceProductSumAggregateOutputType | null
    _min: MarketplaceProductMinAggregateOutputType | null
    _max: MarketplaceProductMaxAggregateOutputType | null
  }

  export type MarketplaceProductAvgAggregateOutputType = {
    price: number | null
    discountPrice: number | null
  }

  export type MarketplaceProductSumAggregateOutputType = {
    price: number | null
    discountPrice: number | null
  }

  export type MarketplaceProductMinAggregateOutputType = {
    id: string | null
    vendorId: string | null
    name: string | null
    description: string | null
    price: number | null
    discountPrice: number | null
    category: string | null
    imageUrl: string | null
    inStock: boolean | null
    requiredPrescription: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarketplaceProductMaxAggregateOutputType = {
    id: string | null
    vendorId: string | null
    name: string | null
    description: string | null
    price: number | null
    discountPrice: number | null
    category: string | null
    imageUrl: string | null
    inStock: boolean | null
    requiredPrescription: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarketplaceProductCountAggregateOutputType = {
    id: number
    vendorId: number
    name: number
    description: number
    price: number
    discountPrice: number
    category: number
    tags: number
    imageUrl: number
    inStock: number
    requiredPrescription: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MarketplaceProductAvgAggregateInputType = {
    price?: true
    discountPrice?: true
  }

  export type MarketplaceProductSumAggregateInputType = {
    price?: true
    discountPrice?: true
  }

  export type MarketplaceProductMinAggregateInputType = {
    id?: true
    vendorId?: true
    name?: true
    description?: true
    price?: true
    discountPrice?: true
    category?: true
    imageUrl?: true
    inStock?: true
    requiredPrescription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarketplaceProductMaxAggregateInputType = {
    id?: true
    vendorId?: true
    name?: true
    description?: true
    price?: true
    discountPrice?: true
    category?: true
    imageUrl?: true
    inStock?: true
    requiredPrescription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarketplaceProductCountAggregateInputType = {
    id?: true
    vendorId?: true
    name?: true
    description?: true
    price?: true
    discountPrice?: true
    category?: true
    tags?: true
    imageUrl?: true
    inStock?: true
    requiredPrescription?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MarketplaceProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketplaceProduct to aggregate.
     */
    where?: MarketplaceProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceProducts to fetch.
     */
    orderBy?: MarketplaceProductOrderByWithRelationInput | MarketplaceProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketplaceProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketplaceProducts
    **/
    _count?: true | MarketplaceProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketplaceProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketplaceProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketplaceProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketplaceProductMaxAggregateInputType
  }

  export type GetMarketplaceProductAggregateType<T extends MarketplaceProductAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketplaceProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketplaceProduct[P]>
      : GetScalarType<T[P], AggregateMarketplaceProduct[P]>
  }




  export type MarketplaceProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketplaceProductWhereInput
    orderBy?: MarketplaceProductOrderByWithAggregationInput | MarketplaceProductOrderByWithAggregationInput[]
    by: MarketplaceProductScalarFieldEnum[] | MarketplaceProductScalarFieldEnum
    having?: MarketplaceProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketplaceProductCountAggregateInputType | true
    _avg?: MarketplaceProductAvgAggregateInputType
    _sum?: MarketplaceProductSumAggregateInputType
    _min?: MarketplaceProductMinAggregateInputType
    _max?: MarketplaceProductMaxAggregateInputType
  }

  export type MarketplaceProductGroupByOutputType = {
    id: string
    vendorId: string
    name: string
    description: string | null
    price: number
    discountPrice: number | null
    category: string
    tags: string[]
    imageUrl: string | null
    inStock: boolean
    requiredPrescription: boolean
    createdAt: Date
    updatedAt: Date
    _count: MarketplaceProductCountAggregateOutputType | null
    _avg: MarketplaceProductAvgAggregateOutputType | null
    _sum: MarketplaceProductSumAggregateOutputType | null
    _min: MarketplaceProductMinAggregateOutputType | null
    _max: MarketplaceProductMaxAggregateOutputType | null
  }

  type GetMarketplaceProductGroupByPayload<T extends MarketplaceProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketplaceProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketplaceProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketplaceProductGroupByOutputType[P]>
            : GetScalarType<T[P], MarketplaceProductGroupByOutputType[P]>
        }
      >
    >


  export type MarketplaceProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    discountPrice?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
    orderItems?: boolean | MarketplaceProduct$orderItemsArgs<ExtArgs>
    cartItems?: boolean | MarketplaceProduct$cartItemsArgs<ExtArgs>
    _count?: boolean | MarketplaceProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceProduct"]>

  export type MarketplaceProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    discountPrice?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceProduct"]>

  export type MarketplaceProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vendorId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    discountPrice?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceProduct"]>

  export type MarketplaceProductSelectScalar = {
    id?: boolean
    vendorId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    discountPrice?: boolean
    category?: boolean
    tags?: boolean
    imageUrl?: boolean
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MarketplaceProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "vendorId" | "name" | "description" | "price" | "discountPrice" | "category" | "tags" | "imageUrl" | "inStock" | "requiredPrescription" | "createdAt" | "updatedAt", ExtArgs["result"]["marketplaceProduct"]>
  export type MarketplaceProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
    orderItems?: boolean | MarketplaceProduct$orderItemsArgs<ExtArgs>
    cartItems?: boolean | MarketplaceProduct$cartItemsArgs<ExtArgs>
    _count?: boolean | MarketplaceProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MarketplaceProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }
  export type MarketplaceProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }

  export type $MarketplaceProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketplaceProduct"
    objects: {
      vendor: Prisma.$MarketplaceVendorPayload<ExtArgs>
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      cartItems: Prisma.$CartItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      vendorId: string
      name: string
      description: string | null
      price: number
      discountPrice: number | null
      category: string
      tags: string[]
      imageUrl: string | null
      inStock: boolean
      requiredPrescription: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["marketplaceProduct"]>
    composites: {}
  }

  type MarketplaceProductGetPayload<S extends boolean | null | undefined | MarketplaceProductDefaultArgs> = $Result.GetResult<Prisma.$MarketplaceProductPayload, S>

  type MarketplaceProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketplaceProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketplaceProductCountAggregateInputType | true
    }

  export interface MarketplaceProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketplaceProduct'], meta: { name: 'MarketplaceProduct' } }
    /**
     * Find zero or one MarketplaceProduct that matches the filter.
     * @param {MarketplaceProductFindUniqueArgs} args - Arguments to find a MarketplaceProduct
     * @example
     * // Get one MarketplaceProduct
     * const marketplaceProduct = await prisma.marketplaceProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketplaceProductFindUniqueArgs>(args: SelectSubset<T, MarketplaceProductFindUniqueArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketplaceProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketplaceProductFindUniqueOrThrowArgs} args - Arguments to find a MarketplaceProduct
     * @example
     * // Get one MarketplaceProduct
     * const marketplaceProduct = await prisma.marketplaceProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketplaceProductFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketplaceProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketplaceProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceProductFindFirstArgs} args - Arguments to find a MarketplaceProduct
     * @example
     * // Get one MarketplaceProduct
     * const marketplaceProduct = await prisma.marketplaceProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketplaceProductFindFirstArgs>(args?: SelectSubset<T, MarketplaceProductFindFirstArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketplaceProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceProductFindFirstOrThrowArgs} args - Arguments to find a MarketplaceProduct
     * @example
     * // Get one MarketplaceProduct
     * const marketplaceProduct = await prisma.marketplaceProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketplaceProductFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketplaceProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketplaceProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketplaceProducts
     * const marketplaceProducts = await prisma.marketplaceProduct.findMany()
     * 
     * // Get first 10 MarketplaceProducts
     * const marketplaceProducts = await prisma.marketplaceProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketplaceProductWithIdOnly = await prisma.marketplaceProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketplaceProductFindManyArgs>(args?: SelectSubset<T, MarketplaceProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketplaceProduct.
     * @param {MarketplaceProductCreateArgs} args - Arguments to create a MarketplaceProduct.
     * @example
     * // Create one MarketplaceProduct
     * const MarketplaceProduct = await prisma.marketplaceProduct.create({
     *   data: {
     *     // ... data to create a MarketplaceProduct
     *   }
     * })
     * 
     */
    create<T extends MarketplaceProductCreateArgs>(args: SelectSubset<T, MarketplaceProductCreateArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketplaceProducts.
     * @param {MarketplaceProductCreateManyArgs} args - Arguments to create many MarketplaceProducts.
     * @example
     * // Create many MarketplaceProducts
     * const marketplaceProduct = await prisma.marketplaceProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketplaceProductCreateManyArgs>(args?: SelectSubset<T, MarketplaceProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketplaceProducts and returns the data saved in the database.
     * @param {MarketplaceProductCreateManyAndReturnArgs} args - Arguments to create many MarketplaceProducts.
     * @example
     * // Create many MarketplaceProducts
     * const marketplaceProduct = await prisma.marketplaceProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketplaceProducts and only return the `id`
     * const marketplaceProductWithIdOnly = await prisma.marketplaceProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketplaceProductCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketplaceProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketplaceProduct.
     * @param {MarketplaceProductDeleteArgs} args - Arguments to delete one MarketplaceProduct.
     * @example
     * // Delete one MarketplaceProduct
     * const MarketplaceProduct = await prisma.marketplaceProduct.delete({
     *   where: {
     *     // ... filter to delete one MarketplaceProduct
     *   }
     * })
     * 
     */
    delete<T extends MarketplaceProductDeleteArgs>(args: SelectSubset<T, MarketplaceProductDeleteArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketplaceProduct.
     * @param {MarketplaceProductUpdateArgs} args - Arguments to update one MarketplaceProduct.
     * @example
     * // Update one MarketplaceProduct
     * const marketplaceProduct = await prisma.marketplaceProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketplaceProductUpdateArgs>(args: SelectSubset<T, MarketplaceProductUpdateArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketplaceProducts.
     * @param {MarketplaceProductDeleteManyArgs} args - Arguments to filter MarketplaceProducts to delete.
     * @example
     * // Delete a few MarketplaceProducts
     * const { count } = await prisma.marketplaceProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketplaceProductDeleteManyArgs>(args?: SelectSubset<T, MarketplaceProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketplaceProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketplaceProducts
     * const marketplaceProduct = await prisma.marketplaceProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketplaceProductUpdateManyArgs>(args: SelectSubset<T, MarketplaceProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketplaceProducts and returns the data updated in the database.
     * @param {MarketplaceProductUpdateManyAndReturnArgs} args - Arguments to update many MarketplaceProducts.
     * @example
     * // Update many MarketplaceProducts
     * const marketplaceProduct = await prisma.marketplaceProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketplaceProducts and only return the `id`
     * const marketplaceProductWithIdOnly = await prisma.marketplaceProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketplaceProductUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketplaceProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketplaceProduct.
     * @param {MarketplaceProductUpsertArgs} args - Arguments to update or create a MarketplaceProduct.
     * @example
     * // Update or create a MarketplaceProduct
     * const marketplaceProduct = await prisma.marketplaceProduct.upsert({
     *   create: {
     *     // ... data to create a MarketplaceProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketplaceProduct we want to update
     *   }
     * })
     */
    upsert<T extends MarketplaceProductUpsertArgs>(args: SelectSubset<T, MarketplaceProductUpsertArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketplaceProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceProductCountArgs} args - Arguments to filter MarketplaceProducts to count.
     * @example
     * // Count the number of MarketplaceProducts
     * const count = await prisma.marketplaceProduct.count({
     *   where: {
     *     // ... the filter for the MarketplaceProducts we want to count
     *   }
     * })
    **/
    count<T extends MarketplaceProductCountArgs>(
      args?: Subset<T, MarketplaceProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketplaceProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketplaceProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketplaceProductAggregateArgs>(args: Subset<T, MarketplaceProductAggregateArgs>): Prisma.PrismaPromise<GetMarketplaceProductAggregateType<T>>

    /**
     * Group by MarketplaceProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketplaceProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketplaceProductGroupByArgs['orderBy'] }
        : { orderBy?: MarketplaceProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketplaceProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketplaceProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketplaceProduct model
   */
  readonly fields: MarketplaceProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketplaceProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketplaceProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendor<T extends MarketplaceVendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceVendorDefaultArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends MarketplaceProduct$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceProduct$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cartItems<T extends MarketplaceProduct$cartItemsArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceProduct$cartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketplaceProduct model
   */
  interface MarketplaceProductFieldRefs {
    readonly id: FieldRef<"MarketplaceProduct", 'String'>
    readonly vendorId: FieldRef<"MarketplaceProduct", 'String'>
    readonly name: FieldRef<"MarketplaceProduct", 'String'>
    readonly description: FieldRef<"MarketplaceProduct", 'String'>
    readonly price: FieldRef<"MarketplaceProduct", 'Float'>
    readonly discountPrice: FieldRef<"MarketplaceProduct", 'Float'>
    readonly category: FieldRef<"MarketplaceProduct", 'String'>
    readonly tags: FieldRef<"MarketplaceProduct", 'String[]'>
    readonly imageUrl: FieldRef<"MarketplaceProduct", 'String'>
    readonly inStock: FieldRef<"MarketplaceProduct", 'Boolean'>
    readonly requiredPrescription: FieldRef<"MarketplaceProduct", 'Boolean'>
    readonly createdAt: FieldRef<"MarketplaceProduct", 'DateTime'>
    readonly updatedAt: FieldRef<"MarketplaceProduct", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MarketplaceProduct findUnique
   */
  export type MarketplaceProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceProduct to fetch.
     */
    where: MarketplaceProductWhereUniqueInput
  }

  /**
   * MarketplaceProduct findUniqueOrThrow
   */
  export type MarketplaceProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceProduct to fetch.
     */
    where: MarketplaceProductWhereUniqueInput
  }

  /**
   * MarketplaceProduct findFirst
   */
  export type MarketplaceProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceProduct to fetch.
     */
    where?: MarketplaceProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceProducts to fetch.
     */
    orderBy?: MarketplaceProductOrderByWithRelationInput | MarketplaceProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketplaceProducts.
     */
    cursor?: MarketplaceProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketplaceProducts.
     */
    distinct?: MarketplaceProductScalarFieldEnum | MarketplaceProductScalarFieldEnum[]
  }

  /**
   * MarketplaceProduct findFirstOrThrow
   */
  export type MarketplaceProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceProduct to fetch.
     */
    where?: MarketplaceProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceProducts to fetch.
     */
    orderBy?: MarketplaceProductOrderByWithRelationInput | MarketplaceProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketplaceProducts.
     */
    cursor?: MarketplaceProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketplaceProducts.
     */
    distinct?: MarketplaceProductScalarFieldEnum | MarketplaceProductScalarFieldEnum[]
  }

  /**
   * MarketplaceProduct findMany
   */
  export type MarketplaceProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceProducts to fetch.
     */
    where?: MarketplaceProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceProducts to fetch.
     */
    orderBy?: MarketplaceProductOrderByWithRelationInput | MarketplaceProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketplaceProducts.
     */
    cursor?: MarketplaceProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceProducts.
     */
    skip?: number
    distinct?: MarketplaceProductScalarFieldEnum | MarketplaceProductScalarFieldEnum[]
  }

  /**
   * MarketplaceProduct create
   */
  export type MarketplaceProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * The data needed to create a MarketplaceProduct.
     */
    data: XOR<MarketplaceProductCreateInput, MarketplaceProductUncheckedCreateInput>
  }

  /**
   * MarketplaceProduct createMany
   */
  export type MarketplaceProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketplaceProducts.
     */
    data: MarketplaceProductCreateManyInput | MarketplaceProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketplaceProduct createManyAndReturn
   */
  export type MarketplaceProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * The data used to create many MarketplaceProducts.
     */
    data: MarketplaceProductCreateManyInput | MarketplaceProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketplaceProduct update
   */
  export type MarketplaceProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * The data needed to update a MarketplaceProduct.
     */
    data: XOR<MarketplaceProductUpdateInput, MarketplaceProductUncheckedUpdateInput>
    /**
     * Choose, which MarketplaceProduct to update.
     */
    where: MarketplaceProductWhereUniqueInput
  }

  /**
   * MarketplaceProduct updateMany
   */
  export type MarketplaceProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketplaceProducts.
     */
    data: XOR<MarketplaceProductUpdateManyMutationInput, MarketplaceProductUncheckedUpdateManyInput>
    /**
     * Filter which MarketplaceProducts to update
     */
    where?: MarketplaceProductWhereInput
    /**
     * Limit how many MarketplaceProducts to update.
     */
    limit?: number
  }

  /**
   * MarketplaceProduct updateManyAndReturn
   */
  export type MarketplaceProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * The data used to update MarketplaceProducts.
     */
    data: XOR<MarketplaceProductUpdateManyMutationInput, MarketplaceProductUncheckedUpdateManyInput>
    /**
     * Filter which MarketplaceProducts to update
     */
    where?: MarketplaceProductWhereInput
    /**
     * Limit how many MarketplaceProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketplaceProduct upsert
   */
  export type MarketplaceProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * The filter to search for the MarketplaceProduct to update in case it exists.
     */
    where: MarketplaceProductWhereUniqueInput
    /**
     * In case the MarketplaceProduct found by the `where` argument doesn't exist, create a new MarketplaceProduct with this data.
     */
    create: XOR<MarketplaceProductCreateInput, MarketplaceProductUncheckedCreateInput>
    /**
     * In case the MarketplaceProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketplaceProductUpdateInput, MarketplaceProductUncheckedUpdateInput>
  }

  /**
   * MarketplaceProduct delete
   */
  export type MarketplaceProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
    /**
     * Filter which MarketplaceProduct to delete.
     */
    where: MarketplaceProductWhereUniqueInput
  }

  /**
   * MarketplaceProduct deleteMany
   */
  export type MarketplaceProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketplaceProducts to delete
     */
    where?: MarketplaceProductWhereInput
    /**
     * Limit how many MarketplaceProducts to delete.
     */
    limit?: number
  }

  /**
   * MarketplaceProduct.orderItems
   */
  export type MarketplaceProduct$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * MarketplaceProduct.cartItems
   */
  export type MarketplaceProduct$cartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * MarketplaceProduct without action
   */
  export type MarketplaceProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceProduct
     */
    select?: MarketplaceProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceProduct
     */
    omit?: MarketplaceProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceProductInclude<ExtArgs> | null
  }


  /**
   * Model MarketplaceOrder
   */

  export type AggregateMarketplaceOrder = {
    _count: MarketplaceOrderCountAggregateOutputType | null
    _avg: MarketplaceOrderAvgAggregateOutputType | null
    _sum: MarketplaceOrderSumAggregateOutputType | null
    _min: MarketplaceOrderMinAggregateOutputType | null
    _max: MarketplaceOrderMaxAggregateOutputType | null
  }

  export type MarketplaceOrderAvgAggregateOutputType = {
    totalAmount: number | null
  }

  export type MarketplaceOrderSumAggregateOutputType = {
    totalAmount: number | null
  }

  export type MarketplaceOrderMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    reference: string | null
    totalAmount: number | null
    status: $Enums.OrderStatus | null
    paymentStatus: string | null
    shippingAddress: string | null
    trackingNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarketplaceOrderMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    reference: string | null
    totalAmount: number | null
    status: $Enums.OrderStatus | null
    paymentStatus: string | null
    shippingAddress: string | null
    trackingNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MarketplaceOrderCountAggregateOutputType = {
    id: number
    patientId: number
    reference: number
    totalAmount: number
    status: number
    paymentStatus: number
    shippingAddress: number
    trackingNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MarketplaceOrderAvgAggregateInputType = {
    totalAmount?: true
  }

  export type MarketplaceOrderSumAggregateInputType = {
    totalAmount?: true
  }

  export type MarketplaceOrderMinAggregateInputType = {
    id?: true
    patientId?: true
    reference?: true
    totalAmount?: true
    status?: true
    paymentStatus?: true
    shippingAddress?: true
    trackingNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarketplaceOrderMaxAggregateInputType = {
    id?: true
    patientId?: true
    reference?: true
    totalAmount?: true
    status?: true
    paymentStatus?: true
    shippingAddress?: true
    trackingNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MarketplaceOrderCountAggregateInputType = {
    id?: true
    patientId?: true
    reference?: true
    totalAmount?: true
    status?: true
    paymentStatus?: true
    shippingAddress?: true
    trackingNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MarketplaceOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketplaceOrder to aggregate.
     */
    where?: MarketplaceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceOrders to fetch.
     */
    orderBy?: MarketplaceOrderOrderByWithRelationInput | MarketplaceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketplaceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketplaceOrders
    **/
    _count?: true | MarketplaceOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketplaceOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketplaceOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketplaceOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketplaceOrderMaxAggregateInputType
  }

  export type GetMarketplaceOrderAggregateType<T extends MarketplaceOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketplaceOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketplaceOrder[P]>
      : GetScalarType<T[P], AggregateMarketplaceOrder[P]>
  }




  export type MarketplaceOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketplaceOrderWhereInput
    orderBy?: MarketplaceOrderOrderByWithAggregationInput | MarketplaceOrderOrderByWithAggregationInput[]
    by: MarketplaceOrderScalarFieldEnum[] | MarketplaceOrderScalarFieldEnum
    having?: MarketplaceOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketplaceOrderCountAggregateInputType | true
    _avg?: MarketplaceOrderAvgAggregateInputType
    _sum?: MarketplaceOrderSumAggregateInputType
    _min?: MarketplaceOrderMinAggregateInputType
    _max?: MarketplaceOrderMaxAggregateInputType
  }

  export type MarketplaceOrderGroupByOutputType = {
    id: string
    patientId: string
    reference: string
    totalAmount: number
    status: $Enums.OrderStatus
    paymentStatus: string | null
    shippingAddress: string | null
    trackingNumber: string | null
    createdAt: Date
    updatedAt: Date
    _count: MarketplaceOrderCountAggregateOutputType | null
    _avg: MarketplaceOrderAvgAggregateOutputType | null
    _sum: MarketplaceOrderSumAggregateOutputType | null
    _min: MarketplaceOrderMinAggregateOutputType | null
    _max: MarketplaceOrderMaxAggregateOutputType | null
  }

  type GetMarketplaceOrderGroupByPayload<T extends MarketplaceOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketplaceOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketplaceOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketplaceOrderGroupByOutputType[P]>
            : GetScalarType<T[P], MarketplaceOrderGroupByOutputType[P]>
        }
      >
    >


  export type MarketplaceOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    reference?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentStatus?: boolean
    shippingAddress?: boolean
    trackingNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    items?: boolean | MarketplaceOrder$itemsArgs<ExtArgs>
    _count?: boolean | MarketplaceOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceOrder"]>

  export type MarketplaceOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    reference?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentStatus?: boolean
    shippingAddress?: boolean
    trackingNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceOrder"]>

  export type MarketplaceOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    reference?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentStatus?: boolean
    shippingAddress?: boolean
    trackingNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketplaceOrder"]>

  export type MarketplaceOrderSelectScalar = {
    id?: boolean
    patientId?: boolean
    reference?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentStatus?: boolean
    shippingAddress?: boolean
    trackingNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MarketplaceOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "reference" | "totalAmount" | "status" | "paymentStatus" | "shippingAddress" | "trackingNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["marketplaceOrder"]>
  export type MarketplaceOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    items?: boolean | MarketplaceOrder$itemsArgs<ExtArgs>
    _count?: boolean | MarketplaceOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MarketplaceOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type MarketplaceOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $MarketplaceOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketplaceOrder"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      items: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      reference: string
      totalAmount: number
      status: $Enums.OrderStatus
      paymentStatus: string | null
      shippingAddress: string | null
      trackingNumber: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["marketplaceOrder"]>
    composites: {}
  }

  type MarketplaceOrderGetPayload<S extends boolean | null | undefined | MarketplaceOrderDefaultArgs> = $Result.GetResult<Prisma.$MarketplaceOrderPayload, S>

  type MarketplaceOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketplaceOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketplaceOrderCountAggregateInputType | true
    }

  export interface MarketplaceOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketplaceOrder'], meta: { name: 'MarketplaceOrder' } }
    /**
     * Find zero or one MarketplaceOrder that matches the filter.
     * @param {MarketplaceOrderFindUniqueArgs} args - Arguments to find a MarketplaceOrder
     * @example
     * // Get one MarketplaceOrder
     * const marketplaceOrder = await prisma.marketplaceOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketplaceOrderFindUniqueArgs>(args: SelectSubset<T, MarketplaceOrderFindUniqueArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketplaceOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketplaceOrderFindUniqueOrThrowArgs} args - Arguments to find a MarketplaceOrder
     * @example
     * // Get one MarketplaceOrder
     * const marketplaceOrder = await prisma.marketplaceOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketplaceOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketplaceOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketplaceOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceOrderFindFirstArgs} args - Arguments to find a MarketplaceOrder
     * @example
     * // Get one MarketplaceOrder
     * const marketplaceOrder = await prisma.marketplaceOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketplaceOrderFindFirstArgs>(args?: SelectSubset<T, MarketplaceOrderFindFirstArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketplaceOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceOrderFindFirstOrThrowArgs} args - Arguments to find a MarketplaceOrder
     * @example
     * // Get one MarketplaceOrder
     * const marketplaceOrder = await prisma.marketplaceOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketplaceOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketplaceOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketplaceOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketplaceOrders
     * const marketplaceOrders = await prisma.marketplaceOrder.findMany()
     * 
     * // Get first 10 MarketplaceOrders
     * const marketplaceOrders = await prisma.marketplaceOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketplaceOrderWithIdOnly = await prisma.marketplaceOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketplaceOrderFindManyArgs>(args?: SelectSubset<T, MarketplaceOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketplaceOrder.
     * @param {MarketplaceOrderCreateArgs} args - Arguments to create a MarketplaceOrder.
     * @example
     * // Create one MarketplaceOrder
     * const MarketplaceOrder = await prisma.marketplaceOrder.create({
     *   data: {
     *     // ... data to create a MarketplaceOrder
     *   }
     * })
     * 
     */
    create<T extends MarketplaceOrderCreateArgs>(args: SelectSubset<T, MarketplaceOrderCreateArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketplaceOrders.
     * @param {MarketplaceOrderCreateManyArgs} args - Arguments to create many MarketplaceOrders.
     * @example
     * // Create many MarketplaceOrders
     * const marketplaceOrder = await prisma.marketplaceOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketplaceOrderCreateManyArgs>(args?: SelectSubset<T, MarketplaceOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketplaceOrders and returns the data saved in the database.
     * @param {MarketplaceOrderCreateManyAndReturnArgs} args - Arguments to create many MarketplaceOrders.
     * @example
     * // Create many MarketplaceOrders
     * const marketplaceOrder = await prisma.marketplaceOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketplaceOrders and only return the `id`
     * const marketplaceOrderWithIdOnly = await prisma.marketplaceOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketplaceOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketplaceOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketplaceOrder.
     * @param {MarketplaceOrderDeleteArgs} args - Arguments to delete one MarketplaceOrder.
     * @example
     * // Delete one MarketplaceOrder
     * const MarketplaceOrder = await prisma.marketplaceOrder.delete({
     *   where: {
     *     // ... filter to delete one MarketplaceOrder
     *   }
     * })
     * 
     */
    delete<T extends MarketplaceOrderDeleteArgs>(args: SelectSubset<T, MarketplaceOrderDeleteArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketplaceOrder.
     * @param {MarketplaceOrderUpdateArgs} args - Arguments to update one MarketplaceOrder.
     * @example
     * // Update one MarketplaceOrder
     * const marketplaceOrder = await prisma.marketplaceOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketplaceOrderUpdateArgs>(args: SelectSubset<T, MarketplaceOrderUpdateArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketplaceOrders.
     * @param {MarketplaceOrderDeleteManyArgs} args - Arguments to filter MarketplaceOrders to delete.
     * @example
     * // Delete a few MarketplaceOrders
     * const { count } = await prisma.marketplaceOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketplaceOrderDeleteManyArgs>(args?: SelectSubset<T, MarketplaceOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketplaceOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketplaceOrders
     * const marketplaceOrder = await prisma.marketplaceOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketplaceOrderUpdateManyArgs>(args: SelectSubset<T, MarketplaceOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketplaceOrders and returns the data updated in the database.
     * @param {MarketplaceOrderUpdateManyAndReturnArgs} args - Arguments to update many MarketplaceOrders.
     * @example
     * // Update many MarketplaceOrders
     * const marketplaceOrder = await prisma.marketplaceOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketplaceOrders and only return the `id`
     * const marketplaceOrderWithIdOnly = await prisma.marketplaceOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketplaceOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketplaceOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketplaceOrder.
     * @param {MarketplaceOrderUpsertArgs} args - Arguments to update or create a MarketplaceOrder.
     * @example
     * // Update or create a MarketplaceOrder
     * const marketplaceOrder = await prisma.marketplaceOrder.upsert({
     *   create: {
     *     // ... data to create a MarketplaceOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketplaceOrder we want to update
     *   }
     * })
     */
    upsert<T extends MarketplaceOrderUpsertArgs>(args: SelectSubset<T, MarketplaceOrderUpsertArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketplaceOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceOrderCountArgs} args - Arguments to filter MarketplaceOrders to count.
     * @example
     * // Count the number of MarketplaceOrders
     * const count = await prisma.marketplaceOrder.count({
     *   where: {
     *     // ... the filter for the MarketplaceOrders we want to count
     *   }
     * })
    **/
    count<T extends MarketplaceOrderCountArgs>(
      args?: Subset<T, MarketplaceOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketplaceOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketplaceOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketplaceOrderAggregateArgs>(args: Subset<T, MarketplaceOrderAggregateArgs>): Prisma.PrismaPromise<GetMarketplaceOrderAggregateType<T>>

    /**
     * Group by MarketplaceOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketplaceOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketplaceOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketplaceOrderGroupByArgs['orderBy'] }
        : { orderBy?: MarketplaceOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketplaceOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketplaceOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketplaceOrder model
   */
  readonly fields: MarketplaceOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketplaceOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketplaceOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends MarketplaceOrder$itemsArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceOrder$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketplaceOrder model
   */
  interface MarketplaceOrderFieldRefs {
    readonly id: FieldRef<"MarketplaceOrder", 'String'>
    readonly patientId: FieldRef<"MarketplaceOrder", 'String'>
    readonly reference: FieldRef<"MarketplaceOrder", 'String'>
    readonly totalAmount: FieldRef<"MarketplaceOrder", 'Float'>
    readonly status: FieldRef<"MarketplaceOrder", 'OrderStatus'>
    readonly paymentStatus: FieldRef<"MarketplaceOrder", 'String'>
    readonly shippingAddress: FieldRef<"MarketplaceOrder", 'String'>
    readonly trackingNumber: FieldRef<"MarketplaceOrder", 'String'>
    readonly createdAt: FieldRef<"MarketplaceOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"MarketplaceOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MarketplaceOrder findUnique
   */
  export type MarketplaceOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceOrder to fetch.
     */
    where: MarketplaceOrderWhereUniqueInput
  }

  /**
   * MarketplaceOrder findUniqueOrThrow
   */
  export type MarketplaceOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceOrder to fetch.
     */
    where: MarketplaceOrderWhereUniqueInput
  }

  /**
   * MarketplaceOrder findFirst
   */
  export type MarketplaceOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceOrder to fetch.
     */
    where?: MarketplaceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceOrders to fetch.
     */
    orderBy?: MarketplaceOrderOrderByWithRelationInput | MarketplaceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketplaceOrders.
     */
    cursor?: MarketplaceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketplaceOrders.
     */
    distinct?: MarketplaceOrderScalarFieldEnum | MarketplaceOrderScalarFieldEnum[]
  }

  /**
   * MarketplaceOrder findFirstOrThrow
   */
  export type MarketplaceOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceOrder to fetch.
     */
    where?: MarketplaceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceOrders to fetch.
     */
    orderBy?: MarketplaceOrderOrderByWithRelationInput | MarketplaceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketplaceOrders.
     */
    cursor?: MarketplaceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketplaceOrders.
     */
    distinct?: MarketplaceOrderScalarFieldEnum | MarketplaceOrderScalarFieldEnum[]
  }

  /**
   * MarketplaceOrder findMany
   */
  export type MarketplaceOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * Filter, which MarketplaceOrders to fetch.
     */
    where?: MarketplaceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketplaceOrders to fetch.
     */
    orderBy?: MarketplaceOrderOrderByWithRelationInput | MarketplaceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketplaceOrders.
     */
    cursor?: MarketplaceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketplaceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketplaceOrders.
     */
    skip?: number
    distinct?: MarketplaceOrderScalarFieldEnum | MarketplaceOrderScalarFieldEnum[]
  }

  /**
   * MarketplaceOrder create
   */
  export type MarketplaceOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a MarketplaceOrder.
     */
    data: XOR<MarketplaceOrderCreateInput, MarketplaceOrderUncheckedCreateInput>
  }

  /**
   * MarketplaceOrder createMany
   */
  export type MarketplaceOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketplaceOrders.
     */
    data: MarketplaceOrderCreateManyInput | MarketplaceOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketplaceOrder createManyAndReturn
   */
  export type MarketplaceOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * The data used to create many MarketplaceOrders.
     */
    data: MarketplaceOrderCreateManyInput | MarketplaceOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketplaceOrder update
   */
  export type MarketplaceOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a MarketplaceOrder.
     */
    data: XOR<MarketplaceOrderUpdateInput, MarketplaceOrderUncheckedUpdateInput>
    /**
     * Choose, which MarketplaceOrder to update.
     */
    where: MarketplaceOrderWhereUniqueInput
  }

  /**
   * MarketplaceOrder updateMany
   */
  export type MarketplaceOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketplaceOrders.
     */
    data: XOR<MarketplaceOrderUpdateManyMutationInput, MarketplaceOrderUncheckedUpdateManyInput>
    /**
     * Filter which MarketplaceOrders to update
     */
    where?: MarketplaceOrderWhereInput
    /**
     * Limit how many MarketplaceOrders to update.
     */
    limit?: number
  }

  /**
   * MarketplaceOrder updateManyAndReturn
   */
  export type MarketplaceOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * The data used to update MarketplaceOrders.
     */
    data: XOR<MarketplaceOrderUpdateManyMutationInput, MarketplaceOrderUncheckedUpdateManyInput>
    /**
     * Filter which MarketplaceOrders to update
     */
    where?: MarketplaceOrderWhereInput
    /**
     * Limit how many MarketplaceOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketplaceOrder upsert
   */
  export type MarketplaceOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the MarketplaceOrder to update in case it exists.
     */
    where: MarketplaceOrderWhereUniqueInput
    /**
     * In case the MarketplaceOrder found by the `where` argument doesn't exist, create a new MarketplaceOrder with this data.
     */
    create: XOR<MarketplaceOrderCreateInput, MarketplaceOrderUncheckedCreateInput>
    /**
     * In case the MarketplaceOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketplaceOrderUpdateInput, MarketplaceOrderUncheckedUpdateInput>
  }

  /**
   * MarketplaceOrder delete
   */
  export type MarketplaceOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
    /**
     * Filter which MarketplaceOrder to delete.
     */
    where: MarketplaceOrderWhereUniqueInput
  }

  /**
   * MarketplaceOrder deleteMany
   */
  export type MarketplaceOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketplaceOrders to delete
     */
    where?: MarketplaceOrderWhereInput
    /**
     * Limit how many MarketplaceOrders to delete.
     */
    limit?: number
  }

  /**
   * MarketplaceOrder.items
   */
  export type MarketplaceOrder$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * MarketplaceOrder without action
   */
  export type MarketplaceOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketplaceOrder
     */
    select?: MarketplaceOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketplaceOrder
     */
    omit?: MarketplaceOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketplaceOrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
    prescriptionId: string | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    productId: string | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
    prescriptionId: string | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    prescriptionId?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    prescriptionId?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    prescriptionId?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: string
    orderId: string
    productId: string
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId: string | null
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    prescriptionId?: boolean
    order?: boolean | MarketplaceOrderDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
    prescription?: boolean | OrderItem$prescriptionArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    prescriptionId?: boolean
    order?: boolean | MarketplaceOrderDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
    prescription?: boolean | OrderItem$prescriptionArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    prescriptionId?: boolean
    order?: boolean | MarketplaceOrderDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
    prescription?: boolean | OrderItem$prescriptionArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>

  export type OrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    prescriptionId?: boolean
  }

  export type OrderItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "productId" | "quantity" | "unitPrice" | "totalPrice" | "prescriptionId", ExtArgs["result"]["orderItem"]>
  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | MarketplaceOrderDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
    prescription?: boolean | OrderItem$prescriptionArgs<ExtArgs>
  }
  export type OrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | MarketplaceOrderDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
    prescription?: boolean | OrderItem$prescriptionArgs<ExtArgs>
  }
  export type OrderItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | MarketplaceOrderDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
    prescription?: boolean | OrderItem$prescriptionArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$MarketplaceOrderPayload<ExtArgs>
      product: Prisma.$MarketplaceProductPayload<ExtArgs>
      prescription: Prisma.$PrescriptionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      productId: string
      quantity: number
      unitPrice: number
      totalPrice: number
      prescriptionId: string | null
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderItems and returns the data saved in the database.
     * @param {OrderItemCreateManyAndReturnArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems and returns the data updated in the database.
     * @param {OrderItemUpdateManyAndReturnArgs} args - Arguments to update many OrderItems.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderItems and only return the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderItemUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends MarketplaceOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceOrderDefaultArgs<ExtArgs>>): Prisma__MarketplaceOrderClient<$Result.GetResult<Prisma.$MarketplaceOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends MarketplaceProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceProductDefaultArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    prescription<T extends OrderItem$prescriptionArgs<ExtArgs> = {}>(args?: Subset<T, OrderItem$prescriptionArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'String'>
    readonly orderId: FieldRef<"OrderItem", 'String'>
    readonly productId: FieldRef<"OrderItem", 'String'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
    readonly unitPrice: FieldRef<"OrderItem", 'Float'>
    readonly totalPrice: FieldRef<"OrderItem", 'Float'>
    readonly prescriptionId: FieldRef<"OrderItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem createManyAndReturn
   */
  export type OrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
  }

  /**
   * OrderItem updateManyAndReturn
   */
  export type OrderItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
    /**
     * Limit how many OrderItems to delete.
     */
    limit?: number
  }

  /**
   * OrderItem.prescription
   */
  export type OrderItem$prescriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    where?: PrescriptionWhereInput
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model CartItem
   */

  export type AggregateCartItem = {
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  export type CartItemAvgAggregateOutputType = {
    quantity: number | null
  }

  export type CartItemSumAggregateOutputType = {
    quantity: number | null
  }

  export type CartItemMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    productId: string | null
    quantity: number | null
    addedAt: Date | null
  }

  export type CartItemMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    productId: string | null
    quantity: number | null
    addedAt: Date | null
  }

  export type CartItemCountAggregateOutputType = {
    id: number
    patientId: number
    productId: number
    quantity: number
    addedAt: number
    _all: number
  }


  export type CartItemAvgAggregateInputType = {
    quantity?: true
  }

  export type CartItemSumAggregateInputType = {
    quantity?: true
  }

  export type CartItemMinAggregateInputType = {
    id?: true
    patientId?: true
    productId?: true
    quantity?: true
    addedAt?: true
  }

  export type CartItemMaxAggregateInputType = {
    id?: true
    patientId?: true
    productId?: true
    quantity?: true
    addedAt?: true
  }

  export type CartItemCountAggregateInputType = {
    id?: true
    patientId?: true
    productId?: true
    quantity?: true
    addedAt?: true
    _all?: true
  }

  export type CartItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItem to aggregate.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartItems
    **/
    _count?: true | CartItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartItemMaxAggregateInputType
  }

  export type GetCartItemAggregateType<T extends CartItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCartItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartItem[P]>
      : GetScalarType<T[P], AggregateCartItem[P]>
  }




  export type CartItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithAggregationInput | CartItemOrderByWithAggregationInput[]
    by: CartItemScalarFieldEnum[] | CartItemScalarFieldEnum
    having?: CartItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartItemCountAggregateInputType | true
    _avg?: CartItemAvgAggregateInputType
    _sum?: CartItemSumAggregateInputType
    _min?: CartItemMinAggregateInputType
    _max?: CartItemMaxAggregateInputType
  }

  export type CartItemGroupByOutputType = {
    id: string
    patientId: string
    productId: string
    quantity: number
    addedAt: Date
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  type GetCartItemGroupByPayload<T extends CartItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartItemGroupByOutputType[P]>
            : GetScalarType<T[P], CartItemGroupByOutputType[P]>
        }
      >
    >


  export type CartItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    productId?: boolean
    quantity?: boolean
    addedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    productId?: boolean
    quantity?: boolean
    addedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    productId?: boolean
    quantity?: boolean
    addedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectScalar = {
    id?: boolean
    patientId?: boolean
    productId?: boolean
    quantity?: boolean
    addedAt?: boolean
  }

  export type CartItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "productId" | "quantity" | "addedAt", ExtArgs["result"]["cartItem"]>
  export type CartItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
  }
  export type CartItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
  }
  export type CartItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    product?: boolean | MarketplaceProductDefaultArgs<ExtArgs>
  }

  export type $CartItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartItem"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      product: Prisma.$MarketplaceProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      productId: string
      quantity: number
      addedAt: Date
    }, ExtArgs["result"]["cartItem"]>
    composites: {}
  }

  type CartItemGetPayload<S extends boolean | null | undefined | CartItemDefaultArgs> = $Result.GetResult<Prisma.$CartItemPayload, S>

  type CartItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartItemCountAggregateInputType | true
    }

  export interface CartItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartItem'], meta: { name: 'CartItem' } }
    /**
     * Find zero or one CartItem that matches the filter.
     * @param {CartItemFindUniqueArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartItemFindUniqueArgs>(args: SelectSubset<T, CartItemFindUniqueArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CartItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartItemFindUniqueOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CartItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CartItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartItemFindFirstArgs>(args?: SelectSubset<T, CartItemFindFirstArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CartItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CartItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartItems
     * const cartItems = await prisma.cartItem.findMany()
     * 
     * // Get first 10 CartItems
     * const cartItems = await prisma.cartItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartItemFindManyArgs>(args?: SelectSubset<T, CartItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CartItem.
     * @param {CartItemCreateArgs} args - Arguments to create a CartItem.
     * @example
     * // Create one CartItem
     * const CartItem = await prisma.cartItem.create({
     *   data: {
     *     // ... data to create a CartItem
     *   }
     * })
     * 
     */
    create<T extends CartItemCreateArgs>(args: SelectSubset<T, CartItemCreateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CartItems.
     * @param {CartItemCreateManyArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartItemCreateManyArgs>(args?: SelectSubset<T, CartItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartItems and returns the data saved in the database.
     * @param {CartItemCreateManyAndReturnArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CartItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CartItem.
     * @param {CartItemDeleteArgs} args - Arguments to delete one CartItem.
     * @example
     * // Delete one CartItem
     * const CartItem = await prisma.cartItem.delete({
     *   where: {
     *     // ... filter to delete one CartItem
     *   }
     * })
     * 
     */
    delete<T extends CartItemDeleteArgs>(args: SelectSubset<T, CartItemDeleteArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CartItem.
     * @param {CartItemUpdateArgs} args - Arguments to update one CartItem.
     * @example
     * // Update one CartItem
     * const cartItem = await prisma.cartItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartItemUpdateArgs>(args: SelectSubset<T, CartItemUpdateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CartItems.
     * @param {CartItemDeleteManyArgs} args - Arguments to filter CartItems to delete.
     * @example
     * // Delete a few CartItems
     * const { count } = await prisma.cartItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartItemDeleteManyArgs>(args?: SelectSubset<T, CartItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartItemUpdateManyArgs>(args: SelectSubset<T, CartItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems and returns the data updated in the database.
     * @param {CartItemUpdateManyAndReturnArgs} args - Arguments to update many CartItems.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CartItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CartItem.
     * @param {CartItemUpsertArgs} args - Arguments to update or create a CartItem.
     * @example
     * // Update or create a CartItem
     * const cartItem = await prisma.cartItem.upsert({
     *   create: {
     *     // ... data to create a CartItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartItem we want to update
     *   }
     * })
     */
    upsert<T extends CartItemUpsertArgs>(args: SelectSubset<T, CartItemUpsertArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemCountArgs} args - Arguments to filter CartItems to count.
     * @example
     * // Count the number of CartItems
     * const count = await prisma.cartItem.count({
     *   where: {
     *     // ... the filter for the CartItems we want to count
     *   }
     * })
    **/
    count<T extends CartItemCountArgs>(
      args?: Subset<T, CartItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartItemAggregateArgs>(args: Subset<T, CartItemAggregateArgs>): Prisma.PrismaPromise<GetCartItemAggregateType<T>>

    /**
     * Group by CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartItemGroupByArgs['orderBy'] }
        : { orderBy?: CartItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartItem model
   */
  readonly fields: CartItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends MarketplaceProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceProductDefaultArgs<ExtArgs>>): Prisma__MarketplaceProductClient<$Result.GetResult<Prisma.$MarketplaceProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartItem model
   */
  interface CartItemFieldRefs {
    readonly id: FieldRef<"CartItem", 'String'>
    readonly patientId: FieldRef<"CartItem", 'String'>
    readonly productId: FieldRef<"CartItem", 'String'>
    readonly quantity: FieldRef<"CartItem", 'Int'>
    readonly addedAt: FieldRef<"CartItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CartItem findUnique
   */
  export type CartItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findUniqueOrThrow
   */
  export type CartItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findFirst
   */
  export type CartItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findFirstOrThrow
   */
  export type CartItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findMany
   */
  export type CartItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItems to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem create
   */
  export type CartItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CartItem.
     */
    data: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
  }

  /**
   * CartItem createMany
   */
  export type CartItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartItem createManyAndReturn
   */
  export type CartItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem update
   */
  export type CartItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CartItem.
     */
    data: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
    /**
     * Choose, which CartItem to update.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem updateMany
   */
  export type CartItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
  }

  /**
   * CartItem updateManyAndReturn
   */
  export type CartItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem upsert
   */
  export type CartItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CartItem to update in case it exists.
     */
    where: CartItemWhereUniqueInput
    /**
     * In case the CartItem found by the `where` argument doesn't exist, create a new CartItem with this data.
     */
    create: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
    /**
     * In case the CartItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
  }

  /**
   * CartItem delete
   */
  export type CartItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter which CartItem to delete.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem deleteMany
   */
  export type CartItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItems to delete
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to delete.
     */
    limit?: number
  }

  /**
   * CartItem without action
   */
  export type CartItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
  }


  /**
   * Model SavedVendor
   */

  export type AggregateSavedVendor = {
    _count: SavedVendorCountAggregateOutputType | null
    _min: SavedVendorMinAggregateOutputType | null
    _max: SavedVendorMaxAggregateOutputType | null
  }

  export type SavedVendorMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    vendorId: string | null
    savedAt: Date | null
  }

  export type SavedVendorMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    vendorId: string | null
    savedAt: Date | null
  }

  export type SavedVendorCountAggregateOutputType = {
    id: number
    patientId: number
    vendorId: number
    savedAt: number
    _all: number
  }


  export type SavedVendorMinAggregateInputType = {
    id?: true
    patientId?: true
    vendorId?: true
    savedAt?: true
  }

  export type SavedVendorMaxAggregateInputType = {
    id?: true
    patientId?: true
    vendorId?: true
    savedAt?: true
  }

  export type SavedVendorCountAggregateInputType = {
    id?: true
    patientId?: true
    vendorId?: true
    savedAt?: true
    _all?: true
  }

  export type SavedVendorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedVendor to aggregate.
     */
    where?: SavedVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedVendors to fetch.
     */
    orderBy?: SavedVendorOrderByWithRelationInput | SavedVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedVendors
    **/
    _count?: true | SavedVendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedVendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedVendorMaxAggregateInputType
  }

  export type GetSavedVendorAggregateType<T extends SavedVendorAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedVendor[P]>
      : GetScalarType<T[P], AggregateSavedVendor[P]>
  }




  export type SavedVendorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedVendorWhereInput
    orderBy?: SavedVendorOrderByWithAggregationInput | SavedVendorOrderByWithAggregationInput[]
    by: SavedVendorScalarFieldEnum[] | SavedVendorScalarFieldEnum
    having?: SavedVendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedVendorCountAggregateInputType | true
    _min?: SavedVendorMinAggregateInputType
    _max?: SavedVendorMaxAggregateInputType
  }

  export type SavedVendorGroupByOutputType = {
    id: string
    patientId: string
    vendorId: string
    savedAt: Date
    _count: SavedVendorCountAggregateOutputType | null
    _min: SavedVendorMinAggregateOutputType | null
    _max: SavedVendorMaxAggregateOutputType | null
  }

  type GetSavedVendorGroupByPayload<T extends SavedVendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedVendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedVendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedVendorGroupByOutputType[P]>
            : GetScalarType<T[P], SavedVendorGroupByOutputType[P]>
        }
      >
    >


  export type SavedVendorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    vendorId?: boolean
    savedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedVendor"]>

  export type SavedVendorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    vendorId?: boolean
    savedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedVendor"]>

  export type SavedVendorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    vendorId?: boolean
    savedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedVendor"]>

  export type SavedVendorSelectScalar = {
    id?: boolean
    patientId?: boolean
    vendorId?: boolean
    savedAt?: boolean
  }

  export type SavedVendorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "vendorId" | "savedAt", ExtArgs["result"]["savedVendor"]>
  export type SavedVendorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }
  export type SavedVendorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }
  export type SavedVendorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    vendor?: boolean | MarketplaceVendorDefaultArgs<ExtArgs>
  }

  export type $SavedVendorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SavedVendor"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      vendor: Prisma.$MarketplaceVendorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      vendorId: string
      savedAt: Date
    }, ExtArgs["result"]["savedVendor"]>
    composites: {}
  }

  type SavedVendorGetPayload<S extends boolean | null | undefined | SavedVendorDefaultArgs> = $Result.GetResult<Prisma.$SavedVendorPayload, S>

  type SavedVendorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SavedVendorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SavedVendorCountAggregateInputType | true
    }

  export interface SavedVendorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedVendor'], meta: { name: 'SavedVendor' } }
    /**
     * Find zero or one SavedVendor that matches the filter.
     * @param {SavedVendorFindUniqueArgs} args - Arguments to find a SavedVendor
     * @example
     * // Get one SavedVendor
     * const savedVendor = await prisma.savedVendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SavedVendorFindUniqueArgs>(args: SelectSubset<T, SavedVendorFindUniqueArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SavedVendor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SavedVendorFindUniqueOrThrowArgs} args - Arguments to find a SavedVendor
     * @example
     * // Get one SavedVendor
     * const savedVendor = await prisma.savedVendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SavedVendorFindUniqueOrThrowArgs>(args: SelectSubset<T, SavedVendorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedVendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedVendorFindFirstArgs} args - Arguments to find a SavedVendor
     * @example
     * // Get one SavedVendor
     * const savedVendor = await prisma.savedVendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SavedVendorFindFirstArgs>(args?: SelectSubset<T, SavedVendorFindFirstArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedVendor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedVendorFindFirstOrThrowArgs} args - Arguments to find a SavedVendor
     * @example
     * // Get one SavedVendor
     * const savedVendor = await prisma.savedVendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SavedVendorFindFirstOrThrowArgs>(args?: SelectSubset<T, SavedVendorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SavedVendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedVendorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedVendors
     * const savedVendors = await prisma.savedVendor.findMany()
     * 
     * // Get first 10 SavedVendors
     * const savedVendors = await prisma.savedVendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedVendorWithIdOnly = await prisma.savedVendor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SavedVendorFindManyArgs>(args?: SelectSubset<T, SavedVendorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SavedVendor.
     * @param {SavedVendorCreateArgs} args - Arguments to create a SavedVendor.
     * @example
     * // Create one SavedVendor
     * const SavedVendor = await prisma.savedVendor.create({
     *   data: {
     *     // ... data to create a SavedVendor
     *   }
     * })
     * 
     */
    create<T extends SavedVendorCreateArgs>(args: SelectSubset<T, SavedVendorCreateArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SavedVendors.
     * @param {SavedVendorCreateManyArgs} args - Arguments to create many SavedVendors.
     * @example
     * // Create many SavedVendors
     * const savedVendor = await prisma.savedVendor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SavedVendorCreateManyArgs>(args?: SelectSubset<T, SavedVendorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SavedVendors and returns the data saved in the database.
     * @param {SavedVendorCreateManyAndReturnArgs} args - Arguments to create many SavedVendors.
     * @example
     * // Create many SavedVendors
     * const savedVendor = await prisma.savedVendor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SavedVendors and only return the `id`
     * const savedVendorWithIdOnly = await prisma.savedVendor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SavedVendorCreateManyAndReturnArgs>(args?: SelectSubset<T, SavedVendorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SavedVendor.
     * @param {SavedVendorDeleteArgs} args - Arguments to delete one SavedVendor.
     * @example
     * // Delete one SavedVendor
     * const SavedVendor = await prisma.savedVendor.delete({
     *   where: {
     *     // ... filter to delete one SavedVendor
     *   }
     * })
     * 
     */
    delete<T extends SavedVendorDeleteArgs>(args: SelectSubset<T, SavedVendorDeleteArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SavedVendor.
     * @param {SavedVendorUpdateArgs} args - Arguments to update one SavedVendor.
     * @example
     * // Update one SavedVendor
     * const savedVendor = await prisma.savedVendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SavedVendorUpdateArgs>(args: SelectSubset<T, SavedVendorUpdateArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SavedVendors.
     * @param {SavedVendorDeleteManyArgs} args - Arguments to filter SavedVendors to delete.
     * @example
     * // Delete a few SavedVendors
     * const { count } = await prisma.savedVendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SavedVendorDeleteManyArgs>(args?: SelectSubset<T, SavedVendorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedVendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedVendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedVendors
     * const savedVendor = await prisma.savedVendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SavedVendorUpdateManyArgs>(args: SelectSubset<T, SavedVendorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedVendors and returns the data updated in the database.
     * @param {SavedVendorUpdateManyAndReturnArgs} args - Arguments to update many SavedVendors.
     * @example
     * // Update many SavedVendors
     * const savedVendor = await prisma.savedVendor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SavedVendors and only return the `id`
     * const savedVendorWithIdOnly = await prisma.savedVendor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SavedVendorUpdateManyAndReturnArgs>(args: SelectSubset<T, SavedVendorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SavedVendor.
     * @param {SavedVendorUpsertArgs} args - Arguments to update or create a SavedVendor.
     * @example
     * // Update or create a SavedVendor
     * const savedVendor = await prisma.savedVendor.upsert({
     *   create: {
     *     // ... data to create a SavedVendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedVendor we want to update
     *   }
     * })
     */
    upsert<T extends SavedVendorUpsertArgs>(args: SelectSubset<T, SavedVendorUpsertArgs<ExtArgs>>): Prisma__SavedVendorClient<$Result.GetResult<Prisma.$SavedVendorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SavedVendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedVendorCountArgs} args - Arguments to filter SavedVendors to count.
     * @example
     * // Count the number of SavedVendors
     * const count = await prisma.savedVendor.count({
     *   where: {
     *     // ... the filter for the SavedVendors we want to count
     *   }
     * })
    **/
    count<T extends SavedVendorCountArgs>(
      args?: Subset<T, SavedVendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedVendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedVendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedVendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedVendorAggregateArgs>(args: Subset<T, SavedVendorAggregateArgs>): Prisma.PrismaPromise<GetSavedVendorAggregateType<T>>

    /**
     * Group by SavedVendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedVendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedVendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedVendorGroupByArgs['orderBy'] }
        : { orderBy?: SavedVendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedVendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SavedVendor model
   */
  readonly fields: SavedVendorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedVendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SavedVendorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    vendor<T extends MarketplaceVendorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MarketplaceVendorDefaultArgs<ExtArgs>>): Prisma__MarketplaceVendorClient<$Result.GetResult<Prisma.$MarketplaceVendorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SavedVendor model
   */
  interface SavedVendorFieldRefs {
    readonly id: FieldRef<"SavedVendor", 'String'>
    readonly patientId: FieldRef<"SavedVendor", 'String'>
    readonly vendorId: FieldRef<"SavedVendor", 'String'>
    readonly savedAt: FieldRef<"SavedVendor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SavedVendor findUnique
   */
  export type SavedVendorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * Filter, which SavedVendor to fetch.
     */
    where: SavedVendorWhereUniqueInput
  }

  /**
   * SavedVendor findUniqueOrThrow
   */
  export type SavedVendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * Filter, which SavedVendor to fetch.
     */
    where: SavedVendorWhereUniqueInput
  }

  /**
   * SavedVendor findFirst
   */
  export type SavedVendorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * Filter, which SavedVendor to fetch.
     */
    where?: SavedVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedVendors to fetch.
     */
    orderBy?: SavedVendorOrderByWithRelationInput | SavedVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedVendors.
     */
    cursor?: SavedVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedVendors.
     */
    distinct?: SavedVendorScalarFieldEnum | SavedVendorScalarFieldEnum[]
  }

  /**
   * SavedVendor findFirstOrThrow
   */
  export type SavedVendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * Filter, which SavedVendor to fetch.
     */
    where?: SavedVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedVendors to fetch.
     */
    orderBy?: SavedVendorOrderByWithRelationInput | SavedVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedVendors.
     */
    cursor?: SavedVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedVendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedVendors.
     */
    distinct?: SavedVendorScalarFieldEnum | SavedVendorScalarFieldEnum[]
  }

  /**
   * SavedVendor findMany
   */
  export type SavedVendorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * Filter, which SavedVendors to fetch.
     */
    where?: SavedVendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedVendors to fetch.
     */
    orderBy?: SavedVendorOrderByWithRelationInput | SavedVendorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedVendors.
     */
    cursor?: SavedVendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedVendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedVendors.
     */
    skip?: number
    distinct?: SavedVendorScalarFieldEnum | SavedVendorScalarFieldEnum[]
  }

  /**
   * SavedVendor create
   */
  export type SavedVendorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedVendor.
     */
    data: XOR<SavedVendorCreateInput, SavedVendorUncheckedCreateInput>
  }

  /**
   * SavedVendor createMany
   */
  export type SavedVendorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedVendors.
     */
    data: SavedVendorCreateManyInput | SavedVendorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SavedVendor createManyAndReturn
   */
  export type SavedVendorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * The data used to create many SavedVendors.
     */
    data: SavedVendorCreateManyInput | SavedVendorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedVendor update
   */
  export type SavedVendorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedVendor.
     */
    data: XOR<SavedVendorUpdateInput, SavedVendorUncheckedUpdateInput>
    /**
     * Choose, which SavedVendor to update.
     */
    where: SavedVendorWhereUniqueInput
  }

  /**
   * SavedVendor updateMany
   */
  export type SavedVendorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedVendors.
     */
    data: XOR<SavedVendorUpdateManyMutationInput, SavedVendorUncheckedUpdateManyInput>
    /**
     * Filter which SavedVendors to update
     */
    where?: SavedVendorWhereInput
    /**
     * Limit how many SavedVendors to update.
     */
    limit?: number
  }

  /**
   * SavedVendor updateManyAndReturn
   */
  export type SavedVendorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * The data used to update SavedVendors.
     */
    data: XOR<SavedVendorUpdateManyMutationInput, SavedVendorUncheckedUpdateManyInput>
    /**
     * Filter which SavedVendors to update
     */
    where?: SavedVendorWhereInput
    /**
     * Limit how many SavedVendors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedVendor upsert
   */
  export type SavedVendorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedVendor to update in case it exists.
     */
    where: SavedVendorWhereUniqueInput
    /**
     * In case the SavedVendor found by the `where` argument doesn't exist, create a new SavedVendor with this data.
     */
    create: XOR<SavedVendorCreateInput, SavedVendorUncheckedCreateInput>
    /**
     * In case the SavedVendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedVendorUpdateInput, SavedVendorUncheckedUpdateInput>
  }

  /**
   * SavedVendor delete
   */
  export type SavedVendorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
    /**
     * Filter which SavedVendor to delete.
     */
    where: SavedVendorWhereUniqueInput
  }

  /**
   * SavedVendor deleteMany
   */
  export type SavedVendorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedVendors to delete
     */
    where?: SavedVendorWhereInput
    /**
     * Limit how many SavedVendors to delete.
     */
    limit?: number
  }

  /**
   * SavedVendor without action
   */
  export type SavedVendorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedVendor
     */
    select?: SavedVendorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedVendor
     */
    omit?: SavedVendorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedVendorInclude<ExtArgs> | null
  }


  /**
   * Model Prescription
   */

  export type AggregatePrescription = {
    _count: PrescriptionCountAggregateOutputType | null
    _avg: PrescriptionAvgAggregateOutputType | null
    _sum: PrescriptionSumAggregateOutputType | null
    _min: PrescriptionMinAggregateOutputType | null
    _max: PrescriptionMaxAggregateOutputType | null
  }

  export type PrescriptionAvgAggregateOutputType = {
    refills: number | null
    refillsUsed: number | null
  }

  export type PrescriptionSumAggregateOutputType = {
    refills: number | null
    refillsUsed: number | null
  }

  export type PrescriptionMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    hospitalId: string | null
    dosageInstructions: string | null
    validFrom: Date | null
    validUntil: Date | null
    filledStatus: boolean | null
    filledDate: Date | null
    refills: number | null
    refillsUsed: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PrescriptionMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    doctorId: string | null
    hospitalId: string | null
    dosageInstructions: string | null
    validFrom: Date | null
    validUntil: Date | null
    filledStatus: boolean | null
    filledDate: Date | null
    refills: number | null
    refillsUsed: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PrescriptionCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    hospitalId: number
    medications: number
    dosageInstructions: number
    validFrom: number
    validUntil: number
    filledStatus: number
    filledDate: number
    refills: number
    refillsUsed: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PrescriptionAvgAggregateInputType = {
    refills?: true
    refillsUsed?: true
  }

  export type PrescriptionSumAggregateInputType = {
    refills?: true
    refillsUsed?: true
  }

  export type PrescriptionMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    dosageInstructions?: true
    validFrom?: true
    validUntil?: true
    filledStatus?: true
    filledDate?: true
    refills?: true
    refillsUsed?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PrescriptionMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    dosageInstructions?: true
    validFrom?: true
    validUntil?: true
    filledStatus?: true
    filledDate?: true
    refills?: true
    refillsUsed?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PrescriptionCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    hospitalId?: true
    medications?: true
    dosageInstructions?: true
    validFrom?: true
    validUntil?: true
    filledStatus?: true
    filledDate?: true
    refills?: true
    refillsUsed?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PrescriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prescription to aggregate.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prescriptions
    **/
    _count?: true | PrescriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrescriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrescriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrescriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrescriptionMaxAggregateInputType
  }

  export type GetPrescriptionAggregateType<T extends PrescriptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePrescription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrescription[P]>
      : GetScalarType<T[P], AggregatePrescription[P]>
  }




  export type PrescriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrescriptionWhereInput
    orderBy?: PrescriptionOrderByWithAggregationInput | PrescriptionOrderByWithAggregationInput[]
    by: PrescriptionScalarFieldEnum[] | PrescriptionScalarFieldEnum
    having?: PrescriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrescriptionCountAggregateInputType | true
    _avg?: PrescriptionAvgAggregateInputType
    _sum?: PrescriptionSumAggregateInputType
    _min?: PrescriptionMinAggregateInputType
    _max?: PrescriptionMaxAggregateInputType
  }

  export type PrescriptionGroupByOutputType = {
    id: string
    patientId: string
    doctorId: string
    hospitalId: string
    medications: JsonValue
    dosageInstructions: string | null
    validFrom: Date
    validUntil: Date | null
    filledStatus: boolean
    filledDate: Date | null
    refills: number
    refillsUsed: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: PrescriptionCountAggregateOutputType | null
    _avg: PrescriptionAvgAggregateOutputType | null
    _sum: PrescriptionSumAggregateOutputType | null
    _min: PrescriptionMinAggregateOutputType | null
    _max: PrescriptionMaxAggregateOutputType | null
  }

  type GetPrescriptionGroupByPayload<T extends PrescriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrescriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrescriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrescriptionGroupByOutputType[P]>
            : GetScalarType<T[P], PrescriptionGroupByOutputType[P]>
        }
      >
    >


  export type PrescriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    medications?: boolean
    dosageInstructions?: boolean
    validFrom?: boolean
    validUntil?: boolean
    filledStatus?: boolean
    filledDate?: boolean
    refills?: boolean
    refillsUsed?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    orderItems?: boolean | Prescription$orderItemsArgs<ExtArgs>
    _count?: boolean | PrescriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescription"]>

  export type PrescriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    medications?: boolean
    dosageInstructions?: boolean
    validFrom?: boolean
    validUntil?: boolean
    filledStatus?: boolean
    filledDate?: boolean
    refills?: boolean
    refillsUsed?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescription"]>

  export type PrescriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    medications?: boolean
    dosageInstructions?: boolean
    validFrom?: boolean
    validUntil?: boolean
    filledStatus?: boolean
    filledDate?: boolean
    refills?: boolean
    refillsUsed?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescription"]>

  export type PrescriptionSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    hospitalId?: boolean
    medications?: boolean
    dosageInstructions?: boolean
    validFrom?: boolean
    validUntil?: boolean
    filledStatus?: boolean
    filledDate?: boolean
    refills?: boolean
    refillsUsed?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PrescriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "doctorId" | "hospitalId" | "medications" | "dosageInstructions" | "validFrom" | "validUntil" | "filledStatus" | "filledDate" | "refills" | "refillsUsed" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["prescription"]>
  export type PrescriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
    orderItems?: boolean | Prescription$orderItemsArgs<ExtArgs>
    _count?: boolean | PrescriptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PrescriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }
  export type PrescriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    doctor?: boolean | UserDefaultArgs<ExtArgs>
    hospital?: boolean | HospitalDefaultArgs<ExtArgs>
  }

  export type $PrescriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Prescription"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      doctor: Prisma.$UserPayload<ExtArgs>
      hospital: Prisma.$HospitalPayload<ExtArgs>
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      doctorId: string
      hospitalId: string
      medications: Prisma.JsonValue
      dosageInstructions: string | null
      validFrom: Date
      validUntil: Date | null
      filledStatus: boolean
      filledDate: Date | null
      refills: number
      refillsUsed: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["prescription"]>
    composites: {}
  }

  type PrescriptionGetPayload<S extends boolean | null | undefined | PrescriptionDefaultArgs> = $Result.GetResult<Prisma.$PrescriptionPayload, S>

  type PrescriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrescriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrescriptionCountAggregateInputType | true
    }

  export interface PrescriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Prescription'], meta: { name: 'Prescription' } }
    /**
     * Find zero or one Prescription that matches the filter.
     * @param {PrescriptionFindUniqueArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrescriptionFindUniqueArgs>(args: SelectSubset<T, PrescriptionFindUniqueArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Prescription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrescriptionFindUniqueOrThrowArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrescriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, PrescriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prescription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindFirstArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrescriptionFindFirstArgs>(args?: SelectSubset<T, PrescriptionFindFirstArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Prescription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindFirstOrThrowArgs} args - Arguments to find a Prescription
     * @example
     * // Get one Prescription
     * const prescription = await prisma.prescription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrescriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, PrescriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Prescriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prescriptions
     * const prescriptions = await prisma.prescription.findMany()
     * 
     * // Get first 10 Prescriptions
     * const prescriptions = await prisma.prescription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prescriptionWithIdOnly = await prisma.prescription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrescriptionFindManyArgs>(args?: SelectSubset<T, PrescriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Prescription.
     * @param {PrescriptionCreateArgs} args - Arguments to create a Prescription.
     * @example
     * // Create one Prescription
     * const Prescription = await prisma.prescription.create({
     *   data: {
     *     // ... data to create a Prescription
     *   }
     * })
     * 
     */
    create<T extends PrescriptionCreateArgs>(args: SelectSubset<T, PrescriptionCreateArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Prescriptions.
     * @param {PrescriptionCreateManyArgs} args - Arguments to create many Prescriptions.
     * @example
     * // Create many Prescriptions
     * const prescription = await prisma.prescription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrescriptionCreateManyArgs>(args?: SelectSubset<T, PrescriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prescriptions and returns the data saved in the database.
     * @param {PrescriptionCreateManyAndReturnArgs} args - Arguments to create many Prescriptions.
     * @example
     * // Create many Prescriptions
     * const prescription = await prisma.prescription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prescriptions and only return the `id`
     * const prescriptionWithIdOnly = await prisma.prescription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrescriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, PrescriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Prescription.
     * @param {PrescriptionDeleteArgs} args - Arguments to delete one Prescription.
     * @example
     * // Delete one Prescription
     * const Prescription = await prisma.prescription.delete({
     *   where: {
     *     // ... filter to delete one Prescription
     *   }
     * })
     * 
     */
    delete<T extends PrescriptionDeleteArgs>(args: SelectSubset<T, PrescriptionDeleteArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Prescription.
     * @param {PrescriptionUpdateArgs} args - Arguments to update one Prescription.
     * @example
     * // Update one Prescription
     * const prescription = await prisma.prescription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrescriptionUpdateArgs>(args: SelectSubset<T, PrescriptionUpdateArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Prescriptions.
     * @param {PrescriptionDeleteManyArgs} args - Arguments to filter Prescriptions to delete.
     * @example
     * // Delete a few Prescriptions
     * const { count } = await prisma.prescription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrescriptionDeleteManyArgs>(args?: SelectSubset<T, PrescriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prescriptions
     * const prescription = await prisma.prescription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrescriptionUpdateManyArgs>(args: SelectSubset<T, PrescriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescriptions and returns the data updated in the database.
     * @param {PrescriptionUpdateManyAndReturnArgs} args - Arguments to update many Prescriptions.
     * @example
     * // Update many Prescriptions
     * const prescription = await prisma.prescription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Prescriptions and only return the `id`
     * const prescriptionWithIdOnly = await prisma.prescription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrescriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, PrescriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Prescription.
     * @param {PrescriptionUpsertArgs} args - Arguments to update or create a Prescription.
     * @example
     * // Update or create a Prescription
     * const prescription = await prisma.prescription.upsert({
     *   create: {
     *     // ... data to create a Prescription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prescription we want to update
     *   }
     * })
     */
    upsert<T extends PrescriptionUpsertArgs>(args: SelectSubset<T, PrescriptionUpsertArgs<ExtArgs>>): Prisma__PrescriptionClient<$Result.GetResult<Prisma.$PrescriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Prescriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionCountArgs} args - Arguments to filter Prescriptions to count.
     * @example
     * // Count the number of Prescriptions
     * const count = await prisma.prescription.count({
     *   where: {
     *     // ... the filter for the Prescriptions we want to count
     *   }
     * })
    **/
    count<T extends PrescriptionCountArgs>(
      args?: Subset<T, PrescriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrescriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrescriptionAggregateArgs>(args: Subset<T, PrescriptionAggregateArgs>): Prisma.PrismaPromise<GetPrescriptionAggregateType<T>>

    /**
     * Group by Prescription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrescriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrescriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrescriptionGroupByArgs['orderBy'] }
        : { orderBy?: PrescriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrescriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrescriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Prescription model
   */
  readonly fields: PrescriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Prescription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrescriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    hospital<T extends HospitalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HospitalDefaultArgs<ExtArgs>>): Prisma__HospitalClient<$Result.GetResult<Prisma.$HospitalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    orderItems<T extends Prescription$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Prescription$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Prescription model
   */
  interface PrescriptionFieldRefs {
    readonly id: FieldRef<"Prescription", 'String'>
    readonly patientId: FieldRef<"Prescription", 'String'>
    readonly doctorId: FieldRef<"Prescription", 'String'>
    readonly hospitalId: FieldRef<"Prescription", 'String'>
    readonly medications: FieldRef<"Prescription", 'Json'>
    readonly dosageInstructions: FieldRef<"Prescription", 'String'>
    readonly validFrom: FieldRef<"Prescription", 'DateTime'>
    readonly validUntil: FieldRef<"Prescription", 'DateTime'>
    readonly filledStatus: FieldRef<"Prescription", 'Boolean'>
    readonly filledDate: FieldRef<"Prescription", 'DateTime'>
    readonly refills: FieldRef<"Prescription", 'Int'>
    readonly refillsUsed: FieldRef<"Prescription", 'Int'>
    readonly notes: FieldRef<"Prescription", 'String'>
    readonly createdAt: FieldRef<"Prescription", 'DateTime'>
    readonly updatedAt: FieldRef<"Prescription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Prescription findUnique
   */
  export type PrescriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription findUniqueOrThrow
   */
  export type PrescriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription findFirst
   */
  export type PrescriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prescriptions.
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prescriptions.
     */
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Prescription findFirstOrThrow
   */
  export type PrescriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescription to fetch.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prescriptions.
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prescriptions.
     */
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Prescription findMany
   */
  export type PrescriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter, which Prescriptions to fetch.
     */
    where?: PrescriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prescriptions to fetch.
     */
    orderBy?: PrescriptionOrderByWithRelationInput | PrescriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prescriptions.
     */
    cursor?: PrescriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prescriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prescriptions.
     */
    skip?: number
    distinct?: PrescriptionScalarFieldEnum | PrescriptionScalarFieldEnum[]
  }

  /**
   * Prescription create
   */
  export type PrescriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Prescription.
     */
    data: XOR<PrescriptionCreateInput, PrescriptionUncheckedCreateInput>
  }

  /**
   * Prescription createMany
   */
  export type PrescriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prescriptions.
     */
    data: PrescriptionCreateManyInput | PrescriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Prescription createManyAndReturn
   */
  export type PrescriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Prescriptions.
     */
    data: PrescriptionCreateManyInput | PrescriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Prescription update
   */
  export type PrescriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Prescription.
     */
    data: XOR<PrescriptionUpdateInput, PrescriptionUncheckedUpdateInput>
    /**
     * Choose, which Prescription to update.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription updateMany
   */
  export type PrescriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prescriptions.
     */
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyInput>
    /**
     * Filter which Prescriptions to update
     */
    where?: PrescriptionWhereInput
    /**
     * Limit how many Prescriptions to update.
     */
    limit?: number
  }

  /**
   * Prescription updateManyAndReturn
   */
  export type PrescriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * The data used to update Prescriptions.
     */
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyInput>
    /**
     * Filter which Prescriptions to update
     */
    where?: PrescriptionWhereInput
    /**
     * Limit how many Prescriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Prescription upsert
   */
  export type PrescriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Prescription to update in case it exists.
     */
    where: PrescriptionWhereUniqueInput
    /**
     * In case the Prescription found by the `where` argument doesn't exist, create a new Prescription with this data.
     */
    create: XOR<PrescriptionCreateInput, PrescriptionUncheckedCreateInput>
    /**
     * In case the Prescription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrescriptionUpdateInput, PrescriptionUncheckedUpdateInput>
  }

  /**
   * Prescription delete
   */
  export type PrescriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
    /**
     * Filter which Prescription to delete.
     */
    where: PrescriptionWhereUniqueInput
  }

  /**
   * Prescription deleteMany
   */
  export type PrescriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prescriptions to delete
     */
    where?: PrescriptionWhereInput
    /**
     * Limit how many Prescriptions to delete.
     */
    limit?: number
  }

  /**
   * Prescription.orderItems
   */
  export type Prescription$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OrderItem
     */
    omit?: OrderItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Prescription without action
   */
  export type PrescriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Prescription
     */
    select?: PrescriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Prescription
     */
    omit?: PrescriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrescriptionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AntenatalRecordScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    gestationalAge: 'gestationalAge',
    nextAppointment: 'nextAppointment',
    riskLevel: 'riskLevel',
    status: 'status',
    trimester: 'trimester',
    lastVisitDate: 'lastVisitDate',
    expectedDueDate: 'expectedDueDate',
    ultrasoundReports: 'ultrasoundReports',
    labResults: 'labResults',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdByUserId: 'createdByUserId',
    updatedByUserId: 'updatedByUserId',
    mrn: 'mrn'
  };

  export type AntenatalRecordScalarFieldEnum = (typeof AntenatalRecordScalarFieldEnum)[keyof typeof AntenatalRecordScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    hospitalId: 'hospitalId',
    date: 'date',
    status: 'status',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const HospitalScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subdomain: 'subdomain',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    settings: 'settings',
    branding: 'branding',
    isActive: 'isActive',
    code: 'code'
  };

  export type HospitalScalarFieldEnum = (typeof HospitalScalarFieldEnum)[keyof typeof HospitalScalarFieldEnum]


  export const MedicalRecordScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    hospitalId: 'hospitalId',
    type: 'type',
    details: 'details',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalRecordScalarFieldEnum = (typeof MedicalRecordScalarFieldEnum)[keyof typeof MedicalRecordScalarFieldEnum]


  export const NeonatalRecordScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    birthWeight: 'birthWeight',
    gestationalAgeAtBirth: 'gestationalAgeAtBirth',
    careLevel: 'careLevel',
    status: 'status',
    dischargeStatus: 'dischargeStatus',
    apgarScore: 'apgarScore',
    motherId: 'motherId',
    birthComplications: 'birthComplications',
    feedingMethod: 'feedingMethod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdByUserId: 'createdByUserId',
    updatedByUserId: 'updatedByUserId',
    mrn: 'mrn'
  };

  export type NeonatalRecordScalarFieldEnum = (typeof NeonatalRecordScalarFieldEnum)[keyof typeof NeonatalRecordScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    mrn: 'mrn',
    name: 'name',
    gender: 'gender',
    dateOfBirth: 'dateOfBirth',
    contact: 'contact',
    note: 'note',
    lastVisit: 'lastVisit',
    nextVisit: 'nextVisit',
    medicalHistory: 'medicalHistory',
    userId: 'userId',
    hospitalId: 'hospitalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    qrCode: 'qrCode',
    onboardingCompleted: 'onboardingCompleted'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    phone: 'phone',
    photo: 'photo',
    isSuperAdmin: 'isSuperAdmin',
    isHospitalAdmin: 'isHospitalAdmin',
    specialties: 'specialties',
    hospitalId: 'hospitalId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PasswordResetScalarFieldEnum: {
    id: 'id',
    token: 'token',
    email: 'email',
    expiresAt: 'expiresAt',
    usedAt: 'usedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    patientId: 'patientId',
    userId: 'userId'
  };

  export type PasswordResetScalarFieldEnum = (typeof PasswordResetScalarFieldEnum)[keyof typeof PasswordResetScalarFieldEnum]


  export const SecurityAuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    requestPath: 'requestPath',
    success: 'success'
  };

  export type SecurityAuditLogScalarFieldEnum = (typeof SecurityAuditLogScalarFieldEnum)[keyof typeof SecurityAuditLogScalarFieldEnum]


  export const ProfilePictureScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    userId: 'userId',
    imageUrl: 'imageUrl',
    imageData: 'imageData',
    mimeType: 'mimeType',
    filename: 'filename',
    size: 'size',
    width: 'width',
    height: 'height',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    uploadedBy: 'uploadedBy',
    ownerType: 'ownerType'
  };

  export type ProfilePictureScalarFieldEnum = (typeof ProfilePictureScalarFieldEnum)[keyof typeof ProfilePictureScalarFieldEnum]


  export const PatientEmailScalarFieldEnum: {
    id: 'id',
    email: 'email',
    verified: 'verified',
    primary: 'primary',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    patientId: 'patientId'
  };

  export type PatientEmailScalarFieldEnum = (typeof PatientEmailScalarFieldEnum)[keyof typeof PatientEmailScalarFieldEnum]


  export const PatientPhoneScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    verified: 'verified',
    primary: 'primary',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    patientId: 'patientId'
  };

  export type PatientPhoneScalarFieldEnum = (typeof PatientPhoneScalarFieldEnum)[keyof typeof PatientPhoneScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    hospitalId: 'hospitalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const DepartmentMembershipScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    departmentId: 'departmentId',
    role: 'role',
    joinedAt: 'joinedAt'
  };

  export type DepartmentMembershipScalarFieldEnum = (typeof DepartmentMembershipScalarFieldEnum)[keyof typeof DepartmentMembershipScalarFieldEnum]


  export const StaffProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    hospitalId: 'hospitalId',
    staffId: 'staffId',
    specialization: 'specialization',
    qualifications: 'qualifications',
    joiningDate: 'joiningDate',
    employmentStatus: 'employmentStatus',
    contactInformation: 'contactInformation'
  };

  export type StaffProfileScalarFieldEnum = (typeof StaffProfileScalarFieldEnum)[keyof typeof StaffProfileScalarFieldEnum]


  export const PatientHospitalAccessScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    accessLevel: 'accessLevel',
    grantedAt: 'grantedAt',
    grantedBy: 'grantedBy',
    expiresAt: 'expiresAt'
  };

  export type PatientHospitalAccessScalarFieldEnum = (typeof PatientHospitalAccessScalarFieldEnum)[keyof typeof PatientHospitalAccessScalarFieldEnum]


  export const PatientSearchIndexScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    mrn: 'mrn',
    name: 'name',
    phone: 'phone',
    email: 'email',
    qrCode: 'qrCode',
    searchVector: 'searchVector'
  };

  export type PatientSearchIndexScalarFieldEnum = (typeof PatientSearchIndexScalarFieldEnum)[keyof typeof PatientSearchIndexScalarFieldEnum]


  export const DoctorAvailabilityScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    hospitalId: 'hospitalId',
    available: 'available',
    schedule: 'schedule',
    serviceTypes: 'serviceTypes',
    nextAvailable: 'nextAvailable'
  };

  export type DoctorAvailabilityScalarFieldEnum = (typeof DoctorAvailabilityScalarFieldEnum)[keyof typeof DoctorAvailabilityScalarFieldEnum]


  export const PatientWidgetPreferenceScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    recentDoctors: 'recentDoctors',
    preferredHospitals: 'preferredHospitals',
    searchHistory: 'searchHistory'
  };

  export type PatientWidgetPreferenceScalarFieldEnum = (typeof PatientWidgetPreferenceScalarFieldEnum)[keyof typeof PatientWidgetPreferenceScalarFieldEnum]


  export const ReferralScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    fromHospitalId: 'fromHospitalId',
    toHospitalId: 'toHospitalId',
    referringDoctorId: 'referringDoctorId',
    receivingDoctorId: 'receivingDoctorId',
    reason: 'reason',
    notes: 'notes',
    priority: 'priority',
    status: 'status',
    medicalRecords: 'medicalRecords',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    completedAt: 'completedAt'
  };

  export type ReferralScalarFieldEnum = (typeof ReferralScalarFieldEnum)[keyof typeof ReferralScalarFieldEnum]


  export const AmbulanceScalarFieldEnum: {
    id: 'id',
    registrationNo: 'registrationNo',
    type: 'type',
    status: 'status',
    hospitalId: 'hospitalId',
    capacity: 'capacity',
    equipment: 'equipment',
    features: 'features',
    gpsTracking: 'gpsTracking',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastMaintenance: 'lastMaintenance'
  };

  export type AmbulanceScalarFieldEnum = (typeof AmbulanceScalarFieldEnum)[keyof typeof AmbulanceScalarFieldEnum]


  export const AmbulanceDispatchScalarFieldEnum: {
    id: 'id',
    ambulanceId: 'ambulanceId',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    pickupLocation: 'pickupLocation',
    dropLocation: 'dropLocation',
    dispatchTime: 'dispatchTime',
    arrivalTime: 'arrivalTime',
    completionTime: 'completionTime',
    priority: 'priority',
    status: 'status',
    dispatchedBy: 'dispatchedBy',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AmbulanceDispatchScalarFieldEnum = (typeof AmbulanceDispatchScalarFieldEnum)[keyof typeof AmbulanceDispatchScalarFieldEnum]


  export const AmbulanceRequestScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    pickupLocation: 'pickupLocation',
    reason: 'reason',
    requestTime: 'requestTime',
    status: 'status',
    priority: 'priority',
    contactName: 'contactName',
    contactPhone: 'contactPhone',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AmbulanceRequestScalarFieldEnum = (typeof AmbulanceRequestScalarFieldEnum)[keyof typeof AmbulanceRequestScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    balance: 'balance',
    currency: 'currency',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const WalletTransactionScalarFieldEnum: {
    id: 'id',
    walletId: 'walletId',
    amount: 'amount',
    type: 'type',
    status: 'status',
    reference: 'reference',
    description: 'description',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    completedAt: 'completedAt'
  };

  export type WalletTransactionScalarFieldEnum = (typeof WalletTransactionScalarFieldEnum)[keyof typeof WalletTransactionScalarFieldEnum]


  export const BillingScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    amount: 'amount',
    dueDate: 'dueDate',
    status: 'status',
    description: 'description',
    invoiceNumber: 'invoiceNumber',
    items: 'items',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    paidAt: 'paidAt'
  };

  export type BillingScalarFieldEnum = (typeof BillingScalarFieldEnum)[keyof typeof BillingScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    billingId: 'billingId',
    amount: 'amount',
    method: 'method',
    reference: 'reference',
    status: 'status',
    transactionId: 'transactionId',
    receiptNumber: 'receiptNumber',
    paymentDate: 'paymentDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    doctorId: 'doctorId',
    title: 'title',
    status: 'status',
    lastMessageAt: 'lastMessageAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    senderId: 'senderId',
    content: 'content',
    attachments: 'attachments',
    status: 'status',
    sentAt: 'sentAt',
    deliveredAt: 'deliveredAt',
    readAt: 'readAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const BirthRecordScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    motherId: 'motherId',
    fatherId: 'fatherId',
    hospitalId: 'hospitalId',
    birthDate: 'birthDate',
    birthTime: 'birthTime',
    birthWeight: 'birthWeight',
    deliveryMethod: 'deliveryMethod',
    attendingDoctorId: 'attendingDoctorId',
    birthPlace: 'birthPlace',
    certificateNumber: 'certificateNumber',
    registeredAt: 'registeredAt',
    notes: 'notes',
    complications: 'complications',
    apgarScore: 'apgarScore',
    gestationalAge: 'gestationalAge',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BirthRecordScalarFieldEnum = (typeof BirthRecordScalarFieldEnum)[keyof typeof BirthRecordScalarFieldEnum]


  export const DeathRecordScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    hospitalId: 'hospitalId',
    dateOfDeath: 'dateOfDeath',
    timeOfDeath: 'timeOfDeath',
    causeOfDeath: 'causeOfDeath',
    attendingDoctorId: 'attendingDoctorId',
    placeOfDeath: 'placeOfDeath',
    certificateNumber: 'certificateNumber',
    registeredAt: 'registeredAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DeathRecordScalarFieldEnum = (typeof DeathRecordScalarFieldEnum)[keyof typeof DeathRecordScalarFieldEnum]


  export const MarketplaceVendorScalarFieldEnum: {
    id: 'id',
    hospitalId: 'hospitalId',
    name: 'name',
    description: 'description',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    address: 'address',
    logo: 'logo',
    websiteUrl: 'websiteUrl',
    verified: 'verified',
    rating: 'rating',
    specialties: 'specialties',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MarketplaceVendorScalarFieldEnum = (typeof MarketplaceVendorScalarFieldEnum)[keyof typeof MarketplaceVendorScalarFieldEnum]


  export const MarketplaceProductScalarFieldEnum: {
    id: 'id',
    vendorId: 'vendorId',
    name: 'name',
    description: 'description',
    price: 'price',
    discountPrice: 'discountPrice',
    category: 'category',
    tags: 'tags',
    imageUrl: 'imageUrl',
    inStock: 'inStock',
    requiredPrescription: 'requiredPrescription',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MarketplaceProductScalarFieldEnum = (typeof MarketplaceProductScalarFieldEnum)[keyof typeof MarketplaceProductScalarFieldEnum]


  export const MarketplaceOrderScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    reference: 'reference',
    totalAmount: 'totalAmount',
    status: 'status',
    paymentStatus: 'paymentStatus',
    shippingAddress: 'shippingAddress',
    trackingNumber: 'trackingNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MarketplaceOrderScalarFieldEnum = (typeof MarketplaceOrderScalarFieldEnum)[keyof typeof MarketplaceOrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    prescriptionId: 'prescriptionId'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const CartItemScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    productId: 'productId',
    quantity: 'quantity',
    addedAt: 'addedAt'
  };

  export type CartItemScalarFieldEnum = (typeof CartItemScalarFieldEnum)[keyof typeof CartItemScalarFieldEnum]


  export const SavedVendorScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    vendorId: 'vendorId',
    savedAt: 'savedAt'
  };

  export type SavedVendorScalarFieldEnum = (typeof SavedVendorScalarFieldEnum)[keyof typeof SavedVendorScalarFieldEnum]


  export const PrescriptionScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    hospitalId: 'hospitalId',
    medications: 'medications',
    dosageInstructions: 'dosageInstructions',
    validFrom: 'validFrom',
    validUntil: 'validUntil',
    filledStatus: 'filledStatus',
    filledDate: 'filledDate',
    refills: 'refills',
    refillsUsed: 'refillsUsed',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PrescriptionScalarFieldEnum = (typeof PrescriptionScalarFieldEnum)[keyof typeof PrescriptionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'RiskLevel'
   */
  export type EnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel'>
    


  /**
   * Reference to a field of type 'RiskLevel[]'
   */
  export type ListEnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel[]'>
    


  /**
   * Reference to a field of type 'AntenatalStatus'
   */
  export type EnumAntenatalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AntenatalStatus'>
    


  /**
   * Reference to a field of type 'AntenatalStatus[]'
   */
  export type ListEnumAntenatalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AntenatalStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CareLevel'
   */
  export type EnumCareLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CareLevel'>
    


  /**
   * Reference to a field of type 'CareLevel[]'
   */
  export type ListEnumCareLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CareLevel[]'>
    


  /**
   * Reference to a field of type 'NeonatalStatus'
   */
  export type EnumNeonatalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NeonatalStatus'>
    


  /**
   * Reference to a field of type 'NeonatalStatus[]'
   */
  export type ListEnumNeonatalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NeonatalStatus[]'>
    


  /**
   * Reference to a field of type 'DischargeStatus'
   */
  export type EnumDischargeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DischargeStatus'>
    


  /**
   * Reference to a field of type 'DischargeStatus[]'
   */
  export type ListEnumDischargeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DischargeStatus[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'EmploymentStatus'
   */
  export type EnumEmploymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentStatus'>
    


  /**
   * Reference to a field of type 'EmploymentStatus[]'
   */
  export type ListEnumEmploymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentStatus[]'>
    


  /**
   * Reference to a field of type 'AccessLevel'
   */
  export type EnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel'>
    


  /**
   * Reference to a field of type 'AccessLevel[]'
   */
  export type ListEnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccessLevel[]'>
    


  /**
   * Reference to a field of type 'ReferralPriority'
   */
  export type EnumReferralPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReferralPriority'>
    


  /**
   * Reference to a field of type 'ReferralPriority[]'
   */
  export type ListEnumReferralPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReferralPriority[]'>
    


  /**
   * Reference to a field of type 'ReferralStatus'
   */
  export type EnumReferralStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReferralStatus'>
    


  /**
   * Reference to a field of type 'ReferralStatus[]'
   */
  export type ListEnumReferralStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReferralStatus[]'>
    


  /**
   * Reference to a field of type 'AmbulanceType'
   */
  export type EnumAmbulanceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AmbulanceType'>
    


  /**
   * Reference to a field of type 'AmbulanceType[]'
   */
  export type ListEnumAmbulanceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AmbulanceType[]'>
    


  /**
   * Reference to a field of type 'AmbulanceStatus'
   */
  export type EnumAmbulanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AmbulanceStatus'>
    


  /**
   * Reference to a field of type 'AmbulanceStatus[]'
   */
  export type ListEnumAmbulanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AmbulanceStatus[]'>
    


  /**
   * Reference to a field of type 'DispatchPriority'
   */
  export type EnumDispatchPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DispatchPriority'>
    


  /**
   * Reference to a field of type 'DispatchPriority[]'
   */
  export type ListEnumDispatchPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DispatchPriority[]'>
    


  /**
   * Reference to a field of type 'DispatchStatus'
   */
  export type EnumDispatchStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DispatchStatus'>
    


  /**
   * Reference to a field of type 'DispatchStatus[]'
   */
  export type ListEnumDispatchStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DispatchStatus[]'>
    


  /**
   * Reference to a field of type 'WalletStatus'
   */
  export type EnumWalletStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WalletStatus'>
    


  /**
   * Reference to a field of type 'WalletStatus[]'
   */
  export type ListEnumWalletStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WalletStatus[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'TransactionStatus'
   */
  export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus'>
    


  /**
   * Reference to a field of type 'TransactionStatus[]'
   */
  export type ListEnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus[]'>
    


  /**
   * Reference to a field of type 'BillingStatus'
   */
  export type EnumBillingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingStatus'>
    


  /**
   * Reference to a field of type 'BillingStatus[]'
   */
  export type ListEnumBillingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'ConversationStatus'
   */
  export type EnumConversationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConversationStatus'>
    


  /**
   * Reference to a field of type 'ConversationStatus[]'
   */
  export type ListEnumConversationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConversationStatus[]'>
    


  /**
   * Reference to a field of type 'MessageStatus'
   */
  export type EnumMessageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageStatus'>
    


  /**
   * Reference to a field of type 'MessageStatus[]'
   */
  export type ListEnumMessageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageStatus[]'>
    


  /**
   * Reference to a field of type 'DeliveryMethod'
   */
  export type EnumDeliveryMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryMethod'>
    


  /**
   * Reference to a field of type 'DeliveryMethod[]'
   */
  export type ListEnumDeliveryMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeliveryMethod[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type AntenatalRecordWhereInput = {
    AND?: AntenatalRecordWhereInput | AntenatalRecordWhereInput[]
    OR?: AntenatalRecordWhereInput[]
    NOT?: AntenatalRecordWhereInput | AntenatalRecordWhereInput[]
    id?: StringFilter<"AntenatalRecord"> | string
    patientId?: StringFilter<"AntenatalRecord"> | string
    hospitalId?: StringFilter<"AntenatalRecord"> | string
    gestationalAge?: IntFilter<"AntenatalRecord"> | number
    nextAppointment?: DateTimeNullableFilter<"AntenatalRecord"> | Date | string | null
    riskLevel?: EnumRiskLevelFilter<"AntenatalRecord"> | $Enums.RiskLevel
    status?: EnumAntenatalStatusFilter<"AntenatalRecord"> | $Enums.AntenatalStatus
    trimester?: IntFilter<"AntenatalRecord"> | number
    lastVisitDate?: DateTimeNullableFilter<"AntenatalRecord"> | Date | string | null
    expectedDueDate?: DateTimeFilter<"AntenatalRecord"> | Date | string
    ultrasoundReports?: JsonNullableFilter<"AntenatalRecord">
    labResults?: JsonNullableFilter<"AntenatalRecord">
    createdAt?: DateTimeFilter<"AntenatalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AntenatalRecord"> | Date | string
    createdByUserId?: StringFilter<"AntenatalRecord"> | string
    updatedByUserId?: StringFilter<"AntenatalRecord"> | string
    mrn?: StringNullableFilter<"AntenatalRecord"> | string | null
    User_AntenatalRecord_createdByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    Patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    User_AntenatalRecord_updatedByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AntenatalRecordOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    gestationalAge?: SortOrder
    nextAppointment?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    status?: SortOrder
    trimester?: SortOrder
    lastVisitDate?: SortOrderInput | SortOrder
    expectedDueDate?: SortOrder
    ultrasoundReports?: SortOrderInput | SortOrder
    labResults?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrderInput | SortOrder
    User_AntenatalRecord_createdByUserIdToUser?: UserOrderByWithRelationInput
    Hospital?: HospitalOrderByWithRelationInput
    Patient?: PatientOrderByWithRelationInput
    User_AntenatalRecord_updatedByUserIdToUser?: UserOrderByWithRelationInput
  }

  export type AntenatalRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mrn?: string
    AND?: AntenatalRecordWhereInput | AntenatalRecordWhereInput[]
    OR?: AntenatalRecordWhereInput[]
    NOT?: AntenatalRecordWhereInput | AntenatalRecordWhereInput[]
    patientId?: StringFilter<"AntenatalRecord"> | string
    hospitalId?: StringFilter<"AntenatalRecord"> | string
    gestationalAge?: IntFilter<"AntenatalRecord"> | number
    nextAppointment?: DateTimeNullableFilter<"AntenatalRecord"> | Date | string | null
    riskLevel?: EnumRiskLevelFilter<"AntenatalRecord"> | $Enums.RiskLevel
    status?: EnumAntenatalStatusFilter<"AntenatalRecord"> | $Enums.AntenatalStatus
    trimester?: IntFilter<"AntenatalRecord"> | number
    lastVisitDate?: DateTimeNullableFilter<"AntenatalRecord"> | Date | string | null
    expectedDueDate?: DateTimeFilter<"AntenatalRecord"> | Date | string
    ultrasoundReports?: JsonNullableFilter<"AntenatalRecord">
    labResults?: JsonNullableFilter<"AntenatalRecord">
    createdAt?: DateTimeFilter<"AntenatalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AntenatalRecord"> | Date | string
    createdByUserId?: StringFilter<"AntenatalRecord"> | string
    updatedByUserId?: StringFilter<"AntenatalRecord"> | string
    User_AntenatalRecord_createdByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    Patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    User_AntenatalRecord_updatedByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "mrn">

  export type AntenatalRecordOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    gestationalAge?: SortOrder
    nextAppointment?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    status?: SortOrder
    trimester?: SortOrder
    lastVisitDate?: SortOrderInput | SortOrder
    expectedDueDate?: SortOrder
    ultrasoundReports?: SortOrderInput | SortOrder
    labResults?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrderInput | SortOrder
    _count?: AntenatalRecordCountOrderByAggregateInput
    _avg?: AntenatalRecordAvgOrderByAggregateInput
    _max?: AntenatalRecordMaxOrderByAggregateInput
    _min?: AntenatalRecordMinOrderByAggregateInput
    _sum?: AntenatalRecordSumOrderByAggregateInput
  }

  export type AntenatalRecordScalarWhereWithAggregatesInput = {
    AND?: AntenatalRecordScalarWhereWithAggregatesInput | AntenatalRecordScalarWhereWithAggregatesInput[]
    OR?: AntenatalRecordScalarWhereWithAggregatesInput[]
    NOT?: AntenatalRecordScalarWhereWithAggregatesInput | AntenatalRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AntenatalRecord"> | string
    patientId?: StringWithAggregatesFilter<"AntenatalRecord"> | string
    hospitalId?: StringWithAggregatesFilter<"AntenatalRecord"> | string
    gestationalAge?: IntWithAggregatesFilter<"AntenatalRecord"> | number
    nextAppointment?: DateTimeNullableWithAggregatesFilter<"AntenatalRecord"> | Date | string | null
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"AntenatalRecord"> | $Enums.RiskLevel
    status?: EnumAntenatalStatusWithAggregatesFilter<"AntenatalRecord"> | $Enums.AntenatalStatus
    trimester?: IntWithAggregatesFilter<"AntenatalRecord"> | number
    lastVisitDate?: DateTimeNullableWithAggregatesFilter<"AntenatalRecord"> | Date | string | null
    expectedDueDate?: DateTimeWithAggregatesFilter<"AntenatalRecord"> | Date | string
    ultrasoundReports?: JsonNullableWithAggregatesFilter<"AntenatalRecord">
    labResults?: JsonNullableWithAggregatesFilter<"AntenatalRecord">
    createdAt?: DateTimeWithAggregatesFilter<"AntenatalRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AntenatalRecord"> | Date | string
    createdByUserId?: StringWithAggregatesFilter<"AntenatalRecord"> | string
    updatedByUserId?: StringWithAggregatesFilter<"AntenatalRecord"> | string
    mrn?: StringNullableWithAggregatesFilter<"AntenatalRecord"> | string | null
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    doctorId?: StringFilter<"Appointment"> | string
    hospitalId?: StringFilter<"Appointment"> | string
    date?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
    Patient?: PatientOrderByWithRelationInput
    Hospital?: HospitalOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    patientId?: StringFilter<"Appointment"> | string
    doctorId?: StringFilter<"Appointment"> | string
    hospitalId?: StringFilter<"Appointment"> | string
    date?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    patientId?: StringWithAggregatesFilter<"Appointment"> | string
    doctorId?: StringWithAggregatesFilter<"Appointment"> | string
    hospitalId?: StringWithAggregatesFilter<"Appointment"> | string
    date?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type HospitalWhereInput = {
    AND?: HospitalWhereInput | HospitalWhereInput[]
    OR?: HospitalWhereInput[]
    NOT?: HospitalWhereInput | HospitalWhereInput[]
    id?: StringFilter<"Hospital"> | string
    name?: StringFilter<"Hospital"> | string
    subdomain?: StringFilter<"Hospital"> | string
    description?: StringNullableFilter<"Hospital"> | string | null
    createdAt?: DateTimeFilter<"Hospital"> | Date | string
    updatedAt?: DateTimeFilter<"Hospital"> | Date | string
    settings?: JsonFilter<"Hospital">
    branding?: JsonNullableFilter<"Hospital">
    isActive?: BoolFilter<"Hospital"> | boolean
    code?: StringNullableFilter<"Hospital"> | string | null
    AntenatalRecords?: AntenatalRecordListRelationFilter
    NeonatalRecords?: NeonatalRecordListRelationFilter
    Users?: UserListRelationFilter
    Departments?: DepartmentListRelationFilter
    StaffProfiles?: StaffProfileListRelationFilter
    PatientAccesses?: PatientHospitalAccessListRelationFilter
    Appointments?: AppointmentListRelationFilter
    DoctorAvailabilities?: DoctorAvailabilityListRelationFilter
    Patients?: PatientListRelationFilter
    MedicalRecords?: MedicalRecordListRelationFilter
    ReferralsFrom?: ReferralListRelationFilter
    ReferralsTo?: ReferralListRelationFilter
    Ambulances?: AmbulanceListRelationFilter
    AmbulanceDispatches?: AmbulanceDispatchListRelationFilter
    AmbulanceRequests?: AmbulanceRequestListRelationFilter
    BillingRecords?: BillingListRelationFilter
    Conversations?: ConversationListRelationFilter
    BirthRecords?: BirthRecordListRelationFilter
    DeathRecords?: DeathRecordListRelationFilter
    MarketplaceVendors?: MarketplaceVendorListRelationFilter
    Prescriptions?: PrescriptionListRelationFilter
  }

  export type HospitalOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    settings?: SortOrder
    branding?: SortOrderInput | SortOrder
    isActive?: SortOrder
    code?: SortOrderInput | SortOrder
    AntenatalRecords?: AntenatalRecordOrderByRelationAggregateInput
    NeonatalRecords?: NeonatalRecordOrderByRelationAggregateInput
    Users?: UserOrderByRelationAggregateInput
    Departments?: DepartmentOrderByRelationAggregateInput
    StaffProfiles?: StaffProfileOrderByRelationAggregateInput
    PatientAccesses?: PatientHospitalAccessOrderByRelationAggregateInput
    Appointments?: AppointmentOrderByRelationAggregateInput
    DoctorAvailabilities?: DoctorAvailabilityOrderByRelationAggregateInput
    Patients?: PatientOrderByRelationAggregateInput
    MedicalRecords?: MedicalRecordOrderByRelationAggregateInput
    ReferralsFrom?: ReferralOrderByRelationAggregateInput
    ReferralsTo?: ReferralOrderByRelationAggregateInput
    Ambulances?: AmbulanceOrderByRelationAggregateInput
    AmbulanceDispatches?: AmbulanceDispatchOrderByRelationAggregateInput
    AmbulanceRequests?: AmbulanceRequestOrderByRelationAggregateInput
    BillingRecords?: BillingOrderByRelationAggregateInput
    Conversations?: ConversationOrderByRelationAggregateInput
    BirthRecords?: BirthRecordOrderByRelationAggregateInput
    DeathRecords?: DeathRecordOrderByRelationAggregateInput
    MarketplaceVendors?: MarketplaceVendorOrderByRelationAggregateInput
    Prescriptions?: PrescriptionOrderByRelationAggregateInput
  }

  export type HospitalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    subdomain?: string
    code?: string
    AND?: HospitalWhereInput | HospitalWhereInput[]
    OR?: HospitalWhereInput[]
    NOT?: HospitalWhereInput | HospitalWhereInput[]
    name?: StringFilter<"Hospital"> | string
    description?: StringNullableFilter<"Hospital"> | string | null
    createdAt?: DateTimeFilter<"Hospital"> | Date | string
    updatedAt?: DateTimeFilter<"Hospital"> | Date | string
    settings?: JsonFilter<"Hospital">
    branding?: JsonNullableFilter<"Hospital">
    isActive?: BoolFilter<"Hospital"> | boolean
    AntenatalRecords?: AntenatalRecordListRelationFilter
    NeonatalRecords?: NeonatalRecordListRelationFilter
    Users?: UserListRelationFilter
    Departments?: DepartmentListRelationFilter
    StaffProfiles?: StaffProfileListRelationFilter
    PatientAccesses?: PatientHospitalAccessListRelationFilter
    Appointments?: AppointmentListRelationFilter
    DoctorAvailabilities?: DoctorAvailabilityListRelationFilter
    Patients?: PatientListRelationFilter
    MedicalRecords?: MedicalRecordListRelationFilter
    ReferralsFrom?: ReferralListRelationFilter
    ReferralsTo?: ReferralListRelationFilter
    Ambulances?: AmbulanceListRelationFilter
    AmbulanceDispatches?: AmbulanceDispatchListRelationFilter
    AmbulanceRequests?: AmbulanceRequestListRelationFilter
    BillingRecords?: BillingListRelationFilter
    Conversations?: ConversationListRelationFilter
    BirthRecords?: BirthRecordListRelationFilter
    DeathRecords?: DeathRecordListRelationFilter
    MarketplaceVendors?: MarketplaceVendorListRelationFilter
    Prescriptions?: PrescriptionListRelationFilter
  }, "id" | "subdomain" | "code">

  export type HospitalOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    settings?: SortOrder
    branding?: SortOrderInput | SortOrder
    isActive?: SortOrder
    code?: SortOrderInput | SortOrder
    _count?: HospitalCountOrderByAggregateInput
    _max?: HospitalMaxOrderByAggregateInput
    _min?: HospitalMinOrderByAggregateInput
  }

  export type HospitalScalarWhereWithAggregatesInput = {
    AND?: HospitalScalarWhereWithAggregatesInput | HospitalScalarWhereWithAggregatesInput[]
    OR?: HospitalScalarWhereWithAggregatesInput[]
    NOT?: HospitalScalarWhereWithAggregatesInput | HospitalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Hospital"> | string
    name?: StringWithAggregatesFilter<"Hospital"> | string
    subdomain?: StringWithAggregatesFilter<"Hospital"> | string
    description?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Hospital"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Hospital"> | Date | string
    settings?: JsonWithAggregatesFilter<"Hospital">
    branding?: JsonNullableWithAggregatesFilter<"Hospital">
    isActive?: BoolWithAggregatesFilter<"Hospital"> | boolean
    code?: StringNullableWithAggregatesFilter<"Hospital"> | string | null
  }

  export type MedicalRecordWhereInput = {
    AND?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    OR?: MedicalRecordWhereInput[]
    NOT?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    id?: StringFilter<"MedicalRecord"> | string
    patientId?: StringFilter<"MedicalRecord"> | string
    doctorId?: StringFilter<"MedicalRecord"> | string
    hospitalId?: StringFilter<"MedicalRecord"> | string
    type?: StringFilter<"MedicalRecord"> | string
    details?: JsonFilter<"MedicalRecord">
    date?: DateTimeFilter<"MedicalRecord"> | Date | string
    createdAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type MedicalRecordOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    type?: SortOrder
    details?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
    Patient?: PatientOrderByWithRelationInput
    Hospital?: HospitalOrderByWithRelationInput
  }

  export type MedicalRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    OR?: MedicalRecordWhereInput[]
    NOT?: MedicalRecordWhereInput | MedicalRecordWhereInput[]
    patientId?: StringFilter<"MedicalRecord"> | string
    doctorId?: StringFilter<"MedicalRecord"> | string
    hospitalId?: StringFilter<"MedicalRecord"> | string
    type?: StringFilter<"MedicalRecord"> | string
    details?: JsonFilter<"MedicalRecord">
    date?: DateTimeFilter<"MedicalRecord"> | Date | string
    createdAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    Patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id">

  export type MedicalRecordOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    type?: SortOrder
    details?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalRecordCountOrderByAggregateInput
    _max?: MedicalRecordMaxOrderByAggregateInput
    _min?: MedicalRecordMinOrderByAggregateInput
  }

  export type MedicalRecordScalarWhereWithAggregatesInput = {
    AND?: MedicalRecordScalarWhereWithAggregatesInput | MedicalRecordScalarWhereWithAggregatesInput[]
    OR?: MedicalRecordScalarWhereWithAggregatesInput[]
    NOT?: MedicalRecordScalarWhereWithAggregatesInput | MedicalRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MedicalRecord"> | string
    patientId?: StringWithAggregatesFilter<"MedicalRecord"> | string
    doctorId?: StringWithAggregatesFilter<"MedicalRecord"> | string
    hospitalId?: StringWithAggregatesFilter<"MedicalRecord"> | string
    type?: StringWithAggregatesFilter<"MedicalRecord"> | string
    details?: JsonWithAggregatesFilter<"MedicalRecord">
    date?: DateTimeWithAggregatesFilter<"MedicalRecord"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalRecord"> | Date | string
  }

  export type NeonatalRecordWhereInput = {
    AND?: NeonatalRecordWhereInput | NeonatalRecordWhereInput[]
    OR?: NeonatalRecordWhereInput[]
    NOT?: NeonatalRecordWhereInput | NeonatalRecordWhereInput[]
    id?: StringFilter<"NeonatalRecord"> | string
    patientId?: StringFilter<"NeonatalRecord"> | string
    hospitalId?: StringFilter<"NeonatalRecord"> | string
    birthWeight?: FloatFilter<"NeonatalRecord"> | number
    gestationalAgeAtBirth?: IntFilter<"NeonatalRecord"> | number
    careLevel?: EnumCareLevelFilter<"NeonatalRecord"> | $Enums.CareLevel
    status?: EnumNeonatalStatusFilter<"NeonatalRecord"> | $Enums.NeonatalStatus
    dischargeStatus?: EnumDischargeStatusNullableFilter<"NeonatalRecord"> | $Enums.DischargeStatus | null
    apgarScore?: IntNullableFilter<"NeonatalRecord"> | number | null
    motherId?: StringNullableFilter<"NeonatalRecord"> | string | null
    birthComplications?: StringNullableFilter<"NeonatalRecord"> | string | null
    feedingMethod?: StringNullableFilter<"NeonatalRecord"> | string | null
    createdAt?: DateTimeFilter<"NeonatalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"NeonatalRecord"> | Date | string
    createdByUserId?: StringFilter<"NeonatalRecord"> | string
    updatedByUserId?: StringFilter<"NeonatalRecord"> | string
    mrn?: StringNullableFilter<"NeonatalRecord"> | string | null
    User_NeonatalRecord_createdByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    Patient_NeonatalRecord_motherIdToPatient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    Patient_NeonatalRecord_patientIdToPatient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    User_NeonatalRecord_updatedByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NeonatalRecordOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    birthWeight?: SortOrder
    gestationalAgeAtBirth?: SortOrder
    careLevel?: SortOrder
    status?: SortOrder
    dischargeStatus?: SortOrderInput | SortOrder
    apgarScore?: SortOrderInput | SortOrder
    motherId?: SortOrderInput | SortOrder
    birthComplications?: SortOrderInput | SortOrder
    feedingMethod?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrderInput | SortOrder
    User_NeonatalRecord_createdByUserIdToUser?: UserOrderByWithRelationInput
    Hospital?: HospitalOrderByWithRelationInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientOrderByWithRelationInput
    Patient_NeonatalRecord_patientIdToPatient?: PatientOrderByWithRelationInput
    User_NeonatalRecord_updatedByUserIdToUser?: UserOrderByWithRelationInput
  }

  export type NeonatalRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mrn?: string
    AND?: NeonatalRecordWhereInput | NeonatalRecordWhereInput[]
    OR?: NeonatalRecordWhereInput[]
    NOT?: NeonatalRecordWhereInput | NeonatalRecordWhereInput[]
    patientId?: StringFilter<"NeonatalRecord"> | string
    hospitalId?: StringFilter<"NeonatalRecord"> | string
    birthWeight?: FloatFilter<"NeonatalRecord"> | number
    gestationalAgeAtBirth?: IntFilter<"NeonatalRecord"> | number
    careLevel?: EnumCareLevelFilter<"NeonatalRecord"> | $Enums.CareLevel
    status?: EnumNeonatalStatusFilter<"NeonatalRecord"> | $Enums.NeonatalStatus
    dischargeStatus?: EnumDischargeStatusNullableFilter<"NeonatalRecord"> | $Enums.DischargeStatus | null
    apgarScore?: IntNullableFilter<"NeonatalRecord"> | number | null
    motherId?: StringNullableFilter<"NeonatalRecord"> | string | null
    birthComplications?: StringNullableFilter<"NeonatalRecord"> | string | null
    feedingMethod?: StringNullableFilter<"NeonatalRecord"> | string | null
    createdAt?: DateTimeFilter<"NeonatalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"NeonatalRecord"> | Date | string
    createdByUserId?: StringFilter<"NeonatalRecord"> | string
    updatedByUserId?: StringFilter<"NeonatalRecord"> | string
    User_NeonatalRecord_createdByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
    Hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    Patient_NeonatalRecord_motherIdToPatient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    Patient_NeonatalRecord_patientIdToPatient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    User_NeonatalRecord_updatedByUserIdToUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "mrn">

  export type NeonatalRecordOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    birthWeight?: SortOrder
    gestationalAgeAtBirth?: SortOrder
    careLevel?: SortOrder
    status?: SortOrder
    dischargeStatus?: SortOrderInput | SortOrder
    apgarScore?: SortOrderInput | SortOrder
    motherId?: SortOrderInput | SortOrder
    birthComplications?: SortOrderInput | SortOrder
    feedingMethod?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrderInput | SortOrder
    _count?: NeonatalRecordCountOrderByAggregateInput
    _avg?: NeonatalRecordAvgOrderByAggregateInput
    _max?: NeonatalRecordMaxOrderByAggregateInput
    _min?: NeonatalRecordMinOrderByAggregateInput
    _sum?: NeonatalRecordSumOrderByAggregateInput
  }

  export type NeonatalRecordScalarWhereWithAggregatesInput = {
    AND?: NeonatalRecordScalarWhereWithAggregatesInput | NeonatalRecordScalarWhereWithAggregatesInput[]
    OR?: NeonatalRecordScalarWhereWithAggregatesInput[]
    NOT?: NeonatalRecordScalarWhereWithAggregatesInput | NeonatalRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NeonatalRecord"> | string
    patientId?: StringWithAggregatesFilter<"NeonatalRecord"> | string
    hospitalId?: StringWithAggregatesFilter<"NeonatalRecord"> | string
    birthWeight?: FloatWithAggregatesFilter<"NeonatalRecord"> | number
    gestationalAgeAtBirth?: IntWithAggregatesFilter<"NeonatalRecord"> | number
    careLevel?: EnumCareLevelWithAggregatesFilter<"NeonatalRecord"> | $Enums.CareLevel
    status?: EnumNeonatalStatusWithAggregatesFilter<"NeonatalRecord"> | $Enums.NeonatalStatus
    dischargeStatus?: EnumDischargeStatusNullableWithAggregatesFilter<"NeonatalRecord"> | $Enums.DischargeStatus | null
    apgarScore?: IntNullableWithAggregatesFilter<"NeonatalRecord"> | number | null
    motherId?: StringNullableWithAggregatesFilter<"NeonatalRecord"> | string | null
    birthComplications?: StringNullableWithAggregatesFilter<"NeonatalRecord"> | string | null
    feedingMethod?: StringNullableWithAggregatesFilter<"NeonatalRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"NeonatalRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NeonatalRecord"> | Date | string
    createdByUserId?: StringWithAggregatesFilter<"NeonatalRecord"> | string
    updatedByUserId?: StringWithAggregatesFilter<"NeonatalRecord"> | string
    mrn?: StringNullableWithAggregatesFilter<"NeonatalRecord"> | string | null
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    mrn?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    gender?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    contact?: StringNullableFilter<"Patient"> | string | null
    note?: StringNullableFilter<"Patient"> | string | null
    lastVisit?: DateTimeNullableFilter<"Patient"> | Date | string | null
    nextVisit?: DateTimeNullableFilter<"Patient"> | Date | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    userId?: StringNullableFilter<"Patient"> | string | null
    hospitalId?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    qrCode?: StringNullableFilter<"Patient"> | string | null
    onboardingCompleted?: BoolFilter<"Patient"> | boolean
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    Hospital?: XOR<HospitalNullableScalarRelationFilter, HospitalWhereInput> | null
    Appointments?: AppointmentListRelationFilter
    MedicalRecords?: MedicalRecordListRelationFilter
    PasswordResets?: PasswordResetListRelationFilter
    Doctors?: UserListRelationFilter
    ProfilePicture?: XOR<ProfilePictureNullableScalarRelationFilter, ProfilePictureWhereInput> | null
    Emails?: PatientEmailListRelationFilter
    Phones?: PatientPhoneListRelationFilter
    SearchIndex?: XOR<PatientSearchIndexNullableScalarRelationFilter, PatientSearchIndexWhereInput> | null
    WidgetPrefs?: XOR<PatientWidgetPreferenceNullableScalarRelationFilter, PatientWidgetPreferenceWhereInput> | null
    HospitalAccesses?: PatientHospitalAccessListRelationFilter
    AntenatalRecords?: AntenatalRecordListRelationFilter
    NeonatalRecords_AsPatient?: NeonatalRecordListRelationFilter
    NeonatalRecords_AsMother?: NeonatalRecordListRelationFilter
    ReferralsReceived?: ReferralListRelationFilter
    AmbulanceDispatches?: AmbulanceDispatchListRelationFilter
    AmbulanceRequests?: AmbulanceRequestListRelationFilter
    Wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    BillingRecords?: BillingListRelationFilter
    Conversations?: ConversationListRelationFilter
    BirthRecord?: XOR<BirthRecordNullableScalarRelationFilter, BirthRecordWhereInput> | null
    MotherOfBirths?: BirthRecordListRelationFilter
    FatherOfBirths?: BirthRecordListRelationFilter
    DeathRecord?: XOR<DeathRecordNullableScalarRelationFilter, DeathRecordWhereInput> | null
    MarketplaceOrders?: MarketplaceOrderListRelationFilter
    SavedVendors?: SavedVendorListRelationFilter
    CartItems?: CartItemListRelationFilter
    Prescription?: PrescriptionListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    lastVisit?: SortOrderInput | SortOrder
    nextVisit?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    hospitalId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qrCode?: SortOrderInput | SortOrder
    onboardingCompleted?: SortOrder
    User?: UserOrderByWithRelationInput
    Hospital?: HospitalOrderByWithRelationInput
    Appointments?: AppointmentOrderByRelationAggregateInput
    MedicalRecords?: MedicalRecordOrderByRelationAggregateInput
    PasswordResets?: PasswordResetOrderByRelationAggregateInput
    Doctors?: UserOrderByRelationAggregateInput
    ProfilePicture?: ProfilePictureOrderByWithRelationInput
    Emails?: PatientEmailOrderByRelationAggregateInput
    Phones?: PatientPhoneOrderByRelationAggregateInput
    SearchIndex?: PatientSearchIndexOrderByWithRelationInput
    WidgetPrefs?: PatientWidgetPreferenceOrderByWithRelationInput
    HospitalAccesses?: PatientHospitalAccessOrderByRelationAggregateInput
    AntenatalRecords?: AntenatalRecordOrderByRelationAggregateInput
    NeonatalRecords_AsPatient?: NeonatalRecordOrderByRelationAggregateInput
    NeonatalRecords_AsMother?: NeonatalRecordOrderByRelationAggregateInput
    ReferralsReceived?: ReferralOrderByRelationAggregateInput
    AmbulanceDispatches?: AmbulanceDispatchOrderByRelationAggregateInput
    AmbulanceRequests?: AmbulanceRequestOrderByRelationAggregateInput
    Wallet?: WalletOrderByWithRelationInput
    BillingRecords?: BillingOrderByRelationAggregateInput
    Conversations?: ConversationOrderByRelationAggregateInput
    BirthRecord?: BirthRecordOrderByWithRelationInput
    MotherOfBirths?: BirthRecordOrderByRelationAggregateInput
    FatherOfBirths?: BirthRecordOrderByRelationAggregateInput
    DeathRecord?: DeathRecordOrderByWithRelationInput
    MarketplaceOrders?: MarketplaceOrderOrderByRelationAggregateInput
    SavedVendors?: SavedVendorOrderByRelationAggregateInput
    CartItems?: CartItemOrderByRelationAggregateInput
    Prescription?: PrescriptionOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    mrn?: string
    userId?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    name?: StringFilter<"Patient"> | string
    gender?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    contact?: StringNullableFilter<"Patient"> | string | null
    note?: StringNullableFilter<"Patient"> | string | null
    lastVisit?: DateTimeNullableFilter<"Patient"> | Date | string | null
    nextVisit?: DateTimeNullableFilter<"Patient"> | Date | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    hospitalId?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    qrCode?: StringNullableFilter<"Patient"> | string | null
    onboardingCompleted?: BoolFilter<"Patient"> | boolean
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    Hospital?: XOR<HospitalNullableScalarRelationFilter, HospitalWhereInput> | null
    Appointments?: AppointmentListRelationFilter
    MedicalRecords?: MedicalRecordListRelationFilter
    PasswordResets?: PasswordResetListRelationFilter
    Doctors?: UserListRelationFilter
    ProfilePicture?: XOR<ProfilePictureNullableScalarRelationFilter, ProfilePictureWhereInput> | null
    Emails?: PatientEmailListRelationFilter
    Phones?: PatientPhoneListRelationFilter
    SearchIndex?: XOR<PatientSearchIndexNullableScalarRelationFilter, PatientSearchIndexWhereInput> | null
    WidgetPrefs?: XOR<PatientWidgetPreferenceNullableScalarRelationFilter, PatientWidgetPreferenceWhereInput> | null
    HospitalAccesses?: PatientHospitalAccessListRelationFilter
    AntenatalRecords?: AntenatalRecordListRelationFilter
    NeonatalRecords_AsPatient?: NeonatalRecordListRelationFilter
    NeonatalRecords_AsMother?: NeonatalRecordListRelationFilter
    ReferralsReceived?: ReferralListRelationFilter
    AmbulanceDispatches?: AmbulanceDispatchListRelationFilter
    AmbulanceRequests?: AmbulanceRequestListRelationFilter
    Wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    BillingRecords?: BillingListRelationFilter
    Conversations?: ConversationListRelationFilter
    BirthRecord?: XOR<BirthRecordNullableScalarRelationFilter, BirthRecordWhereInput> | null
    MotherOfBirths?: BirthRecordListRelationFilter
    FatherOfBirths?: BirthRecordListRelationFilter
    DeathRecord?: XOR<DeathRecordNullableScalarRelationFilter, DeathRecordWhereInput> | null
    MarketplaceOrders?: MarketplaceOrderListRelationFilter
    SavedVendors?: SavedVendorListRelationFilter
    CartItems?: CartItemListRelationFilter
    Prescription?: PrescriptionListRelationFilter
  }, "id" | "mrn" | "userId">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    gender?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    contact?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    lastVisit?: SortOrderInput | SortOrder
    nextVisit?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    hospitalId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qrCode?: SortOrderInput | SortOrder
    onboardingCompleted?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    mrn?: StringWithAggregatesFilter<"Patient"> | string
    name?: StringWithAggregatesFilter<"Patient"> | string
    gender?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    contact?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    note?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    lastVisit?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    nextVisit?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    medicalHistory?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    userId?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    hospitalId?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    qrCode?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    onboardingCompleted?: BoolWithAggregatesFilter<"Patient"> | boolean
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    phone?: StringNullableFilter<"User"> | string | null
    photo?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolFilter<"User"> | boolean
    isHospitalAdmin?: BoolFilter<"User"> | boolean
    specialties?: StringNullableListFilter<"User">
    hospitalId?: StringNullableFilter<"User"> | string | null
    patientProfile?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    Hospital?: XOR<HospitalNullableScalarRelationFilter, HospitalWhereInput> | null
    NeonatalRecords_updated?: NeonatalRecordListRelationFilter
    AntenatalRecords_created?: AntenatalRecordListRelationFilter
    AntenatalRecords_updated?: AntenatalRecordListRelationFilter
    Appointments?: AppointmentListRelationFilter
    MedicalRecords?: MedicalRecordListRelationFilter
    NeonatalRecords_created?: NeonatalRecordListRelationFilter
    PatientAccess_grantedBy?: PatientHospitalAccessListRelationFilter
    DoctorPatients?: PatientListRelationFilter
    ProfilePicture?: XOR<ProfilePictureNullableScalarRelationFilter, ProfilePictureWhereInput> | null
    PasswordResets?: PasswordResetListRelationFilter
    StaffProfile?: XOR<StaffProfileNullableScalarRelationFilter, StaffProfileWhereInput> | null
    DepartmentMemberships?: DepartmentMembershipListRelationFilter
    Availability?: XOR<DoctorAvailabilityNullableScalarRelationFilter, DoctorAvailabilityWhereInput> | null
    ReferralsSent?: ReferralListRelationFilter
    ReferralsReceived?: ReferralListRelationFilter
    Conversations?: ConversationListRelationFilter
    MessagesSent?: MessageListRelationFilter
    BirthRecordsRegistered?: BirthRecordListRelationFilter
    DeathRecordsRegistered?: DeathRecordListRelationFilter
    Prescriptions?: PrescriptionListRelationFilter
    SecurityAuditLog?: SecurityAuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrder
    isHospitalAdmin?: SortOrder
    specialties?: SortOrder
    hospitalId?: SortOrderInput | SortOrder
    patientProfile?: PatientOrderByWithRelationInput
    Hospital?: HospitalOrderByWithRelationInput
    NeonatalRecords_updated?: NeonatalRecordOrderByRelationAggregateInput
    AntenatalRecords_created?: AntenatalRecordOrderByRelationAggregateInput
    AntenatalRecords_updated?: AntenatalRecordOrderByRelationAggregateInput
    Appointments?: AppointmentOrderByRelationAggregateInput
    MedicalRecords?: MedicalRecordOrderByRelationAggregateInput
    NeonatalRecords_created?: NeonatalRecordOrderByRelationAggregateInput
    PatientAccess_grantedBy?: PatientHospitalAccessOrderByRelationAggregateInput
    DoctorPatients?: PatientOrderByRelationAggregateInput
    ProfilePicture?: ProfilePictureOrderByWithRelationInput
    PasswordResets?: PasswordResetOrderByRelationAggregateInput
    StaffProfile?: StaffProfileOrderByWithRelationInput
    DepartmentMemberships?: DepartmentMembershipOrderByRelationAggregateInput
    Availability?: DoctorAvailabilityOrderByWithRelationInput
    ReferralsSent?: ReferralOrderByRelationAggregateInput
    ReferralsReceived?: ReferralOrderByRelationAggregateInput
    Conversations?: ConversationOrderByRelationAggregateInput
    MessagesSent?: MessageOrderByRelationAggregateInput
    BirthRecordsRegistered?: BirthRecordOrderByRelationAggregateInput
    DeathRecordsRegistered?: DeathRecordOrderByRelationAggregateInput
    Prescriptions?: PrescriptionOrderByRelationAggregateInput
    SecurityAuditLog?: SecurityAuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    phone?: StringNullableFilter<"User"> | string | null
    photo?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolFilter<"User"> | boolean
    isHospitalAdmin?: BoolFilter<"User"> | boolean
    specialties?: StringNullableListFilter<"User">
    hospitalId?: StringNullableFilter<"User"> | string | null
    patientProfile?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    Hospital?: XOR<HospitalNullableScalarRelationFilter, HospitalWhereInput> | null
    NeonatalRecords_updated?: NeonatalRecordListRelationFilter
    AntenatalRecords_created?: AntenatalRecordListRelationFilter
    AntenatalRecords_updated?: AntenatalRecordListRelationFilter
    Appointments?: AppointmentListRelationFilter
    MedicalRecords?: MedicalRecordListRelationFilter
    NeonatalRecords_created?: NeonatalRecordListRelationFilter
    PatientAccess_grantedBy?: PatientHospitalAccessListRelationFilter
    DoctorPatients?: PatientListRelationFilter
    ProfilePicture?: XOR<ProfilePictureNullableScalarRelationFilter, ProfilePictureWhereInput> | null
    PasswordResets?: PasswordResetListRelationFilter
    StaffProfile?: XOR<StaffProfileNullableScalarRelationFilter, StaffProfileWhereInput> | null
    DepartmentMemberships?: DepartmentMembershipListRelationFilter
    Availability?: XOR<DoctorAvailabilityNullableScalarRelationFilter, DoctorAvailabilityWhereInput> | null
    ReferralsSent?: ReferralListRelationFilter
    ReferralsReceived?: ReferralListRelationFilter
    Conversations?: ConversationListRelationFilter
    MessagesSent?: MessageListRelationFilter
    BirthRecordsRegistered?: BirthRecordListRelationFilter
    DeathRecordsRegistered?: DeathRecordListRelationFilter
    Prescriptions?: PrescriptionListRelationFilter
    SecurityAuditLog?: SecurityAuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrderInput | SortOrder
    photo?: SortOrderInput | SortOrder
    isSuperAdmin?: SortOrder
    isHospitalAdmin?: SortOrder
    specialties?: SortOrder
    hospitalId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    photo?: StringNullableWithAggregatesFilter<"User"> | string | null
    isSuperAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    isHospitalAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    specialties?: StringNullableListFilter<"User">
    hospitalId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type PasswordResetWhereInput = {
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    id?: StringFilter<"PasswordReset"> | string
    token?: StringFilter<"PasswordReset"> | string
    email?: StringNullableFilter<"PasswordReset"> | string | null
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordReset"> | Date | string
    patientId?: StringNullableFilter<"PasswordReset"> | string | null
    userId?: StringNullableFilter<"PasswordReset"> | string | null
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type PasswordResetOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type PasswordResetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    token?: StringFilter<"PasswordReset"> | string
    email?: StringNullableFilter<"PasswordReset"> | string | null
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordReset"> | Date | string
    patientId?: StringNullableFilter<"PasswordReset"> | string | null
    userId?: StringNullableFilter<"PasswordReset"> | string | null
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type PasswordResetOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: PasswordResetCountOrderByAggregateInput
    _max?: PasswordResetMaxOrderByAggregateInput
    _min?: PasswordResetMinOrderByAggregateInput
  }

  export type PasswordResetScalarWhereWithAggregatesInput = {
    AND?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    OR?: PasswordResetScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordReset"> | string
    token?: StringWithAggregatesFilter<"PasswordReset"> | string
    email?: StringNullableWithAggregatesFilter<"PasswordReset"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableWithAggregatesFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    patientId?: StringNullableWithAggregatesFilter<"PasswordReset"> | string | null
    userId?: StringNullableWithAggregatesFilter<"PasswordReset"> | string | null
  }

  export type SecurityAuditLogWhereInput = {
    AND?: SecurityAuditLogWhereInput | SecurityAuditLogWhereInput[]
    OR?: SecurityAuditLogWhereInput[]
    NOT?: SecurityAuditLogWhereInput | SecurityAuditLogWhereInput[]
    id?: StringFilter<"SecurityAuditLog"> | string
    userId?: StringFilter<"SecurityAuditLog"> | string
    action?: StringFilter<"SecurityAuditLog"> | string
    details?: StringNullableFilter<"SecurityAuditLog"> | string | null
    ipAddress?: StringNullableFilter<"SecurityAuditLog"> | string | null
    userAgent?: StringNullableFilter<"SecurityAuditLog"> | string | null
    createdAt?: DateTimeFilter<"SecurityAuditLog"> | Date | string
    updatedAt?: DateTimeFilter<"SecurityAuditLog"> | Date | string
    requestPath?: StringNullableFilter<"SecurityAuditLog"> | string | null
    success?: BoolFilter<"SecurityAuditLog"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SecurityAuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestPath?: SortOrderInput | SortOrder
    success?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SecurityAuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SecurityAuditLogWhereInput | SecurityAuditLogWhereInput[]
    OR?: SecurityAuditLogWhereInput[]
    NOT?: SecurityAuditLogWhereInput | SecurityAuditLogWhereInput[]
    userId?: StringFilter<"SecurityAuditLog"> | string
    action?: StringFilter<"SecurityAuditLog"> | string
    details?: StringNullableFilter<"SecurityAuditLog"> | string | null
    ipAddress?: StringNullableFilter<"SecurityAuditLog"> | string | null
    userAgent?: StringNullableFilter<"SecurityAuditLog"> | string | null
    createdAt?: DateTimeFilter<"SecurityAuditLog"> | Date | string
    updatedAt?: DateTimeFilter<"SecurityAuditLog"> | Date | string
    requestPath?: StringNullableFilter<"SecurityAuditLog"> | string | null
    success?: BoolFilter<"SecurityAuditLog"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SecurityAuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestPath?: SortOrderInput | SortOrder
    success?: SortOrder
    _count?: SecurityAuditLogCountOrderByAggregateInput
    _max?: SecurityAuditLogMaxOrderByAggregateInput
    _min?: SecurityAuditLogMinOrderByAggregateInput
  }

  export type SecurityAuditLogScalarWhereWithAggregatesInput = {
    AND?: SecurityAuditLogScalarWhereWithAggregatesInput | SecurityAuditLogScalarWhereWithAggregatesInput[]
    OR?: SecurityAuditLogScalarWhereWithAggregatesInput[]
    NOT?: SecurityAuditLogScalarWhereWithAggregatesInput | SecurityAuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SecurityAuditLog"> | string
    userId?: StringWithAggregatesFilter<"SecurityAuditLog"> | string
    action?: StringWithAggregatesFilter<"SecurityAuditLog"> | string
    details?: StringNullableWithAggregatesFilter<"SecurityAuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"SecurityAuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"SecurityAuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SecurityAuditLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SecurityAuditLog"> | Date | string
    requestPath?: StringNullableWithAggregatesFilter<"SecurityAuditLog"> | string | null
    success?: BoolWithAggregatesFilter<"SecurityAuditLog"> | boolean
  }

  export type ProfilePictureWhereInput = {
    AND?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    OR?: ProfilePictureWhereInput[]
    NOT?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    id?: StringFilter<"ProfilePicture"> | string
    patientId?: StringNullableFilter<"ProfilePicture"> | string | null
    userId?: StringNullableFilter<"ProfilePicture"> | string | null
    imageUrl?: StringFilter<"ProfilePicture"> | string
    imageData?: BytesNullableFilter<"ProfilePicture"> | Uint8Array | null
    mimeType?: StringFilter<"ProfilePicture"> | string
    filename?: StringNullableFilter<"ProfilePicture"> | string | null
    size?: IntFilter<"ProfilePicture"> | number
    width?: IntNullableFilter<"ProfilePicture"> | number | null
    height?: IntNullableFilter<"ProfilePicture"> | number | null
    createdAt?: DateTimeFilter<"ProfilePicture"> | Date | string
    updatedAt?: DateTimeFilter<"ProfilePicture"> | Date | string
    uploadedBy?: StringNullableFilter<"ProfilePicture"> | string | null
    ownerType?: StringFilter<"ProfilePicture"> | string
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ProfilePictureOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    imageUrl?: SortOrder
    imageData?: SortOrderInput | SortOrder
    mimeType?: SortOrder
    filename?: SortOrderInput | SortOrder
    size?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uploadedBy?: SortOrderInput | SortOrder
    ownerType?: SortOrder
    patient?: PatientOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProfilePictureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId?: string
    userId?: string
    AND?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    OR?: ProfilePictureWhereInput[]
    NOT?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    imageUrl?: StringFilter<"ProfilePicture"> | string
    imageData?: BytesNullableFilter<"ProfilePicture"> | Uint8Array | null
    mimeType?: StringFilter<"ProfilePicture"> | string
    filename?: StringNullableFilter<"ProfilePicture"> | string | null
    size?: IntFilter<"ProfilePicture"> | number
    width?: IntNullableFilter<"ProfilePicture"> | number | null
    height?: IntNullableFilter<"ProfilePicture"> | number | null
    createdAt?: DateTimeFilter<"ProfilePicture"> | Date | string
    updatedAt?: DateTimeFilter<"ProfilePicture"> | Date | string
    uploadedBy?: StringNullableFilter<"ProfilePicture"> | string | null
    ownerType?: StringFilter<"ProfilePicture"> | string
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "patientId" | "userId">

  export type ProfilePictureOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    imageUrl?: SortOrder
    imageData?: SortOrderInput | SortOrder
    mimeType?: SortOrder
    filename?: SortOrderInput | SortOrder
    size?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uploadedBy?: SortOrderInput | SortOrder
    ownerType?: SortOrder
    _count?: ProfilePictureCountOrderByAggregateInput
    _avg?: ProfilePictureAvgOrderByAggregateInput
    _max?: ProfilePictureMaxOrderByAggregateInput
    _min?: ProfilePictureMinOrderByAggregateInput
    _sum?: ProfilePictureSumOrderByAggregateInput
  }

  export type ProfilePictureScalarWhereWithAggregatesInput = {
    AND?: ProfilePictureScalarWhereWithAggregatesInput | ProfilePictureScalarWhereWithAggregatesInput[]
    OR?: ProfilePictureScalarWhereWithAggregatesInput[]
    NOT?: ProfilePictureScalarWhereWithAggregatesInput | ProfilePictureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfilePicture"> | string
    patientId?: StringNullableWithAggregatesFilter<"ProfilePicture"> | string | null
    userId?: StringNullableWithAggregatesFilter<"ProfilePicture"> | string | null
    imageUrl?: StringWithAggregatesFilter<"ProfilePicture"> | string
    imageData?: BytesNullableWithAggregatesFilter<"ProfilePicture"> | Uint8Array | null
    mimeType?: StringWithAggregatesFilter<"ProfilePicture"> | string
    filename?: StringNullableWithAggregatesFilter<"ProfilePicture"> | string | null
    size?: IntWithAggregatesFilter<"ProfilePicture"> | number
    width?: IntNullableWithAggregatesFilter<"ProfilePicture"> | number | null
    height?: IntNullableWithAggregatesFilter<"ProfilePicture"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ProfilePicture"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfilePicture"> | Date | string
    uploadedBy?: StringNullableWithAggregatesFilter<"ProfilePicture"> | string | null
    ownerType?: StringWithAggregatesFilter<"ProfilePicture"> | string
  }

  export type PatientEmailWhereInput = {
    AND?: PatientEmailWhereInput | PatientEmailWhereInput[]
    OR?: PatientEmailWhereInput[]
    NOT?: PatientEmailWhereInput | PatientEmailWhereInput[]
    id?: StringFilter<"PatientEmail"> | string
    email?: StringFilter<"PatientEmail"> | string
    verified?: BoolFilter<"PatientEmail"> | boolean
    primary?: BoolFilter<"PatientEmail"> | boolean
    createdAt?: DateTimeFilter<"PatientEmail"> | Date | string
    updatedAt?: DateTimeFilter<"PatientEmail"> | Date | string
    patientId?: StringFilter<"PatientEmail"> | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type PatientEmailOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type PatientEmailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: PatientEmailWhereInput | PatientEmailWhereInput[]
    OR?: PatientEmailWhereInput[]
    NOT?: PatientEmailWhereInput | PatientEmailWhereInput[]
    verified?: BoolFilter<"PatientEmail"> | boolean
    primary?: BoolFilter<"PatientEmail"> | boolean
    createdAt?: DateTimeFilter<"PatientEmail"> | Date | string
    updatedAt?: DateTimeFilter<"PatientEmail"> | Date | string
    patientId?: StringFilter<"PatientEmail"> | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id" | "email">

  export type PatientEmailOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    _count?: PatientEmailCountOrderByAggregateInput
    _max?: PatientEmailMaxOrderByAggregateInput
    _min?: PatientEmailMinOrderByAggregateInput
  }

  export type PatientEmailScalarWhereWithAggregatesInput = {
    AND?: PatientEmailScalarWhereWithAggregatesInput | PatientEmailScalarWhereWithAggregatesInput[]
    OR?: PatientEmailScalarWhereWithAggregatesInput[]
    NOT?: PatientEmailScalarWhereWithAggregatesInput | PatientEmailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientEmail"> | string
    email?: StringWithAggregatesFilter<"PatientEmail"> | string
    verified?: BoolWithAggregatesFilter<"PatientEmail"> | boolean
    primary?: BoolWithAggregatesFilter<"PatientEmail"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PatientEmail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientEmail"> | Date | string
    patientId?: StringWithAggregatesFilter<"PatientEmail"> | string
  }

  export type PatientPhoneWhereInput = {
    AND?: PatientPhoneWhereInput | PatientPhoneWhereInput[]
    OR?: PatientPhoneWhereInput[]
    NOT?: PatientPhoneWhereInput | PatientPhoneWhereInput[]
    id?: StringFilter<"PatientPhone"> | string
    phone?: StringFilter<"PatientPhone"> | string
    verified?: BoolFilter<"PatientPhone"> | boolean
    primary?: BoolFilter<"PatientPhone"> | boolean
    type?: StringFilter<"PatientPhone"> | string
    createdAt?: DateTimeFilter<"PatientPhone"> | Date | string
    updatedAt?: DateTimeFilter<"PatientPhone"> | Date | string
    patientId?: StringFilter<"PatientPhone"> | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type PatientPhoneOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type PatientPhoneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientPhoneWhereInput | PatientPhoneWhereInput[]
    OR?: PatientPhoneWhereInput[]
    NOT?: PatientPhoneWhereInput | PatientPhoneWhereInput[]
    phone?: StringFilter<"PatientPhone"> | string
    verified?: BoolFilter<"PatientPhone"> | boolean
    primary?: BoolFilter<"PatientPhone"> | boolean
    type?: StringFilter<"PatientPhone"> | string
    createdAt?: DateTimeFilter<"PatientPhone"> | Date | string
    updatedAt?: DateTimeFilter<"PatientPhone"> | Date | string
    patientId?: StringFilter<"PatientPhone"> | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id">

  export type PatientPhoneOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    _count?: PatientPhoneCountOrderByAggregateInput
    _max?: PatientPhoneMaxOrderByAggregateInput
    _min?: PatientPhoneMinOrderByAggregateInput
  }

  export type PatientPhoneScalarWhereWithAggregatesInput = {
    AND?: PatientPhoneScalarWhereWithAggregatesInput | PatientPhoneScalarWhereWithAggregatesInput[]
    OR?: PatientPhoneScalarWhereWithAggregatesInput[]
    NOT?: PatientPhoneScalarWhereWithAggregatesInput | PatientPhoneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientPhone"> | string
    phone?: StringWithAggregatesFilter<"PatientPhone"> | string
    verified?: BoolWithAggregatesFilter<"PatientPhone"> | boolean
    primary?: BoolWithAggregatesFilter<"PatientPhone"> | boolean
    type?: StringWithAggregatesFilter<"PatientPhone"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PatientPhone"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientPhone"> | Date | string
    patientId?: StringWithAggregatesFilter<"PatientPhone"> | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    hospitalId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    members?: DepartmentMembershipListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hospital?: HospitalOrderByWithRelationInput
    members?: DepartmentMembershipOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    hospitalId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    members?: DepartmentMembershipListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    hospitalId?: StringWithAggregatesFilter<"Department"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type DepartmentMembershipWhereInput = {
    AND?: DepartmentMembershipWhereInput | DepartmentMembershipWhereInput[]
    OR?: DepartmentMembershipWhereInput[]
    NOT?: DepartmentMembershipWhereInput | DepartmentMembershipWhereInput[]
    id?: StringFilter<"DepartmentMembership"> | string
    userId?: StringFilter<"DepartmentMembership"> | string
    departmentId?: StringFilter<"DepartmentMembership"> | string
    role?: StringFilter<"DepartmentMembership"> | string
    joinedAt?: DateTimeFilter<"DepartmentMembership"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }

  export type DepartmentMembershipOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type DepartmentMembershipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_departmentId?: DepartmentMembershipUserIdDepartmentIdCompoundUniqueInput
    AND?: DepartmentMembershipWhereInput | DepartmentMembershipWhereInput[]
    OR?: DepartmentMembershipWhereInput[]
    NOT?: DepartmentMembershipWhereInput | DepartmentMembershipWhereInput[]
    userId?: StringFilter<"DepartmentMembership"> | string
    departmentId?: StringFilter<"DepartmentMembership"> | string
    role?: StringFilter<"DepartmentMembership"> | string
    joinedAt?: DateTimeFilter<"DepartmentMembership"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }, "id" | "userId_departmentId">

  export type DepartmentMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    _count?: DepartmentMembershipCountOrderByAggregateInput
    _max?: DepartmentMembershipMaxOrderByAggregateInput
    _min?: DepartmentMembershipMinOrderByAggregateInput
  }

  export type DepartmentMembershipScalarWhereWithAggregatesInput = {
    AND?: DepartmentMembershipScalarWhereWithAggregatesInput | DepartmentMembershipScalarWhereWithAggregatesInput[]
    OR?: DepartmentMembershipScalarWhereWithAggregatesInput[]
    NOT?: DepartmentMembershipScalarWhereWithAggregatesInput | DepartmentMembershipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepartmentMembership"> | string
    userId?: StringWithAggregatesFilter<"DepartmentMembership"> | string
    departmentId?: StringWithAggregatesFilter<"DepartmentMembership"> | string
    role?: StringWithAggregatesFilter<"DepartmentMembership"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"DepartmentMembership"> | Date | string
  }

  export type StaffProfileWhereInput = {
    AND?: StaffProfileWhereInput | StaffProfileWhereInput[]
    OR?: StaffProfileWhereInput[]
    NOT?: StaffProfileWhereInput | StaffProfileWhereInput[]
    id?: StringFilter<"StaffProfile"> | string
    userId?: StringFilter<"StaffProfile"> | string
    hospitalId?: StringFilter<"StaffProfile"> | string
    staffId?: StringFilter<"StaffProfile"> | string
    specialization?: StringNullableFilter<"StaffProfile"> | string | null
    qualifications?: JsonNullableFilter<"StaffProfile">
    joiningDate?: DateTimeFilter<"StaffProfile"> | Date | string
    employmentStatus?: EnumEmploymentStatusFilter<"StaffProfile"> | $Enums.EmploymentStatus
    contactInformation?: JsonNullableFilter<"StaffProfile">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type StaffProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    staffId?: SortOrder
    specialization?: SortOrderInput | SortOrder
    qualifications?: SortOrderInput | SortOrder
    joiningDate?: SortOrder
    employmentStatus?: SortOrder
    contactInformation?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
  }

  export type StaffProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    staffId?: string
    AND?: StaffProfileWhereInput | StaffProfileWhereInput[]
    OR?: StaffProfileWhereInput[]
    NOT?: StaffProfileWhereInput | StaffProfileWhereInput[]
    hospitalId?: StringFilter<"StaffProfile"> | string
    specialization?: StringNullableFilter<"StaffProfile"> | string | null
    qualifications?: JsonNullableFilter<"StaffProfile">
    joiningDate?: DateTimeFilter<"StaffProfile"> | Date | string
    employmentStatus?: EnumEmploymentStatusFilter<"StaffProfile"> | $Enums.EmploymentStatus
    contactInformation?: JsonNullableFilter<"StaffProfile">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id" | "userId" | "staffId">

  export type StaffProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    staffId?: SortOrder
    specialization?: SortOrderInput | SortOrder
    qualifications?: SortOrderInput | SortOrder
    joiningDate?: SortOrder
    employmentStatus?: SortOrder
    contactInformation?: SortOrderInput | SortOrder
    _count?: StaffProfileCountOrderByAggregateInput
    _max?: StaffProfileMaxOrderByAggregateInput
    _min?: StaffProfileMinOrderByAggregateInput
  }

  export type StaffProfileScalarWhereWithAggregatesInput = {
    AND?: StaffProfileScalarWhereWithAggregatesInput | StaffProfileScalarWhereWithAggregatesInput[]
    OR?: StaffProfileScalarWhereWithAggregatesInput[]
    NOT?: StaffProfileScalarWhereWithAggregatesInput | StaffProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffProfile"> | string
    userId?: StringWithAggregatesFilter<"StaffProfile"> | string
    hospitalId?: StringWithAggregatesFilter<"StaffProfile"> | string
    staffId?: StringWithAggregatesFilter<"StaffProfile"> | string
    specialization?: StringNullableWithAggregatesFilter<"StaffProfile"> | string | null
    qualifications?: JsonNullableWithAggregatesFilter<"StaffProfile">
    joiningDate?: DateTimeWithAggregatesFilter<"StaffProfile"> | Date | string
    employmentStatus?: EnumEmploymentStatusWithAggregatesFilter<"StaffProfile"> | $Enums.EmploymentStatus
    contactInformation?: JsonNullableWithAggregatesFilter<"StaffProfile">
  }

  export type PatientHospitalAccessWhereInput = {
    AND?: PatientHospitalAccessWhereInput | PatientHospitalAccessWhereInput[]
    OR?: PatientHospitalAccessWhereInput[]
    NOT?: PatientHospitalAccessWhereInput | PatientHospitalAccessWhereInput[]
    id?: StringFilter<"PatientHospitalAccess"> | string
    patientId?: StringFilter<"PatientHospitalAccess"> | string
    hospitalId?: StringFilter<"PatientHospitalAccess"> | string
    accessLevel?: EnumAccessLevelFilter<"PatientHospitalAccess"> | $Enums.AccessLevel
    grantedAt?: DateTimeFilter<"PatientHospitalAccess"> | Date | string
    grantedBy?: StringFilter<"PatientHospitalAccess"> | string
    expiresAt?: DateTimeNullableFilter<"PatientHospitalAccess"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    granter?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PatientHospitalAccessOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    accessLevel?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
    granter?: UserOrderByWithRelationInput
  }

  export type PatientHospitalAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId_hospitalId?: PatientHospitalAccessPatientIdHospitalIdCompoundUniqueInput
    AND?: PatientHospitalAccessWhereInput | PatientHospitalAccessWhereInput[]
    OR?: PatientHospitalAccessWhereInput[]
    NOT?: PatientHospitalAccessWhereInput | PatientHospitalAccessWhereInput[]
    patientId?: StringFilter<"PatientHospitalAccess"> | string
    hospitalId?: StringFilter<"PatientHospitalAccess"> | string
    accessLevel?: EnumAccessLevelFilter<"PatientHospitalAccess"> | $Enums.AccessLevel
    grantedAt?: DateTimeFilter<"PatientHospitalAccess"> | Date | string
    grantedBy?: StringFilter<"PatientHospitalAccess"> | string
    expiresAt?: DateTimeNullableFilter<"PatientHospitalAccess"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    granter?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "patientId_hospitalId">

  export type PatientHospitalAccessOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    accessLevel?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: PatientHospitalAccessCountOrderByAggregateInput
    _max?: PatientHospitalAccessMaxOrderByAggregateInput
    _min?: PatientHospitalAccessMinOrderByAggregateInput
  }

  export type PatientHospitalAccessScalarWhereWithAggregatesInput = {
    AND?: PatientHospitalAccessScalarWhereWithAggregatesInput | PatientHospitalAccessScalarWhereWithAggregatesInput[]
    OR?: PatientHospitalAccessScalarWhereWithAggregatesInput[]
    NOT?: PatientHospitalAccessScalarWhereWithAggregatesInput | PatientHospitalAccessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientHospitalAccess"> | string
    patientId?: StringWithAggregatesFilter<"PatientHospitalAccess"> | string
    hospitalId?: StringWithAggregatesFilter<"PatientHospitalAccess"> | string
    accessLevel?: EnumAccessLevelWithAggregatesFilter<"PatientHospitalAccess"> | $Enums.AccessLevel
    grantedAt?: DateTimeWithAggregatesFilter<"PatientHospitalAccess"> | Date | string
    grantedBy?: StringWithAggregatesFilter<"PatientHospitalAccess"> | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"PatientHospitalAccess"> | Date | string | null
  }

  export type PatientSearchIndexWhereInput = {
    AND?: PatientSearchIndexWhereInput | PatientSearchIndexWhereInput[]
    OR?: PatientSearchIndexWhereInput[]
    NOT?: PatientSearchIndexWhereInput | PatientSearchIndexWhereInput[]
    id?: StringFilter<"PatientSearchIndex"> | string
    patientId?: StringFilter<"PatientSearchIndex"> | string
    mrn?: StringFilter<"PatientSearchIndex"> | string
    name?: StringFilter<"PatientSearchIndex"> | string
    phone?: StringNullableFilter<"PatientSearchIndex"> | string | null
    email?: StringNullableFilter<"PatientSearchIndex"> | string | null
    qrCode?: StringFilter<"PatientSearchIndex"> | string
    searchVector?: StringNullableFilter<"PatientSearchIndex"> | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type PatientSearchIndexOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    qrCode?: SortOrder
    searchVector?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type PatientSearchIndexWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId?: string
    mrn?: string
    qrCode?: string
    AND?: PatientSearchIndexWhereInput | PatientSearchIndexWhereInput[]
    OR?: PatientSearchIndexWhereInput[]
    NOT?: PatientSearchIndexWhereInput | PatientSearchIndexWhereInput[]
    name?: StringFilter<"PatientSearchIndex"> | string
    phone?: StringNullableFilter<"PatientSearchIndex"> | string | null
    email?: StringNullableFilter<"PatientSearchIndex"> | string | null
    searchVector?: StringNullableFilter<"PatientSearchIndex"> | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id" | "patientId" | "mrn" | "qrCode">

  export type PatientSearchIndexOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    qrCode?: SortOrder
    searchVector?: SortOrderInput | SortOrder
    _count?: PatientSearchIndexCountOrderByAggregateInput
    _max?: PatientSearchIndexMaxOrderByAggregateInput
    _min?: PatientSearchIndexMinOrderByAggregateInput
  }

  export type PatientSearchIndexScalarWhereWithAggregatesInput = {
    AND?: PatientSearchIndexScalarWhereWithAggregatesInput | PatientSearchIndexScalarWhereWithAggregatesInput[]
    OR?: PatientSearchIndexScalarWhereWithAggregatesInput[]
    NOT?: PatientSearchIndexScalarWhereWithAggregatesInput | PatientSearchIndexScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientSearchIndex"> | string
    patientId?: StringWithAggregatesFilter<"PatientSearchIndex"> | string
    mrn?: StringWithAggregatesFilter<"PatientSearchIndex"> | string
    name?: StringWithAggregatesFilter<"PatientSearchIndex"> | string
    phone?: StringNullableWithAggregatesFilter<"PatientSearchIndex"> | string | null
    email?: StringNullableWithAggregatesFilter<"PatientSearchIndex"> | string | null
    qrCode?: StringWithAggregatesFilter<"PatientSearchIndex"> | string
    searchVector?: StringNullableWithAggregatesFilter<"PatientSearchIndex"> | string | null
  }

  export type DoctorAvailabilityWhereInput = {
    AND?: DoctorAvailabilityWhereInput | DoctorAvailabilityWhereInput[]
    OR?: DoctorAvailabilityWhereInput[]
    NOT?: DoctorAvailabilityWhereInput | DoctorAvailabilityWhereInput[]
    id?: StringFilter<"DoctorAvailability"> | string
    doctorId?: StringFilter<"DoctorAvailability"> | string
    hospitalId?: StringFilter<"DoctorAvailability"> | string
    available?: BoolFilter<"DoctorAvailability"> | boolean
    schedule?: JsonFilter<"DoctorAvailability">
    serviceTypes?: StringNullableListFilter<"DoctorAvailability">
    nextAvailable?: DateTimeNullableFilter<"DoctorAvailability"> | Date | string | null
    doctor?: XOR<UserScalarRelationFilter, UserWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type DoctorAvailabilityOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    available?: SortOrder
    schedule?: SortOrder
    serviceTypes?: SortOrder
    nextAvailable?: SortOrderInput | SortOrder
    doctor?: UserOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
  }

  export type DoctorAvailabilityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    doctorId?: string
    AND?: DoctorAvailabilityWhereInput | DoctorAvailabilityWhereInput[]
    OR?: DoctorAvailabilityWhereInput[]
    NOT?: DoctorAvailabilityWhereInput | DoctorAvailabilityWhereInput[]
    hospitalId?: StringFilter<"DoctorAvailability"> | string
    available?: BoolFilter<"DoctorAvailability"> | boolean
    schedule?: JsonFilter<"DoctorAvailability">
    serviceTypes?: StringNullableListFilter<"DoctorAvailability">
    nextAvailable?: DateTimeNullableFilter<"DoctorAvailability"> | Date | string | null
    doctor?: XOR<UserScalarRelationFilter, UserWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id" | "doctorId">

  export type DoctorAvailabilityOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    available?: SortOrder
    schedule?: SortOrder
    serviceTypes?: SortOrder
    nextAvailable?: SortOrderInput | SortOrder
    _count?: DoctorAvailabilityCountOrderByAggregateInput
    _max?: DoctorAvailabilityMaxOrderByAggregateInput
    _min?: DoctorAvailabilityMinOrderByAggregateInput
  }

  export type DoctorAvailabilityScalarWhereWithAggregatesInput = {
    AND?: DoctorAvailabilityScalarWhereWithAggregatesInput | DoctorAvailabilityScalarWhereWithAggregatesInput[]
    OR?: DoctorAvailabilityScalarWhereWithAggregatesInput[]
    NOT?: DoctorAvailabilityScalarWhereWithAggregatesInput | DoctorAvailabilityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorAvailability"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorAvailability"> | string
    hospitalId?: StringWithAggregatesFilter<"DoctorAvailability"> | string
    available?: BoolWithAggregatesFilter<"DoctorAvailability"> | boolean
    schedule?: JsonWithAggregatesFilter<"DoctorAvailability">
    serviceTypes?: StringNullableListFilter<"DoctorAvailability">
    nextAvailable?: DateTimeNullableWithAggregatesFilter<"DoctorAvailability"> | Date | string | null
  }

  export type PatientWidgetPreferenceWhereInput = {
    AND?: PatientWidgetPreferenceWhereInput | PatientWidgetPreferenceWhereInput[]
    OR?: PatientWidgetPreferenceWhereInput[]
    NOT?: PatientWidgetPreferenceWhereInput | PatientWidgetPreferenceWhereInput[]
    id?: StringFilter<"PatientWidgetPreference"> | string
    patientId?: StringFilter<"PatientWidgetPreference"> | string
    recentDoctors?: StringNullableListFilter<"PatientWidgetPreference">
    preferredHospitals?: StringNullableListFilter<"PatientWidgetPreference">
    searchHistory?: JsonNullableFilter<"PatientWidgetPreference">
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type PatientWidgetPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    recentDoctors?: SortOrder
    preferredHospitals?: SortOrder
    searchHistory?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type PatientWidgetPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId?: string
    AND?: PatientWidgetPreferenceWhereInput | PatientWidgetPreferenceWhereInput[]
    OR?: PatientWidgetPreferenceWhereInput[]
    NOT?: PatientWidgetPreferenceWhereInput | PatientWidgetPreferenceWhereInput[]
    recentDoctors?: StringNullableListFilter<"PatientWidgetPreference">
    preferredHospitals?: StringNullableListFilter<"PatientWidgetPreference">
    searchHistory?: JsonNullableFilter<"PatientWidgetPreference">
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id" | "patientId">

  export type PatientWidgetPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    recentDoctors?: SortOrder
    preferredHospitals?: SortOrder
    searchHistory?: SortOrderInput | SortOrder
    _count?: PatientWidgetPreferenceCountOrderByAggregateInput
    _max?: PatientWidgetPreferenceMaxOrderByAggregateInput
    _min?: PatientWidgetPreferenceMinOrderByAggregateInput
  }

  export type PatientWidgetPreferenceScalarWhereWithAggregatesInput = {
    AND?: PatientWidgetPreferenceScalarWhereWithAggregatesInput | PatientWidgetPreferenceScalarWhereWithAggregatesInput[]
    OR?: PatientWidgetPreferenceScalarWhereWithAggregatesInput[]
    NOT?: PatientWidgetPreferenceScalarWhereWithAggregatesInput | PatientWidgetPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientWidgetPreference"> | string
    patientId?: StringWithAggregatesFilter<"PatientWidgetPreference"> | string
    recentDoctors?: StringNullableListFilter<"PatientWidgetPreference">
    preferredHospitals?: StringNullableListFilter<"PatientWidgetPreference">
    searchHistory?: JsonNullableWithAggregatesFilter<"PatientWidgetPreference">
  }

  export type ReferralWhereInput = {
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    id?: StringFilter<"Referral"> | string
    patientId?: StringFilter<"Referral"> | string
    fromHospitalId?: StringFilter<"Referral"> | string
    toHospitalId?: StringFilter<"Referral"> | string
    referringDoctorId?: StringFilter<"Referral"> | string
    receivingDoctorId?: StringNullableFilter<"Referral"> | string | null
    reason?: StringFilter<"Referral"> | string
    notes?: StringNullableFilter<"Referral"> | string | null
    priority?: EnumReferralPriorityFilter<"Referral"> | $Enums.ReferralPriority
    status?: EnumReferralStatusFilter<"Referral"> | $Enums.ReferralStatus
    medicalRecords?: JsonNullableFilter<"Referral">
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    updatedAt?: DateTimeFilter<"Referral"> | Date | string
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    fromHospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    toHospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    referringDoctor?: XOR<UserScalarRelationFilter, UserWhereInput>
    receivingDoctor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ReferralOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    fromHospitalId?: SortOrder
    toHospitalId?: SortOrder
    referringDoctorId?: SortOrder
    receivingDoctorId?: SortOrderInput | SortOrder
    reason?: SortOrder
    notes?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    medicalRecords?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    fromHospital?: HospitalOrderByWithRelationInput
    toHospital?: HospitalOrderByWithRelationInput
    referringDoctor?: UserOrderByWithRelationInput
    receivingDoctor?: UserOrderByWithRelationInput
  }

  export type ReferralWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReferralWhereInput | ReferralWhereInput[]
    OR?: ReferralWhereInput[]
    NOT?: ReferralWhereInput | ReferralWhereInput[]
    patientId?: StringFilter<"Referral"> | string
    fromHospitalId?: StringFilter<"Referral"> | string
    toHospitalId?: StringFilter<"Referral"> | string
    referringDoctorId?: StringFilter<"Referral"> | string
    receivingDoctorId?: StringNullableFilter<"Referral"> | string | null
    reason?: StringFilter<"Referral"> | string
    notes?: StringNullableFilter<"Referral"> | string | null
    priority?: EnumReferralPriorityFilter<"Referral"> | $Enums.ReferralPriority
    status?: EnumReferralStatusFilter<"Referral"> | $Enums.ReferralStatus
    medicalRecords?: JsonNullableFilter<"Referral">
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    updatedAt?: DateTimeFilter<"Referral"> | Date | string
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    fromHospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    toHospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    referringDoctor?: XOR<UserScalarRelationFilter, UserWhereInput>
    receivingDoctor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ReferralOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    fromHospitalId?: SortOrder
    toHospitalId?: SortOrder
    referringDoctorId?: SortOrder
    receivingDoctorId?: SortOrderInput | SortOrder
    reason?: SortOrder
    notes?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    medicalRecords?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: ReferralCountOrderByAggregateInput
    _max?: ReferralMaxOrderByAggregateInput
    _min?: ReferralMinOrderByAggregateInput
  }

  export type ReferralScalarWhereWithAggregatesInput = {
    AND?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    OR?: ReferralScalarWhereWithAggregatesInput[]
    NOT?: ReferralScalarWhereWithAggregatesInput | ReferralScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Referral"> | string
    patientId?: StringWithAggregatesFilter<"Referral"> | string
    fromHospitalId?: StringWithAggregatesFilter<"Referral"> | string
    toHospitalId?: StringWithAggregatesFilter<"Referral"> | string
    referringDoctorId?: StringWithAggregatesFilter<"Referral"> | string
    receivingDoctorId?: StringNullableWithAggregatesFilter<"Referral"> | string | null
    reason?: StringWithAggregatesFilter<"Referral"> | string
    notes?: StringNullableWithAggregatesFilter<"Referral"> | string | null
    priority?: EnumReferralPriorityWithAggregatesFilter<"Referral"> | $Enums.ReferralPriority
    status?: EnumReferralStatusWithAggregatesFilter<"Referral"> | $Enums.ReferralStatus
    medicalRecords?: JsonNullableWithAggregatesFilter<"Referral">
    createdAt?: DateTimeWithAggregatesFilter<"Referral"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Referral"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"Referral"> | Date | string | null
  }

  export type AmbulanceWhereInput = {
    AND?: AmbulanceWhereInput | AmbulanceWhereInput[]
    OR?: AmbulanceWhereInput[]
    NOT?: AmbulanceWhereInput | AmbulanceWhereInput[]
    id?: StringFilter<"Ambulance"> | string
    registrationNo?: StringFilter<"Ambulance"> | string
    type?: EnumAmbulanceTypeFilter<"Ambulance"> | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFilter<"Ambulance"> | $Enums.AmbulanceStatus
    hospitalId?: StringFilter<"Ambulance"> | string
    capacity?: IntFilter<"Ambulance"> | number
    equipment?: JsonNullableFilter<"Ambulance">
    features?: StringNullableListFilter<"Ambulance">
    gpsTracking?: JsonNullableFilter<"Ambulance">
    createdAt?: DateTimeFilter<"Ambulance"> | Date | string
    updatedAt?: DateTimeFilter<"Ambulance"> | Date | string
    lastMaintenance?: DateTimeNullableFilter<"Ambulance"> | Date | string | null
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    dispatches?: AmbulanceDispatchListRelationFilter
  }

  export type AmbulanceOrderByWithRelationInput = {
    id?: SortOrder
    registrationNo?: SortOrder
    type?: SortOrder
    status?: SortOrder
    hospitalId?: SortOrder
    capacity?: SortOrder
    equipment?: SortOrderInput | SortOrder
    features?: SortOrder
    gpsTracking?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastMaintenance?: SortOrderInput | SortOrder
    hospital?: HospitalOrderByWithRelationInput
    dispatches?: AmbulanceDispatchOrderByRelationAggregateInput
  }

  export type AmbulanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    registrationNo?: string
    AND?: AmbulanceWhereInput | AmbulanceWhereInput[]
    OR?: AmbulanceWhereInput[]
    NOT?: AmbulanceWhereInput | AmbulanceWhereInput[]
    type?: EnumAmbulanceTypeFilter<"Ambulance"> | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFilter<"Ambulance"> | $Enums.AmbulanceStatus
    hospitalId?: StringFilter<"Ambulance"> | string
    capacity?: IntFilter<"Ambulance"> | number
    equipment?: JsonNullableFilter<"Ambulance">
    features?: StringNullableListFilter<"Ambulance">
    gpsTracking?: JsonNullableFilter<"Ambulance">
    createdAt?: DateTimeFilter<"Ambulance"> | Date | string
    updatedAt?: DateTimeFilter<"Ambulance"> | Date | string
    lastMaintenance?: DateTimeNullableFilter<"Ambulance"> | Date | string | null
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    dispatches?: AmbulanceDispatchListRelationFilter
  }, "id" | "registrationNo">

  export type AmbulanceOrderByWithAggregationInput = {
    id?: SortOrder
    registrationNo?: SortOrder
    type?: SortOrder
    status?: SortOrder
    hospitalId?: SortOrder
    capacity?: SortOrder
    equipment?: SortOrderInput | SortOrder
    features?: SortOrder
    gpsTracking?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastMaintenance?: SortOrderInput | SortOrder
    _count?: AmbulanceCountOrderByAggregateInput
    _avg?: AmbulanceAvgOrderByAggregateInput
    _max?: AmbulanceMaxOrderByAggregateInput
    _min?: AmbulanceMinOrderByAggregateInput
    _sum?: AmbulanceSumOrderByAggregateInput
  }

  export type AmbulanceScalarWhereWithAggregatesInput = {
    AND?: AmbulanceScalarWhereWithAggregatesInput | AmbulanceScalarWhereWithAggregatesInput[]
    OR?: AmbulanceScalarWhereWithAggregatesInput[]
    NOT?: AmbulanceScalarWhereWithAggregatesInput | AmbulanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ambulance"> | string
    registrationNo?: StringWithAggregatesFilter<"Ambulance"> | string
    type?: EnumAmbulanceTypeWithAggregatesFilter<"Ambulance"> | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusWithAggregatesFilter<"Ambulance"> | $Enums.AmbulanceStatus
    hospitalId?: StringWithAggregatesFilter<"Ambulance"> | string
    capacity?: IntWithAggregatesFilter<"Ambulance"> | number
    equipment?: JsonNullableWithAggregatesFilter<"Ambulance">
    features?: StringNullableListFilter<"Ambulance">
    gpsTracking?: JsonNullableWithAggregatesFilter<"Ambulance">
    createdAt?: DateTimeWithAggregatesFilter<"Ambulance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ambulance"> | Date | string
    lastMaintenance?: DateTimeNullableWithAggregatesFilter<"Ambulance"> | Date | string | null
  }

  export type AmbulanceDispatchWhereInput = {
    AND?: AmbulanceDispatchWhereInput | AmbulanceDispatchWhereInput[]
    OR?: AmbulanceDispatchWhereInput[]
    NOT?: AmbulanceDispatchWhereInput | AmbulanceDispatchWhereInput[]
    id?: StringFilter<"AmbulanceDispatch"> | string
    ambulanceId?: StringFilter<"AmbulanceDispatch"> | string
    patientId?: StringFilter<"AmbulanceDispatch"> | string
    hospitalId?: StringFilter<"AmbulanceDispatch"> | string
    pickupLocation?: StringFilter<"AmbulanceDispatch"> | string
    dropLocation?: StringFilter<"AmbulanceDispatch"> | string
    dispatchTime?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    arrivalTime?: DateTimeNullableFilter<"AmbulanceDispatch"> | Date | string | null
    completionTime?: DateTimeNullableFilter<"AmbulanceDispatch"> | Date | string | null
    priority?: EnumDispatchPriorityFilter<"AmbulanceDispatch"> | $Enums.DispatchPriority
    status?: EnumDispatchStatusFilter<"AmbulanceDispatch"> | $Enums.DispatchStatus
    dispatchedBy?: StringFilter<"AmbulanceDispatch"> | string
    notes?: StringNullableFilter<"AmbulanceDispatch"> | string | null
    createdAt?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    updatedAt?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    ambulance?: XOR<AmbulanceScalarRelationFilter, AmbulanceWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type AmbulanceDispatchOrderByWithRelationInput = {
    id?: SortOrder
    ambulanceId?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    dropLocation?: SortOrder
    dispatchTime?: SortOrder
    arrivalTime?: SortOrderInput | SortOrder
    completionTime?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    dispatchedBy?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ambulance?: AmbulanceOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
  }

  export type AmbulanceDispatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AmbulanceDispatchWhereInput | AmbulanceDispatchWhereInput[]
    OR?: AmbulanceDispatchWhereInput[]
    NOT?: AmbulanceDispatchWhereInput | AmbulanceDispatchWhereInput[]
    ambulanceId?: StringFilter<"AmbulanceDispatch"> | string
    patientId?: StringFilter<"AmbulanceDispatch"> | string
    hospitalId?: StringFilter<"AmbulanceDispatch"> | string
    pickupLocation?: StringFilter<"AmbulanceDispatch"> | string
    dropLocation?: StringFilter<"AmbulanceDispatch"> | string
    dispatchTime?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    arrivalTime?: DateTimeNullableFilter<"AmbulanceDispatch"> | Date | string | null
    completionTime?: DateTimeNullableFilter<"AmbulanceDispatch"> | Date | string | null
    priority?: EnumDispatchPriorityFilter<"AmbulanceDispatch"> | $Enums.DispatchPriority
    status?: EnumDispatchStatusFilter<"AmbulanceDispatch"> | $Enums.DispatchStatus
    dispatchedBy?: StringFilter<"AmbulanceDispatch"> | string
    notes?: StringNullableFilter<"AmbulanceDispatch"> | string | null
    createdAt?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    updatedAt?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    ambulance?: XOR<AmbulanceScalarRelationFilter, AmbulanceWhereInput>
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id">

  export type AmbulanceDispatchOrderByWithAggregationInput = {
    id?: SortOrder
    ambulanceId?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    dropLocation?: SortOrder
    dispatchTime?: SortOrder
    arrivalTime?: SortOrderInput | SortOrder
    completionTime?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    dispatchedBy?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AmbulanceDispatchCountOrderByAggregateInput
    _max?: AmbulanceDispatchMaxOrderByAggregateInput
    _min?: AmbulanceDispatchMinOrderByAggregateInput
  }

  export type AmbulanceDispatchScalarWhereWithAggregatesInput = {
    AND?: AmbulanceDispatchScalarWhereWithAggregatesInput | AmbulanceDispatchScalarWhereWithAggregatesInput[]
    OR?: AmbulanceDispatchScalarWhereWithAggregatesInput[]
    NOT?: AmbulanceDispatchScalarWhereWithAggregatesInput | AmbulanceDispatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AmbulanceDispatch"> | string
    ambulanceId?: StringWithAggregatesFilter<"AmbulanceDispatch"> | string
    patientId?: StringWithAggregatesFilter<"AmbulanceDispatch"> | string
    hospitalId?: StringWithAggregatesFilter<"AmbulanceDispatch"> | string
    pickupLocation?: StringWithAggregatesFilter<"AmbulanceDispatch"> | string
    dropLocation?: StringWithAggregatesFilter<"AmbulanceDispatch"> | string
    dispatchTime?: DateTimeWithAggregatesFilter<"AmbulanceDispatch"> | Date | string
    arrivalTime?: DateTimeNullableWithAggregatesFilter<"AmbulanceDispatch"> | Date | string | null
    completionTime?: DateTimeNullableWithAggregatesFilter<"AmbulanceDispatch"> | Date | string | null
    priority?: EnumDispatchPriorityWithAggregatesFilter<"AmbulanceDispatch"> | $Enums.DispatchPriority
    status?: EnumDispatchStatusWithAggregatesFilter<"AmbulanceDispatch"> | $Enums.DispatchStatus
    dispatchedBy?: StringWithAggregatesFilter<"AmbulanceDispatch"> | string
    notes?: StringNullableWithAggregatesFilter<"AmbulanceDispatch"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AmbulanceDispatch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AmbulanceDispatch"> | Date | string
  }

  export type AmbulanceRequestWhereInput = {
    AND?: AmbulanceRequestWhereInput | AmbulanceRequestWhereInput[]
    OR?: AmbulanceRequestWhereInput[]
    NOT?: AmbulanceRequestWhereInput | AmbulanceRequestWhereInput[]
    id?: StringFilter<"AmbulanceRequest"> | string
    patientId?: StringFilter<"AmbulanceRequest"> | string
    hospitalId?: StringFilter<"AmbulanceRequest"> | string
    pickupLocation?: StringFilter<"AmbulanceRequest"> | string
    reason?: StringFilter<"AmbulanceRequest"> | string
    requestTime?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    status?: EnumDispatchStatusFilter<"AmbulanceRequest"> | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFilter<"AmbulanceRequest"> | $Enums.DispatchPriority
    contactName?: StringFilter<"AmbulanceRequest"> | string
    contactPhone?: StringFilter<"AmbulanceRequest"> | string
    notes?: StringNullableFilter<"AmbulanceRequest"> | string | null
    createdAt?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }

  export type AmbulanceRequestOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    reason?: SortOrder
    requestTime?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    contactName?: SortOrder
    contactPhone?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
  }

  export type AmbulanceRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AmbulanceRequestWhereInput | AmbulanceRequestWhereInput[]
    OR?: AmbulanceRequestWhereInput[]
    NOT?: AmbulanceRequestWhereInput | AmbulanceRequestWhereInput[]
    patientId?: StringFilter<"AmbulanceRequest"> | string
    hospitalId?: StringFilter<"AmbulanceRequest"> | string
    pickupLocation?: StringFilter<"AmbulanceRequest"> | string
    reason?: StringFilter<"AmbulanceRequest"> | string
    requestTime?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    status?: EnumDispatchStatusFilter<"AmbulanceRequest"> | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFilter<"AmbulanceRequest"> | $Enums.DispatchPriority
    contactName?: StringFilter<"AmbulanceRequest"> | string
    contactPhone?: StringFilter<"AmbulanceRequest"> | string
    notes?: StringNullableFilter<"AmbulanceRequest"> | string | null
    createdAt?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
  }, "id">

  export type AmbulanceRequestOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    reason?: SortOrder
    requestTime?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    contactName?: SortOrder
    contactPhone?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AmbulanceRequestCountOrderByAggregateInput
    _max?: AmbulanceRequestMaxOrderByAggregateInput
    _min?: AmbulanceRequestMinOrderByAggregateInput
  }

  export type AmbulanceRequestScalarWhereWithAggregatesInput = {
    AND?: AmbulanceRequestScalarWhereWithAggregatesInput | AmbulanceRequestScalarWhereWithAggregatesInput[]
    OR?: AmbulanceRequestScalarWhereWithAggregatesInput[]
    NOT?: AmbulanceRequestScalarWhereWithAggregatesInput | AmbulanceRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AmbulanceRequest"> | string
    patientId?: StringWithAggregatesFilter<"AmbulanceRequest"> | string
    hospitalId?: StringWithAggregatesFilter<"AmbulanceRequest"> | string
    pickupLocation?: StringWithAggregatesFilter<"AmbulanceRequest"> | string
    reason?: StringWithAggregatesFilter<"AmbulanceRequest"> | string
    requestTime?: DateTimeWithAggregatesFilter<"AmbulanceRequest"> | Date | string
    status?: EnumDispatchStatusWithAggregatesFilter<"AmbulanceRequest"> | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityWithAggregatesFilter<"AmbulanceRequest"> | $Enums.DispatchPriority
    contactName?: StringWithAggregatesFilter<"AmbulanceRequest"> | string
    contactPhone?: StringWithAggregatesFilter<"AmbulanceRequest"> | string
    notes?: StringNullableWithAggregatesFilter<"AmbulanceRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AmbulanceRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AmbulanceRequest"> | Date | string
  }

  export type WalletWhereInput = {
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    id?: StringFilter<"Wallet"> | string
    patientId?: StringFilter<"Wallet"> | string
    balance?: FloatFilter<"Wallet"> | number
    currency?: StringFilter<"Wallet"> | string
    status?: EnumWalletStatusFilter<"Wallet"> | $Enums.WalletStatus
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    transactions?: WalletTransactionListRelationFilter
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    transactions?: WalletTransactionOrderByRelationAggregateInput
  }

  export type WalletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId?: string
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    balance?: FloatFilter<"Wallet"> | number
    currency?: StringFilter<"Wallet"> | string
    status?: EnumWalletStatusFilter<"Wallet"> | $Enums.WalletStatus
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    transactions?: WalletTransactionListRelationFilter
  }, "id" | "patientId">

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    OR?: WalletScalarWhereWithAggregatesInput[]
    NOT?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wallet"> | string
    patientId?: StringWithAggregatesFilter<"Wallet"> | string
    balance?: FloatWithAggregatesFilter<"Wallet"> | number
    currency?: StringWithAggregatesFilter<"Wallet"> | string
    status?: EnumWalletStatusWithAggregatesFilter<"Wallet"> | $Enums.WalletStatus
    createdAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
  }

  export type WalletTransactionWhereInput = {
    AND?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    OR?: WalletTransactionWhereInput[]
    NOT?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    id?: StringFilter<"WalletTransaction"> | string
    walletId?: StringFilter<"WalletTransaction"> | string
    amount?: FloatFilter<"WalletTransaction"> | number
    type?: EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"WalletTransaction"> | $Enums.TransactionStatus
    reference?: StringFilter<"WalletTransaction"> | string
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    metadata?: JsonNullableFilter<"WalletTransaction">
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableFilter<"WalletTransaction"> | Date | string | null
    wallet?: XOR<WalletScalarRelationFilter, WalletWhereInput>
    payment?: XOR<PaymentNullableScalarRelationFilter, PaymentWhereInput> | null
  }

  export type WalletTransactionOrderByWithRelationInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reference?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    wallet?: WalletOrderByWithRelationInput
    payment?: PaymentOrderByWithRelationInput
  }

  export type WalletTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    reference?: string
    AND?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    OR?: WalletTransactionWhereInput[]
    NOT?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    walletId?: StringFilter<"WalletTransaction"> | string
    amount?: FloatFilter<"WalletTransaction"> | number
    type?: EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"WalletTransaction"> | $Enums.TransactionStatus
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    metadata?: JsonNullableFilter<"WalletTransaction">
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableFilter<"WalletTransaction"> | Date | string | null
    wallet?: XOR<WalletScalarRelationFilter, WalletWhereInput>
    payment?: XOR<PaymentNullableScalarRelationFilter, PaymentWhereInput> | null
  }, "id" | "reference">

  export type WalletTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reference?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: WalletTransactionCountOrderByAggregateInput
    _avg?: WalletTransactionAvgOrderByAggregateInput
    _max?: WalletTransactionMaxOrderByAggregateInput
    _min?: WalletTransactionMinOrderByAggregateInput
    _sum?: WalletTransactionSumOrderByAggregateInput
  }

  export type WalletTransactionScalarWhereWithAggregatesInput = {
    AND?: WalletTransactionScalarWhereWithAggregatesInput | WalletTransactionScalarWhereWithAggregatesInput[]
    OR?: WalletTransactionScalarWhereWithAggregatesInput[]
    NOT?: WalletTransactionScalarWhereWithAggregatesInput | WalletTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WalletTransaction"> | string
    walletId?: StringWithAggregatesFilter<"WalletTransaction"> | string
    amount?: FloatWithAggregatesFilter<"WalletTransaction"> | number
    type?: EnumTransactionTypeWithAggregatesFilter<"WalletTransaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusWithAggregatesFilter<"WalletTransaction"> | $Enums.TransactionStatus
    reference?: StringWithAggregatesFilter<"WalletTransaction"> | string
    description?: StringNullableWithAggregatesFilter<"WalletTransaction"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"WalletTransaction">
    createdAt?: DateTimeWithAggregatesFilter<"WalletTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"WalletTransaction"> | Date | string | null
  }

  export type BillingWhereInput = {
    AND?: BillingWhereInput | BillingWhereInput[]
    OR?: BillingWhereInput[]
    NOT?: BillingWhereInput | BillingWhereInput[]
    id?: StringFilter<"Billing"> | string
    patientId?: StringFilter<"Billing"> | string
    hospitalId?: StringFilter<"Billing"> | string
    amount?: FloatFilter<"Billing"> | number
    dueDate?: DateTimeFilter<"Billing"> | Date | string
    status?: EnumBillingStatusFilter<"Billing"> | $Enums.BillingStatus
    description?: StringFilter<"Billing"> | string
    invoiceNumber?: StringFilter<"Billing"> | string
    items?: JsonFilter<"Billing">
    createdAt?: DateTimeFilter<"Billing"> | Date | string
    updatedAt?: DateTimeFilter<"Billing"> | Date | string
    paidAt?: DateTimeNullableFilter<"Billing"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    payments?: PaymentListRelationFilter
  }

  export type BillingOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    invoiceNumber?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paidAt?: SortOrderInput | SortOrder
    patient?: PatientOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type BillingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    invoiceNumber?: string
    AND?: BillingWhereInput | BillingWhereInput[]
    OR?: BillingWhereInput[]
    NOT?: BillingWhereInput | BillingWhereInput[]
    patientId?: StringFilter<"Billing"> | string
    hospitalId?: StringFilter<"Billing"> | string
    amount?: FloatFilter<"Billing"> | number
    dueDate?: DateTimeFilter<"Billing"> | Date | string
    status?: EnumBillingStatusFilter<"Billing"> | $Enums.BillingStatus
    description?: StringFilter<"Billing"> | string
    items?: JsonFilter<"Billing">
    createdAt?: DateTimeFilter<"Billing"> | Date | string
    updatedAt?: DateTimeFilter<"Billing"> | Date | string
    paidAt?: DateTimeNullableFilter<"Billing"> | Date | string | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    payments?: PaymentListRelationFilter
  }, "id" | "invoiceNumber">

  export type BillingOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    invoiceNumber?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paidAt?: SortOrderInput | SortOrder
    _count?: BillingCountOrderByAggregateInput
    _avg?: BillingAvgOrderByAggregateInput
    _max?: BillingMaxOrderByAggregateInput
    _min?: BillingMinOrderByAggregateInput
    _sum?: BillingSumOrderByAggregateInput
  }

  export type BillingScalarWhereWithAggregatesInput = {
    AND?: BillingScalarWhereWithAggregatesInput | BillingScalarWhereWithAggregatesInput[]
    OR?: BillingScalarWhereWithAggregatesInput[]
    NOT?: BillingScalarWhereWithAggregatesInput | BillingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Billing"> | string
    patientId?: StringWithAggregatesFilter<"Billing"> | string
    hospitalId?: StringWithAggregatesFilter<"Billing"> | string
    amount?: FloatWithAggregatesFilter<"Billing"> | number
    dueDate?: DateTimeWithAggregatesFilter<"Billing"> | Date | string
    status?: EnumBillingStatusWithAggregatesFilter<"Billing"> | $Enums.BillingStatus
    description?: StringWithAggregatesFilter<"Billing"> | string
    invoiceNumber?: StringWithAggregatesFilter<"Billing"> | string
    items?: JsonWithAggregatesFilter<"Billing">
    createdAt?: DateTimeWithAggregatesFilter<"Billing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Billing"> | Date | string
    paidAt?: DateTimeNullableWithAggregatesFilter<"Billing"> | Date | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    billingId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    reference?: StringFilter<"Payment"> | string
    status?: EnumTransactionStatusFilter<"Payment"> | $Enums.TransactionStatus
    transactionId?: StringNullableFilter<"Payment"> | string | null
    receiptNumber?: StringFilter<"Payment"> | string
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    billing?: XOR<BillingScalarRelationFilter, BillingWhereInput>
    transaction?: XOR<WalletTransactionNullableScalarRelationFilter, WalletTransactionWhereInput> | null
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    billingId?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    status?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    receiptNumber?: SortOrder
    paymentDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    billing?: BillingOrderByWithRelationInput
    transaction?: WalletTransactionOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    reference?: string
    transactionId?: string
    receiptNumber?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    billingId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    status?: EnumTransactionStatusFilter<"Payment"> | $Enums.TransactionStatus
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    billing?: XOR<BillingScalarRelationFilter, BillingWhereInput>
    transaction?: XOR<WalletTransactionNullableScalarRelationFilter, WalletTransactionWhereInput> | null
  }, "id" | "reference" | "transactionId" | "receiptNumber">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    billingId?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    status?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    receiptNumber?: SortOrder
    paymentDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    billingId?: StringWithAggregatesFilter<"Payment"> | string
    amount?: FloatWithAggregatesFilter<"Payment"> | number
    method?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    reference?: StringWithAggregatesFilter<"Payment"> | string
    status?: EnumTransactionStatusWithAggregatesFilter<"Payment"> | $Enums.TransactionStatus
    transactionId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    receiptNumber?: StringWithAggregatesFilter<"Payment"> | string
    paymentDate?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type ConversationWhereInput = {
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    id?: StringFilter<"Conversation"> | string
    patientId?: StringFilter<"Conversation"> | string
    hospitalId?: StringFilter<"Conversation"> | string
    doctorId?: StringNullableFilter<"Conversation"> | string | null
    title?: StringNullableFilter<"Conversation"> | string | null
    status?: EnumConversationStatusFilter<"Conversation"> | $Enums.ConversationStatus
    lastMessageAt?: DateTimeNullableFilter<"Conversation"> | Date | string | null
    metadata?: JsonNullableFilter<"Conversation">
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    doctor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    messages?: MessageListRelationFilter
  }

  export type ConversationOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    status?: SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
    doctor?: UserOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConversationWhereInput | ConversationWhereInput[]
    OR?: ConversationWhereInput[]
    NOT?: ConversationWhereInput | ConversationWhereInput[]
    patientId?: StringFilter<"Conversation"> | string
    hospitalId?: StringFilter<"Conversation"> | string
    doctorId?: StringNullableFilter<"Conversation"> | string | null
    title?: StringNullableFilter<"Conversation"> | string | null
    status?: EnumConversationStatusFilter<"Conversation"> | $Enums.ConversationStatus
    lastMessageAt?: DateTimeNullableFilter<"Conversation"> | Date | string | null
    metadata?: JsonNullableFilter<"Conversation">
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    doctor?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    messages?: MessageListRelationFilter
  }, "id">

  export type ConversationOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    status?: SortOrder
    lastMessageAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConversationCountOrderByAggregateInput
    _max?: ConversationMaxOrderByAggregateInput
    _min?: ConversationMinOrderByAggregateInput
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    OR?: ConversationScalarWhereWithAggregatesInput[]
    NOT?: ConversationScalarWhereWithAggregatesInput | ConversationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Conversation"> | string
    patientId?: StringWithAggregatesFilter<"Conversation"> | string
    hospitalId?: StringWithAggregatesFilter<"Conversation"> | string
    doctorId?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    title?: StringNullableWithAggregatesFilter<"Conversation"> | string | null
    status?: EnumConversationStatusWithAggregatesFilter<"Conversation"> | $Enums.ConversationStatus
    lastMessageAt?: DateTimeNullableWithAggregatesFilter<"Conversation"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Conversation">
    createdAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Conversation"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    attachments?: JsonNullableFilter<"Message">
    status?: EnumMessageStatusFilter<"Message"> | $Enums.MessageStatus
    sentAt?: DateTimeFilter<"Message"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    readAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    conversation?: XOR<ConversationScalarRelationFilter, ConversationWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    attachments?: SortOrderInput | SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    readAt?: SortOrderInput | SortOrder
    conversation?: ConversationOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    attachments?: JsonNullableFilter<"Message">
    status?: EnumMessageStatusFilter<"Message"> | $Enums.MessageStatus
    sentAt?: DateTimeFilter<"Message"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    readAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    conversation?: XOR<ConversationScalarRelationFilter, ConversationWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    attachments?: SortOrderInput | SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    readAt?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    conversationId?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    attachments?: JsonNullableWithAggregatesFilter<"Message">
    status?: EnumMessageStatusWithAggregatesFilter<"Message"> | $Enums.MessageStatus
    sentAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
    readAt?: DateTimeNullableWithAggregatesFilter<"Message"> | Date | string | null
  }

  export type BirthRecordWhereInput = {
    AND?: BirthRecordWhereInput | BirthRecordWhereInput[]
    OR?: BirthRecordWhereInput[]
    NOT?: BirthRecordWhereInput | BirthRecordWhereInput[]
    id?: StringFilter<"BirthRecord"> | string
    patientId?: StringFilter<"BirthRecord"> | string
    motherId?: StringNullableFilter<"BirthRecord"> | string | null
    fatherId?: StringNullableFilter<"BirthRecord"> | string | null
    hospitalId?: StringFilter<"BirthRecord"> | string
    birthDate?: DateTimeFilter<"BirthRecord"> | Date | string
    birthTime?: StringNullableFilter<"BirthRecord"> | string | null
    birthWeight?: FloatNullableFilter<"BirthRecord"> | number | null
    deliveryMethod?: EnumDeliveryMethodFilter<"BirthRecord"> | $Enums.DeliveryMethod
    attendingDoctorId?: StringFilter<"BirthRecord"> | string
    birthPlace?: StringNullableFilter<"BirthRecord"> | string | null
    certificateNumber?: StringFilter<"BirthRecord"> | string
    registeredAt?: DateTimeFilter<"BirthRecord"> | Date | string
    notes?: StringNullableFilter<"BirthRecord"> | string | null
    complications?: StringNullableListFilter<"BirthRecord">
    apgarScore?: IntNullableFilter<"BirthRecord"> | number | null
    gestationalAge?: IntNullableFilter<"BirthRecord"> | number | null
    createdAt?: DateTimeFilter<"BirthRecord"> | Date | string
    updatedAt?: DateTimeFilter<"BirthRecord"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    mother?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    father?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    attendingDoctor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BirthRecordOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    motherId?: SortOrderInput | SortOrder
    fatherId?: SortOrderInput | SortOrder
    hospitalId?: SortOrder
    birthDate?: SortOrder
    birthTime?: SortOrderInput | SortOrder
    birthWeight?: SortOrderInput | SortOrder
    deliveryMethod?: SortOrder
    attendingDoctorId?: SortOrder
    birthPlace?: SortOrderInput | SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    complications?: SortOrder
    apgarScore?: SortOrderInput | SortOrder
    gestationalAge?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    mother?: PatientOrderByWithRelationInput
    father?: PatientOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
    attendingDoctor?: UserOrderByWithRelationInput
  }

  export type BirthRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId?: string
    certificateNumber?: string
    AND?: BirthRecordWhereInput | BirthRecordWhereInput[]
    OR?: BirthRecordWhereInput[]
    NOT?: BirthRecordWhereInput | BirthRecordWhereInput[]
    motherId?: StringNullableFilter<"BirthRecord"> | string | null
    fatherId?: StringNullableFilter<"BirthRecord"> | string | null
    hospitalId?: StringFilter<"BirthRecord"> | string
    birthDate?: DateTimeFilter<"BirthRecord"> | Date | string
    birthTime?: StringNullableFilter<"BirthRecord"> | string | null
    birthWeight?: FloatNullableFilter<"BirthRecord"> | number | null
    deliveryMethod?: EnumDeliveryMethodFilter<"BirthRecord"> | $Enums.DeliveryMethod
    attendingDoctorId?: StringFilter<"BirthRecord"> | string
    birthPlace?: StringNullableFilter<"BirthRecord"> | string | null
    registeredAt?: DateTimeFilter<"BirthRecord"> | Date | string
    notes?: StringNullableFilter<"BirthRecord"> | string | null
    complications?: StringNullableListFilter<"BirthRecord">
    apgarScore?: IntNullableFilter<"BirthRecord"> | number | null
    gestationalAge?: IntNullableFilter<"BirthRecord"> | number | null
    createdAt?: DateTimeFilter<"BirthRecord"> | Date | string
    updatedAt?: DateTimeFilter<"BirthRecord"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    mother?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    father?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    attendingDoctor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "patientId" | "certificateNumber">

  export type BirthRecordOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    motherId?: SortOrderInput | SortOrder
    fatherId?: SortOrderInput | SortOrder
    hospitalId?: SortOrder
    birthDate?: SortOrder
    birthTime?: SortOrderInput | SortOrder
    birthWeight?: SortOrderInput | SortOrder
    deliveryMethod?: SortOrder
    attendingDoctorId?: SortOrder
    birthPlace?: SortOrderInput | SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    complications?: SortOrder
    apgarScore?: SortOrderInput | SortOrder
    gestationalAge?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BirthRecordCountOrderByAggregateInput
    _avg?: BirthRecordAvgOrderByAggregateInput
    _max?: BirthRecordMaxOrderByAggregateInput
    _min?: BirthRecordMinOrderByAggregateInput
    _sum?: BirthRecordSumOrderByAggregateInput
  }

  export type BirthRecordScalarWhereWithAggregatesInput = {
    AND?: BirthRecordScalarWhereWithAggregatesInput | BirthRecordScalarWhereWithAggregatesInput[]
    OR?: BirthRecordScalarWhereWithAggregatesInput[]
    NOT?: BirthRecordScalarWhereWithAggregatesInput | BirthRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BirthRecord"> | string
    patientId?: StringWithAggregatesFilter<"BirthRecord"> | string
    motherId?: StringNullableWithAggregatesFilter<"BirthRecord"> | string | null
    fatherId?: StringNullableWithAggregatesFilter<"BirthRecord"> | string | null
    hospitalId?: StringWithAggregatesFilter<"BirthRecord"> | string
    birthDate?: DateTimeWithAggregatesFilter<"BirthRecord"> | Date | string
    birthTime?: StringNullableWithAggregatesFilter<"BirthRecord"> | string | null
    birthWeight?: FloatNullableWithAggregatesFilter<"BirthRecord"> | number | null
    deliveryMethod?: EnumDeliveryMethodWithAggregatesFilter<"BirthRecord"> | $Enums.DeliveryMethod
    attendingDoctorId?: StringWithAggregatesFilter<"BirthRecord"> | string
    birthPlace?: StringNullableWithAggregatesFilter<"BirthRecord"> | string | null
    certificateNumber?: StringWithAggregatesFilter<"BirthRecord"> | string
    registeredAt?: DateTimeWithAggregatesFilter<"BirthRecord"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"BirthRecord"> | string | null
    complications?: StringNullableListFilter<"BirthRecord">
    apgarScore?: IntNullableWithAggregatesFilter<"BirthRecord"> | number | null
    gestationalAge?: IntNullableWithAggregatesFilter<"BirthRecord"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"BirthRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BirthRecord"> | Date | string
  }

  export type DeathRecordWhereInput = {
    AND?: DeathRecordWhereInput | DeathRecordWhereInput[]
    OR?: DeathRecordWhereInput[]
    NOT?: DeathRecordWhereInput | DeathRecordWhereInput[]
    id?: StringFilter<"DeathRecord"> | string
    patientId?: StringFilter<"DeathRecord"> | string
    hospitalId?: StringFilter<"DeathRecord"> | string
    dateOfDeath?: DateTimeFilter<"DeathRecord"> | Date | string
    timeOfDeath?: StringNullableFilter<"DeathRecord"> | string | null
    causeOfDeath?: StringNullableFilter<"DeathRecord"> | string | null
    attendingDoctorId?: StringFilter<"DeathRecord"> | string
    placeOfDeath?: StringFilter<"DeathRecord"> | string
    certificateNumber?: StringFilter<"DeathRecord"> | string
    registeredAt?: DateTimeFilter<"DeathRecord"> | Date | string
    notes?: StringNullableFilter<"DeathRecord"> | string | null
    createdAt?: DateTimeFilter<"DeathRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DeathRecord"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    attendingDoctor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DeathRecordOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    dateOfDeath?: SortOrder
    timeOfDeath?: SortOrderInput | SortOrder
    causeOfDeath?: SortOrderInput | SortOrder
    attendingDoctorId?: SortOrder
    placeOfDeath?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
    attendingDoctor?: UserOrderByWithRelationInput
  }

  export type DeathRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId?: string
    certificateNumber?: string
    AND?: DeathRecordWhereInput | DeathRecordWhereInput[]
    OR?: DeathRecordWhereInput[]
    NOT?: DeathRecordWhereInput | DeathRecordWhereInput[]
    hospitalId?: StringFilter<"DeathRecord"> | string
    dateOfDeath?: DateTimeFilter<"DeathRecord"> | Date | string
    timeOfDeath?: StringNullableFilter<"DeathRecord"> | string | null
    causeOfDeath?: StringNullableFilter<"DeathRecord"> | string | null
    attendingDoctorId?: StringFilter<"DeathRecord"> | string
    placeOfDeath?: StringFilter<"DeathRecord"> | string
    registeredAt?: DateTimeFilter<"DeathRecord"> | Date | string
    notes?: StringNullableFilter<"DeathRecord"> | string | null
    createdAt?: DateTimeFilter<"DeathRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DeathRecord"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    attendingDoctor?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "patientId" | "certificateNumber">

  export type DeathRecordOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    dateOfDeath?: SortOrder
    timeOfDeath?: SortOrderInput | SortOrder
    causeOfDeath?: SortOrderInput | SortOrder
    attendingDoctorId?: SortOrder
    placeOfDeath?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DeathRecordCountOrderByAggregateInput
    _max?: DeathRecordMaxOrderByAggregateInput
    _min?: DeathRecordMinOrderByAggregateInput
  }

  export type DeathRecordScalarWhereWithAggregatesInput = {
    AND?: DeathRecordScalarWhereWithAggregatesInput | DeathRecordScalarWhereWithAggregatesInput[]
    OR?: DeathRecordScalarWhereWithAggregatesInput[]
    NOT?: DeathRecordScalarWhereWithAggregatesInput | DeathRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DeathRecord"> | string
    patientId?: StringWithAggregatesFilter<"DeathRecord"> | string
    hospitalId?: StringWithAggregatesFilter<"DeathRecord"> | string
    dateOfDeath?: DateTimeWithAggregatesFilter<"DeathRecord"> | Date | string
    timeOfDeath?: StringNullableWithAggregatesFilter<"DeathRecord"> | string | null
    causeOfDeath?: StringNullableWithAggregatesFilter<"DeathRecord"> | string | null
    attendingDoctorId?: StringWithAggregatesFilter<"DeathRecord"> | string
    placeOfDeath?: StringWithAggregatesFilter<"DeathRecord"> | string
    certificateNumber?: StringWithAggregatesFilter<"DeathRecord"> | string
    registeredAt?: DateTimeWithAggregatesFilter<"DeathRecord"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"DeathRecord"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DeathRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DeathRecord"> | Date | string
  }

  export type MarketplaceVendorWhereInput = {
    AND?: MarketplaceVendorWhereInput | MarketplaceVendorWhereInput[]
    OR?: MarketplaceVendorWhereInput[]
    NOT?: MarketplaceVendorWhereInput | MarketplaceVendorWhereInput[]
    id?: StringFilter<"MarketplaceVendor"> | string
    hospitalId?: StringFilter<"MarketplaceVendor"> | string
    name?: StringFilter<"MarketplaceVendor"> | string
    description?: StringNullableFilter<"MarketplaceVendor"> | string | null
    contactEmail?: StringNullableFilter<"MarketplaceVendor"> | string | null
    contactPhone?: StringNullableFilter<"MarketplaceVendor"> | string | null
    address?: StringNullableFilter<"MarketplaceVendor"> | string | null
    logo?: StringNullableFilter<"MarketplaceVendor"> | string | null
    websiteUrl?: StringNullableFilter<"MarketplaceVendor"> | string | null
    verified?: BoolFilter<"MarketplaceVendor"> | boolean
    rating?: FloatNullableFilter<"MarketplaceVendor"> | number | null
    specialties?: StringNullableListFilter<"MarketplaceVendor">
    createdAt?: DateTimeFilter<"MarketplaceVendor"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceVendor"> | Date | string
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    products?: MarketplaceProductListRelationFilter
    savedBy?: SavedVendorListRelationFilter
  }

  export type MarketplaceVendorOrderByWithRelationInput = {
    id?: SortOrder
    hospitalId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    verified?: SortOrder
    rating?: SortOrderInput | SortOrder
    specialties?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hospital?: HospitalOrderByWithRelationInput
    products?: MarketplaceProductOrderByRelationAggregateInput
    savedBy?: SavedVendorOrderByRelationAggregateInput
  }

  export type MarketplaceVendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarketplaceVendorWhereInput | MarketplaceVendorWhereInput[]
    OR?: MarketplaceVendorWhereInput[]
    NOT?: MarketplaceVendorWhereInput | MarketplaceVendorWhereInput[]
    hospitalId?: StringFilter<"MarketplaceVendor"> | string
    name?: StringFilter<"MarketplaceVendor"> | string
    description?: StringNullableFilter<"MarketplaceVendor"> | string | null
    contactEmail?: StringNullableFilter<"MarketplaceVendor"> | string | null
    contactPhone?: StringNullableFilter<"MarketplaceVendor"> | string | null
    address?: StringNullableFilter<"MarketplaceVendor"> | string | null
    logo?: StringNullableFilter<"MarketplaceVendor"> | string | null
    websiteUrl?: StringNullableFilter<"MarketplaceVendor"> | string | null
    verified?: BoolFilter<"MarketplaceVendor"> | boolean
    rating?: FloatNullableFilter<"MarketplaceVendor"> | number | null
    specialties?: StringNullableListFilter<"MarketplaceVendor">
    createdAt?: DateTimeFilter<"MarketplaceVendor"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceVendor"> | Date | string
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    products?: MarketplaceProductListRelationFilter
    savedBy?: SavedVendorListRelationFilter
  }, "id">

  export type MarketplaceVendorOrderByWithAggregationInput = {
    id?: SortOrder
    hospitalId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    verified?: SortOrder
    rating?: SortOrderInput | SortOrder
    specialties?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MarketplaceVendorCountOrderByAggregateInput
    _avg?: MarketplaceVendorAvgOrderByAggregateInput
    _max?: MarketplaceVendorMaxOrderByAggregateInput
    _min?: MarketplaceVendorMinOrderByAggregateInput
    _sum?: MarketplaceVendorSumOrderByAggregateInput
  }

  export type MarketplaceVendorScalarWhereWithAggregatesInput = {
    AND?: MarketplaceVendorScalarWhereWithAggregatesInput | MarketplaceVendorScalarWhereWithAggregatesInput[]
    OR?: MarketplaceVendorScalarWhereWithAggregatesInput[]
    NOT?: MarketplaceVendorScalarWhereWithAggregatesInput | MarketplaceVendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketplaceVendor"> | string
    hospitalId?: StringWithAggregatesFilter<"MarketplaceVendor"> | string
    name?: StringWithAggregatesFilter<"MarketplaceVendor"> | string
    description?: StringNullableWithAggregatesFilter<"MarketplaceVendor"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"MarketplaceVendor"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"MarketplaceVendor"> | string | null
    address?: StringNullableWithAggregatesFilter<"MarketplaceVendor"> | string | null
    logo?: StringNullableWithAggregatesFilter<"MarketplaceVendor"> | string | null
    websiteUrl?: StringNullableWithAggregatesFilter<"MarketplaceVendor"> | string | null
    verified?: BoolWithAggregatesFilter<"MarketplaceVendor"> | boolean
    rating?: FloatNullableWithAggregatesFilter<"MarketplaceVendor"> | number | null
    specialties?: StringNullableListFilter<"MarketplaceVendor">
    createdAt?: DateTimeWithAggregatesFilter<"MarketplaceVendor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MarketplaceVendor"> | Date | string
  }

  export type MarketplaceProductWhereInput = {
    AND?: MarketplaceProductWhereInput | MarketplaceProductWhereInput[]
    OR?: MarketplaceProductWhereInput[]
    NOT?: MarketplaceProductWhereInput | MarketplaceProductWhereInput[]
    id?: StringFilter<"MarketplaceProduct"> | string
    vendorId?: StringFilter<"MarketplaceProduct"> | string
    name?: StringFilter<"MarketplaceProduct"> | string
    description?: StringNullableFilter<"MarketplaceProduct"> | string | null
    price?: FloatFilter<"MarketplaceProduct"> | number
    discountPrice?: FloatNullableFilter<"MarketplaceProduct"> | number | null
    category?: StringFilter<"MarketplaceProduct"> | string
    tags?: StringNullableListFilter<"MarketplaceProduct">
    imageUrl?: StringNullableFilter<"MarketplaceProduct"> | string | null
    inStock?: BoolFilter<"MarketplaceProduct"> | boolean
    requiredPrescription?: BoolFilter<"MarketplaceProduct"> | boolean
    createdAt?: DateTimeFilter<"MarketplaceProduct"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceProduct"> | Date | string
    vendor?: XOR<MarketplaceVendorScalarRelationFilter, MarketplaceVendorWhereInput>
    orderItems?: OrderItemListRelationFilter
    cartItems?: CartItemListRelationFilter
  }

  export type MarketplaceProductOrderByWithRelationInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    discountPrice?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    inStock?: SortOrder
    requiredPrescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    vendor?: MarketplaceVendorOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    cartItems?: CartItemOrderByRelationAggregateInput
  }

  export type MarketplaceProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarketplaceProductWhereInput | MarketplaceProductWhereInput[]
    OR?: MarketplaceProductWhereInput[]
    NOT?: MarketplaceProductWhereInput | MarketplaceProductWhereInput[]
    vendorId?: StringFilter<"MarketplaceProduct"> | string
    name?: StringFilter<"MarketplaceProduct"> | string
    description?: StringNullableFilter<"MarketplaceProduct"> | string | null
    price?: FloatFilter<"MarketplaceProduct"> | number
    discountPrice?: FloatNullableFilter<"MarketplaceProduct"> | number | null
    category?: StringFilter<"MarketplaceProduct"> | string
    tags?: StringNullableListFilter<"MarketplaceProduct">
    imageUrl?: StringNullableFilter<"MarketplaceProduct"> | string | null
    inStock?: BoolFilter<"MarketplaceProduct"> | boolean
    requiredPrescription?: BoolFilter<"MarketplaceProduct"> | boolean
    createdAt?: DateTimeFilter<"MarketplaceProduct"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceProduct"> | Date | string
    vendor?: XOR<MarketplaceVendorScalarRelationFilter, MarketplaceVendorWhereInput>
    orderItems?: OrderItemListRelationFilter
    cartItems?: CartItemListRelationFilter
  }, "id">

  export type MarketplaceProductOrderByWithAggregationInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    discountPrice?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    inStock?: SortOrder
    requiredPrescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MarketplaceProductCountOrderByAggregateInput
    _avg?: MarketplaceProductAvgOrderByAggregateInput
    _max?: MarketplaceProductMaxOrderByAggregateInput
    _min?: MarketplaceProductMinOrderByAggregateInput
    _sum?: MarketplaceProductSumOrderByAggregateInput
  }

  export type MarketplaceProductScalarWhereWithAggregatesInput = {
    AND?: MarketplaceProductScalarWhereWithAggregatesInput | MarketplaceProductScalarWhereWithAggregatesInput[]
    OR?: MarketplaceProductScalarWhereWithAggregatesInput[]
    NOT?: MarketplaceProductScalarWhereWithAggregatesInput | MarketplaceProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketplaceProduct"> | string
    vendorId?: StringWithAggregatesFilter<"MarketplaceProduct"> | string
    name?: StringWithAggregatesFilter<"MarketplaceProduct"> | string
    description?: StringNullableWithAggregatesFilter<"MarketplaceProduct"> | string | null
    price?: FloatWithAggregatesFilter<"MarketplaceProduct"> | number
    discountPrice?: FloatNullableWithAggregatesFilter<"MarketplaceProduct"> | number | null
    category?: StringWithAggregatesFilter<"MarketplaceProduct"> | string
    tags?: StringNullableListFilter<"MarketplaceProduct">
    imageUrl?: StringNullableWithAggregatesFilter<"MarketplaceProduct"> | string | null
    inStock?: BoolWithAggregatesFilter<"MarketplaceProduct"> | boolean
    requiredPrescription?: BoolWithAggregatesFilter<"MarketplaceProduct"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MarketplaceProduct"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MarketplaceProduct"> | Date | string
  }

  export type MarketplaceOrderWhereInput = {
    AND?: MarketplaceOrderWhereInput | MarketplaceOrderWhereInput[]
    OR?: MarketplaceOrderWhereInput[]
    NOT?: MarketplaceOrderWhereInput | MarketplaceOrderWhereInput[]
    id?: StringFilter<"MarketplaceOrder"> | string
    patientId?: StringFilter<"MarketplaceOrder"> | string
    reference?: StringFilter<"MarketplaceOrder"> | string
    totalAmount?: FloatFilter<"MarketplaceOrder"> | number
    status?: EnumOrderStatusFilter<"MarketplaceOrder"> | $Enums.OrderStatus
    paymentStatus?: StringNullableFilter<"MarketplaceOrder"> | string | null
    shippingAddress?: StringNullableFilter<"MarketplaceOrder"> | string | null
    trackingNumber?: StringNullableFilter<"MarketplaceOrder"> | string | null
    createdAt?: DateTimeFilter<"MarketplaceOrder"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceOrder"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    items?: OrderItemListRelationFilter
  }

  export type MarketplaceOrderOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    reference?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrderInput | SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    trackingNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    items?: OrderItemOrderByRelationAggregateInput
  }

  export type MarketplaceOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    reference?: string
    AND?: MarketplaceOrderWhereInput | MarketplaceOrderWhereInput[]
    OR?: MarketplaceOrderWhereInput[]
    NOT?: MarketplaceOrderWhereInput | MarketplaceOrderWhereInput[]
    patientId?: StringFilter<"MarketplaceOrder"> | string
    totalAmount?: FloatFilter<"MarketplaceOrder"> | number
    status?: EnumOrderStatusFilter<"MarketplaceOrder"> | $Enums.OrderStatus
    paymentStatus?: StringNullableFilter<"MarketplaceOrder"> | string | null
    shippingAddress?: StringNullableFilter<"MarketplaceOrder"> | string | null
    trackingNumber?: StringNullableFilter<"MarketplaceOrder"> | string | null
    createdAt?: DateTimeFilter<"MarketplaceOrder"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceOrder"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    items?: OrderItemListRelationFilter
  }, "id" | "reference">

  export type MarketplaceOrderOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    reference?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrderInput | SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    trackingNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MarketplaceOrderCountOrderByAggregateInput
    _avg?: MarketplaceOrderAvgOrderByAggregateInput
    _max?: MarketplaceOrderMaxOrderByAggregateInput
    _min?: MarketplaceOrderMinOrderByAggregateInput
    _sum?: MarketplaceOrderSumOrderByAggregateInput
  }

  export type MarketplaceOrderScalarWhereWithAggregatesInput = {
    AND?: MarketplaceOrderScalarWhereWithAggregatesInput | MarketplaceOrderScalarWhereWithAggregatesInput[]
    OR?: MarketplaceOrderScalarWhereWithAggregatesInput[]
    NOT?: MarketplaceOrderScalarWhereWithAggregatesInput | MarketplaceOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketplaceOrder"> | string
    patientId?: StringWithAggregatesFilter<"MarketplaceOrder"> | string
    reference?: StringWithAggregatesFilter<"MarketplaceOrder"> | string
    totalAmount?: FloatWithAggregatesFilter<"MarketplaceOrder"> | number
    status?: EnumOrderStatusWithAggregatesFilter<"MarketplaceOrder"> | $Enums.OrderStatus
    paymentStatus?: StringNullableWithAggregatesFilter<"MarketplaceOrder"> | string | null
    shippingAddress?: StringNullableWithAggregatesFilter<"MarketplaceOrder"> | string | null
    trackingNumber?: StringNullableWithAggregatesFilter<"MarketplaceOrder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MarketplaceOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MarketplaceOrder"> | Date | string
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderId?: StringFilter<"OrderItem"> | string
    productId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: FloatFilter<"OrderItem"> | number
    totalPrice?: FloatFilter<"OrderItem"> | number
    prescriptionId?: StringNullableFilter<"OrderItem"> | string | null
    order?: XOR<MarketplaceOrderScalarRelationFilter, MarketplaceOrderWhereInput>
    product?: XOR<MarketplaceProductScalarRelationFilter, MarketplaceProductWhereInput>
    prescription?: XOR<PrescriptionNullableScalarRelationFilter, PrescriptionWhereInput> | null
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    prescriptionId?: SortOrderInput | SortOrder
    order?: MarketplaceOrderOrderByWithRelationInput
    product?: MarketplaceProductOrderByWithRelationInput
    prescription?: PrescriptionOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: StringFilter<"OrderItem"> | string
    productId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: FloatFilter<"OrderItem"> | number
    totalPrice?: FloatFilter<"OrderItem"> | number
    prescriptionId?: StringNullableFilter<"OrderItem"> | string | null
    order?: XOR<MarketplaceOrderScalarRelationFilter, MarketplaceOrderWhereInput>
    product?: XOR<MarketplaceProductScalarRelationFilter, MarketplaceProductWhereInput>
    prescription?: XOR<PrescriptionNullableScalarRelationFilter, PrescriptionWhereInput> | null
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    prescriptionId?: SortOrderInput | SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrderItem"> | string
    orderId?: StringWithAggregatesFilter<"OrderItem"> | string
    productId?: StringWithAggregatesFilter<"OrderItem"> | string
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
    unitPrice?: FloatWithAggregatesFilter<"OrderItem"> | number
    totalPrice?: FloatWithAggregatesFilter<"OrderItem"> | number
    prescriptionId?: StringNullableWithAggregatesFilter<"OrderItem"> | string | null
  }

  export type CartItemWhereInput = {
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    id?: StringFilter<"CartItem"> | string
    patientId?: StringFilter<"CartItem"> | string
    productId?: StringFilter<"CartItem"> | string
    quantity?: IntFilter<"CartItem"> | number
    addedAt?: DateTimeFilter<"CartItem"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    product?: XOR<MarketplaceProductScalarRelationFilter, MarketplaceProductWhereInput>
  }

  export type CartItemOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    addedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    product?: MarketplaceProductOrderByWithRelationInput
  }

  export type CartItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    patientId?: StringFilter<"CartItem"> | string
    productId?: StringFilter<"CartItem"> | string
    quantity?: IntFilter<"CartItem"> | number
    addedAt?: DateTimeFilter<"CartItem"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    product?: XOR<MarketplaceProductScalarRelationFilter, MarketplaceProductWhereInput>
  }, "id">

  export type CartItemOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    addedAt?: SortOrder
    _count?: CartItemCountOrderByAggregateInput
    _avg?: CartItemAvgOrderByAggregateInput
    _max?: CartItemMaxOrderByAggregateInput
    _min?: CartItemMinOrderByAggregateInput
    _sum?: CartItemSumOrderByAggregateInput
  }

  export type CartItemScalarWhereWithAggregatesInput = {
    AND?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    OR?: CartItemScalarWhereWithAggregatesInput[]
    NOT?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CartItem"> | string
    patientId?: StringWithAggregatesFilter<"CartItem"> | string
    productId?: StringWithAggregatesFilter<"CartItem"> | string
    quantity?: IntWithAggregatesFilter<"CartItem"> | number
    addedAt?: DateTimeWithAggregatesFilter<"CartItem"> | Date | string
  }

  export type SavedVendorWhereInput = {
    AND?: SavedVendorWhereInput | SavedVendorWhereInput[]
    OR?: SavedVendorWhereInput[]
    NOT?: SavedVendorWhereInput | SavedVendorWhereInput[]
    id?: StringFilter<"SavedVendor"> | string
    patientId?: StringFilter<"SavedVendor"> | string
    vendorId?: StringFilter<"SavedVendor"> | string
    savedAt?: DateTimeFilter<"SavedVendor"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    vendor?: XOR<MarketplaceVendorScalarRelationFilter, MarketplaceVendorWhereInput>
  }

  export type SavedVendorOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    vendorId?: SortOrder
    savedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    vendor?: MarketplaceVendorOrderByWithRelationInput
  }

  export type SavedVendorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId_vendorId?: SavedVendorPatientIdVendorIdCompoundUniqueInput
    AND?: SavedVendorWhereInput | SavedVendorWhereInput[]
    OR?: SavedVendorWhereInput[]
    NOT?: SavedVendorWhereInput | SavedVendorWhereInput[]
    patientId?: StringFilter<"SavedVendor"> | string
    vendorId?: StringFilter<"SavedVendor"> | string
    savedAt?: DateTimeFilter<"SavedVendor"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    vendor?: XOR<MarketplaceVendorScalarRelationFilter, MarketplaceVendorWhereInput>
  }, "id" | "patientId_vendorId">

  export type SavedVendorOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    vendorId?: SortOrder
    savedAt?: SortOrder
    _count?: SavedVendorCountOrderByAggregateInput
    _max?: SavedVendorMaxOrderByAggregateInput
    _min?: SavedVendorMinOrderByAggregateInput
  }

  export type SavedVendorScalarWhereWithAggregatesInput = {
    AND?: SavedVendorScalarWhereWithAggregatesInput | SavedVendorScalarWhereWithAggregatesInput[]
    OR?: SavedVendorScalarWhereWithAggregatesInput[]
    NOT?: SavedVendorScalarWhereWithAggregatesInput | SavedVendorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SavedVendor"> | string
    patientId?: StringWithAggregatesFilter<"SavedVendor"> | string
    vendorId?: StringWithAggregatesFilter<"SavedVendor"> | string
    savedAt?: DateTimeWithAggregatesFilter<"SavedVendor"> | Date | string
  }

  export type PrescriptionWhereInput = {
    AND?: PrescriptionWhereInput | PrescriptionWhereInput[]
    OR?: PrescriptionWhereInput[]
    NOT?: PrescriptionWhereInput | PrescriptionWhereInput[]
    id?: StringFilter<"Prescription"> | string
    patientId?: StringFilter<"Prescription"> | string
    doctorId?: StringFilter<"Prescription"> | string
    hospitalId?: StringFilter<"Prescription"> | string
    medications?: JsonFilter<"Prescription">
    dosageInstructions?: StringNullableFilter<"Prescription"> | string | null
    validFrom?: DateTimeFilter<"Prescription"> | Date | string
    validUntil?: DateTimeNullableFilter<"Prescription"> | Date | string | null
    filledStatus?: BoolFilter<"Prescription"> | boolean
    filledDate?: DateTimeNullableFilter<"Prescription"> | Date | string | null
    refills?: IntFilter<"Prescription"> | number
    refillsUsed?: IntFilter<"Prescription"> | number
    notes?: StringNullableFilter<"Prescription"> | string | null
    createdAt?: DateTimeFilter<"Prescription"> | Date | string
    updatedAt?: DateTimeFilter<"Prescription"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    doctor?: XOR<UserScalarRelationFilter, UserWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    orderItems?: OrderItemListRelationFilter
  }

  export type PrescriptionOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    medications?: SortOrder
    dosageInstructions?: SortOrderInput | SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    filledStatus?: SortOrder
    filledDate?: SortOrderInput | SortOrder
    refills?: SortOrder
    refillsUsed?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    doctor?: UserOrderByWithRelationInput
    hospital?: HospitalOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
  }

  export type PrescriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PrescriptionWhereInput | PrescriptionWhereInput[]
    OR?: PrescriptionWhereInput[]
    NOT?: PrescriptionWhereInput | PrescriptionWhereInput[]
    patientId?: StringFilter<"Prescription"> | string
    doctorId?: StringFilter<"Prescription"> | string
    hospitalId?: StringFilter<"Prescription"> | string
    medications?: JsonFilter<"Prescription">
    dosageInstructions?: StringNullableFilter<"Prescription"> | string | null
    validFrom?: DateTimeFilter<"Prescription"> | Date | string
    validUntil?: DateTimeNullableFilter<"Prescription"> | Date | string | null
    filledStatus?: BoolFilter<"Prescription"> | boolean
    filledDate?: DateTimeNullableFilter<"Prescription"> | Date | string | null
    refills?: IntFilter<"Prescription"> | number
    refillsUsed?: IntFilter<"Prescription"> | number
    notes?: StringNullableFilter<"Prescription"> | string | null
    createdAt?: DateTimeFilter<"Prescription"> | Date | string
    updatedAt?: DateTimeFilter<"Prescription"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    doctor?: XOR<UserScalarRelationFilter, UserWhereInput>
    hospital?: XOR<HospitalScalarRelationFilter, HospitalWhereInput>
    orderItems?: OrderItemListRelationFilter
  }, "id">

  export type PrescriptionOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    medications?: SortOrder
    dosageInstructions?: SortOrderInput | SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    filledStatus?: SortOrder
    filledDate?: SortOrderInput | SortOrder
    refills?: SortOrder
    refillsUsed?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PrescriptionCountOrderByAggregateInput
    _avg?: PrescriptionAvgOrderByAggregateInput
    _max?: PrescriptionMaxOrderByAggregateInput
    _min?: PrescriptionMinOrderByAggregateInput
    _sum?: PrescriptionSumOrderByAggregateInput
  }

  export type PrescriptionScalarWhereWithAggregatesInput = {
    AND?: PrescriptionScalarWhereWithAggregatesInput | PrescriptionScalarWhereWithAggregatesInput[]
    OR?: PrescriptionScalarWhereWithAggregatesInput[]
    NOT?: PrescriptionScalarWhereWithAggregatesInput | PrescriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Prescription"> | string
    patientId?: StringWithAggregatesFilter<"Prescription"> | string
    doctorId?: StringWithAggregatesFilter<"Prescription"> | string
    hospitalId?: StringWithAggregatesFilter<"Prescription"> | string
    medications?: JsonWithAggregatesFilter<"Prescription">
    dosageInstructions?: StringNullableWithAggregatesFilter<"Prescription"> | string | null
    validFrom?: DateTimeWithAggregatesFilter<"Prescription"> | Date | string
    validUntil?: DateTimeNullableWithAggregatesFilter<"Prescription"> | Date | string | null
    filledStatus?: BoolWithAggregatesFilter<"Prescription"> | boolean
    filledDate?: DateTimeNullableWithAggregatesFilter<"Prescription"> | Date | string | null
    refills?: IntWithAggregatesFilter<"Prescription"> | number
    refillsUsed?: IntWithAggregatesFilter<"Prescription"> | number
    notes?: StringNullableWithAggregatesFilter<"Prescription"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Prescription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Prescription"> | Date | string
  }

  export type AntenatalRecordCreateInput = {
    id?: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_AntenatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_createdInput
    Hospital: HospitalCreateNestedOneWithoutAntenatalRecordsInput
    Patient: PatientCreateNestedOneWithoutAntenatalRecordsInput
    User_AntenatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_updatedInput
  }

  export type AntenatalRecordUncheckedCreateInput = {
    id?: string
    patientId: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_AntenatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_createdNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutAntenatalRecordsNestedInput
    Patient?: PatientUpdateOneRequiredWithoutAntenatalRecordsNestedInput
    User_AntenatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_updatedNestedInput
  }

  export type AntenatalRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordCreateManyInput = {
    id?: string
    patientId: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentCreateInput = {
    id?: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutAppointmentsInput
    Patient: PatientCreateNestedOneWithoutAppointmentsInput
    Hospital: HospitalCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    patientId: string
    doctorId: string
    hospitalId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    Patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyInput = {
    id?: string
    patientId: string
    doctorId: string
    hospitalId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HospitalCreateInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalCreateManyInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
  }

  export type HospitalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HospitalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicalRecordCreateInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutMedicalRecordsInput
    Patient: PatientCreateNestedOneWithoutMedicalRecordsInput
    Hospital: HospitalCreateNestedOneWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateInput = {
    id?: string
    patientId: string
    doctorId: string
    hospitalId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type MedicalRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutMedicalRecordsNestedInput
    Patient?: PatientUpdateOneRequiredWithoutMedicalRecordsNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordCreateManyInput = {
    id?: string
    patientId: string
    doctorId: string
    hospitalId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type MedicalRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeonatalRecordCreateInput = {
    id?: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_NeonatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_createdInput
    Hospital: HospitalCreateNestedOneWithoutNeonatalRecordsInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientCreateNestedOneWithoutNeonatalRecords_AsMotherInput
    Patient_NeonatalRecord_patientIdToPatient: PatientCreateNestedOneWithoutNeonatalRecords_AsPatientInput
    User_NeonatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_updatedInput
  }

  export type NeonatalRecordUncheckedCreateInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_NeonatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_createdNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutNeonatalRecordsNestedInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientUpdateOneWithoutNeonatalRecords_AsMotherNestedInput
    Patient_NeonatalRecord_patientIdToPatient?: PatientUpdateOneRequiredWithoutNeonatalRecords_AsPatientNestedInput
    User_NeonatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_updatedNestedInput
  }

  export type NeonatalRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordCreateManyInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientCreateInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetCreateInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient?: PatientCreateNestedOneWithoutPasswordResetsInput
    User?: UserCreateNestedOneWithoutPasswordResetsInput
  }

  export type PasswordResetUncheckedCreateInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId?: string | null
    userId?: string | null
  }

  export type PasswordResetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutPasswordResetsNestedInput
    User?: UserUpdateOneWithoutPasswordResetsNestedInput
  }

  export type PasswordResetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetCreateManyInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId?: string | null
    userId?: string | null
  }

  export type PasswordResetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SecurityAuditLogCreateInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestPath?: string | null
    success?: boolean
    user: UserCreateNestedOneWithoutSecurityAuditLogInput
  }

  export type SecurityAuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestPath?: string | null
    success?: boolean
  }

  export type SecurityAuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestPath?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSecurityAuditLogNestedInput
  }

  export type SecurityAuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestPath?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SecurityAuditLogCreateManyInput = {
    id?: string
    userId: string
    action: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestPath?: string | null
    success?: boolean
  }

  export type SecurityAuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestPath?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SecurityAuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestPath?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProfilePictureCreateInput = {
    id?: string
    imageUrl: string
    imageData?: Uint8Array | null
    mimeType: string
    filename?: string | null
    size: number
    width?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy?: string | null
    ownerType: string
    patient?: PatientCreateNestedOneWithoutProfilePictureInput
    user?: UserCreateNestedOneWithoutProfilePictureInput
  }

  export type ProfilePictureUncheckedCreateInput = {
    id?: string
    patientId?: string | null
    userId?: string | null
    imageUrl: string
    imageData?: Uint8Array | null
    mimeType: string
    filename?: string | null
    size: number
    width?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy?: string | null
    ownerType: string
  }

  export type ProfilePictureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
    patient?: PatientUpdateOneWithoutProfilePictureNestedInput
    user?: UserUpdateOneWithoutProfilePictureNestedInput
  }

  export type ProfilePictureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureCreateManyInput = {
    id?: string
    patientId?: string | null
    userId?: string | null
    imageUrl: string
    imageData?: Uint8Array | null
    mimeType: string
    filename?: string | null
    size: number
    width?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy?: string | null
    ownerType: string
  }

  export type ProfilePictureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
  }

  export type PatientEmailCreateInput = {
    id?: string
    email: string
    verified?: boolean
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutEmailsInput
  }

  export type PatientEmailUncheckedCreateInput = {
    id?: string
    email: string
    verified?: boolean
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
  }

  export type PatientEmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutEmailsNestedInput
  }

  export type PatientEmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type PatientEmailCreateManyInput = {
    id?: string
    email: string
    verified?: boolean
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
  }

  export type PatientEmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type PatientPhoneCreateInput = {
    id?: string
    phone: string
    verified?: boolean
    primary?: boolean
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPhonesInput
  }

  export type PatientPhoneUncheckedCreateInput = {
    id?: string
    phone: string
    verified?: boolean
    primary?: boolean
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
  }

  export type PatientPhoneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPhonesNestedInput
  }

  export type PatientPhoneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type PatientPhoneCreateManyInput = {
    id?: string
    phone: string
    verified?: boolean
    primary?: boolean
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId: string
  }

  export type PatientPhoneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientPhoneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    hospital: HospitalCreateNestedOneWithoutDepartmentsInput
    members?: DepartmentMembershipCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    hospitalId: string
    createdAt?: Date | string
    updatedAt: Date | string
    members?: DepartmentMembershipUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutDepartmentsNestedInput
    members?: DepartmentMembershipUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: DepartmentMembershipUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    hospitalId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMembershipCreateInput = {
    id?: string
    role: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutDepartmentMembershipsInput
    department: DepartmentCreateNestedOneWithoutMembersInput
  }

  export type DepartmentMembershipUncheckedCreateInput = {
    id?: string
    userId: string
    departmentId: string
    role: string
    joinedAt?: Date | string
  }

  export type DepartmentMembershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDepartmentMembershipsNestedInput
    department?: DepartmentUpdateOneRequiredWithoutMembersNestedInput
  }

  export type DepartmentMembershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMembershipCreateManyInput = {
    id?: string
    userId: string
    departmentId: string
    role: string
    joinedAt?: Date | string
  }

  export type DepartmentMembershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMembershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffProfileCreateInput = {
    id?: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutStaffProfileInput
    hospital: HospitalCreateNestedOneWithoutStaffProfilesInput
  }

  export type StaffProfileUncheckedCreateInput = {
    id?: string
    userId: string
    hospitalId: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutStaffProfileNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutStaffProfilesNestedInput
  }

  export type StaffProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffProfileCreateManyInput = {
    id?: string
    userId: string
    hospitalId: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientHospitalAccessCreateInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutHospitalAccessesInput
    hospital: HospitalCreateNestedOneWithoutPatientAccessesInput
    granter: UserCreateNestedOneWithoutPatientAccess_grantedByInput
  }

  export type PatientHospitalAccessUncheckedCreateInput = {
    id?: string
    patientId: string
    hospitalId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    grantedBy: string
    expiresAt?: Date | string | null
  }

  export type PatientHospitalAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutHospitalAccessesNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutPatientAccessesNestedInput
    granter?: UserUpdateOneRequiredWithoutPatientAccess_grantedByNestedInput
  }

  export type PatientHospitalAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientHospitalAccessCreateManyInput = {
    id?: string
    patientId: string
    hospitalId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    grantedBy: string
    expiresAt?: Date | string | null
  }

  export type PatientHospitalAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientHospitalAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientSearchIndexCreateInput = {
    id?: string
    mrn: string
    name: string
    phone?: string | null
    email?: string | null
    qrCode: string
    searchVector?: string | null
    patient: PatientCreateNestedOneWithoutSearchIndexInput
  }

  export type PatientSearchIndexUncheckedCreateInput = {
    id?: string
    patientId: string
    mrn: string
    name: string
    phone?: string | null
    email?: string | null
    qrCode: string
    searchVector?: string | null
  }

  export type PatientSearchIndexUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    searchVector?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateOneRequiredWithoutSearchIndexNestedInput
  }

  export type PatientSearchIndexUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    searchVector?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientSearchIndexCreateManyInput = {
    id?: string
    patientId: string
    mrn: string
    name: string
    phone?: string | null
    email?: string | null
    qrCode: string
    searchVector?: string | null
  }

  export type PatientSearchIndexUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    searchVector?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientSearchIndexUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    searchVector?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorAvailabilityCreateInput = {
    id?: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
    doctor: UserCreateNestedOneWithoutAvailabilityInput
    hospital: HospitalCreateNestedOneWithoutDoctorAvailabilitiesInput
  }

  export type DoctorAvailabilityUncheckedCreateInput = {
    id?: string
    doctorId: string
    hospitalId: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
  }

  export type DoctorAvailabilityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doctor?: UserUpdateOneRequiredWithoutAvailabilityNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutDoctorAvailabilitiesNestedInput
  }

  export type DoctorAvailabilityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoctorAvailabilityCreateManyInput = {
    id?: string
    doctorId: string
    hospitalId: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
  }

  export type DoctorAvailabilityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoctorAvailabilityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientWidgetPreferenceCreateInput = {
    id?: string
    recentDoctors?: PatientWidgetPreferenceCreaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceCreatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
    patient: PatientCreateNestedOneWithoutWidgetPrefsInput
  }

  export type PatientWidgetPreferenceUncheckedCreateInput = {
    id?: string
    patientId: string
    recentDoctors?: PatientWidgetPreferenceCreaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceCreatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientWidgetPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recentDoctors?: PatientWidgetPreferenceUpdaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceUpdatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
    patient?: PatientUpdateOneRequiredWithoutWidgetPrefsNestedInput
  }

  export type PatientWidgetPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    recentDoctors?: PatientWidgetPreferenceUpdaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceUpdatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientWidgetPreferenceCreateManyInput = {
    id?: string
    patientId: string
    recentDoctors?: PatientWidgetPreferenceCreaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceCreatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientWidgetPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recentDoctors?: PatientWidgetPreferenceUpdaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceUpdatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientWidgetPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    recentDoctors?: PatientWidgetPreferenceUpdaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceUpdatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ReferralCreateInput = {
    id?: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutReferralsReceivedInput
    fromHospital: HospitalCreateNestedOneWithoutReferralsFromInput
    toHospital: HospitalCreateNestedOneWithoutReferralsToInput
    referringDoctor: UserCreateNestedOneWithoutReferralsSentInput
    receivingDoctor?: UserCreateNestedOneWithoutReferralsReceivedInput
  }

  export type ReferralUncheckedCreateInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    toHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutReferralsReceivedNestedInput
    fromHospital?: HospitalUpdateOneRequiredWithoutReferralsFromNestedInput
    toHospital?: HospitalUpdateOneRequiredWithoutReferralsToNestedInput
    referringDoctor?: UserUpdateOneRequiredWithoutReferralsSentNestedInput
    receivingDoctor?: UserUpdateOneWithoutReferralsReceivedNestedInput
  }

  export type ReferralUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralCreateManyInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    toHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AmbulanceCreateInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
    hospital: HospitalCreateNestedOneWithoutAmbulancesInput
    dispatches?: AmbulanceDispatchCreateNestedManyWithoutAmbulanceInput
  }

  export type AmbulanceUncheckedCreateInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    hospitalId: string
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
    dispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutAmbulanceInput
  }

  export type AmbulanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hospital?: HospitalUpdateOneRequiredWithoutAmbulancesNestedInput
    dispatches?: AmbulanceDispatchUpdateManyWithoutAmbulanceNestedInput
  }

  export type AmbulanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    hospitalId?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutAmbulanceNestedInput
  }

  export type AmbulanceCreateManyInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    hospitalId: string
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
  }

  export type AmbulanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AmbulanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    hospitalId?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AmbulanceDispatchCreateInput = {
    id?: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ambulance: AmbulanceCreateNestedOneWithoutDispatchesInput
    patient: PatientCreateNestedOneWithoutAmbulanceDispatchesInput
    hospital: HospitalCreateNestedOneWithoutAmbulanceDispatchesInput
  }

  export type AmbulanceDispatchUncheckedCreateInput = {
    id?: string
    ambulanceId: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceDispatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ambulance?: AmbulanceUpdateOneRequiredWithoutDispatchesNestedInput
    patient?: PatientUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput
  }

  export type AmbulanceDispatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ambulanceId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceDispatchCreateManyInput = {
    id?: string
    ambulanceId: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceDispatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceDispatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ambulanceId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceRequestCreateInput = {
    id?: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAmbulanceRequestsInput
    hospital: HospitalCreateNestedOneWithoutAmbulanceRequestsInput
  }

  export type AmbulanceRequestUncheckedCreateInput = {
    id?: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAmbulanceRequestsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutAmbulanceRequestsNestedInput
  }

  export type AmbulanceRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceRequestCreateManyInput = {
    id?: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletCreateInput = {
    id?: string
    balance?: number
    currency?: string
    status?: $Enums.WalletStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutWalletInput
    transactions?: WalletTransactionCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id?: string
    patientId: string
    balance?: number
    currency?: string
    status?: $Enums.WalletStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: WalletTransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutWalletNestedInput
    transactions?: WalletTransactionUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: WalletTransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type WalletCreateManyInput = {
    id?: string
    patientId: string
    balance?: number
    currency?: string
    status?: $Enums.WalletStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WalletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletTransactionCreateInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    wallet: WalletCreateNestedOneWithoutTransactionsInput
    payment?: PaymentCreateNestedOneWithoutTransactionInput
  }

  export type WalletTransactionUncheckedCreateInput = {
    id?: string
    walletId: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    payment?: PaymentUncheckedCreateNestedOneWithoutTransactionInput
  }

  export type WalletTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wallet?: WalletUpdateOneRequiredWithoutTransactionsNestedInput
    payment?: PaymentUpdateOneWithoutTransactionNestedInput
  }

  export type WalletTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment?: PaymentUncheckedUpdateOneWithoutTransactionNestedInput
  }

  export type WalletTransactionCreateManyInput = {
    id?: string
    walletId: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type WalletTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BillingCreateInput = {
    id?: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutBillingRecordsInput
    hospital: HospitalCreateNestedOneWithoutBillingRecordsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
  }

  export type BillingUncheckedCreateInput = {
    id?: string
    patientId: string
    hospitalId: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutBillingRecordsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutBillingRecordsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
  }

  export type BillingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingCreateManyInput = {
    id?: string
    patientId: string
    hospitalId: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
  }

  export type BillingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BillingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentCreateInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    billing: BillingCreateNestedOneWithoutPaymentsInput
    transaction?: WalletTransactionCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    billingId: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    transactionId?: string | null
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing?: BillingUpdateOneRequiredWithoutPaymentsNestedInput
    transaction?: WalletTransactionUpdateOneWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    billingId: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    transactionId?: string | null
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationCreateInput = {
    id?: string
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutConversationsInput
    hospital: HospitalCreateNestedOneWithoutConversationsInput
    doctor?: UserCreateNestedOneWithoutConversationsInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    id?: string
    patientId: string
    hospitalId: string
    doctorId?: string | null
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutConversationsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutConversationsNestedInput
    doctor?: UserUpdateOneWithoutConversationsNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationCreateManyInput = {
    id?: string
    patientId: string
    hospitalId: string
    doctorId?: string | null
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConversationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    conversation: ConversationCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutMessagesSentInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    conversationId: string
    senderId: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateManyInput = {
    id?: string
    conversationId: string
    senderId: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BirthRecordCreateInput = {
    id?: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutBirthRecordInput
    mother?: PatientCreateNestedOneWithoutMotherOfBirthsInput
    father?: PatientCreateNestedOneWithoutFatherOfBirthsInput
    hospital: HospitalCreateNestedOneWithoutBirthRecordsInput
    attendingDoctor: UserCreateNestedOneWithoutBirthRecordsRegisteredInput
  }

  export type BirthRecordUncheckedCreateInput = {
    id?: string
    patientId: string
    motherId?: string | null
    fatherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutBirthRecordNestedInput
    mother?: PatientUpdateOneWithoutMotherOfBirthsNestedInput
    father?: PatientUpdateOneWithoutFatherOfBirthsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutBirthRecordsNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutBirthRecordsRegisteredNestedInput
  }

  export type BirthRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordCreateManyInput = {
    id?: string
    patientId: string
    motherId?: string | null
    fatherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeathRecordCreateInput = {
    id?: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutDeathRecordInput
    hospital: HospitalCreateNestedOneWithoutDeathRecordsInput
    attendingDoctor: UserCreateNestedOneWithoutDeathRecordsRegisteredInput
  }

  export type DeathRecordUncheckedCreateInput = {
    id?: string
    patientId: string
    hospitalId: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    attendingDoctorId: string
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeathRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutDeathRecordNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutDeathRecordsNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutDeathRecordsRegisteredNestedInput
  }

  export type DeathRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeathRecordCreateManyInput = {
    id?: string
    patientId: string
    hospitalId: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    attendingDoctorId: string
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeathRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeathRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceVendorCreateInput = {
    id?: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutMarketplaceVendorsInput
    products?: MarketplaceProductCreateNestedManyWithoutVendorInput
    savedBy?: SavedVendorCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorUncheckedCreateInput = {
    id?: string
    hospitalId: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: MarketplaceProductUncheckedCreateNestedManyWithoutVendorInput
    savedBy?: SavedVendorUncheckedCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutMarketplaceVendorsNestedInput
    products?: MarketplaceProductUpdateManyWithoutVendorNestedInput
    savedBy?: SavedVendorUpdateManyWithoutVendorNestedInput
  }

  export type MarketplaceVendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: MarketplaceProductUncheckedUpdateManyWithoutVendorNestedInput
    savedBy?: SavedVendorUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type MarketplaceVendorCreateManyInput = {
    id?: string
    hospitalId: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketplaceVendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceVendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceProductCreateInput = {
    id?: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor: MarketplaceVendorCreateNestedOneWithoutProductsInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    cartItems?: CartItemCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductUncheckedCreateInput = {
    id?: string
    vendorId: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: MarketplaceVendorUpdateOneRequiredWithoutProductsNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    cartItems?: CartItemUpdateManyWithoutProductNestedInput
  }

  export type MarketplaceProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type MarketplaceProductCreateManyInput = {
    id?: string
    vendorId: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketplaceProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceOrderCreateInput = {
    id?: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMarketplaceOrdersInput
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type MarketplaceOrderUncheckedCreateInput = {
    id?: string
    patientId: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type MarketplaceOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMarketplaceOrdersNestedInput
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type MarketplaceOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type MarketplaceOrderCreateManyInput = {
    id?: string
    patientId: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketplaceOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateInput = {
    id?: string
    quantity: number
    unitPrice: number
    totalPrice: number
    order: MarketplaceOrderCreateNestedOneWithoutItemsInput
    product: MarketplaceProductCreateNestedOneWithoutOrderItemsInput
    prescription?: PrescriptionCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: string
    orderId: string
    productId: string
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId?: string | null
  }

  export type OrderItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    order?: MarketplaceOrderUpdateOneRequiredWithoutItemsNestedInput
    product?: MarketplaceProductUpdateOneRequiredWithoutOrderItemsNestedInput
    prescription?: PrescriptionUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    prescriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyInput = {
    id?: string
    orderId: string
    productId: string
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId?: string | null
  }

  export type OrderItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    prescriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartItemCreateInput = {
    id?: string
    quantity: number
    addedAt?: Date | string
    patient: PatientCreateNestedOneWithoutCartItemsInput
    product: MarketplaceProductCreateNestedOneWithoutCartItemsInput
  }

  export type CartItemUncheckedCreateInput = {
    id?: string
    patientId: string
    productId: string
    quantity: number
    addedAt?: Date | string
  }

  export type CartItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutCartItemsNestedInput
    product?: MarketplaceProductUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type CartItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemCreateManyInput = {
    id?: string
    patientId: string
    productId: string
    quantity: number
    addedAt?: Date | string
  }

  export type CartItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedVendorCreateInput = {
    id?: string
    savedAt?: Date | string
    patient: PatientCreateNestedOneWithoutSavedVendorsInput
    vendor: MarketplaceVendorCreateNestedOneWithoutSavedByInput
  }

  export type SavedVendorUncheckedCreateInput = {
    id?: string
    patientId: string
    vendorId: string
    savedAt?: Date | string
  }

  export type SavedVendorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutSavedVendorsNestedInput
    vendor?: MarketplaceVendorUpdateOneRequiredWithoutSavedByNestedInput
  }

  export type SavedVendorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedVendorCreateManyInput = {
    id?: string
    patientId: string
    vendorId: string
    savedAt?: Date | string
  }

  export type SavedVendorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedVendorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionCreateInput = {
    id?: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPrescriptionInput
    doctor: UserCreateNestedOneWithoutPrescriptionsInput
    hospital: HospitalCreateNestedOneWithoutPrescriptionsInput
    orderItems?: OrderItemCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionUncheckedCreateInput = {
    id?: string
    patientId: string
    doctorId: string
    hospitalId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPrescriptionNestedInput
    doctor?: UserUpdateOneRequiredWithoutPrescriptionsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutPrescriptionsNestedInput
    orderItems?: OrderItemUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionCreateManyInput = {
    id?: string
    patientId: string
    doctorId: string
    hospitalId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type EnumAntenatalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AntenatalStatus | EnumAntenatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAntenatalStatusFilter<$PrismaModel> | $Enums.AntenatalStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HospitalScalarRelationFilter = {
    is?: HospitalWhereInput
    isNot?: HospitalWhereInput
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AntenatalRecordCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    gestationalAge?: SortOrder
    nextAppointment?: SortOrder
    riskLevel?: SortOrder
    status?: SortOrder
    trimester?: SortOrder
    lastVisitDate?: SortOrder
    expectedDueDate?: SortOrder
    ultrasoundReports?: SortOrder
    labResults?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrder
  }

  export type AntenatalRecordAvgOrderByAggregateInput = {
    gestationalAge?: SortOrder
    trimester?: SortOrder
  }

  export type AntenatalRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    gestationalAge?: SortOrder
    nextAppointment?: SortOrder
    riskLevel?: SortOrder
    status?: SortOrder
    trimester?: SortOrder
    lastVisitDate?: SortOrder
    expectedDueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrder
  }

  export type AntenatalRecordMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    gestationalAge?: SortOrder
    nextAppointment?: SortOrder
    riskLevel?: SortOrder
    status?: SortOrder
    trimester?: SortOrder
    lastVisitDate?: SortOrder
    expectedDueDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrder
  }

  export type AntenatalRecordSumOrderByAggregateInput = {
    gestationalAge?: SortOrder
    trimester?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type EnumAntenatalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AntenatalStatus | EnumAntenatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAntenatalStatusWithAggregatesFilter<$PrismaModel> | $Enums.AntenatalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAntenatalStatusFilter<$PrismaModel>
    _max?: NestedEnumAntenatalStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    date?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AntenatalRecordListRelationFilter = {
    every?: AntenatalRecordWhereInput
    some?: AntenatalRecordWhereInput
    none?: AntenatalRecordWhereInput
  }

  export type NeonatalRecordListRelationFilter = {
    every?: NeonatalRecordWhereInput
    some?: NeonatalRecordWhereInput
    none?: NeonatalRecordWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type StaffProfileListRelationFilter = {
    every?: StaffProfileWhereInput
    some?: StaffProfileWhereInput
    none?: StaffProfileWhereInput
  }

  export type PatientHospitalAccessListRelationFilter = {
    every?: PatientHospitalAccessWhereInput
    some?: PatientHospitalAccessWhereInput
    none?: PatientHospitalAccessWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type DoctorAvailabilityListRelationFilter = {
    every?: DoctorAvailabilityWhereInput
    some?: DoctorAvailabilityWhereInput
    none?: DoctorAvailabilityWhereInput
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type MedicalRecordListRelationFilter = {
    every?: MedicalRecordWhereInput
    some?: MedicalRecordWhereInput
    none?: MedicalRecordWhereInput
  }

  export type ReferralListRelationFilter = {
    every?: ReferralWhereInput
    some?: ReferralWhereInput
    none?: ReferralWhereInput
  }

  export type AmbulanceListRelationFilter = {
    every?: AmbulanceWhereInput
    some?: AmbulanceWhereInput
    none?: AmbulanceWhereInput
  }

  export type AmbulanceDispatchListRelationFilter = {
    every?: AmbulanceDispatchWhereInput
    some?: AmbulanceDispatchWhereInput
    none?: AmbulanceDispatchWhereInput
  }

  export type AmbulanceRequestListRelationFilter = {
    every?: AmbulanceRequestWhereInput
    some?: AmbulanceRequestWhereInput
    none?: AmbulanceRequestWhereInput
  }

  export type BillingListRelationFilter = {
    every?: BillingWhereInput
    some?: BillingWhereInput
    none?: BillingWhereInput
  }

  export type ConversationListRelationFilter = {
    every?: ConversationWhereInput
    some?: ConversationWhereInput
    none?: ConversationWhereInput
  }

  export type BirthRecordListRelationFilter = {
    every?: BirthRecordWhereInput
    some?: BirthRecordWhereInput
    none?: BirthRecordWhereInput
  }

  export type DeathRecordListRelationFilter = {
    every?: DeathRecordWhereInput
    some?: DeathRecordWhereInput
    none?: DeathRecordWhereInput
  }

  export type MarketplaceVendorListRelationFilter = {
    every?: MarketplaceVendorWhereInput
    some?: MarketplaceVendorWhereInput
    none?: MarketplaceVendorWhereInput
  }

  export type PrescriptionListRelationFilter = {
    every?: PrescriptionWhereInput
    some?: PrescriptionWhereInput
    none?: PrescriptionWhereInput
  }

  export type AntenatalRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NeonatalRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientHospitalAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorAvailabilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferralOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AmbulanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AmbulanceDispatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AmbulanceRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BirthRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeathRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarketplaceVendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrescriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HospitalCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    settings?: SortOrder
    branding?: SortOrder
    isActive?: SortOrder
    code?: SortOrder
  }

  export type HospitalMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    code?: SortOrder
  }

  export type HospitalMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subdomain?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    code?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type MedicalRecordCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    type?: SortOrder
    details?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    type?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalRecordMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    type?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumCareLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.CareLevel | EnumCareLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCareLevelFilter<$PrismaModel> | $Enums.CareLevel
  }

  export type EnumNeonatalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NeonatalStatus | EnumNeonatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNeonatalStatusFilter<$PrismaModel> | $Enums.NeonatalStatus
  }

  export type EnumDischargeStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DischargeStatus | EnumDischargeStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDischargeStatusNullableFilter<$PrismaModel> | $Enums.DischargeStatus | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PatientNullableScalarRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type NeonatalRecordCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    birthWeight?: SortOrder
    gestationalAgeAtBirth?: SortOrder
    careLevel?: SortOrder
    status?: SortOrder
    dischargeStatus?: SortOrder
    apgarScore?: SortOrder
    motherId?: SortOrder
    birthComplications?: SortOrder
    feedingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrder
  }

  export type NeonatalRecordAvgOrderByAggregateInput = {
    birthWeight?: SortOrder
    gestationalAgeAtBirth?: SortOrder
    apgarScore?: SortOrder
  }

  export type NeonatalRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    birthWeight?: SortOrder
    gestationalAgeAtBirth?: SortOrder
    careLevel?: SortOrder
    status?: SortOrder
    dischargeStatus?: SortOrder
    apgarScore?: SortOrder
    motherId?: SortOrder
    birthComplications?: SortOrder
    feedingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrder
  }

  export type NeonatalRecordMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    birthWeight?: SortOrder
    gestationalAgeAtBirth?: SortOrder
    careLevel?: SortOrder
    status?: SortOrder
    dischargeStatus?: SortOrder
    apgarScore?: SortOrder
    motherId?: SortOrder
    birthComplications?: SortOrder
    feedingMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdByUserId?: SortOrder
    updatedByUserId?: SortOrder
    mrn?: SortOrder
  }

  export type NeonatalRecordSumOrderByAggregateInput = {
    birthWeight?: SortOrder
    gestationalAgeAtBirth?: SortOrder
    apgarScore?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumCareLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CareLevel | EnumCareLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCareLevelWithAggregatesFilter<$PrismaModel> | $Enums.CareLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCareLevelFilter<$PrismaModel>
    _max?: NestedEnumCareLevelFilter<$PrismaModel>
  }

  export type EnumNeonatalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NeonatalStatus | EnumNeonatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNeonatalStatusWithAggregatesFilter<$PrismaModel> | $Enums.NeonatalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNeonatalStatusFilter<$PrismaModel>
    _max?: NestedEnumNeonatalStatusFilter<$PrismaModel>
  }

  export type EnumDischargeStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DischargeStatus | EnumDischargeStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDischargeStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.DischargeStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDischargeStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumDischargeStatusNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type HospitalNullableScalarRelationFilter = {
    is?: HospitalWhereInput | null
    isNot?: HospitalWhereInput | null
  }

  export type PasswordResetListRelationFilter = {
    every?: PasswordResetWhereInput
    some?: PasswordResetWhereInput
    none?: PasswordResetWhereInput
  }

  export type ProfilePictureNullableScalarRelationFilter = {
    is?: ProfilePictureWhereInput | null
    isNot?: ProfilePictureWhereInput | null
  }

  export type PatientEmailListRelationFilter = {
    every?: PatientEmailWhereInput
    some?: PatientEmailWhereInput
    none?: PatientEmailWhereInput
  }

  export type PatientPhoneListRelationFilter = {
    every?: PatientPhoneWhereInput
    some?: PatientPhoneWhereInput
    none?: PatientPhoneWhereInput
  }

  export type PatientSearchIndexNullableScalarRelationFilter = {
    is?: PatientSearchIndexWhereInput | null
    isNot?: PatientSearchIndexWhereInput | null
  }

  export type PatientWidgetPreferenceNullableScalarRelationFilter = {
    is?: PatientWidgetPreferenceWhereInput | null
    isNot?: PatientWidgetPreferenceWhereInput | null
  }

  export type WalletNullableScalarRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type BirthRecordNullableScalarRelationFilter = {
    is?: BirthRecordWhereInput | null
    isNot?: BirthRecordWhereInput | null
  }

  export type DeathRecordNullableScalarRelationFilter = {
    is?: DeathRecordWhereInput | null
    isNot?: DeathRecordWhereInput | null
  }

  export type MarketplaceOrderListRelationFilter = {
    every?: MarketplaceOrderWhereInput
    some?: MarketplaceOrderWhereInput
    none?: MarketplaceOrderWhereInput
  }

  export type SavedVendorListRelationFilter = {
    every?: SavedVendorWhereInput
    some?: SavedVendorWhereInput
    none?: SavedVendorWhereInput
  }

  export type CartItemListRelationFilter = {
    every?: CartItemWhereInput
    some?: CartItemWhereInput
    none?: CartItemWhereInput
  }

  export type PasswordResetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientEmailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientPhoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarketplaceOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedVendorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    contact?: SortOrder
    note?: SortOrder
    lastVisit?: SortOrder
    nextVisit?: SortOrder
    medicalHistory?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qrCode?: SortOrder
    onboardingCompleted?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    contact?: SortOrder
    note?: SortOrder
    lastVisit?: SortOrder
    nextVisit?: SortOrder
    medicalHistory?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qrCode?: SortOrder
    onboardingCompleted?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    dateOfBirth?: SortOrder
    contact?: SortOrder
    note?: SortOrder
    lastVisit?: SortOrder
    nextVisit?: SortOrder
    medicalHistory?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qrCode?: SortOrder
    onboardingCompleted?: SortOrder
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StaffProfileNullableScalarRelationFilter = {
    is?: StaffProfileWhereInput | null
    isNot?: StaffProfileWhereInput | null
  }

  export type DepartmentMembershipListRelationFilter = {
    every?: DepartmentMembershipWhereInput
    some?: DepartmentMembershipWhereInput
    none?: DepartmentMembershipWhereInput
  }

  export type DoctorAvailabilityNullableScalarRelationFilter = {
    is?: DoctorAvailabilityWhereInput | null
    isNot?: DoctorAvailabilityWhereInput | null
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type SecurityAuditLogListRelationFilter = {
    every?: SecurityAuditLogWhereInput
    some?: SecurityAuditLogWhereInput
    none?: SecurityAuditLogWhereInput
  }

  export type DepartmentMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SecurityAuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
    photo?: SortOrder
    isSuperAdmin?: SortOrder
    isHospitalAdmin?: SortOrder
    specialties?: SortOrder
    hospitalId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
    photo?: SortOrder
    isSuperAdmin?: SortOrder
    isHospitalAdmin?: SortOrder
    hospitalId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
    photo?: SortOrder
    isSuperAdmin?: SortOrder
    isHospitalAdmin?: SortOrder
    hospitalId?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type PasswordResetCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    userId?: SortOrder
  }

  export type PasswordResetMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    userId?: SortOrder
  }

  export type PasswordResetMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    expiresAt?: SortOrder
    usedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
    userId?: SortOrder
  }

  export type SecurityAuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestPath?: SortOrder
    success?: SortOrder
  }

  export type SecurityAuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestPath?: SortOrder
    success?: SortOrder
  }

  export type SecurityAuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestPath?: SortOrder
    success?: SortOrder
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type ProfilePictureCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    userId?: SortOrder
    imageUrl?: SortOrder
    imageData?: SortOrder
    mimeType?: SortOrder
    filename?: SortOrder
    size?: SortOrder
    width?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uploadedBy?: SortOrder
    ownerType?: SortOrder
  }

  export type ProfilePictureAvgOrderByAggregateInput = {
    size?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type ProfilePictureMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    userId?: SortOrder
    imageUrl?: SortOrder
    imageData?: SortOrder
    mimeType?: SortOrder
    filename?: SortOrder
    size?: SortOrder
    width?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uploadedBy?: SortOrder
    ownerType?: SortOrder
  }

  export type ProfilePictureMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    userId?: SortOrder
    imageUrl?: SortOrder
    imageData?: SortOrder
    mimeType?: SortOrder
    filename?: SortOrder
    size?: SortOrder
    width?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uploadedBy?: SortOrder
    ownerType?: SortOrder
  }

  export type ProfilePictureSumOrderByAggregateInput = {
    size?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type PatientEmailCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
  }

  export type PatientEmailMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
  }

  export type PatientEmailMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
  }

  export type PatientPhoneCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
  }

  export type PatientPhoneMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
  }

  export type PatientPhoneMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    verified?: SortOrder
    primary?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientId?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    hospitalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type DepartmentMembershipUserIdDepartmentIdCompoundUniqueInput = {
    userId: string
    departmentId: string
  }

  export type DepartmentMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type DepartmentMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type DepartmentMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type EnumEmploymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusFilter<$PrismaModel> | $Enums.EmploymentStatus
  }

  export type StaffProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    staffId?: SortOrder
    specialization?: SortOrder
    qualifications?: SortOrder
    joiningDate?: SortOrder
    employmentStatus?: SortOrder
    contactInformation?: SortOrder
  }

  export type StaffProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    staffId?: SortOrder
    specialization?: SortOrder
    joiningDate?: SortOrder
    employmentStatus?: SortOrder
  }

  export type StaffProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hospitalId?: SortOrder
    staffId?: SortOrder
    specialization?: SortOrder
    joiningDate?: SortOrder
    employmentStatus?: SortOrder
  }

  export type EnumEmploymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentStatusFilter<$PrismaModel>
  }

  export type EnumAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelFilter<$PrismaModel> | $Enums.AccessLevel
  }

  export type PatientHospitalAccessPatientIdHospitalIdCompoundUniqueInput = {
    patientId: string
    hospitalId: string
  }

  export type PatientHospitalAccessCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    accessLevel?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
    expiresAt?: SortOrder
  }

  export type PatientHospitalAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    accessLevel?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
    expiresAt?: SortOrder
  }

  export type PatientHospitalAccessMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    accessLevel?: SortOrder
    grantedAt?: SortOrder
    grantedBy?: SortOrder
    expiresAt?: SortOrder
  }

  export type EnumAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.AccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumAccessLevelFilter<$PrismaModel>
  }

  export type PatientSearchIndexCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    qrCode?: SortOrder
    searchVector?: SortOrder
  }

  export type PatientSearchIndexMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    qrCode?: SortOrder
    searchVector?: SortOrder
  }

  export type PatientSearchIndexMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    mrn?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    qrCode?: SortOrder
    searchVector?: SortOrder
  }

  export type DoctorAvailabilityCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    available?: SortOrder
    schedule?: SortOrder
    serviceTypes?: SortOrder
    nextAvailable?: SortOrder
  }

  export type DoctorAvailabilityMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    available?: SortOrder
    nextAvailable?: SortOrder
  }

  export type DoctorAvailabilityMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    available?: SortOrder
    nextAvailable?: SortOrder
  }

  export type PatientWidgetPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    recentDoctors?: SortOrder
    preferredHospitals?: SortOrder
    searchHistory?: SortOrder
  }

  export type PatientWidgetPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
  }

  export type PatientWidgetPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
  }

  export type EnumReferralPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralPriority | EnumReferralPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralPriorityFilter<$PrismaModel> | $Enums.ReferralPriority
  }

  export type EnumReferralStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusFilter<$PrismaModel> | $Enums.ReferralStatus
  }

  export type ReferralCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    fromHospitalId?: SortOrder
    toHospitalId?: SortOrder
    referringDoctorId?: SortOrder
    receivingDoctorId?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    medicalRecords?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ReferralMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    fromHospitalId?: SortOrder
    toHospitalId?: SortOrder
    referringDoctorId?: SortOrder
    receivingDoctorId?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type ReferralMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    fromHospitalId?: SortOrder
    toHospitalId?: SortOrder
    referringDoctorId?: SortOrder
    receivingDoctorId?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type EnumReferralPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralPriority | EnumReferralPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralPriorityWithAggregatesFilter<$PrismaModel> | $Enums.ReferralPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReferralPriorityFilter<$PrismaModel>
    _max?: NestedEnumReferralPriorityFilter<$PrismaModel>
  }

  export type EnumReferralStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReferralStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReferralStatusFilter<$PrismaModel>
    _max?: NestedEnumReferralStatusFilter<$PrismaModel>
  }

  export type EnumAmbulanceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceType | EnumAmbulanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceTypeFilter<$PrismaModel> | $Enums.AmbulanceType
  }

  export type EnumAmbulanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceStatus | EnumAmbulanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceStatusFilter<$PrismaModel> | $Enums.AmbulanceStatus
  }

  export type AmbulanceCountOrderByAggregateInput = {
    id?: SortOrder
    registrationNo?: SortOrder
    type?: SortOrder
    status?: SortOrder
    hospitalId?: SortOrder
    capacity?: SortOrder
    equipment?: SortOrder
    features?: SortOrder
    gpsTracking?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastMaintenance?: SortOrder
  }

  export type AmbulanceAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type AmbulanceMaxOrderByAggregateInput = {
    id?: SortOrder
    registrationNo?: SortOrder
    type?: SortOrder
    status?: SortOrder
    hospitalId?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastMaintenance?: SortOrder
  }

  export type AmbulanceMinOrderByAggregateInput = {
    id?: SortOrder
    registrationNo?: SortOrder
    type?: SortOrder
    status?: SortOrder
    hospitalId?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastMaintenance?: SortOrder
  }

  export type AmbulanceSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type EnumAmbulanceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceType | EnumAmbulanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceTypeWithAggregatesFilter<$PrismaModel> | $Enums.AmbulanceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAmbulanceTypeFilter<$PrismaModel>
    _max?: NestedEnumAmbulanceTypeFilter<$PrismaModel>
  }

  export type EnumAmbulanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceStatus | EnumAmbulanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AmbulanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAmbulanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAmbulanceStatusFilter<$PrismaModel>
  }

  export type EnumDispatchPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchPriority | EnumDispatchPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchPriorityFilter<$PrismaModel> | $Enums.DispatchPriority
  }

  export type EnumDispatchStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchStatus | EnumDispatchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchStatusFilter<$PrismaModel> | $Enums.DispatchStatus
  }

  export type AmbulanceScalarRelationFilter = {
    is?: AmbulanceWhereInput
    isNot?: AmbulanceWhereInput
  }

  export type AmbulanceDispatchCountOrderByAggregateInput = {
    id?: SortOrder
    ambulanceId?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    dropLocation?: SortOrder
    dispatchTime?: SortOrder
    arrivalTime?: SortOrder
    completionTime?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dispatchedBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AmbulanceDispatchMaxOrderByAggregateInput = {
    id?: SortOrder
    ambulanceId?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    dropLocation?: SortOrder
    dispatchTime?: SortOrder
    arrivalTime?: SortOrder
    completionTime?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dispatchedBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AmbulanceDispatchMinOrderByAggregateInput = {
    id?: SortOrder
    ambulanceId?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    dropLocation?: SortOrder
    dispatchTime?: SortOrder
    arrivalTime?: SortOrder
    completionTime?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dispatchedBy?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDispatchPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchPriority | EnumDispatchPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchPriorityWithAggregatesFilter<$PrismaModel> | $Enums.DispatchPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDispatchPriorityFilter<$PrismaModel>
    _max?: NestedEnumDispatchPriorityFilter<$PrismaModel>
  }

  export type EnumDispatchStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchStatus | EnumDispatchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchStatusWithAggregatesFilter<$PrismaModel> | $Enums.DispatchStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDispatchStatusFilter<$PrismaModel>
    _max?: NestedEnumDispatchStatusFilter<$PrismaModel>
  }

  export type AmbulanceRequestCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    reason?: SortOrder
    requestTime?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    contactName?: SortOrder
    contactPhone?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AmbulanceRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    reason?: SortOrder
    requestTime?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    contactName?: SortOrder
    contactPhone?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AmbulanceRequestMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    pickupLocation?: SortOrder
    reason?: SortOrder
    requestTime?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    contactName?: SortOrder
    contactPhone?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumWalletStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WalletStatus | EnumWalletStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWalletStatusFilter<$PrismaModel> | $Enums.WalletStatus
  }

  export type WalletTransactionListRelationFilter = {
    every?: WalletTransactionWhereInput
    some?: WalletTransactionWhereInput
    none?: WalletTransactionWhereInput
  }

  export type WalletTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    balance?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type EnumWalletStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WalletStatus | EnumWalletStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWalletStatusWithAggregatesFilter<$PrismaModel> | $Enums.WalletStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWalletStatusFilter<$PrismaModel>
    _max?: NestedEnumWalletStatusFilter<$PrismaModel>
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type EnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type WalletScalarRelationFilter = {
    is?: WalletWhereInput
    isNot?: WalletWhereInput
  }

  export type PaymentNullableScalarRelationFilter = {
    is?: PaymentWhereInput | null
    isNot?: PaymentWhereInput | null
  }

  export type WalletTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reference?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type WalletTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type WalletTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reference?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type WalletTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    status?: SortOrder
    reference?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type WalletTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type EnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type EnumBillingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusFilter<$PrismaModel> | $Enums.BillingStatus
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    invoiceNumber?: SortOrder
    items?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paidAt?: SortOrder
  }

  export type BillingAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BillingMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    invoiceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paidAt?: SortOrder
  }

  export type BillingMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    amount?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
    description?: SortOrder
    invoiceNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paidAt?: SortOrder
  }

  export type BillingSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumBillingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BillingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingStatusFilter<$PrismaModel>
    _max?: NestedEnumBillingStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type BillingScalarRelationFilter = {
    is?: BillingWhereInput
    isNot?: BillingWhereInput
  }

  export type WalletTransactionNullableScalarRelationFilter = {
    is?: WalletTransactionWhereInput | null
    isNot?: WalletTransactionWhereInput | null
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    billingId?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    status?: SortOrder
    transactionId?: SortOrder
    receiptNumber?: SortOrder
    paymentDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    billingId?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    status?: SortOrder
    transactionId?: SortOrder
    receiptNumber?: SortOrder
    paymentDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    billingId?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    status?: SortOrder
    transactionId?: SortOrder
    receiptNumber?: SortOrder
    paymentDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumConversationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationStatus | EnumConversationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationStatusFilter<$PrismaModel> | $Enums.ConversationStatus
  }

  export type ConversationCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    doctorId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    lastMessageAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    doctorId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    lastMessageAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConversationMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    doctorId?: SortOrder
    title?: SortOrder
    status?: SortOrder
    lastMessageAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumConversationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationStatus | EnumConversationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ConversationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConversationStatusFilter<$PrismaModel>
    _max?: NestedEnumConversationStatusFilter<$PrismaModel>
  }

  export type EnumMessageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageStatus | EnumMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageStatusFilter<$PrismaModel> | $Enums.MessageStatus
  }

  export type ConversationScalarRelationFilter = {
    is?: ConversationWhereInput
    isNot?: ConversationWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    readAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    readAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    conversationId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    readAt?: SortOrder
  }

  export type EnumMessageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageStatus | EnumMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageStatusWithAggregatesFilter<$PrismaModel> | $Enums.MessageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageStatusFilter<$PrismaModel>
    _max?: NestedEnumMessageStatusFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumDeliveryMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryMethod | EnumDeliveryMethodFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryMethodFilter<$PrismaModel> | $Enums.DeliveryMethod
  }

  export type BirthRecordCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    motherId?: SortOrder
    fatherId?: SortOrder
    hospitalId?: SortOrder
    birthDate?: SortOrder
    birthTime?: SortOrder
    birthWeight?: SortOrder
    deliveryMethod?: SortOrder
    attendingDoctorId?: SortOrder
    birthPlace?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrder
    complications?: SortOrder
    apgarScore?: SortOrder
    gestationalAge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BirthRecordAvgOrderByAggregateInput = {
    birthWeight?: SortOrder
    apgarScore?: SortOrder
    gestationalAge?: SortOrder
  }

  export type BirthRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    motherId?: SortOrder
    fatherId?: SortOrder
    hospitalId?: SortOrder
    birthDate?: SortOrder
    birthTime?: SortOrder
    birthWeight?: SortOrder
    deliveryMethod?: SortOrder
    attendingDoctorId?: SortOrder
    birthPlace?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrder
    apgarScore?: SortOrder
    gestationalAge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BirthRecordMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    motherId?: SortOrder
    fatherId?: SortOrder
    hospitalId?: SortOrder
    birthDate?: SortOrder
    birthTime?: SortOrder
    birthWeight?: SortOrder
    deliveryMethod?: SortOrder
    attendingDoctorId?: SortOrder
    birthPlace?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrder
    apgarScore?: SortOrder
    gestationalAge?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BirthRecordSumOrderByAggregateInput = {
    birthWeight?: SortOrder
    apgarScore?: SortOrder
    gestationalAge?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumDeliveryMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryMethod | EnumDeliveryMethodFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryMethodWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeliveryMethodFilter<$PrismaModel>
    _max?: NestedEnumDeliveryMethodFilter<$PrismaModel>
  }

  export type DeathRecordCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    dateOfDeath?: SortOrder
    timeOfDeath?: SortOrder
    causeOfDeath?: SortOrder
    attendingDoctorId?: SortOrder
    placeOfDeath?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeathRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    dateOfDeath?: SortOrder
    timeOfDeath?: SortOrder
    causeOfDeath?: SortOrder
    attendingDoctorId?: SortOrder
    placeOfDeath?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DeathRecordMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    hospitalId?: SortOrder
    dateOfDeath?: SortOrder
    timeOfDeath?: SortOrder
    causeOfDeath?: SortOrder
    attendingDoctorId?: SortOrder
    placeOfDeath?: SortOrder
    certificateNumber?: SortOrder
    registeredAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceProductListRelationFilter = {
    every?: MarketplaceProductWhereInput
    some?: MarketplaceProductWhereInput
    none?: MarketplaceProductWhereInput
  }

  export type MarketplaceProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarketplaceVendorCountOrderByAggregateInput = {
    id?: SortOrder
    hospitalId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    address?: SortOrder
    logo?: SortOrder
    websiteUrl?: SortOrder
    verified?: SortOrder
    rating?: SortOrder
    specialties?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceVendorAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type MarketplaceVendorMaxOrderByAggregateInput = {
    id?: SortOrder
    hospitalId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    address?: SortOrder
    logo?: SortOrder
    websiteUrl?: SortOrder
    verified?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceVendorMinOrderByAggregateInput = {
    id?: SortOrder
    hospitalId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    address?: SortOrder
    logo?: SortOrder
    websiteUrl?: SortOrder
    verified?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceVendorSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type MarketplaceVendorScalarRelationFilter = {
    is?: MarketplaceVendorWhereInput
    isNot?: MarketplaceVendorWhereInput
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarketplaceProductCountOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    discountPrice?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    imageUrl?: SortOrder
    inStock?: SortOrder
    requiredPrescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceProductAvgOrderByAggregateInput = {
    price?: SortOrder
    discountPrice?: SortOrder
  }

  export type MarketplaceProductMaxOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    discountPrice?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    inStock?: SortOrder
    requiredPrescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceProductMinOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    discountPrice?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    inStock?: SortOrder
    requiredPrescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceProductSumOrderByAggregateInput = {
    price?: SortOrder
    discountPrice?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type MarketplaceOrderCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    reference?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    shippingAddress?: SortOrder
    trackingNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceOrderAvgOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type MarketplaceOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    reference?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    shippingAddress?: SortOrder
    trackingNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceOrderMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    reference?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    shippingAddress?: SortOrder
    trackingNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarketplaceOrderSumOrderByAggregateInput = {
    totalAmount?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type MarketplaceOrderScalarRelationFilter = {
    is?: MarketplaceOrderWhereInput
    isNot?: MarketplaceOrderWhereInput
  }

  export type MarketplaceProductScalarRelationFilter = {
    is?: MarketplaceProductWhereInput
    isNot?: MarketplaceProductWhereInput
  }

  export type PrescriptionNullableScalarRelationFilter = {
    is?: PrescriptionWhereInput | null
    isNot?: PrescriptionWhereInput | null
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    prescriptionId?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    prescriptionId?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    prescriptionId?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type CartItemCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    addedAt?: SortOrder
  }

  export type CartItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type CartItemMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    addedAt?: SortOrder
  }

  export type CartItemMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    addedAt?: SortOrder
  }

  export type CartItemSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type SavedVendorPatientIdVendorIdCompoundUniqueInput = {
    patientId: string
    vendorId: string
  }

  export type SavedVendorCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    vendorId?: SortOrder
    savedAt?: SortOrder
  }

  export type SavedVendorMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    vendorId?: SortOrder
    savedAt?: SortOrder
  }

  export type SavedVendorMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    vendorId?: SortOrder
    savedAt?: SortOrder
  }

  export type PrescriptionCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    medications?: SortOrder
    dosageInstructions?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    filledStatus?: SortOrder
    filledDate?: SortOrder
    refills?: SortOrder
    refillsUsed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrescriptionAvgOrderByAggregateInput = {
    refills?: SortOrder
    refillsUsed?: SortOrder
  }

  export type PrescriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    dosageInstructions?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    filledStatus?: SortOrder
    filledDate?: SortOrder
    refills?: SortOrder
    refillsUsed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrescriptionMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    hospitalId?: SortOrder
    dosageInstructions?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    filledStatus?: SortOrder
    filledDate?: SortOrder
    refills?: SortOrder
    refillsUsed?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PrescriptionSumOrderByAggregateInput = {
    refills?: SortOrder
    refillsUsed?: SortOrder
  }

  export type UserCreateNestedOneWithoutAntenatalRecords_createdInput = {
    create?: XOR<UserCreateWithoutAntenatalRecords_createdInput, UserUncheckedCreateWithoutAntenatalRecords_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutAntenatalRecords_createdInput
    connect?: UserWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutAntenatalRecordsInput = {
    create?: XOR<HospitalCreateWithoutAntenatalRecordsInput, HospitalUncheckedCreateWithoutAntenatalRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAntenatalRecordsInput
    connect?: HospitalWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutAntenatalRecordsInput = {
    create?: XOR<PatientCreateWithoutAntenatalRecordsInput, PatientUncheckedCreateWithoutAntenatalRecordsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAntenatalRecordsInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAntenatalRecords_updatedInput = {
    create?: XOR<UserCreateWithoutAntenatalRecords_updatedInput, UserUncheckedCreateWithoutAntenatalRecords_updatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAntenatalRecords_updatedInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel
  }

  export type EnumAntenatalStatusFieldUpdateOperationsInput = {
    set?: $Enums.AntenatalStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutAntenatalRecords_createdNestedInput = {
    create?: XOR<UserCreateWithoutAntenatalRecords_createdInput, UserUncheckedCreateWithoutAntenatalRecords_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutAntenatalRecords_createdInput
    upsert?: UserUpsertWithoutAntenatalRecords_createdInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAntenatalRecords_createdInput, UserUpdateWithoutAntenatalRecords_createdInput>, UserUncheckedUpdateWithoutAntenatalRecords_createdInput>
  }

  export type HospitalUpdateOneRequiredWithoutAntenatalRecordsNestedInput = {
    create?: XOR<HospitalCreateWithoutAntenatalRecordsInput, HospitalUncheckedCreateWithoutAntenatalRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAntenatalRecordsInput
    upsert?: HospitalUpsertWithoutAntenatalRecordsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutAntenatalRecordsInput, HospitalUpdateWithoutAntenatalRecordsInput>, HospitalUncheckedUpdateWithoutAntenatalRecordsInput>
  }

  export type PatientUpdateOneRequiredWithoutAntenatalRecordsNestedInput = {
    create?: XOR<PatientCreateWithoutAntenatalRecordsInput, PatientUncheckedCreateWithoutAntenatalRecordsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAntenatalRecordsInput
    upsert?: PatientUpsertWithoutAntenatalRecordsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAntenatalRecordsInput, PatientUpdateWithoutAntenatalRecordsInput>, PatientUncheckedUpdateWithoutAntenatalRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutAntenatalRecords_updatedNestedInput = {
    create?: XOR<UserCreateWithoutAntenatalRecords_updatedInput, UserUncheckedCreateWithoutAntenatalRecords_updatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAntenatalRecords_updatedInput
    upsert?: UserUpsertWithoutAntenatalRecords_updatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAntenatalRecords_updatedInput, UserUpdateWithoutAntenatalRecords_updatedInput>, UserUncheckedUpdateWithoutAntenatalRecords_updatedInput>
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<HospitalCreateWithoutAppointmentsInput, HospitalUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAppointmentsInput
    connect?: HospitalWhereUniqueInput
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type UserUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    upsert?: PatientUpsertWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAppointmentsInput, PatientUpdateWithoutAppointmentsInput>, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type HospitalUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<HospitalCreateWithoutAppointmentsInput, HospitalUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAppointmentsInput
    upsert?: HospitalUpsertWithoutAppointmentsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutAppointmentsInput, HospitalUpdateWithoutAppointmentsInput>, HospitalUncheckedUpdateWithoutAppointmentsInput>
  }

  export type AntenatalRecordCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AntenatalRecordCreateWithoutHospitalInput, AntenatalRecordUncheckedCreateWithoutHospitalInput> | AntenatalRecordCreateWithoutHospitalInput[] | AntenatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutHospitalInput | AntenatalRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: AntenatalRecordCreateManyHospitalInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordCreateNestedManyWithoutHospitalInput = {
    create?: XOR<NeonatalRecordCreateWithoutHospitalInput, NeonatalRecordUncheckedCreateWithoutHospitalInput> | NeonatalRecordCreateWithoutHospitalInput[] | NeonatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutHospitalInput | NeonatalRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: NeonatalRecordCreateManyHospitalInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutHospitalInput = {
    create?: XOR<UserCreateWithoutHospitalInput, UserUncheckedCreateWithoutHospitalInput> | UserCreateWithoutHospitalInput[] | UserUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHospitalInput | UserCreateOrConnectWithoutHospitalInput[]
    createMany?: UserCreateManyHospitalInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DepartmentCreateWithoutHospitalInput, DepartmentUncheckedCreateWithoutHospitalInput> | DepartmentCreateWithoutHospitalInput[] | DepartmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHospitalInput | DepartmentCreateOrConnectWithoutHospitalInput[]
    createMany?: DepartmentCreateManyHospitalInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type StaffProfileCreateNestedManyWithoutHospitalInput = {
    create?: XOR<StaffProfileCreateWithoutHospitalInput, StaffProfileUncheckedCreateWithoutHospitalInput> | StaffProfileCreateWithoutHospitalInput[] | StaffProfileUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: StaffProfileCreateOrConnectWithoutHospitalInput | StaffProfileCreateOrConnectWithoutHospitalInput[]
    createMany?: StaffProfileCreateManyHospitalInputEnvelope
    connect?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
  }

  export type PatientHospitalAccessCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutHospitalInput, PatientHospitalAccessUncheckedCreateWithoutHospitalInput> | PatientHospitalAccessCreateWithoutHospitalInput[] | PatientHospitalAccessUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutHospitalInput | PatientHospitalAccessCreateOrConnectWithoutHospitalInput[]
    createMany?: PatientHospitalAccessCreateManyHospitalInputEnvelope
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AppointmentCreateWithoutHospitalInput, AppointmentUncheckedCreateWithoutHospitalInput> | AppointmentCreateWithoutHospitalInput[] | AppointmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutHospitalInput | AppointmentCreateOrConnectWithoutHospitalInput[]
    createMany?: AppointmentCreateManyHospitalInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type DoctorAvailabilityCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutHospitalInput, DoctorAvailabilityUncheckedCreateWithoutHospitalInput> | DoctorAvailabilityCreateWithoutHospitalInput[] | DoctorAvailabilityUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutHospitalInput | DoctorAvailabilityCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorAvailabilityCreateManyHospitalInputEnvelope
    connect?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput> | PatientCreateWithoutHospitalInput[] | PatientUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutHospitalInput | PatientCreateOrConnectWithoutHospitalInput[]
    createMany?: PatientCreateManyHospitalInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type MedicalRecordCreateNestedManyWithoutHospitalInput = {
    create?: XOR<MedicalRecordCreateWithoutHospitalInput, MedicalRecordUncheckedCreateWithoutHospitalInput> | MedicalRecordCreateWithoutHospitalInput[] | MedicalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutHospitalInput | MedicalRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: MedicalRecordCreateManyHospitalInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type ReferralCreateNestedManyWithoutFromHospitalInput = {
    create?: XOR<ReferralCreateWithoutFromHospitalInput, ReferralUncheckedCreateWithoutFromHospitalInput> | ReferralCreateWithoutFromHospitalInput[] | ReferralUncheckedCreateWithoutFromHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutFromHospitalInput | ReferralCreateOrConnectWithoutFromHospitalInput[]
    createMany?: ReferralCreateManyFromHospitalInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ReferralCreateNestedManyWithoutToHospitalInput = {
    create?: XOR<ReferralCreateWithoutToHospitalInput, ReferralUncheckedCreateWithoutToHospitalInput> | ReferralCreateWithoutToHospitalInput[] | ReferralUncheckedCreateWithoutToHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutToHospitalInput | ReferralCreateOrConnectWithoutToHospitalInput[]
    createMany?: ReferralCreateManyToHospitalInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type AmbulanceCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AmbulanceCreateWithoutHospitalInput, AmbulanceUncheckedCreateWithoutHospitalInput> | AmbulanceCreateWithoutHospitalInput[] | AmbulanceUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceCreateOrConnectWithoutHospitalInput | AmbulanceCreateOrConnectWithoutHospitalInput[]
    createMany?: AmbulanceCreateManyHospitalInputEnvelope
    connect?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
  }

  export type AmbulanceDispatchCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutHospitalInput, AmbulanceDispatchUncheckedCreateWithoutHospitalInput> | AmbulanceDispatchCreateWithoutHospitalInput[] | AmbulanceDispatchUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutHospitalInput | AmbulanceDispatchCreateOrConnectWithoutHospitalInput[]
    createMany?: AmbulanceDispatchCreateManyHospitalInputEnvelope
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
  }

  export type AmbulanceRequestCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AmbulanceRequestCreateWithoutHospitalInput, AmbulanceRequestUncheckedCreateWithoutHospitalInput> | AmbulanceRequestCreateWithoutHospitalInput[] | AmbulanceRequestUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutHospitalInput | AmbulanceRequestCreateOrConnectWithoutHospitalInput[]
    createMany?: AmbulanceRequestCreateManyHospitalInputEnvelope
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
  }

  export type BillingCreateNestedManyWithoutHospitalInput = {
    create?: XOR<BillingCreateWithoutHospitalInput, BillingUncheckedCreateWithoutHospitalInput> | BillingCreateWithoutHospitalInput[] | BillingUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutHospitalInput | BillingCreateOrConnectWithoutHospitalInput[]
    createMany?: BillingCreateManyHospitalInputEnvelope
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutHospitalInput = {
    create?: XOR<ConversationCreateWithoutHospitalInput, ConversationUncheckedCreateWithoutHospitalInput> | ConversationCreateWithoutHospitalInput[] | ConversationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutHospitalInput | ConversationCreateOrConnectWithoutHospitalInput[]
    createMany?: ConversationCreateManyHospitalInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type BirthRecordCreateNestedManyWithoutHospitalInput = {
    create?: XOR<BirthRecordCreateWithoutHospitalInput, BirthRecordUncheckedCreateWithoutHospitalInput> | BirthRecordCreateWithoutHospitalInput[] | BirthRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutHospitalInput | BirthRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: BirthRecordCreateManyHospitalInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type DeathRecordCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DeathRecordCreateWithoutHospitalInput, DeathRecordUncheckedCreateWithoutHospitalInput> | DeathRecordCreateWithoutHospitalInput[] | DeathRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutHospitalInput | DeathRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: DeathRecordCreateManyHospitalInputEnvelope
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
  }

  export type MarketplaceVendorCreateNestedManyWithoutHospitalInput = {
    create?: XOR<MarketplaceVendorCreateWithoutHospitalInput, MarketplaceVendorUncheckedCreateWithoutHospitalInput> | MarketplaceVendorCreateWithoutHospitalInput[] | MarketplaceVendorUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutHospitalInput | MarketplaceVendorCreateOrConnectWithoutHospitalInput[]
    createMany?: MarketplaceVendorCreateManyHospitalInputEnvelope
    connect?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
  }

  export type PrescriptionCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PrescriptionCreateWithoutHospitalInput, PrescriptionUncheckedCreateWithoutHospitalInput> | PrescriptionCreateWithoutHospitalInput[] | PrescriptionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutHospitalInput | PrescriptionCreateOrConnectWithoutHospitalInput[]
    createMany?: PrescriptionCreateManyHospitalInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AntenatalRecordCreateWithoutHospitalInput, AntenatalRecordUncheckedCreateWithoutHospitalInput> | AntenatalRecordCreateWithoutHospitalInput[] | AntenatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutHospitalInput | AntenatalRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: AntenatalRecordCreateManyHospitalInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<NeonatalRecordCreateWithoutHospitalInput, NeonatalRecordUncheckedCreateWithoutHospitalInput> | NeonatalRecordCreateWithoutHospitalInput[] | NeonatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutHospitalInput | NeonatalRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: NeonatalRecordCreateManyHospitalInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<UserCreateWithoutHospitalInput, UserUncheckedCreateWithoutHospitalInput> | UserCreateWithoutHospitalInput[] | UserUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHospitalInput | UserCreateOrConnectWithoutHospitalInput[]
    createMany?: UserCreateManyHospitalInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DepartmentCreateWithoutHospitalInput, DepartmentUncheckedCreateWithoutHospitalInput> | DepartmentCreateWithoutHospitalInput[] | DepartmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHospitalInput | DepartmentCreateOrConnectWithoutHospitalInput[]
    createMany?: DepartmentCreateManyHospitalInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type StaffProfileUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<StaffProfileCreateWithoutHospitalInput, StaffProfileUncheckedCreateWithoutHospitalInput> | StaffProfileCreateWithoutHospitalInput[] | StaffProfileUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: StaffProfileCreateOrConnectWithoutHospitalInput | StaffProfileCreateOrConnectWithoutHospitalInput[]
    createMany?: StaffProfileCreateManyHospitalInputEnvelope
    connect?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
  }

  export type PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutHospitalInput, PatientHospitalAccessUncheckedCreateWithoutHospitalInput> | PatientHospitalAccessCreateWithoutHospitalInput[] | PatientHospitalAccessUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutHospitalInput | PatientHospitalAccessCreateOrConnectWithoutHospitalInput[]
    createMany?: PatientHospitalAccessCreateManyHospitalInputEnvelope
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AppointmentCreateWithoutHospitalInput, AppointmentUncheckedCreateWithoutHospitalInput> | AppointmentCreateWithoutHospitalInput[] | AppointmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutHospitalInput | AppointmentCreateOrConnectWithoutHospitalInput[]
    createMany?: AppointmentCreateManyHospitalInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutHospitalInput, DoctorAvailabilityUncheckedCreateWithoutHospitalInput> | DoctorAvailabilityCreateWithoutHospitalInput[] | DoctorAvailabilityUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutHospitalInput | DoctorAvailabilityCreateOrConnectWithoutHospitalInput[]
    createMany?: DoctorAvailabilityCreateManyHospitalInputEnvelope
    connect?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput> | PatientCreateWithoutHospitalInput[] | PatientUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutHospitalInput | PatientCreateOrConnectWithoutHospitalInput[]
    createMany?: PatientCreateManyHospitalInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<MedicalRecordCreateWithoutHospitalInput, MedicalRecordUncheckedCreateWithoutHospitalInput> | MedicalRecordCreateWithoutHospitalInput[] | MedicalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutHospitalInput | MedicalRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: MedicalRecordCreateManyHospitalInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type ReferralUncheckedCreateNestedManyWithoutFromHospitalInput = {
    create?: XOR<ReferralCreateWithoutFromHospitalInput, ReferralUncheckedCreateWithoutFromHospitalInput> | ReferralCreateWithoutFromHospitalInput[] | ReferralUncheckedCreateWithoutFromHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutFromHospitalInput | ReferralCreateOrConnectWithoutFromHospitalInput[]
    createMany?: ReferralCreateManyFromHospitalInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ReferralUncheckedCreateNestedManyWithoutToHospitalInput = {
    create?: XOR<ReferralCreateWithoutToHospitalInput, ReferralUncheckedCreateWithoutToHospitalInput> | ReferralCreateWithoutToHospitalInput[] | ReferralUncheckedCreateWithoutToHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutToHospitalInput | ReferralCreateOrConnectWithoutToHospitalInput[]
    createMany?: ReferralCreateManyToHospitalInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type AmbulanceUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AmbulanceCreateWithoutHospitalInput, AmbulanceUncheckedCreateWithoutHospitalInput> | AmbulanceCreateWithoutHospitalInput[] | AmbulanceUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceCreateOrConnectWithoutHospitalInput | AmbulanceCreateOrConnectWithoutHospitalInput[]
    createMany?: AmbulanceCreateManyHospitalInputEnvelope
    connect?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
  }

  export type AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutHospitalInput, AmbulanceDispatchUncheckedCreateWithoutHospitalInput> | AmbulanceDispatchCreateWithoutHospitalInput[] | AmbulanceDispatchUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutHospitalInput | AmbulanceDispatchCreateOrConnectWithoutHospitalInput[]
    createMany?: AmbulanceDispatchCreateManyHospitalInputEnvelope
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
  }

  export type AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<AmbulanceRequestCreateWithoutHospitalInput, AmbulanceRequestUncheckedCreateWithoutHospitalInput> | AmbulanceRequestCreateWithoutHospitalInput[] | AmbulanceRequestUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutHospitalInput | AmbulanceRequestCreateOrConnectWithoutHospitalInput[]
    createMany?: AmbulanceRequestCreateManyHospitalInputEnvelope
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
  }

  export type BillingUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<BillingCreateWithoutHospitalInput, BillingUncheckedCreateWithoutHospitalInput> | BillingCreateWithoutHospitalInput[] | BillingUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutHospitalInput | BillingCreateOrConnectWithoutHospitalInput[]
    createMany?: BillingCreateManyHospitalInputEnvelope
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<ConversationCreateWithoutHospitalInput, ConversationUncheckedCreateWithoutHospitalInput> | ConversationCreateWithoutHospitalInput[] | ConversationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutHospitalInput | ConversationCreateOrConnectWithoutHospitalInput[]
    createMany?: ConversationCreateManyHospitalInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type BirthRecordUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<BirthRecordCreateWithoutHospitalInput, BirthRecordUncheckedCreateWithoutHospitalInput> | BirthRecordCreateWithoutHospitalInput[] | BirthRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutHospitalInput | BirthRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: BirthRecordCreateManyHospitalInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type DeathRecordUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<DeathRecordCreateWithoutHospitalInput, DeathRecordUncheckedCreateWithoutHospitalInput> | DeathRecordCreateWithoutHospitalInput[] | DeathRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutHospitalInput | DeathRecordCreateOrConnectWithoutHospitalInput[]
    createMany?: DeathRecordCreateManyHospitalInputEnvelope
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
  }

  export type MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<MarketplaceVendorCreateWithoutHospitalInput, MarketplaceVendorUncheckedCreateWithoutHospitalInput> | MarketplaceVendorCreateWithoutHospitalInput[] | MarketplaceVendorUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutHospitalInput | MarketplaceVendorCreateOrConnectWithoutHospitalInput[]
    createMany?: MarketplaceVendorCreateManyHospitalInputEnvelope
    connect?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<PrescriptionCreateWithoutHospitalInput, PrescriptionUncheckedCreateWithoutHospitalInput> | PrescriptionCreateWithoutHospitalInput[] | PrescriptionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutHospitalInput | PrescriptionCreateOrConnectWithoutHospitalInput[]
    createMany?: PrescriptionCreateManyHospitalInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AntenatalRecordUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutHospitalInput, AntenatalRecordUncheckedCreateWithoutHospitalInput> | AntenatalRecordCreateWithoutHospitalInput[] | AntenatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutHospitalInput | AntenatalRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutHospitalInput | AntenatalRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AntenatalRecordCreateManyHospitalInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutHospitalInput | AntenatalRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutHospitalInput | AntenatalRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutHospitalInput, NeonatalRecordUncheckedCreateWithoutHospitalInput> | NeonatalRecordCreateWithoutHospitalInput[] | NeonatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutHospitalInput | NeonatalRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutHospitalInput | NeonatalRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: NeonatalRecordCreateManyHospitalInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutHospitalInput | NeonatalRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutHospitalInput | NeonatalRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type UserUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<UserCreateWithoutHospitalInput, UserUncheckedCreateWithoutHospitalInput> | UserCreateWithoutHospitalInput[] | UserUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHospitalInput | UserCreateOrConnectWithoutHospitalInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutHospitalInput | UserUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: UserCreateManyHospitalInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutHospitalInput | UserUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: UserUpdateManyWithWhereWithoutHospitalInput | UserUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DepartmentCreateWithoutHospitalInput, DepartmentUncheckedCreateWithoutHospitalInput> | DepartmentCreateWithoutHospitalInput[] | DepartmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHospitalInput | DepartmentCreateOrConnectWithoutHospitalInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutHospitalInput | DepartmentUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DepartmentCreateManyHospitalInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutHospitalInput | DepartmentUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutHospitalInput | DepartmentUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type StaffProfileUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<StaffProfileCreateWithoutHospitalInput, StaffProfileUncheckedCreateWithoutHospitalInput> | StaffProfileCreateWithoutHospitalInput[] | StaffProfileUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: StaffProfileCreateOrConnectWithoutHospitalInput | StaffProfileCreateOrConnectWithoutHospitalInput[]
    upsert?: StaffProfileUpsertWithWhereUniqueWithoutHospitalInput | StaffProfileUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: StaffProfileCreateManyHospitalInputEnvelope
    set?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    disconnect?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    delete?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    connect?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    update?: StaffProfileUpdateWithWhereUniqueWithoutHospitalInput | StaffProfileUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: StaffProfileUpdateManyWithWhereWithoutHospitalInput | StaffProfileUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: StaffProfileScalarWhereInput | StaffProfileScalarWhereInput[]
  }

  export type PatientHospitalAccessUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutHospitalInput, PatientHospitalAccessUncheckedCreateWithoutHospitalInput> | PatientHospitalAccessCreateWithoutHospitalInput[] | PatientHospitalAccessUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutHospitalInput | PatientHospitalAccessCreateOrConnectWithoutHospitalInput[]
    upsert?: PatientHospitalAccessUpsertWithWhereUniqueWithoutHospitalInput | PatientHospitalAccessUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PatientHospitalAccessCreateManyHospitalInputEnvelope
    set?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    disconnect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    delete?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    update?: PatientHospitalAccessUpdateWithWhereUniqueWithoutHospitalInput | PatientHospitalAccessUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PatientHospitalAccessUpdateManyWithWhereWithoutHospitalInput | PatientHospitalAccessUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AppointmentCreateWithoutHospitalInput, AppointmentUncheckedCreateWithoutHospitalInput> | AppointmentCreateWithoutHospitalInput[] | AppointmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutHospitalInput | AppointmentCreateOrConnectWithoutHospitalInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutHospitalInput | AppointmentUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AppointmentCreateManyHospitalInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutHospitalInput | AppointmentUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutHospitalInput | AppointmentUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type DoctorAvailabilityUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutHospitalInput, DoctorAvailabilityUncheckedCreateWithoutHospitalInput> | DoctorAvailabilityCreateWithoutHospitalInput[] | DoctorAvailabilityUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutHospitalInput | DoctorAvailabilityCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorAvailabilityUpsertWithWhereUniqueWithoutHospitalInput | DoctorAvailabilityUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorAvailabilityCreateManyHospitalInputEnvelope
    set?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    disconnect?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    delete?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    connect?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    update?: DoctorAvailabilityUpdateWithWhereUniqueWithoutHospitalInput | DoctorAvailabilityUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorAvailabilityUpdateManyWithWhereWithoutHospitalInput | DoctorAvailabilityUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorAvailabilityScalarWhereInput | DoctorAvailabilityScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput> | PatientCreateWithoutHospitalInput[] | PatientUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutHospitalInput | PatientCreateOrConnectWithoutHospitalInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutHospitalInput | PatientUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PatientCreateManyHospitalInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutHospitalInput | PatientUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutHospitalInput | PatientUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type MedicalRecordUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutHospitalInput, MedicalRecordUncheckedCreateWithoutHospitalInput> | MedicalRecordCreateWithoutHospitalInput[] | MedicalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutHospitalInput | MedicalRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutHospitalInput | MedicalRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: MedicalRecordCreateManyHospitalInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutHospitalInput | MedicalRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutHospitalInput | MedicalRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type ReferralUpdateManyWithoutFromHospitalNestedInput = {
    create?: XOR<ReferralCreateWithoutFromHospitalInput, ReferralUncheckedCreateWithoutFromHospitalInput> | ReferralCreateWithoutFromHospitalInput[] | ReferralUncheckedCreateWithoutFromHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutFromHospitalInput | ReferralCreateOrConnectWithoutFromHospitalInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutFromHospitalInput | ReferralUpsertWithWhereUniqueWithoutFromHospitalInput[]
    createMany?: ReferralCreateManyFromHospitalInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutFromHospitalInput | ReferralUpdateWithWhereUniqueWithoutFromHospitalInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutFromHospitalInput | ReferralUpdateManyWithWhereWithoutFromHospitalInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ReferralUpdateManyWithoutToHospitalNestedInput = {
    create?: XOR<ReferralCreateWithoutToHospitalInput, ReferralUncheckedCreateWithoutToHospitalInput> | ReferralCreateWithoutToHospitalInput[] | ReferralUncheckedCreateWithoutToHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutToHospitalInput | ReferralCreateOrConnectWithoutToHospitalInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutToHospitalInput | ReferralUpsertWithWhereUniqueWithoutToHospitalInput[]
    createMany?: ReferralCreateManyToHospitalInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutToHospitalInput | ReferralUpdateWithWhereUniqueWithoutToHospitalInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutToHospitalInput | ReferralUpdateManyWithWhereWithoutToHospitalInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type AmbulanceUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AmbulanceCreateWithoutHospitalInput, AmbulanceUncheckedCreateWithoutHospitalInput> | AmbulanceCreateWithoutHospitalInput[] | AmbulanceUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceCreateOrConnectWithoutHospitalInput | AmbulanceCreateOrConnectWithoutHospitalInput[]
    upsert?: AmbulanceUpsertWithWhereUniqueWithoutHospitalInput | AmbulanceUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AmbulanceCreateManyHospitalInputEnvelope
    set?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    disconnect?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    delete?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    connect?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    update?: AmbulanceUpdateWithWhereUniqueWithoutHospitalInput | AmbulanceUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AmbulanceUpdateManyWithWhereWithoutHospitalInput | AmbulanceUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AmbulanceScalarWhereInput | AmbulanceScalarWhereInput[]
  }

  export type AmbulanceDispatchUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutHospitalInput, AmbulanceDispatchUncheckedCreateWithoutHospitalInput> | AmbulanceDispatchCreateWithoutHospitalInput[] | AmbulanceDispatchUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutHospitalInput | AmbulanceDispatchCreateOrConnectWithoutHospitalInput[]
    upsert?: AmbulanceDispatchUpsertWithWhereUniqueWithoutHospitalInput | AmbulanceDispatchUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AmbulanceDispatchCreateManyHospitalInputEnvelope
    set?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    disconnect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    delete?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    update?: AmbulanceDispatchUpdateWithWhereUniqueWithoutHospitalInput | AmbulanceDispatchUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AmbulanceDispatchUpdateManyWithWhereWithoutHospitalInput | AmbulanceDispatchUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
  }

  export type AmbulanceRequestUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AmbulanceRequestCreateWithoutHospitalInput, AmbulanceRequestUncheckedCreateWithoutHospitalInput> | AmbulanceRequestCreateWithoutHospitalInput[] | AmbulanceRequestUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutHospitalInput | AmbulanceRequestCreateOrConnectWithoutHospitalInput[]
    upsert?: AmbulanceRequestUpsertWithWhereUniqueWithoutHospitalInput | AmbulanceRequestUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AmbulanceRequestCreateManyHospitalInputEnvelope
    set?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    disconnect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    delete?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    update?: AmbulanceRequestUpdateWithWhereUniqueWithoutHospitalInput | AmbulanceRequestUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AmbulanceRequestUpdateManyWithWhereWithoutHospitalInput | AmbulanceRequestUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AmbulanceRequestScalarWhereInput | AmbulanceRequestScalarWhereInput[]
  }

  export type BillingUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<BillingCreateWithoutHospitalInput, BillingUncheckedCreateWithoutHospitalInput> | BillingCreateWithoutHospitalInput[] | BillingUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutHospitalInput | BillingCreateOrConnectWithoutHospitalInput[]
    upsert?: BillingUpsertWithWhereUniqueWithoutHospitalInput | BillingUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: BillingCreateManyHospitalInputEnvelope
    set?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    disconnect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    delete?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    update?: BillingUpdateWithWhereUniqueWithoutHospitalInput | BillingUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: BillingUpdateManyWithWhereWithoutHospitalInput | BillingUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: BillingScalarWhereInput | BillingScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<ConversationCreateWithoutHospitalInput, ConversationUncheckedCreateWithoutHospitalInput> | ConversationCreateWithoutHospitalInput[] | ConversationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutHospitalInput | ConversationCreateOrConnectWithoutHospitalInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutHospitalInput | ConversationUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: ConversationCreateManyHospitalInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutHospitalInput | ConversationUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutHospitalInput | ConversationUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type BirthRecordUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<BirthRecordCreateWithoutHospitalInput, BirthRecordUncheckedCreateWithoutHospitalInput> | BirthRecordCreateWithoutHospitalInput[] | BirthRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutHospitalInput | BirthRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutHospitalInput | BirthRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: BirthRecordCreateManyHospitalInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutHospitalInput | BirthRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutHospitalInput | BirthRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type DeathRecordUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DeathRecordCreateWithoutHospitalInput, DeathRecordUncheckedCreateWithoutHospitalInput> | DeathRecordCreateWithoutHospitalInput[] | DeathRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutHospitalInput | DeathRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: DeathRecordUpsertWithWhereUniqueWithoutHospitalInput | DeathRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DeathRecordCreateManyHospitalInputEnvelope
    set?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    disconnect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    delete?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    update?: DeathRecordUpdateWithWhereUniqueWithoutHospitalInput | DeathRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DeathRecordUpdateManyWithWhereWithoutHospitalInput | DeathRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DeathRecordScalarWhereInput | DeathRecordScalarWhereInput[]
  }

  export type MarketplaceVendorUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<MarketplaceVendorCreateWithoutHospitalInput, MarketplaceVendorUncheckedCreateWithoutHospitalInput> | MarketplaceVendorCreateWithoutHospitalInput[] | MarketplaceVendorUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutHospitalInput | MarketplaceVendorCreateOrConnectWithoutHospitalInput[]
    upsert?: MarketplaceVendorUpsertWithWhereUniqueWithoutHospitalInput | MarketplaceVendorUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: MarketplaceVendorCreateManyHospitalInputEnvelope
    set?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    disconnect?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    delete?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    connect?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    update?: MarketplaceVendorUpdateWithWhereUniqueWithoutHospitalInput | MarketplaceVendorUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: MarketplaceVendorUpdateManyWithWhereWithoutHospitalInput | MarketplaceVendorUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: MarketplaceVendorScalarWhereInput | MarketplaceVendorScalarWhereInput[]
  }

  export type PrescriptionUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PrescriptionCreateWithoutHospitalInput, PrescriptionUncheckedCreateWithoutHospitalInput> | PrescriptionCreateWithoutHospitalInput[] | PrescriptionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutHospitalInput | PrescriptionCreateOrConnectWithoutHospitalInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutHospitalInput | PrescriptionUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PrescriptionCreateManyHospitalInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutHospitalInput | PrescriptionUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutHospitalInput | PrescriptionUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutHospitalInput, AntenatalRecordUncheckedCreateWithoutHospitalInput> | AntenatalRecordCreateWithoutHospitalInput[] | AntenatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutHospitalInput | AntenatalRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutHospitalInput | AntenatalRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AntenatalRecordCreateManyHospitalInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutHospitalInput | AntenatalRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutHospitalInput | AntenatalRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutHospitalInput, NeonatalRecordUncheckedCreateWithoutHospitalInput> | NeonatalRecordCreateWithoutHospitalInput[] | NeonatalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutHospitalInput | NeonatalRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutHospitalInput | NeonatalRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: NeonatalRecordCreateManyHospitalInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutHospitalInput | NeonatalRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutHospitalInput | NeonatalRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<UserCreateWithoutHospitalInput, UserUncheckedCreateWithoutHospitalInput> | UserCreateWithoutHospitalInput[] | UserUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: UserCreateOrConnectWithoutHospitalInput | UserCreateOrConnectWithoutHospitalInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutHospitalInput | UserUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: UserCreateManyHospitalInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutHospitalInput | UserUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: UserUpdateManyWithWhereWithoutHospitalInput | UserUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DepartmentCreateWithoutHospitalInput, DepartmentUncheckedCreateWithoutHospitalInput> | DepartmentCreateWithoutHospitalInput[] | DepartmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutHospitalInput | DepartmentCreateOrConnectWithoutHospitalInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutHospitalInput | DepartmentUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DepartmentCreateManyHospitalInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutHospitalInput | DepartmentUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutHospitalInput | DepartmentUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<StaffProfileCreateWithoutHospitalInput, StaffProfileUncheckedCreateWithoutHospitalInput> | StaffProfileCreateWithoutHospitalInput[] | StaffProfileUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: StaffProfileCreateOrConnectWithoutHospitalInput | StaffProfileCreateOrConnectWithoutHospitalInput[]
    upsert?: StaffProfileUpsertWithWhereUniqueWithoutHospitalInput | StaffProfileUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: StaffProfileCreateManyHospitalInputEnvelope
    set?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    disconnect?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    delete?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    connect?: StaffProfileWhereUniqueInput | StaffProfileWhereUniqueInput[]
    update?: StaffProfileUpdateWithWhereUniqueWithoutHospitalInput | StaffProfileUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: StaffProfileUpdateManyWithWhereWithoutHospitalInput | StaffProfileUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: StaffProfileScalarWhereInput | StaffProfileScalarWhereInput[]
  }

  export type PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutHospitalInput, PatientHospitalAccessUncheckedCreateWithoutHospitalInput> | PatientHospitalAccessCreateWithoutHospitalInput[] | PatientHospitalAccessUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutHospitalInput | PatientHospitalAccessCreateOrConnectWithoutHospitalInput[]
    upsert?: PatientHospitalAccessUpsertWithWhereUniqueWithoutHospitalInput | PatientHospitalAccessUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PatientHospitalAccessCreateManyHospitalInputEnvelope
    set?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    disconnect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    delete?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    update?: PatientHospitalAccessUpdateWithWhereUniqueWithoutHospitalInput | PatientHospitalAccessUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PatientHospitalAccessUpdateManyWithWhereWithoutHospitalInput | PatientHospitalAccessUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AppointmentCreateWithoutHospitalInput, AppointmentUncheckedCreateWithoutHospitalInput> | AppointmentCreateWithoutHospitalInput[] | AppointmentUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutHospitalInput | AppointmentCreateOrConnectWithoutHospitalInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutHospitalInput | AppointmentUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AppointmentCreateManyHospitalInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutHospitalInput | AppointmentUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutHospitalInput | AppointmentUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutHospitalInput, DoctorAvailabilityUncheckedCreateWithoutHospitalInput> | DoctorAvailabilityCreateWithoutHospitalInput[] | DoctorAvailabilityUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutHospitalInput | DoctorAvailabilityCreateOrConnectWithoutHospitalInput[]
    upsert?: DoctorAvailabilityUpsertWithWhereUniqueWithoutHospitalInput | DoctorAvailabilityUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DoctorAvailabilityCreateManyHospitalInputEnvelope
    set?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    disconnect?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    delete?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    connect?: DoctorAvailabilityWhereUniqueInput | DoctorAvailabilityWhereUniqueInput[]
    update?: DoctorAvailabilityUpdateWithWhereUniqueWithoutHospitalInput | DoctorAvailabilityUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DoctorAvailabilityUpdateManyWithWhereWithoutHospitalInput | DoctorAvailabilityUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DoctorAvailabilityScalarWhereInput | DoctorAvailabilityScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput> | PatientCreateWithoutHospitalInput[] | PatientUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutHospitalInput | PatientCreateOrConnectWithoutHospitalInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutHospitalInput | PatientUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PatientCreateManyHospitalInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutHospitalInput | PatientUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutHospitalInput | PatientUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutHospitalInput, MedicalRecordUncheckedCreateWithoutHospitalInput> | MedicalRecordCreateWithoutHospitalInput[] | MedicalRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutHospitalInput | MedicalRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutHospitalInput | MedicalRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: MedicalRecordCreateManyHospitalInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutHospitalInput | MedicalRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutHospitalInput | MedicalRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput = {
    create?: XOR<ReferralCreateWithoutFromHospitalInput, ReferralUncheckedCreateWithoutFromHospitalInput> | ReferralCreateWithoutFromHospitalInput[] | ReferralUncheckedCreateWithoutFromHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutFromHospitalInput | ReferralCreateOrConnectWithoutFromHospitalInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutFromHospitalInput | ReferralUpsertWithWhereUniqueWithoutFromHospitalInput[]
    createMany?: ReferralCreateManyFromHospitalInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutFromHospitalInput | ReferralUpdateWithWhereUniqueWithoutFromHospitalInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutFromHospitalInput | ReferralUpdateManyWithWhereWithoutFromHospitalInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ReferralUncheckedUpdateManyWithoutToHospitalNestedInput = {
    create?: XOR<ReferralCreateWithoutToHospitalInput, ReferralUncheckedCreateWithoutToHospitalInput> | ReferralCreateWithoutToHospitalInput[] | ReferralUncheckedCreateWithoutToHospitalInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutToHospitalInput | ReferralCreateOrConnectWithoutToHospitalInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutToHospitalInput | ReferralUpsertWithWhereUniqueWithoutToHospitalInput[]
    createMany?: ReferralCreateManyToHospitalInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutToHospitalInput | ReferralUpdateWithWhereUniqueWithoutToHospitalInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutToHospitalInput | ReferralUpdateManyWithWhereWithoutToHospitalInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AmbulanceCreateWithoutHospitalInput, AmbulanceUncheckedCreateWithoutHospitalInput> | AmbulanceCreateWithoutHospitalInput[] | AmbulanceUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceCreateOrConnectWithoutHospitalInput | AmbulanceCreateOrConnectWithoutHospitalInput[]
    upsert?: AmbulanceUpsertWithWhereUniqueWithoutHospitalInput | AmbulanceUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AmbulanceCreateManyHospitalInputEnvelope
    set?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    disconnect?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    delete?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    connect?: AmbulanceWhereUniqueInput | AmbulanceWhereUniqueInput[]
    update?: AmbulanceUpdateWithWhereUniqueWithoutHospitalInput | AmbulanceUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AmbulanceUpdateManyWithWhereWithoutHospitalInput | AmbulanceUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AmbulanceScalarWhereInput | AmbulanceScalarWhereInput[]
  }

  export type AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutHospitalInput, AmbulanceDispatchUncheckedCreateWithoutHospitalInput> | AmbulanceDispatchCreateWithoutHospitalInput[] | AmbulanceDispatchUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutHospitalInput | AmbulanceDispatchCreateOrConnectWithoutHospitalInput[]
    upsert?: AmbulanceDispatchUpsertWithWhereUniqueWithoutHospitalInput | AmbulanceDispatchUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AmbulanceDispatchCreateManyHospitalInputEnvelope
    set?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    disconnect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    delete?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    update?: AmbulanceDispatchUpdateWithWhereUniqueWithoutHospitalInput | AmbulanceDispatchUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AmbulanceDispatchUpdateManyWithWhereWithoutHospitalInput | AmbulanceDispatchUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
  }

  export type AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<AmbulanceRequestCreateWithoutHospitalInput, AmbulanceRequestUncheckedCreateWithoutHospitalInput> | AmbulanceRequestCreateWithoutHospitalInput[] | AmbulanceRequestUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutHospitalInput | AmbulanceRequestCreateOrConnectWithoutHospitalInput[]
    upsert?: AmbulanceRequestUpsertWithWhereUniqueWithoutHospitalInput | AmbulanceRequestUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: AmbulanceRequestCreateManyHospitalInputEnvelope
    set?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    disconnect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    delete?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    update?: AmbulanceRequestUpdateWithWhereUniqueWithoutHospitalInput | AmbulanceRequestUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: AmbulanceRequestUpdateManyWithWhereWithoutHospitalInput | AmbulanceRequestUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: AmbulanceRequestScalarWhereInput | AmbulanceRequestScalarWhereInput[]
  }

  export type BillingUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<BillingCreateWithoutHospitalInput, BillingUncheckedCreateWithoutHospitalInput> | BillingCreateWithoutHospitalInput[] | BillingUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutHospitalInput | BillingCreateOrConnectWithoutHospitalInput[]
    upsert?: BillingUpsertWithWhereUniqueWithoutHospitalInput | BillingUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: BillingCreateManyHospitalInputEnvelope
    set?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    disconnect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    delete?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    update?: BillingUpdateWithWhereUniqueWithoutHospitalInput | BillingUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: BillingUpdateManyWithWhereWithoutHospitalInput | BillingUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: BillingScalarWhereInput | BillingScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<ConversationCreateWithoutHospitalInput, ConversationUncheckedCreateWithoutHospitalInput> | ConversationCreateWithoutHospitalInput[] | ConversationUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutHospitalInput | ConversationCreateOrConnectWithoutHospitalInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutHospitalInput | ConversationUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: ConversationCreateManyHospitalInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutHospitalInput | ConversationUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutHospitalInput | ConversationUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<BirthRecordCreateWithoutHospitalInput, BirthRecordUncheckedCreateWithoutHospitalInput> | BirthRecordCreateWithoutHospitalInput[] | BirthRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutHospitalInput | BirthRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutHospitalInput | BirthRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: BirthRecordCreateManyHospitalInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutHospitalInput | BirthRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutHospitalInput | BirthRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<DeathRecordCreateWithoutHospitalInput, DeathRecordUncheckedCreateWithoutHospitalInput> | DeathRecordCreateWithoutHospitalInput[] | DeathRecordUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutHospitalInput | DeathRecordCreateOrConnectWithoutHospitalInput[]
    upsert?: DeathRecordUpsertWithWhereUniqueWithoutHospitalInput | DeathRecordUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: DeathRecordCreateManyHospitalInputEnvelope
    set?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    disconnect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    delete?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    update?: DeathRecordUpdateWithWhereUniqueWithoutHospitalInput | DeathRecordUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: DeathRecordUpdateManyWithWhereWithoutHospitalInput | DeathRecordUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: DeathRecordScalarWhereInput | DeathRecordScalarWhereInput[]
  }

  export type MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<MarketplaceVendorCreateWithoutHospitalInput, MarketplaceVendorUncheckedCreateWithoutHospitalInput> | MarketplaceVendorCreateWithoutHospitalInput[] | MarketplaceVendorUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutHospitalInput | MarketplaceVendorCreateOrConnectWithoutHospitalInput[]
    upsert?: MarketplaceVendorUpsertWithWhereUniqueWithoutHospitalInput | MarketplaceVendorUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: MarketplaceVendorCreateManyHospitalInputEnvelope
    set?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    disconnect?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    delete?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    connect?: MarketplaceVendorWhereUniqueInput | MarketplaceVendorWhereUniqueInput[]
    update?: MarketplaceVendorUpdateWithWhereUniqueWithoutHospitalInput | MarketplaceVendorUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: MarketplaceVendorUpdateManyWithWhereWithoutHospitalInput | MarketplaceVendorUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: MarketplaceVendorScalarWhereInput | MarketplaceVendorScalarWhereInput[]
  }

  export type PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput = {
    create?: XOR<PrescriptionCreateWithoutHospitalInput, PrescriptionUncheckedCreateWithoutHospitalInput> | PrescriptionCreateWithoutHospitalInput[] | PrescriptionUncheckedCreateWithoutHospitalInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutHospitalInput | PrescriptionCreateOrConnectWithoutHospitalInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutHospitalInput | PrescriptionUpsertWithWhereUniqueWithoutHospitalInput[]
    createMany?: PrescriptionCreateManyHospitalInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutHospitalInput | PrescriptionUpdateWithWhereUniqueWithoutHospitalInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutHospitalInput | PrescriptionUpdateManyWithWhereWithoutHospitalInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMedicalRecordsInput = {
    create?: XOR<UserCreateWithoutMedicalRecordsInput, UserUncheckedCreateWithoutMedicalRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicalRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutMedicalRecordsInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordsInput, PatientUncheckedCreateWithoutMedicalRecordsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordsInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutMedicalRecordsInput = {
    create?: XOR<HospitalCreateWithoutMedicalRecordsInput, HospitalUncheckedCreateWithoutMedicalRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutMedicalRecordsInput
    connect?: HospitalWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMedicalRecordsNestedInput = {
    create?: XOR<UserCreateWithoutMedicalRecordsInput, UserUncheckedCreateWithoutMedicalRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicalRecordsInput
    upsert?: UserUpsertWithoutMedicalRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMedicalRecordsInput, UserUpdateWithoutMedicalRecordsInput>, UserUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type PatientUpdateOneRequiredWithoutMedicalRecordsNestedInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordsInput, PatientUncheckedCreateWithoutMedicalRecordsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordsInput
    upsert?: PatientUpsertWithoutMedicalRecordsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMedicalRecordsInput, PatientUpdateWithoutMedicalRecordsInput>, PatientUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type HospitalUpdateOneRequiredWithoutMedicalRecordsNestedInput = {
    create?: XOR<HospitalCreateWithoutMedicalRecordsInput, HospitalUncheckedCreateWithoutMedicalRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutMedicalRecordsInput
    upsert?: HospitalUpsertWithoutMedicalRecordsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutMedicalRecordsInput, HospitalUpdateWithoutMedicalRecordsInput>, HospitalUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type UserCreateNestedOneWithoutNeonatalRecords_createdInput = {
    create?: XOR<UserCreateWithoutNeonatalRecords_createdInput, UserUncheckedCreateWithoutNeonatalRecords_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutNeonatalRecords_createdInput
    connect?: UserWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutNeonatalRecordsInput = {
    create?: XOR<HospitalCreateWithoutNeonatalRecordsInput, HospitalUncheckedCreateWithoutNeonatalRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutNeonatalRecordsInput
    connect?: HospitalWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutNeonatalRecords_AsMotherInput = {
    create?: XOR<PatientCreateWithoutNeonatalRecords_AsMotherInput, PatientUncheckedCreateWithoutNeonatalRecords_AsMotherInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNeonatalRecords_AsMotherInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutNeonatalRecords_AsPatientInput = {
    create?: XOR<PatientCreateWithoutNeonatalRecords_AsPatientInput, PatientUncheckedCreateWithoutNeonatalRecords_AsPatientInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNeonatalRecords_AsPatientInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNeonatalRecords_updatedInput = {
    create?: XOR<UserCreateWithoutNeonatalRecords_updatedInput, UserUncheckedCreateWithoutNeonatalRecords_updatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutNeonatalRecords_updatedInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCareLevelFieldUpdateOperationsInput = {
    set?: $Enums.CareLevel
  }

  export type EnumNeonatalStatusFieldUpdateOperationsInput = {
    set?: $Enums.NeonatalStatus
  }

  export type NullableEnumDischargeStatusFieldUpdateOperationsInput = {
    set?: $Enums.DischargeStatus | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutNeonatalRecords_createdNestedInput = {
    create?: XOR<UserCreateWithoutNeonatalRecords_createdInput, UserUncheckedCreateWithoutNeonatalRecords_createdInput>
    connectOrCreate?: UserCreateOrConnectWithoutNeonatalRecords_createdInput
    upsert?: UserUpsertWithoutNeonatalRecords_createdInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNeonatalRecords_createdInput, UserUpdateWithoutNeonatalRecords_createdInput>, UserUncheckedUpdateWithoutNeonatalRecords_createdInput>
  }

  export type HospitalUpdateOneRequiredWithoutNeonatalRecordsNestedInput = {
    create?: XOR<HospitalCreateWithoutNeonatalRecordsInput, HospitalUncheckedCreateWithoutNeonatalRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutNeonatalRecordsInput
    upsert?: HospitalUpsertWithoutNeonatalRecordsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutNeonatalRecordsInput, HospitalUpdateWithoutNeonatalRecordsInput>, HospitalUncheckedUpdateWithoutNeonatalRecordsInput>
  }

  export type PatientUpdateOneWithoutNeonatalRecords_AsMotherNestedInput = {
    create?: XOR<PatientCreateWithoutNeonatalRecords_AsMotherInput, PatientUncheckedCreateWithoutNeonatalRecords_AsMotherInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNeonatalRecords_AsMotherInput
    upsert?: PatientUpsertWithoutNeonatalRecords_AsMotherInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutNeonatalRecords_AsMotherInput, PatientUpdateWithoutNeonatalRecords_AsMotherInput>, PatientUncheckedUpdateWithoutNeonatalRecords_AsMotherInput>
  }

  export type PatientUpdateOneRequiredWithoutNeonatalRecords_AsPatientNestedInput = {
    create?: XOR<PatientCreateWithoutNeonatalRecords_AsPatientInput, PatientUncheckedCreateWithoutNeonatalRecords_AsPatientInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNeonatalRecords_AsPatientInput
    upsert?: PatientUpsertWithoutNeonatalRecords_AsPatientInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutNeonatalRecords_AsPatientInput, PatientUpdateWithoutNeonatalRecords_AsPatientInput>, PatientUncheckedUpdateWithoutNeonatalRecords_AsPatientInput>
  }

  export type UserUpdateOneRequiredWithoutNeonatalRecords_updatedNestedInput = {
    create?: XOR<UserCreateWithoutNeonatalRecords_updatedInput, UserUncheckedCreateWithoutNeonatalRecords_updatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutNeonatalRecords_updatedInput
    upsert?: UserUpsertWithoutNeonatalRecords_updatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNeonatalRecords_updatedInput, UserUpdateWithoutNeonatalRecords_updatedInput>, UserUncheckedUpdateWithoutNeonatalRecords_updatedInput>
  }

  export type UserCreateNestedOneWithoutPatientProfileInput = {
    create?: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientProfileInput
    connect?: UserWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutPatientsInput = {
    create?: XOR<HospitalCreateWithoutPatientsInput, HospitalUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPatientsInput
    connect?: HospitalWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type MedicalRecordCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type PasswordResetCreateNestedManyWithoutPatientInput = {
    create?: XOR<PasswordResetCreateWithoutPatientInput, PasswordResetUncheckedCreateWithoutPatientInput> | PasswordResetCreateWithoutPatientInput[] | PasswordResetUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutPatientInput | PasswordResetCreateOrConnectWithoutPatientInput[]
    createMany?: PasswordResetCreateManyPatientInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutDoctorPatientsInput = {
    create?: XOR<UserCreateWithoutDoctorPatientsInput, UserUncheckedCreateWithoutDoctorPatientsInput> | UserCreateWithoutDoctorPatientsInput[] | UserUncheckedCreateWithoutDoctorPatientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctorPatientsInput | UserCreateOrConnectWithoutDoctorPatientsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProfilePictureCreateNestedOneWithoutPatientInput = {
    create?: XOR<ProfilePictureCreateWithoutPatientInput, ProfilePictureUncheckedCreateWithoutPatientInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutPatientInput
    connect?: ProfilePictureWhereUniqueInput
  }

  export type PatientEmailCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientEmailCreateWithoutPatientInput, PatientEmailUncheckedCreateWithoutPatientInput> | PatientEmailCreateWithoutPatientInput[] | PatientEmailUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientEmailCreateOrConnectWithoutPatientInput | PatientEmailCreateOrConnectWithoutPatientInput[]
    createMany?: PatientEmailCreateManyPatientInputEnvelope
    connect?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
  }

  export type PatientPhoneCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientPhoneCreateWithoutPatientInput, PatientPhoneUncheckedCreateWithoutPatientInput> | PatientPhoneCreateWithoutPatientInput[] | PatientPhoneUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientPhoneCreateOrConnectWithoutPatientInput | PatientPhoneCreateOrConnectWithoutPatientInput[]
    createMany?: PatientPhoneCreateManyPatientInputEnvelope
    connect?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
  }

  export type PatientSearchIndexCreateNestedOneWithoutPatientInput = {
    create?: XOR<PatientSearchIndexCreateWithoutPatientInput, PatientSearchIndexUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientSearchIndexCreateOrConnectWithoutPatientInput
    connect?: PatientSearchIndexWhereUniqueInput
  }

  export type PatientWidgetPreferenceCreateNestedOneWithoutPatientInput = {
    create?: XOR<PatientWidgetPreferenceCreateWithoutPatientInput, PatientWidgetPreferenceUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientWidgetPreferenceCreateOrConnectWithoutPatientInput
    connect?: PatientWidgetPreferenceWhereUniqueInput
  }

  export type PatientHospitalAccessCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutPatientInput, PatientHospitalAccessUncheckedCreateWithoutPatientInput> | PatientHospitalAccessCreateWithoutPatientInput[] | PatientHospitalAccessUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutPatientInput | PatientHospitalAccessCreateOrConnectWithoutPatientInput[]
    createMany?: PatientHospitalAccessCreateManyPatientInputEnvelope
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
  }

  export type AntenatalRecordCreateNestedManyWithoutPatientInput = {
    create?: XOR<AntenatalRecordCreateWithoutPatientInput, AntenatalRecordUncheckedCreateWithoutPatientInput> | AntenatalRecordCreateWithoutPatientInput[] | AntenatalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutPatientInput | AntenatalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: AntenatalRecordCreateManyPatientInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type ReferralCreateNestedManyWithoutPatientInput = {
    create?: XOR<ReferralCreateWithoutPatientInput, ReferralUncheckedCreateWithoutPatientInput> | ReferralCreateWithoutPatientInput[] | ReferralUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutPatientInput | ReferralCreateOrConnectWithoutPatientInput[]
    createMany?: ReferralCreateManyPatientInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type AmbulanceDispatchCreateNestedManyWithoutPatientInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutPatientInput, AmbulanceDispatchUncheckedCreateWithoutPatientInput> | AmbulanceDispatchCreateWithoutPatientInput[] | AmbulanceDispatchUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutPatientInput | AmbulanceDispatchCreateOrConnectWithoutPatientInput[]
    createMany?: AmbulanceDispatchCreateManyPatientInputEnvelope
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
  }

  export type AmbulanceRequestCreateNestedManyWithoutPatientInput = {
    create?: XOR<AmbulanceRequestCreateWithoutPatientInput, AmbulanceRequestUncheckedCreateWithoutPatientInput> | AmbulanceRequestCreateWithoutPatientInput[] | AmbulanceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutPatientInput | AmbulanceRequestCreateOrConnectWithoutPatientInput[]
    createMany?: AmbulanceRequestCreateManyPatientInputEnvelope
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
  }

  export type WalletCreateNestedOneWithoutPatientInput = {
    create?: XOR<WalletCreateWithoutPatientInput, WalletUncheckedCreateWithoutPatientInput>
    connectOrCreate?: WalletCreateOrConnectWithoutPatientInput
    connect?: WalletWhereUniqueInput
  }

  export type BillingCreateNestedManyWithoutPatientInput = {
    create?: XOR<BillingCreateWithoutPatientInput, BillingUncheckedCreateWithoutPatientInput> | BillingCreateWithoutPatientInput[] | BillingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutPatientInput | BillingCreateOrConnectWithoutPatientInput[]
    createMany?: BillingCreateManyPatientInputEnvelope
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutPatientInput = {
    create?: XOR<ConversationCreateWithoutPatientInput, ConversationUncheckedCreateWithoutPatientInput> | ConversationCreateWithoutPatientInput[] | ConversationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutPatientInput | ConversationCreateOrConnectWithoutPatientInput[]
    createMany?: ConversationCreateManyPatientInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type BirthRecordCreateNestedOneWithoutPatientInput = {
    create?: XOR<BirthRecordCreateWithoutPatientInput, BirthRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BirthRecordCreateOrConnectWithoutPatientInput
    connect?: BirthRecordWhereUniqueInput
  }

  export type BirthRecordCreateNestedManyWithoutMotherInput = {
    create?: XOR<BirthRecordCreateWithoutMotherInput, BirthRecordUncheckedCreateWithoutMotherInput> | BirthRecordCreateWithoutMotherInput[] | BirthRecordUncheckedCreateWithoutMotherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutMotherInput | BirthRecordCreateOrConnectWithoutMotherInput[]
    createMany?: BirthRecordCreateManyMotherInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type BirthRecordCreateNestedManyWithoutFatherInput = {
    create?: XOR<BirthRecordCreateWithoutFatherInput, BirthRecordUncheckedCreateWithoutFatherInput> | BirthRecordCreateWithoutFatherInput[] | BirthRecordUncheckedCreateWithoutFatherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutFatherInput | BirthRecordCreateOrConnectWithoutFatherInput[]
    createMany?: BirthRecordCreateManyFatherInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type DeathRecordCreateNestedOneWithoutPatientInput = {
    create?: XOR<DeathRecordCreateWithoutPatientInput, DeathRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: DeathRecordCreateOrConnectWithoutPatientInput
    connect?: DeathRecordWhereUniqueInput
  }

  export type MarketplaceOrderCreateNestedManyWithoutPatientInput = {
    create?: XOR<MarketplaceOrderCreateWithoutPatientInput, MarketplaceOrderUncheckedCreateWithoutPatientInput> | MarketplaceOrderCreateWithoutPatientInput[] | MarketplaceOrderUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MarketplaceOrderCreateOrConnectWithoutPatientInput | MarketplaceOrderCreateOrConnectWithoutPatientInput[]
    createMany?: MarketplaceOrderCreateManyPatientInputEnvelope
    connect?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
  }

  export type SavedVendorCreateNestedManyWithoutPatientInput = {
    create?: XOR<SavedVendorCreateWithoutPatientInput, SavedVendorUncheckedCreateWithoutPatientInput> | SavedVendorCreateWithoutPatientInput[] | SavedVendorUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutPatientInput | SavedVendorCreateOrConnectWithoutPatientInput[]
    createMany?: SavedVendorCreateManyPatientInputEnvelope
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutPatientInput = {
    create?: XOR<CartItemCreateWithoutPatientInput, CartItemUncheckedCreateWithoutPatientInput> | CartItemCreateWithoutPatientInput[] | CartItemUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutPatientInput | CartItemCreateOrConnectWithoutPatientInput[]
    createMany?: CartItemCreateManyPatientInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type PrescriptionCreateNestedManyWithoutPatientInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type PasswordResetUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PasswordResetCreateWithoutPatientInput, PasswordResetUncheckedCreateWithoutPatientInput> | PasswordResetCreateWithoutPatientInput[] | PasswordResetUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutPatientInput | PasswordResetCreateOrConnectWithoutPatientInput[]
    createMany?: PasswordResetCreateManyPatientInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDoctorPatientsInput = {
    create?: XOR<UserCreateWithoutDoctorPatientsInput, UserUncheckedCreateWithoutDoctorPatientsInput> | UserCreateWithoutDoctorPatientsInput[] | UserUncheckedCreateWithoutDoctorPatientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctorPatientsInput | UserCreateOrConnectWithoutDoctorPatientsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProfilePictureUncheckedCreateNestedOneWithoutPatientInput = {
    create?: XOR<ProfilePictureCreateWithoutPatientInput, ProfilePictureUncheckedCreateWithoutPatientInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutPatientInput
    connect?: ProfilePictureWhereUniqueInput
  }

  export type PatientEmailUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientEmailCreateWithoutPatientInput, PatientEmailUncheckedCreateWithoutPatientInput> | PatientEmailCreateWithoutPatientInput[] | PatientEmailUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientEmailCreateOrConnectWithoutPatientInput | PatientEmailCreateOrConnectWithoutPatientInput[]
    createMany?: PatientEmailCreateManyPatientInputEnvelope
    connect?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
  }

  export type PatientPhoneUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientPhoneCreateWithoutPatientInput, PatientPhoneUncheckedCreateWithoutPatientInput> | PatientPhoneCreateWithoutPatientInput[] | PatientPhoneUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientPhoneCreateOrConnectWithoutPatientInput | PatientPhoneCreateOrConnectWithoutPatientInput[]
    createMany?: PatientPhoneCreateManyPatientInputEnvelope
    connect?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
  }

  export type PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput = {
    create?: XOR<PatientSearchIndexCreateWithoutPatientInput, PatientSearchIndexUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientSearchIndexCreateOrConnectWithoutPatientInput
    connect?: PatientSearchIndexWhereUniqueInput
  }

  export type PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput = {
    create?: XOR<PatientWidgetPreferenceCreateWithoutPatientInput, PatientWidgetPreferenceUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientWidgetPreferenceCreateOrConnectWithoutPatientInput
    connect?: PatientWidgetPreferenceWhereUniqueInput
  }

  export type PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutPatientInput, PatientHospitalAccessUncheckedCreateWithoutPatientInput> | PatientHospitalAccessCreateWithoutPatientInput[] | PatientHospitalAccessUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutPatientInput | PatientHospitalAccessCreateOrConnectWithoutPatientInput[]
    createMany?: PatientHospitalAccessCreateManyPatientInputEnvelope
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
  }

  export type AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AntenatalRecordCreateWithoutPatientInput, AntenatalRecordUncheckedCreateWithoutPatientInput> | AntenatalRecordCreateWithoutPatientInput[] | AntenatalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutPatientInput | AntenatalRecordCreateOrConnectWithoutPatientInput[]
    createMany?: AntenatalRecordCreateManyPatientInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type ReferralUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ReferralCreateWithoutPatientInput, ReferralUncheckedCreateWithoutPatientInput> | ReferralCreateWithoutPatientInput[] | ReferralUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutPatientInput | ReferralCreateOrConnectWithoutPatientInput[]
    createMany?: ReferralCreateManyPatientInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutPatientInput, AmbulanceDispatchUncheckedCreateWithoutPatientInput> | AmbulanceDispatchCreateWithoutPatientInput[] | AmbulanceDispatchUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutPatientInput | AmbulanceDispatchCreateOrConnectWithoutPatientInput[]
    createMany?: AmbulanceDispatchCreateManyPatientInputEnvelope
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
  }

  export type AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AmbulanceRequestCreateWithoutPatientInput, AmbulanceRequestUncheckedCreateWithoutPatientInput> | AmbulanceRequestCreateWithoutPatientInput[] | AmbulanceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutPatientInput | AmbulanceRequestCreateOrConnectWithoutPatientInput[]
    createMany?: AmbulanceRequestCreateManyPatientInputEnvelope
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
  }

  export type WalletUncheckedCreateNestedOneWithoutPatientInput = {
    create?: XOR<WalletCreateWithoutPatientInput, WalletUncheckedCreateWithoutPatientInput>
    connectOrCreate?: WalletCreateOrConnectWithoutPatientInput
    connect?: WalletWhereUniqueInput
  }

  export type BillingUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<BillingCreateWithoutPatientInput, BillingUncheckedCreateWithoutPatientInput> | BillingCreateWithoutPatientInput[] | BillingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutPatientInput | BillingCreateOrConnectWithoutPatientInput[]
    createMany?: BillingCreateManyPatientInputEnvelope
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ConversationCreateWithoutPatientInput, ConversationUncheckedCreateWithoutPatientInput> | ConversationCreateWithoutPatientInput[] | ConversationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutPatientInput | ConversationCreateOrConnectWithoutPatientInput[]
    createMany?: ConversationCreateManyPatientInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type BirthRecordUncheckedCreateNestedOneWithoutPatientInput = {
    create?: XOR<BirthRecordCreateWithoutPatientInput, BirthRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BirthRecordCreateOrConnectWithoutPatientInput
    connect?: BirthRecordWhereUniqueInput
  }

  export type BirthRecordUncheckedCreateNestedManyWithoutMotherInput = {
    create?: XOR<BirthRecordCreateWithoutMotherInput, BirthRecordUncheckedCreateWithoutMotherInput> | BirthRecordCreateWithoutMotherInput[] | BirthRecordUncheckedCreateWithoutMotherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutMotherInput | BirthRecordCreateOrConnectWithoutMotherInput[]
    createMany?: BirthRecordCreateManyMotherInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type BirthRecordUncheckedCreateNestedManyWithoutFatherInput = {
    create?: XOR<BirthRecordCreateWithoutFatherInput, BirthRecordUncheckedCreateWithoutFatherInput> | BirthRecordCreateWithoutFatherInput[] | BirthRecordUncheckedCreateWithoutFatherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutFatherInput | BirthRecordCreateOrConnectWithoutFatherInput[]
    createMany?: BirthRecordCreateManyFatherInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type DeathRecordUncheckedCreateNestedOneWithoutPatientInput = {
    create?: XOR<DeathRecordCreateWithoutPatientInput, DeathRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: DeathRecordCreateOrConnectWithoutPatientInput
    connect?: DeathRecordWhereUniqueInput
  }

  export type MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MarketplaceOrderCreateWithoutPatientInput, MarketplaceOrderUncheckedCreateWithoutPatientInput> | MarketplaceOrderCreateWithoutPatientInput[] | MarketplaceOrderUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MarketplaceOrderCreateOrConnectWithoutPatientInput | MarketplaceOrderCreateOrConnectWithoutPatientInput[]
    createMany?: MarketplaceOrderCreateManyPatientInputEnvelope
    connect?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
  }

  export type SavedVendorUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<SavedVendorCreateWithoutPatientInput, SavedVendorUncheckedCreateWithoutPatientInput> | SavedVendorCreateWithoutPatientInput[] | SavedVendorUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutPatientInput | SavedVendorCreateOrConnectWithoutPatientInput[]
    createMany?: SavedVendorCreateManyPatientInputEnvelope
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<CartItemCreateWithoutPatientInput, CartItemUncheckedCreateWithoutPatientInput> | CartItemCreateWithoutPatientInput[] | CartItemUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutPatientInput | CartItemCreateOrConnectWithoutPatientInput[]
    createMany?: CartItemCreateManyPatientInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutPatientProfileNestedInput = {
    create?: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientProfileInput
    upsert?: UserUpsertWithoutPatientProfileInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientProfileInput, UserUpdateWithoutPatientProfileInput>, UserUncheckedUpdateWithoutPatientProfileInput>
  }

  export type HospitalUpdateOneWithoutPatientsNestedInput = {
    create?: XOR<HospitalCreateWithoutPatientsInput, HospitalUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPatientsInput
    upsert?: HospitalUpsertWithoutPatientsInput
    disconnect?: HospitalWhereInput | boolean
    delete?: HospitalWhereInput | boolean
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutPatientsInput, HospitalUpdateWithoutPatientsInput>, HospitalUncheckedUpdateWithoutPatientsInput>
  }

  export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type MedicalRecordUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutPatientInput | MedicalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutPatientInput | MedicalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutPatientInput | MedicalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type PasswordResetUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PasswordResetCreateWithoutPatientInput, PasswordResetUncheckedCreateWithoutPatientInput> | PasswordResetCreateWithoutPatientInput[] | PasswordResetUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutPatientInput | PasswordResetCreateOrConnectWithoutPatientInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutPatientInput | PasswordResetUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PasswordResetCreateManyPatientInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutPatientInput | PasswordResetUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutPatientInput | PasswordResetUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type UserUpdateManyWithoutDoctorPatientsNestedInput = {
    create?: XOR<UserCreateWithoutDoctorPatientsInput, UserUncheckedCreateWithoutDoctorPatientsInput> | UserCreateWithoutDoctorPatientsInput[] | UserUncheckedCreateWithoutDoctorPatientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctorPatientsInput | UserCreateOrConnectWithoutDoctorPatientsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDoctorPatientsInput | UserUpsertWithWhereUniqueWithoutDoctorPatientsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDoctorPatientsInput | UserUpdateWithWhereUniqueWithoutDoctorPatientsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDoctorPatientsInput | UserUpdateManyWithWhereWithoutDoctorPatientsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProfilePictureUpdateOneWithoutPatientNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutPatientInput, ProfilePictureUncheckedCreateWithoutPatientInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutPatientInput
    upsert?: ProfilePictureUpsertWithoutPatientInput
    disconnect?: ProfilePictureWhereInput | boolean
    delete?: ProfilePictureWhereInput | boolean
    connect?: ProfilePictureWhereUniqueInput
    update?: XOR<XOR<ProfilePictureUpdateToOneWithWhereWithoutPatientInput, ProfilePictureUpdateWithoutPatientInput>, ProfilePictureUncheckedUpdateWithoutPatientInput>
  }

  export type PatientEmailUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientEmailCreateWithoutPatientInput, PatientEmailUncheckedCreateWithoutPatientInput> | PatientEmailCreateWithoutPatientInput[] | PatientEmailUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientEmailCreateOrConnectWithoutPatientInput | PatientEmailCreateOrConnectWithoutPatientInput[]
    upsert?: PatientEmailUpsertWithWhereUniqueWithoutPatientInput | PatientEmailUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientEmailCreateManyPatientInputEnvelope
    set?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    disconnect?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    delete?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    connect?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    update?: PatientEmailUpdateWithWhereUniqueWithoutPatientInput | PatientEmailUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientEmailUpdateManyWithWhereWithoutPatientInput | PatientEmailUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientEmailScalarWhereInput | PatientEmailScalarWhereInput[]
  }

  export type PatientPhoneUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientPhoneCreateWithoutPatientInput, PatientPhoneUncheckedCreateWithoutPatientInput> | PatientPhoneCreateWithoutPatientInput[] | PatientPhoneUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientPhoneCreateOrConnectWithoutPatientInput | PatientPhoneCreateOrConnectWithoutPatientInput[]
    upsert?: PatientPhoneUpsertWithWhereUniqueWithoutPatientInput | PatientPhoneUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientPhoneCreateManyPatientInputEnvelope
    set?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    disconnect?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    delete?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    connect?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    update?: PatientPhoneUpdateWithWhereUniqueWithoutPatientInput | PatientPhoneUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientPhoneUpdateManyWithWhereWithoutPatientInput | PatientPhoneUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientPhoneScalarWhereInput | PatientPhoneScalarWhereInput[]
  }

  export type PatientSearchIndexUpdateOneWithoutPatientNestedInput = {
    create?: XOR<PatientSearchIndexCreateWithoutPatientInput, PatientSearchIndexUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientSearchIndexCreateOrConnectWithoutPatientInput
    upsert?: PatientSearchIndexUpsertWithoutPatientInput
    disconnect?: PatientSearchIndexWhereInput | boolean
    delete?: PatientSearchIndexWhereInput | boolean
    connect?: PatientSearchIndexWhereUniqueInput
    update?: XOR<XOR<PatientSearchIndexUpdateToOneWithWhereWithoutPatientInput, PatientSearchIndexUpdateWithoutPatientInput>, PatientSearchIndexUncheckedUpdateWithoutPatientInput>
  }

  export type PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput = {
    create?: XOR<PatientWidgetPreferenceCreateWithoutPatientInput, PatientWidgetPreferenceUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientWidgetPreferenceCreateOrConnectWithoutPatientInput
    upsert?: PatientWidgetPreferenceUpsertWithoutPatientInput
    disconnect?: PatientWidgetPreferenceWhereInput | boolean
    delete?: PatientWidgetPreferenceWhereInput | boolean
    connect?: PatientWidgetPreferenceWhereUniqueInput
    update?: XOR<XOR<PatientWidgetPreferenceUpdateToOneWithWhereWithoutPatientInput, PatientWidgetPreferenceUpdateWithoutPatientInput>, PatientWidgetPreferenceUncheckedUpdateWithoutPatientInput>
  }

  export type PatientHospitalAccessUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutPatientInput, PatientHospitalAccessUncheckedCreateWithoutPatientInput> | PatientHospitalAccessCreateWithoutPatientInput[] | PatientHospitalAccessUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutPatientInput | PatientHospitalAccessCreateOrConnectWithoutPatientInput[]
    upsert?: PatientHospitalAccessUpsertWithWhereUniqueWithoutPatientInput | PatientHospitalAccessUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientHospitalAccessCreateManyPatientInputEnvelope
    set?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    disconnect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    delete?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    update?: PatientHospitalAccessUpdateWithWhereUniqueWithoutPatientInput | PatientHospitalAccessUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientHospitalAccessUpdateManyWithWhereWithoutPatientInput | PatientHospitalAccessUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
  }

  export type AntenatalRecordUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutPatientInput, AntenatalRecordUncheckedCreateWithoutPatientInput> | AntenatalRecordCreateWithoutPatientInput[] | AntenatalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutPatientInput | AntenatalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutPatientInput | AntenatalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AntenatalRecordCreateManyPatientInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutPatientInput | AntenatalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutPatientInput | AntenatalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type ReferralUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ReferralCreateWithoutPatientInput, ReferralUncheckedCreateWithoutPatientInput> | ReferralCreateWithoutPatientInput[] | ReferralUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutPatientInput | ReferralCreateOrConnectWithoutPatientInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutPatientInput | ReferralUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ReferralCreateManyPatientInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutPatientInput | ReferralUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutPatientInput | ReferralUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type AmbulanceDispatchUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutPatientInput, AmbulanceDispatchUncheckedCreateWithoutPatientInput> | AmbulanceDispatchCreateWithoutPatientInput[] | AmbulanceDispatchUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutPatientInput | AmbulanceDispatchCreateOrConnectWithoutPatientInput[]
    upsert?: AmbulanceDispatchUpsertWithWhereUniqueWithoutPatientInput | AmbulanceDispatchUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AmbulanceDispatchCreateManyPatientInputEnvelope
    set?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    disconnect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    delete?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    update?: AmbulanceDispatchUpdateWithWhereUniqueWithoutPatientInput | AmbulanceDispatchUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AmbulanceDispatchUpdateManyWithWhereWithoutPatientInput | AmbulanceDispatchUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
  }

  export type AmbulanceRequestUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AmbulanceRequestCreateWithoutPatientInput, AmbulanceRequestUncheckedCreateWithoutPatientInput> | AmbulanceRequestCreateWithoutPatientInput[] | AmbulanceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutPatientInput | AmbulanceRequestCreateOrConnectWithoutPatientInput[]
    upsert?: AmbulanceRequestUpsertWithWhereUniqueWithoutPatientInput | AmbulanceRequestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AmbulanceRequestCreateManyPatientInputEnvelope
    set?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    disconnect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    delete?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    update?: AmbulanceRequestUpdateWithWhereUniqueWithoutPatientInput | AmbulanceRequestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AmbulanceRequestUpdateManyWithWhereWithoutPatientInput | AmbulanceRequestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AmbulanceRequestScalarWhereInput | AmbulanceRequestScalarWhereInput[]
  }

  export type WalletUpdateOneWithoutPatientNestedInput = {
    create?: XOR<WalletCreateWithoutPatientInput, WalletUncheckedCreateWithoutPatientInput>
    connectOrCreate?: WalletCreateOrConnectWithoutPatientInput
    upsert?: WalletUpsertWithoutPatientInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutPatientInput, WalletUpdateWithoutPatientInput>, WalletUncheckedUpdateWithoutPatientInput>
  }

  export type BillingUpdateManyWithoutPatientNestedInput = {
    create?: XOR<BillingCreateWithoutPatientInput, BillingUncheckedCreateWithoutPatientInput> | BillingCreateWithoutPatientInput[] | BillingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutPatientInput | BillingCreateOrConnectWithoutPatientInput[]
    upsert?: BillingUpsertWithWhereUniqueWithoutPatientInput | BillingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: BillingCreateManyPatientInputEnvelope
    set?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    disconnect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    delete?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    update?: BillingUpdateWithWhereUniqueWithoutPatientInput | BillingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: BillingUpdateManyWithWhereWithoutPatientInput | BillingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: BillingScalarWhereInput | BillingScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ConversationCreateWithoutPatientInput, ConversationUncheckedCreateWithoutPatientInput> | ConversationCreateWithoutPatientInput[] | ConversationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutPatientInput | ConversationCreateOrConnectWithoutPatientInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutPatientInput | ConversationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ConversationCreateManyPatientInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutPatientInput | ConversationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutPatientInput | ConversationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type BirthRecordUpdateOneWithoutPatientNestedInput = {
    create?: XOR<BirthRecordCreateWithoutPatientInput, BirthRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BirthRecordCreateOrConnectWithoutPatientInput
    upsert?: BirthRecordUpsertWithoutPatientInput
    disconnect?: BirthRecordWhereInput | boolean
    delete?: BirthRecordWhereInput | boolean
    connect?: BirthRecordWhereUniqueInput
    update?: XOR<XOR<BirthRecordUpdateToOneWithWhereWithoutPatientInput, BirthRecordUpdateWithoutPatientInput>, BirthRecordUncheckedUpdateWithoutPatientInput>
  }

  export type BirthRecordUpdateManyWithoutMotherNestedInput = {
    create?: XOR<BirthRecordCreateWithoutMotherInput, BirthRecordUncheckedCreateWithoutMotherInput> | BirthRecordCreateWithoutMotherInput[] | BirthRecordUncheckedCreateWithoutMotherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutMotherInput | BirthRecordCreateOrConnectWithoutMotherInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutMotherInput | BirthRecordUpsertWithWhereUniqueWithoutMotherInput[]
    createMany?: BirthRecordCreateManyMotherInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutMotherInput | BirthRecordUpdateWithWhereUniqueWithoutMotherInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutMotherInput | BirthRecordUpdateManyWithWhereWithoutMotherInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type BirthRecordUpdateManyWithoutFatherNestedInput = {
    create?: XOR<BirthRecordCreateWithoutFatherInput, BirthRecordUncheckedCreateWithoutFatherInput> | BirthRecordCreateWithoutFatherInput[] | BirthRecordUncheckedCreateWithoutFatherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutFatherInput | BirthRecordCreateOrConnectWithoutFatherInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutFatherInput | BirthRecordUpsertWithWhereUniqueWithoutFatherInput[]
    createMany?: BirthRecordCreateManyFatherInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutFatherInput | BirthRecordUpdateWithWhereUniqueWithoutFatherInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutFatherInput | BirthRecordUpdateManyWithWhereWithoutFatherInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type DeathRecordUpdateOneWithoutPatientNestedInput = {
    create?: XOR<DeathRecordCreateWithoutPatientInput, DeathRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: DeathRecordCreateOrConnectWithoutPatientInput
    upsert?: DeathRecordUpsertWithoutPatientInput
    disconnect?: DeathRecordWhereInput | boolean
    delete?: DeathRecordWhereInput | boolean
    connect?: DeathRecordWhereUniqueInput
    update?: XOR<XOR<DeathRecordUpdateToOneWithWhereWithoutPatientInput, DeathRecordUpdateWithoutPatientInput>, DeathRecordUncheckedUpdateWithoutPatientInput>
  }

  export type MarketplaceOrderUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MarketplaceOrderCreateWithoutPatientInput, MarketplaceOrderUncheckedCreateWithoutPatientInput> | MarketplaceOrderCreateWithoutPatientInput[] | MarketplaceOrderUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MarketplaceOrderCreateOrConnectWithoutPatientInput | MarketplaceOrderCreateOrConnectWithoutPatientInput[]
    upsert?: MarketplaceOrderUpsertWithWhereUniqueWithoutPatientInput | MarketplaceOrderUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MarketplaceOrderCreateManyPatientInputEnvelope
    set?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    disconnect?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    delete?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    connect?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    update?: MarketplaceOrderUpdateWithWhereUniqueWithoutPatientInput | MarketplaceOrderUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MarketplaceOrderUpdateManyWithWhereWithoutPatientInput | MarketplaceOrderUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MarketplaceOrderScalarWhereInput | MarketplaceOrderScalarWhereInput[]
  }

  export type SavedVendorUpdateManyWithoutPatientNestedInput = {
    create?: XOR<SavedVendorCreateWithoutPatientInput, SavedVendorUncheckedCreateWithoutPatientInput> | SavedVendorCreateWithoutPatientInput[] | SavedVendorUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutPatientInput | SavedVendorCreateOrConnectWithoutPatientInput[]
    upsert?: SavedVendorUpsertWithWhereUniqueWithoutPatientInput | SavedVendorUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: SavedVendorCreateManyPatientInputEnvelope
    set?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    disconnect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    delete?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    update?: SavedVendorUpdateWithWhereUniqueWithoutPatientInput | SavedVendorUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: SavedVendorUpdateManyWithWhereWithoutPatientInput | SavedVendorUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: SavedVendorScalarWhereInput | SavedVendorScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutPatientNestedInput = {
    create?: XOR<CartItemCreateWithoutPatientInput, CartItemUncheckedCreateWithoutPatientInput> | CartItemCreateWithoutPatientInput[] | CartItemUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutPatientInput | CartItemCreateOrConnectWithoutPatientInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutPatientInput | CartItemUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: CartItemCreateManyPatientInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutPatientInput | CartItemUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutPatientInput | CartItemUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type PrescriptionUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPatientInput | PrescriptionUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPatientInput | PrescriptionUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPatientInput | PrescriptionUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput> | MedicalRecordCreateWithoutPatientInput[] | MedicalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutPatientInput | MedicalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutPatientInput | MedicalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutPatientInput | MedicalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutPatientInput | MedicalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type PasswordResetUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PasswordResetCreateWithoutPatientInput, PasswordResetUncheckedCreateWithoutPatientInput> | PasswordResetCreateWithoutPatientInput[] | PasswordResetUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutPatientInput | PasswordResetCreateOrConnectWithoutPatientInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutPatientInput | PasswordResetUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PasswordResetCreateManyPatientInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutPatientInput | PasswordResetUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutPatientInput | PasswordResetUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput = {
    create?: XOR<UserCreateWithoutDoctorPatientsInput, UserUncheckedCreateWithoutDoctorPatientsInput> | UserCreateWithoutDoctorPatientsInput[] | UserUncheckedCreateWithoutDoctorPatientsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctorPatientsInput | UserCreateOrConnectWithoutDoctorPatientsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDoctorPatientsInput | UserUpsertWithWhereUniqueWithoutDoctorPatientsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDoctorPatientsInput | UserUpdateWithWhereUniqueWithoutDoctorPatientsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDoctorPatientsInput | UserUpdateManyWithWhereWithoutDoctorPatientsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutPatientInput, ProfilePictureUncheckedCreateWithoutPatientInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutPatientInput
    upsert?: ProfilePictureUpsertWithoutPatientInput
    disconnect?: ProfilePictureWhereInput | boolean
    delete?: ProfilePictureWhereInput | boolean
    connect?: ProfilePictureWhereUniqueInput
    update?: XOR<XOR<ProfilePictureUpdateToOneWithWhereWithoutPatientInput, ProfilePictureUpdateWithoutPatientInput>, ProfilePictureUncheckedUpdateWithoutPatientInput>
  }

  export type PatientEmailUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientEmailCreateWithoutPatientInput, PatientEmailUncheckedCreateWithoutPatientInput> | PatientEmailCreateWithoutPatientInput[] | PatientEmailUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientEmailCreateOrConnectWithoutPatientInput | PatientEmailCreateOrConnectWithoutPatientInput[]
    upsert?: PatientEmailUpsertWithWhereUniqueWithoutPatientInput | PatientEmailUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientEmailCreateManyPatientInputEnvelope
    set?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    disconnect?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    delete?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    connect?: PatientEmailWhereUniqueInput | PatientEmailWhereUniqueInput[]
    update?: PatientEmailUpdateWithWhereUniqueWithoutPatientInput | PatientEmailUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientEmailUpdateManyWithWhereWithoutPatientInput | PatientEmailUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientEmailScalarWhereInput | PatientEmailScalarWhereInput[]
  }

  export type PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientPhoneCreateWithoutPatientInput, PatientPhoneUncheckedCreateWithoutPatientInput> | PatientPhoneCreateWithoutPatientInput[] | PatientPhoneUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientPhoneCreateOrConnectWithoutPatientInput | PatientPhoneCreateOrConnectWithoutPatientInput[]
    upsert?: PatientPhoneUpsertWithWhereUniqueWithoutPatientInput | PatientPhoneUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientPhoneCreateManyPatientInputEnvelope
    set?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    disconnect?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    delete?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    connect?: PatientPhoneWhereUniqueInput | PatientPhoneWhereUniqueInput[]
    update?: PatientPhoneUpdateWithWhereUniqueWithoutPatientInput | PatientPhoneUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientPhoneUpdateManyWithWhereWithoutPatientInput | PatientPhoneUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientPhoneScalarWhereInput | PatientPhoneScalarWhereInput[]
  }

  export type PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<PatientSearchIndexCreateWithoutPatientInput, PatientSearchIndexUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientSearchIndexCreateOrConnectWithoutPatientInput
    upsert?: PatientSearchIndexUpsertWithoutPatientInput
    disconnect?: PatientSearchIndexWhereInput | boolean
    delete?: PatientSearchIndexWhereInput | boolean
    connect?: PatientSearchIndexWhereUniqueInput
    update?: XOR<XOR<PatientSearchIndexUpdateToOneWithWhereWithoutPatientInput, PatientSearchIndexUpdateWithoutPatientInput>, PatientSearchIndexUncheckedUpdateWithoutPatientInput>
  }

  export type PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<PatientWidgetPreferenceCreateWithoutPatientInput, PatientWidgetPreferenceUncheckedCreateWithoutPatientInput>
    connectOrCreate?: PatientWidgetPreferenceCreateOrConnectWithoutPatientInput
    upsert?: PatientWidgetPreferenceUpsertWithoutPatientInput
    disconnect?: PatientWidgetPreferenceWhereInput | boolean
    delete?: PatientWidgetPreferenceWhereInput | boolean
    connect?: PatientWidgetPreferenceWhereUniqueInput
    update?: XOR<XOR<PatientWidgetPreferenceUpdateToOneWithWhereWithoutPatientInput, PatientWidgetPreferenceUpdateWithoutPatientInput>, PatientWidgetPreferenceUncheckedUpdateWithoutPatientInput>
  }

  export type PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutPatientInput, PatientHospitalAccessUncheckedCreateWithoutPatientInput> | PatientHospitalAccessCreateWithoutPatientInput[] | PatientHospitalAccessUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutPatientInput | PatientHospitalAccessCreateOrConnectWithoutPatientInput[]
    upsert?: PatientHospitalAccessUpsertWithWhereUniqueWithoutPatientInput | PatientHospitalAccessUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientHospitalAccessCreateManyPatientInputEnvelope
    set?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    disconnect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    delete?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    update?: PatientHospitalAccessUpdateWithWhereUniqueWithoutPatientInput | PatientHospitalAccessUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientHospitalAccessUpdateManyWithWhereWithoutPatientInput | PatientHospitalAccessUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutPatientInput, AntenatalRecordUncheckedCreateWithoutPatientInput> | AntenatalRecordCreateWithoutPatientInput[] | AntenatalRecordUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutPatientInput | AntenatalRecordCreateOrConnectWithoutPatientInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutPatientInput | AntenatalRecordUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AntenatalRecordCreateManyPatientInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutPatientInput | AntenatalRecordUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutPatientInput | AntenatalRecordUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_patientIdToPatientInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput> | NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[] | NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    createMany?: NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_motherIdToPatientInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type ReferralUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ReferralCreateWithoutPatientInput, ReferralUncheckedCreateWithoutPatientInput> | ReferralCreateWithoutPatientInput[] | ReferralUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutPatientInput | ReferralCreateOrConnectWithoutPatientInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutPatientInput | ReferralUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ReferralCreateManyPatientInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutPatientInput | ReferralUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutPatientInput | ReferralUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutPatientInput, AmbulanceDispatchUncheckedCreateWithoutPatientInput> | AmbulanceDispatchCreateWithoutPatientInput[] | AmbulanceDispatchUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutPatientInput | AmbulanceDispatchCreateOrConnectWithoutPatientInput[]
    upsert?: AmbulanceDispatchUpsertWithWhereUniqueWithoutPatientInput | AmbulanceDispatchUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AmbulanceDispatchCreateManyPatientInputEnvelope
    set?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    disconnect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    delete?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    update?: AmbulanceDispatchUpdateWithWhereUniqueWithoutPatientInput | AmbulanceDispatchUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AmbulanceDispatchUpdateManyWithWhereWithoutPatientInput | AmbulanceDispatchUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
  }

  export type AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AmbulanceRequestCreateWithoutPatientInput, AmbulanceRequestUncheckedCreateWithoutPatientInput> | AmbulanceRequestCreateWithoutPatientInput[] | AmbulanceRequestUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AmbulanceRequestCreateOrConnectWithoutPatientInput | AmbulanceRequestCreateOrConnectWithoutPatientInput[]
    upsert?: AmbulanceRequestUpsertWithWhereUniqueWithoutPatientInput | AmbulanceRequestUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AmbulanceRequestCreateManyPatientInputEnvelope
    set?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    disconnect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    delete?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    connect?: AmbulanceRequestWhereUniqueInput | AmbulanceRequestWhereUniqueInput[]
    update?: AmbulanceRequestUpdateWithWhereUniqueWithoutPatientInput | AmbulanceRequestUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AmbulanceRequestUpdateManyWithWhereWithoutPatientInput | AmbulanceRequestUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AmbulanceRequestScalarWhereInput | AmbulanceRequestScalarWhereInput[]
  }

  export type WalletUncheckedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<WalletCreateWithoutPatientInput, WalletUncheckedCreateWithoutPatientInput>
    connectOrCreate?: WalletCreateOrConnectWithoutPatientInput
    upsert?: WalletUpsertWithoutPatientInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutPatientInput, WalletUpdateWithoutPatientInput>, WalletUncheckedUpdateWithoutPatientInput>
  }

  export type BillingUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<BillingCreateWithoutPatientInput, BillingUncheckedCreateWithoutPatientInput> | BillingCreateWithoutPatientInput[] | BillingUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingCreateOrConnectWithoutPatientInput | BillingCreateOrConnectWithoutPatientInput[]
    upsert?: BillingUpsertWithWhereUniqueWithoutPatientInput | BillingUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: BillingCreateManyPatientInputEnvelope
    set?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    disconnect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    delete?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    connect?: BillingWhereUniqueInput | BillingWhereUniqueInput[]
    update?: BillingUpdateWithWhereUniqueWithoutPatientInput | BillingUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: BillingUpdateManyWithWhereWithoutPatientInput | BillingUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: BillingScalarWhereInput | BillingScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ConversationCreateWithoutPatientInput, ConversationUncheckedCreateWithoutPatientInput> | ConversationCreateWithoutPatientInput[] | ConversationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutPatientInput | ConversationCreateOrConnectWithoutPatientInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutPatientInput | ConversationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ConversationCreateManyPatientInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutPatientInput | ConversationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutPatientInput | ConversationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type BirthRecordUncheckedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<BirthRecordCreateWithoutPatientInput, BirthRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BirthRecordCreateOrConnectWithoutPatientInput
    upsert?: BirthRecordUpsertWithoutPatientInput
    disconnect?: BirthRecordWhereInput | boolean
    delete?: BirthRecordWhereInput | boolean
    connect?: BirthRecordWhereUniqueInput
    update?: XOR<XOR<BirthRecordUpdateToOneWithWhereWithoutPatientInput, BirthRecordUpdateWithoutPatientInput>, BirthRecordUncheckedUpdateWithoutPatientInput>
  }

  export type BirthRecordUncheckedUpdateManyWithoutMotherNestedInput = {
    create?: XOR<BirthRecordCreateWithoutMotherInput, BirthRecordUncheckedCreateWithoutMotherInput> | BirthRecordCreateWithoutMotherInput[] | BirthRecordUncheckedCreateWithoutMotherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutMotherInput | BirthRecordCreateOrConnectWithoutMotherInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutMotherInput | BirthRecordUpsertWithWhereUniqueWithoutMotherInput[]
    createMany?: BirthRecordCreateManyMotherInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutMotherInput | BirthRecordUpdateWithWhereUniqueWithoutMotherInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutMotherInput | BirthRecordUpdateManyWithWhereWithoutMotherInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type BirthRecordUncheckedUpdateManyWithoutFatherNestedInput = {
    create?: XOR<BirthRecordCreateWithoutFatherInput, BirthRecordUncheckedCreateWithoutFatherInput> | BirthRecordCreateWithoutFatherInput[] | BirthRecordUncheckedCreateWithoutFatherInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutFatherInput | BirthRecordCreateOrConnectWithoutFatherInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutFatherInput | BirthRecordUpsertWithWhereUniqueWithoutFatherInput[]
    createMany?: BirthRecordCreateManyFatherInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutFatherInput | BirthRecordUpdateWithWhereUniqueWithoutFatherInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutFatherInput | BirthRecordUpdateManyWithWhereWithoutFatherInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type DeathRecordUncheckedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<DeathRecordCreateWithoutPatientInput, DeathRecordUncheckedCreateWithoutPatientInput>
    connectOrCreate?: DeathRecordCreateOrConnectWithoutPatientInput
    upsert?: DeathRecordUpsertWithoutPatientInput
    disconnect?: DeathRecordWhereInput | boolean
    delete?: DeathRecordWhereInput | boolean
    connect?: DeathRecordWhereUniqueInput
    update?: XOR<XOR<DeathRecordUpdateToOneWithWhereWithoutPatientInput, DeathRecordUpdateWithoutPatientInput>, DeathRecordUncheckedUpdateWithoutPatientInput>
  }

  export type MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MarketplaceOrderCreateWithoutPatientInput, MarketplaceOrderUncheckedCreateWithoutPatientInput> | MarketplaceOrderCreateWithoutPatientInput[] | MarketplaceOrderUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MarketplaceOrderCreateOrConnectWithoutPatientInput | MarketplaceOrderCreateOrConnectWithoutPatientInput[]
    upsert?: MarketplaceOrderUpsertWithWhereUniqueWithoutPatientInput | MarketplaceOrderUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MarketplaceOrderCreateManyPatientInputEnvelope
    set?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    disconnect?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    delete?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    connect?: MarketplaceOrderWhereUniqueInput | MarketplaceOrderWhereUniqueInput[]
    update?: MarketplaceOrderUpdateWithWhereUniqueWithoutPatientInput | MarketplaceOrderUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MarketplaceOrderUpdateManyWithWhereWithoutPatientInput | MarketplaceOrderUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MarketplaceOrderScalarWhereInput | MarketplaceOrderScalarWhereInput[]
  }

  export type SavedVendorUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<SavedVendorCreateWithoutPatientInput, SavedVendorUncheckedCreateWithoutPatientInput> | SavedVendorCreateWithoutPatientInput[] | SavedVendorUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutPatientInput | SavedVendorCreateOrConnectWithoutPatientInput[]
    upsert?: SavedVendorUpsertWithWhereUniqueWithoutPatientInput | SavedVendorUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: SavedVendorCreateManyPatientInputEnvelope
    set?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    disconnect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    delete?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    update?: SavedVendorUpdateWithWhereUniqueWithoutPatientInput | SavedVendorUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: SavedVendorUpdateManyWithWhereWithoutPatientInput | SavedVendorUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: SavedVendorScalarWhereInput | SavedVendorScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<CartItemCreateWithoutPatientInput, CartItemUncheckedCreateWithoutPatientInput> | CartItemCreateWithoutPatientInput[] | CartItemUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutPatientInput | CartItemCreateOrConnectWithoutPatientInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutPatientInput | CartItemUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: CartItemCreateManyPatientInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutPatientInput | CartItemUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutPatientInput | CartItemUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type PrescriptionUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput> | PrescriptionCreateWithoutPatientInput[] | PrescriptionUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutPatientInput | PrescriptionCreateOrConnectWithoutPatientInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutPatientInput | PrescriptionUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PrescriptionCreateManyPatientInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutPatientInput | PrescriptionUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutPatientInput | PrescriptionUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type UserCreatespecialtiesInput = {
    set: string[]
  }

  export type PatientCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutUsersInput = {
    create?: XOR<HospitalCreateWithoutUsersInput, HospitalUncheckedCreateWithoutUsersInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutUsersInput
    connect?: HospitalWhereUniqueInput
  }

  export type NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type MedicalRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicalRecordCreateWithoutUserInput, MedicalRecordUncheckedCreateWithoutUserInput> | MedicalRecordCreateWithoutUserInput[] | MedicalRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutUserInput | MedicalRecordCreateOrConnectWithoutUserInput[]
    createMany?: MedicalRecordCreateManyUserInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type PatientHospitalAccessCreateNestedManyWithoutGranterInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutGranterInput, PatientHospitalAccessUncheckedCreateWithoutGranterInput> | PatientHospitalAccessCreateWithoutGranterInput[] | PatientHospitalAccessUncheckedCreateWithoutGranterInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutGranterInput | PatientHospitalAccessCreateOrConnectWithoutGranterInput[]
    createMany?: PatientHospitalAccessCreateManyGranterInputEnvelope
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput> | PatientCreateWithoutDoctorsInput[] | PatientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorsInput | PatientCreateOrConnectWithoutDoctorsInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type ProfilePictureCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput
    connect?: ProfilePictureWhereUniqueInput
  }

  export type PasswordResetCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type StaffProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffProfileCreateWithoutUserInput, StaffProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutUserInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type DepartmentMembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<DepartmentMembershipCreateWithoutUserInput, DepartmentMembershipUncheckedCreateWithoutUserInput> | DepartmentMembershipCreateWithoutUserInput[] | DepartmentMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutUserInput | DepartmentMembershipCreateOrConnectWithoutUserInput[]
    createMany?: DepartmentMembershipCreateManyUserInputEnvelope
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
  }

  export type DoctorAvailabilityCreateNestedOneWithoutDoctorInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutDoctorInput, DoctorAvailabilityUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutDoctorInput
    connect?: DoctorAvailabilityWhereUniqueInput
  }

  export type ReferralCreateNestedManyWithoutReferringDoctorInput = {
    create?: XOR<ReferralCreateWithoutReferringDoctorInput, ReferralUncheckedCreateWithoutReferringDoctorInput> | ReferralCreateWithoutReferringDoctorInput[] | ReferralUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferringDoctorInput | ReferralCreateOrConnectWithoutReferringDoctorInput[]
    createMany?: ReferralCreateManyReferringDoctorInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ReferralCreateNestedManyWithoutReceivingDoctorInput = {
    create?: XOR<ReferralCreateWithoutReceivingDoctorInput, ReferralUncheckedCreateWithoutReceivingDoctorInput> | ReferralCreateWithoutReceivingDoctorInput[] | ReferralUncheckedCreateWithoutReceivingDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReceivingDoctorInput | ReferralCreateOrConnectWithoutReceivingDoctorInput[]
    createMany?: ReferralCreateManyReceivingDoctorInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ConversationCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ConversationCreateWithoutDoctorInput, ConversationUncheckedCreateWithoutDoctorInput> | ConversationCreateWithoutDoctorInput[] | ConversationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDoctorInput | ConversationCreateOrConnectWithoutDoctorInput[]
    createMany?: ConversationCreateManyDoctorInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type BirthRecordCreateNestedManyWithoutAttendingDoctorInput = {
    create?: XOR<BirthRecordCreateWithoutAttendingDoctorInput, BirthRecordUncheckedCreateWithoutAttendingDoctorInput> | BirthRecordCreateWithoutAttendingDoctorInput[] | BirthRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutAttendingDoctorInput | BirthRecordCreateOrConnectWithoutAttendingDoctorInput[]
    createMany?: BirthRecordCreateManyAttendingDoctorInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type DeathRecordCreateNestedManyWithoutAttendingDoctorInput = {
    create?: XOR<DeathRecordCreateWithoutAttendingDoctorInput, DeathRecordUncheckedCreateWithoutAttendingDoctorInput> | DeathRecordCreateWithoutAttendingDoctorInput[] | DeathRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutAttendingDoctorInput | DeathRecordCreateOrConnectWithoutAttendingDoctorInput[]
    createMany?: DeathRecordCreateManyAttendingDoctorInputEnvelope
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
  }

  export type PrescriptionCreateNestedManyWithoutDoctorInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type SecurityAuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<SecurityAuditLogCreateWithoutUserInput, SecurityAuditLogUncheckedCreateWithoutUserInput> | SecurityAuditLogCreateWithoutUserInput[] | SecurityAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityAuditLogCreateOrConnectWithoutUserInput | SecurityAuditLogCreateOrConnectWithoutUserInput[]
    createMany?: SecurityAuditLogCreateManyUserInputEnvelope
    connect?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    connect?: PatientWhereUniqueInput
  }

  export type NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInputEnvelope
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicalRecordCreateWithoutUserInput, MedicalRecordUncheckedCreateWithoutUserInput> | MedicalRecordCreateWithoutUserInput[] | MedicalRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutUserInput | MedicalRecordCreateOrConnectWithoutUserInput[]
    createMany?: MedicalRecordCreateManyUserInputEnvelope
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
  }

  export type NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInputEnvelope
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
  }

  export type PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutGranterInput, PatientHospitalAccessUncheckedCreateWithoutGranterInput> | PatientHospitalAccessCreateWithoutGranterInput[] | PatientHospitalAccessUncheckedCreateWithoutGranterInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutGranterInput | PatientHospitalAccessCreateOrConnectWithoutGranterInput[]
    createMany?: PatientHospitalAccessCreateManyGranterInputEnvelope
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput> | PatientCreateWithoutDoctorsInput[] | PatientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorsInput | PatientCreateOrConnectWithoutDoctorsInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type ProfilePictureUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput
    connect?: ProfilePictureWhereUniqueInput
  }

  export type PasswordResetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type StaffProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffProfileCreateWithoutUserInput, StaffProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutUserInput
    connect?: StaffProfileWhereUniqueInput
  }

  export type DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DepartmentMembershipCreateWithoutUserInput, DepartmentMembershipUncheckedCreateWithoutUserInput> | DepartmentMembershipCreateWithoutUserInput[] | DepartmentMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutUserInput | DepartmentMembershipCreateOrConnectWithoutUserInput[]
    createMany?: DepartmentMembershipCreateManyUserInputEnvelope
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
  }

  export type DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutDoctorInput, DoctorAvailabilityUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutDoctorInput
    connect?: DoctorAvailabilityWhereUniqueInput
  }

  export type ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput = {
    create?: XOR<ReferralCreateWithoutReferringDoctorInput, ReferralUncheckedCreateWithoutReferringDoctorInput> | ReferralCreateWithoutReferringDoctorInput[] | ReferralUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferringDoctorInput | ReferralCreateOrConnectWithoutReferringDoctorInput[]
    createMany?: ReferralCreateManyReferringDoctorInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput = {
    create?: XOR<ReferralCreateWithoutReceivingDoctorInput, ReferralUncheckedCreateWithoutReceivingDoctorInput> | ReferralCreateWithoutReceivingDoctorInput[] | ReferralUncheckedCreateWithoutReceivingDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReceivingDoctorInput | ReferralCreateOrConnectWithoutReceivingDoctorInput[]
    createMany?: ReferralCreateManyReceivingDoctorInputEnvelope
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
  }

  export type ConversationUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ConversationCreateWithoutDoctorInput, ConversationUncheckedCreateWithoutDoctorInput> | ConversationCreateWithoutDoctorInput[] | ConversationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDoctorInput | ConversationCreateOrConnectWithoutDoctorInput[]
    createMany?: ConversationCreateManyDoctorInputEnvelope
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput = {
    create?: XOR<BirthRecordCreateWithoutAttendingDoctorInput, BirthRecordUncheckedCreateWithoutAttendingDoctorInput> | BirthRecordCreateWithoutAttendingDoctorInput[] | BirthRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutAttendingDoctorInput | BirthRecordCreateOrConnectWithoutAttendingDoctorInput[]
    createMany?: BirthRecordCreateManyAttendingDoctorInputEnvelope
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
  }

  export type DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput = {
    create?: XOR<DeathRecordCreateWithoutAttendingDoctorInput, DeathRecordUncheckedCreateWithoutAttendingDoctorInput> | DeathRecordCreateWithoutAttendingDoctorInput[] | DeathRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutAttendingDoctorInput | DeathRecordCreateOrConnectWithoutAttendingDoctorInput[]
    createMany?: DeathRecordCreateManyAttendingDoctorInputEnvelope
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
  }

  export type PrescriptionUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
  }

  export type SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SecurityAuditLogCreateWithoutUserInput, SecurityAuditLogUncheckedCreateWithoutUserInput> | SecurityAuditLogCreateWithoutUserInput[] | SecurityAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityAuditLogCreateOrConnectWithoutUserInput | SecurityAuditLogCreateOrConnectWithoutUserInput[]
    createMany?: SecurityAuditLogCreateManyUserInputEnvelope
    connect?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type UserUpdatespecialtiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PatientUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type HospitalUpdateOneWithoutUsersNestedInput = {
    create?: XOR<HospitalCreateWithoutUsersInput, HospitalUncheckedCreateWithoutUsersInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutUsersInput
    upsert?: HospitalUpsertWithoutUsersInput
    disconnect?: HospitalWhereInput | boolean
    delete?: HospitalWhereInput | boolean
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutUsersInput, HospitalUpdateWithoutUsersInput>, HospitalUncheckedUpdateWithoutUsersInput>
  }

  export type NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutUserInput | AppointmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutUserInput | AppointmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutUserInput | AppointmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type MedicalRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutUserInput, MedicalRecordUncheckedCreateWithoutUserInput> | MedicalRecordCreateWithoutUserInput[] | MedicalRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutUserInput | MedicalRecordCreateOrConnectWithoutUserInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutUserInput | MedicalRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicalRecordCreateManyUserInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutUserInput | MedicalRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutUserInput | MedicalRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type PatientHospitalAccessUpdateManyWithoutGranterNestedInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutGranterInput, PatientHospitalAccessUncheckedCreateWithoutGranterInput> | PatientHospitalAccessCreateWithoutGranterInput[] | PatientHospitalAccessUncheckedCreateWithoutGranterInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutGranterInput | PatientHospitalAccessCreateOrConnectWithoutGranterInput[]
    upsert?: PatientHospitalAccessUpsertWithWhereUniqueWithoutGranterInput | PatientHospitalAccessUpsertWithWhereUniqueWithoutGranterInput[]
    createMany?: PatientHospitalAccessCreateManyGranterInputEnvelope
    set?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    disconnect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    delete?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    update?: PatientHospitalAccessUpdateWithWhereUniqueWithoutGranterInput | PatientHospitalAccessUpdateWithWhereUniqueWithoutGranterInput[]
    updateMany?: PatientHospitalAccessUpdateManyWithWhereWithoutGranterInput | PatientHospitalAccessUpdateManyWithWhereWithoutGranterInput[]
    deleteMany?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput> | PatientCreateWithoutDoctorsInput[] | PatientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorsInput | PatientCreateOrConnectWithoutDoctorsInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutDoctorsInput | PatientUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutDoctorsInput | PatientUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutDoctorsInput | PatientUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type ProfilePictureUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput
    upsert?: ProfilePictureUpsertWithoutUserInput
    disconnect?: ProfilePictureWhereInput | boolean
    delete?: ProfilePictureWhereInput | boolean
    connect?: ProfilePictureWhereUniqueInput
    update?: XOR<XOR<ProfilePictureUpdateToOneWithWhereWithoutUserInput, ProfilePictureUpdateWithoutUserInput>, ProfilePictureUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutUserInput | PasswordResetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutUserInput | PasswordResetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutUserInput | PasswordResetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type StaffProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffProfileCreateWithoutUserInput, StaffProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutUserInput
    upsert?: StaffProfileUpsertWithoutUserInput
    disconnect?: StaffProfileWhereInput | boolean
    delete?: StaffProfileWhereInput | boolean
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutUserInput, StaffProfileUpdateWithoutUserInput>, StaffProfileUncheckedUpdateWithoutUserInput>
  }

  export type DepartmentMembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<DepartmentMembershipCreateWithoutUserInput, DepartmentMembershipUncheckedCreateWithoutUserInput> | DepartmentMembershipCreateWithoutUserInput[] | DepartmentMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutUserInput | DepartmentMembershipCreateOrConnectWithoutUserInput[]
    upsert?: DepartmentMembershipUpsertWithWhereUniqueWithoutUserInput | DepartmentMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DepartmentMembershipCreateManyUserInputEnvelope
    set?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    disconnect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    delete?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    update?: DepartmentMembershipUpdateWithWhereUniqueWithoutUserInput | DepartmentMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DepartmentMembershipUpdateManyWithWhereWithoutUserInput | DepartmentMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DepartmentMembershipScalarWhereInput | DepartmentMembershipScalarWhereInput[]
  }

  export type DoctorAvailabilityUpdateOneWithoutDoctorNestedInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutDoctorInput, DoctorAvailabilityUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutDoctorInput
    upsert?: DoctorAvailabilityUpsertWithoutDoctorInput
    disconnect?: DoctorAvailabilityWhereInput | boolean
    delete?: DoctorAvailabilityWhereInput | boolean
    connect?: DoctorAvailabilityWhereUniqueInput
    update?: XOR<XOR<DoctorAvailabilityUpdateToOneWithWhereWithoutDoctorInput, DoctorAvailabilityUpdateWithoutDoctorInput>, DoctorAvailabilityUncheckedUpdateWithoutDoctorInput>
  }

  export type ReferralUpdateManyWithoutReferringDoctorNestedInput = {
    create?: XOR<ReferralCreateWithoutReferringDoctorInput, ReferralUncheckedCreateWithoutReferringDoctorInput> | ReferralCreateWithoutReferringDoctorInput[] | ReferralUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferringDoctorInput | ReferralCreateOrConnectWithoutReferringDoctorInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReferringDoctorInput | ReferralUpsertWithWhereUniqueWithoutReferringDoctorInput[]
    createMany?: ReferralCreateManyReferringDoctorInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReferringDoctorInput | ReferralUpdateWithWhereUniqueWithoutReferringDoctorInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReferringDoctorInput | ReferralUpdateManyWithWhereWithoutReferringDoctorInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ReferralUpdateManyWithoutReceivingDoctorNestedInput = {
    create?: XOR<ReferralCreateWithoutReceivingDoctorInput, ReferralUncheckedCreateWithoutReceivingDoctorInput> | ReferralCreateWithoutReceivingDoctorInput[] | ReferralUncheckedCreateWithoutReceivingDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReceivingDoctorInput | ReferralCreateOrConnectWithoutReceivingDoctorInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReceivingDoctorInput | ReferralUpsertWithWhereUniqueWithoutReceivingDoctorInput[]
    createMany?: ReferralCreateManyReceivingDoctorInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReceivingDoctorInput | ReferralUpdateWithWhereUniqueWithoutReceivingDoctorInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReceivingDoctorInput | ReferralUpdateManyWithWhereWithoutReceivingDoctorInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ConversationUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ConversationCreateWithoutDoctorInput, ConversationUncheckedCreateWithoutDoctorInput> | ConversationCreateWithoutDoctorInput[] | ConversationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDoctorInput | ConversationCreateOrConnectWithoutDoctorInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutDoctorInput | ConversationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ConversationCreateManyDoctorInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutDoctorInput | ConversationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutDoctorInput | ConversationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type BirthRecordUpdateManyWithoutAttendingDoctorNestedInput = {
    create?: XOR<BirthRecordCreateWithoutAttendingDoctorInput, BirthRecordUncheckedCreateWithoutAttendingDoctorInput> | BirthRecordCreateWithoutAttendingDoctorInput[] | BirthRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutAttendingDoctorInput | BirthRecordCreateOrConnectWithoutAttendingDoctorInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput | BirthRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput[]
    createMany?: BirthRecordCreateManyAttendingDoctorInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput | BirthRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutAttendingDoctorInput | BirthRecordUpdateManyWithWhereWithoutAttendingDoctorInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type DeathRecordUpdateManyWithoutAttendingDoctorNestedInput = {
    create?: XOR<DeathRecordCreateWithoutAttendingDoctorInput, DeathRecordUncheckedCreateWithoutAttendingDoctorInput> | DeathRecordCreateWithoutAttendingDoctorInput[] | DeathRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutAttendingDoctorInput | DeathRecordCreateOrConnectWithoutAttendingDoctorInput[]
    upsert?: DeathRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput | DeathRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput[]
    createMany?: DeathRecordCreateManyAttendingDoctorInputEnvelope
    set?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    disconnect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    delete?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    update?: DeathRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput | DeathRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput[]
    updateMany?: DeathRecordUpdateManyWithWhereWithoutAttendingDoctorInput | DeathRecordUpdateManyWithWhereWithoutAttendingDoctorInput[]
    deleteMany?: DeathRecordScalarWhereInput | DeathRecordScalarWhereInput[]
  }

  export type PrescriptionUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutDoctorInput | PrescriptionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutDoctorInput | PrescriptionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutDoctorInput | PrescriptionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type SecurityAuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<SecurityAuditLogCreateWithoutUserInput, SecurityAuditLogUncheckedCreateWithoutUserInput> | SecurityAuditLogCreateWithoutUserInput[] | SecurityAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityAuditLogCreateOrConnectWithoutUserInput | SecurityAuditLogCreateOrConnectWithoutUserInput[]
    upsert?: SecurityAuditLogUpsertWithWhereUniqueWithoutUserInput | SecurityAuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SecurityAuditLogCreateManyUserInputEnvelope
    set?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    disconnect?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    delete?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    connect?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    update?: SecurityAuditLogUpdateWithWhereUniqueWithoutUserInput | SecurityAuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SecurityAuditLogUpdateManyWithWhereWithoutUserInput | SecurityAuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SecurityAuditLogScalarWhereInput | SecurityAuditLogScalarWhereInput[]
  }

  export type PatientUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput
    upsert?: PatientUpsertWithoutUserInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutUserInput, PatientUpdateWithoutUserInput>, PatientUncheckedUpdateWithoutUserInput>
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_updatedByUserIdToUserInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_createdByUserIdToUserInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput = {
    create?: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput> | AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[] | AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    connectOrCreate?: AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    upsert?: AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    createMany?: AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInputEnvelope
    set?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    disconnect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    delete?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    connect?: AntenatalRecordWhereUniqueInput | AntenatalRecordWhereUniqueInput[]
    update?: AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    updateMany?: AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_updatedByUserIdToUserInput[]
    deleteMany?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutUserInput | AppointmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutUserInput | AppointmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutUserInput | AppointmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type MedicalRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicalRecordCreateWithoutUserInput, MedicalRecordUncheckedCreateWithoutUserInput> | MedicalRecordCreateWithoutUserInput[] | MedicalRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicalRecordCreateOrConnectWithoutUserInput | MedicalRecordCreateOrConnectWithoutUserInput[]
    upsert?: MedicalRecordUpsertWithWhereUniqueWithoutUserInput | MedicalRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicalRecordCreateManyUserInputEnvelope
    set?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    disconnect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    delete?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    connect?: MedicalRecordWhereUniqueInput | MedicalRecordWhereUniqueInput[]
    update?: MedicalRecordUpdateWithWhereUniqueWithoutUserInput | MedicalRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicalRecordUpdateManyWithWhereWithoutUserInput | MedicalRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput = {
    create?: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput> | NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[] | NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    connectOrCreate?: NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    upsert?: NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    createMany?: NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInputEnvelope
    set?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    disconnect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    delete?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    connect?: NeonatalRecordWhereUniqueInput | NeonatalRecordWhereUniqueInput[]
    update?: NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    updateMany?: NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_createdByUserIdToUserInput[]
    deleteMany?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
  }

  export type PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput = {
    create?: XOR<PatientHospitalAccessCreateWithoutGranterInput, PatientHospitalAccessUncheckedCreateWithoutGranterInput> | PatientHospitalAccessCreateWithoutGranterInput[] | PatientHospitalAccessUncheckedCreateWithoutGranterInput[]
    connectOrCreate?: PatientHospitalAccessCreateOrConnectWithoutGranterInput | PatientHospitalAccessCreateOrConnectWithoutGranterInput[]
    upsert?: PatientHospitalAccessUpsertWithWhereUniqueWithoutGranterInput | PatientHospitalAccessUpsertWithWhereUniqueWithoutGranterInput[]
    createMany?: PatientHospitalAccessCreateManyGranterInputEnvelope
    set?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    disconnect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    delete?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    connect?: PatientHospitalAccessWhereUniqueInput | PatientHospitalAccessWhereUniqueInput[]
    update?: PatientHospitalAccessUpdateWithWhereUniqueWithoutGranterInput | PatientHospitalAccessUpdateWithWhereUniqueWithoutGranterInput[]
    updateMany?: PatientHospitalAccessUpdateManyWithWhereWithoutGranterInput | PatientHospitalAccessUpdateManyWithWhereWithoutGranterInput[]
    deleteMany?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput> | PatientCreateWithoutDoctorsInput[] | PatientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorsInput | PatientCreateOrConnectWithoutDoctorsInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutDoctorsInput | PatientUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutDoctorsInput | PatientUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutDoctorsInput | PatientUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type ProfilePictureUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput
    upsert?: ProfilePictureUpsertWithoutUserInput
    disconnect?: ProfilePictureWhereInput | boolean
    delete?: ProfilePictureWhereInput | boolean
    connect?: ProfilePictureWhereUniqueInput
    update?: XOR<XOR<ProfilePictureUpdateToOneWithWhereWithoutUserInput, ProfilePictureUpdateWithoutUserInput>, ProfilePictureUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutUserInput | PasswordResetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutUserInput | PasswordResetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutUserInput | PasswordResetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type StaffProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffProfileCreateWithoutUserInput, StaffProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffProfileCreateOrConnectWithoutUserInput
    upsert?: StaffProfileUpsertWithoutUserInput
    disconnect?: StaffProfileWhereInput | boolean
    delete?: StaffProfileWhereInput | boolean
    connect?: StaffProfileWhereUniqueInput
    update?: XOR<XOR<StaffProfileUpdateToOneWithWhereWithoutUserInput, StaffProfileUpdateWithoutUserInput>, StaffProfileUncheckedUpdateWithoutUserInput>
  }

  export type DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DepartmentMembershipCreateWithoutUserInput, DepartmentMembershipUncheckedCreateWithoutUserInput> | DepartmentMembershipCreateWithoutUserInput[] | DepartmentMembershipUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutUserInput | DepartmentMembershipCreateOrConnectWithoutUserInput[]
    upsert?: DepartmentMembershipUpsertWithWhereUniqueWithoutUserInput | DepartmentMembershipUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DepartmentMembershipCreateManyUserInputEnvelope
    set?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    disconnect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    delete?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    update?: DepartmentMembershipUpdateWithWhereUniqueWithoutUserInput | DepartmentMembershipUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DepartmentMembershipUpdateManyWithWhereWithoutUserInput | DepartmentMembershipUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DepartmentMembershipScalarWhereInput | DepartmentMembershipScalarWhereInput[]
  }

  export type DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput = {
    create?: XOR<DoctorAvailabilityCreateWithoutDoctorInput, DoctorAvailabilityUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: DoctorAvailabilityCreateOrConnectWithoutDoctorInput
    upsert?: DoctorAvailabilityUpsertWithoutDoctorInput
    disconnect?: DoctorAvailabilityWhereInput | boolean
    delete?: DoctorAvailabilityWhereInput | boolean
    connect?: DoctorAvailabilityWhereUniqueInput
    update?: XOR<XOR<DoctorAvailabilityUpdateToOneWithWhereWithoutDoctorInput, DoctorAvailabilityUpdateWithoutDoctorInput>, DoctorAvailabilityUncheckedUpdateWithoutDoctorInput>
  }

  export type ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput = {
    create?: XOR<ReferralCreateWithoutReferringDoctorInput, ReferralUncheckedCreateWithoutReferringDoctorInput> | ReferralCreateWithoutReferringDoctorInput[] | ReferralUncheckedCreateWithoutReferringDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReferringDoctorInput | ReferralCreateOrConnectWithoutReferringDoctorInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReferringDoctorInput | ReferralUpsertWithWhereUniqueWithoutReferringDoctorInput[]
    createMany?: ReferralCreateManyReferringDoctorInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReferringDoctorInput | ReferralUpdateWithWhereUniqueWithoutReferringDoctorInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReferringDoctorInput | ReferralUpdateManyWithWhereWithoutReferringDoctorInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput = {
    create?: XOR<ReferralCreateWithoutReceivingDoctorInput, ReferralUncheckedCreateWithoutReceivingDoctorInput> | ReferralCreateWithoutReceivingDoctorInput[] | ReferralUncheckedCreateWithoutReceivingDoctorInput[]
    connectOrCreate?: ReferralCreateOrConnectWithoutReceivingDoctorInput | ReferralCreateOrConnectWithoutReceivingDoctorInput[]
    upsert?: ReferralUpsertWithWhereUniqueWithoutReceivingDoctorInput | ReferralUpsertWithWhereUniqueWithoutReceivingDoctorInput[]
    createMany?: ReferralCreateManyReceivingDoctorInputEnvelope
    set?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    disconnect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    delete?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    connect?: ReferralWhereUniqueInput | ReferralWhereUniqueInput[]
    update?: ReferralUpdateWithWhereUniqueWithoutReceivingDoctorInput | ReferralUpdateWithWhereUniqueWithoutReceivingDoctorInput[]
    updateMany?: ReferralUpdateManyWithWhereWithoutReceivingDoctorInput | ReferralUpdateManyWithWhereWithoutReceivingDoctorInput[]
    deleteMany?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
  }

  export type ConversationUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ConversationCreateWithoutDoctorInput, ConversationUncheckedCreateWithoutDoctorInput> | ConversationCreateWithoutDoctorInput[] | ConversationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConversationCreateOrConnectWithoutDoctorInput | ConversationCreateOrConnectWithoutDoctorInput[]
    upsert?: ConversationUpsertWithWhereUniqueWithoutDoctorInput | ConversationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ConversationCreateManyDoctorInputEnvelope
    set?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    disconnect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    delete?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    connect?: ConversationWhereUniqueInput | ConversationWhereUniqueInput[]
    update?: ConversationUpdateWithWhereUniqueWithoutDoctorInput | ConversationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ConversationUpdateManyWithWhereWithoutDoctorInput | ConversationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput = {
    create?: XOR<BirthRecordCreateWithoutAttendingDoctorInput, BirthRecordUncheckedCreateWithoutAttendingDoctorInput> | BirthRecordCreateWithoutAttendingDoctorInput[] | BirthRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: BirthRecordCreateOrConnectWithoutAttendingDoctorInput | BirthRecordCreateOrConnectWithoutAttendingDoctorInput[]
    upsert?: BirthRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput | BirthRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput[]
    createMany?: BirthRecordCreateManyAttendingDoctorInputEnvelope
    set?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    disconnect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    delete?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    connect?: BirthRecordWhereUniqueInput | BirthRecordWhereUniqueInput[]
    update?: BirthRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput | BirthRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput[]
    updateMany?: BirthRecordUpdateManyWithWhereWithoutAttendingDoctorInput | BirthRecordUpdateManyWithWhereWithoutAttendingDoctorInput[]
    deleteMany?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
  }

  export type DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput = {
    create?: XOR<DeathRecordCreateWithoutAttendingDoctorInput, DeathRecordUncheckedCreateWithoutAttendingDoctorInput> | DeathRecordCreateWithoutAttendingDoctorInput[] | DeathRecordUncheckedCreateWithoutAttendingDoctorInput[]
    connectOrCreate?: DeathRecordCreateOrConnectWithoutAttendingDoctorInput | DeathRecordCreateOrConnectWithoutAttendingDoctorInput[]
    upsert?: DeathRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput | DeathRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput[]
    createMany?: DeathRecordCreateManyAttendingDoctorInputEnvelope
    set?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    disconnect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    delete?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    connect?: DeathRecordWhereUniqueInput | DeathRecordWhereUniqueInput[]
    update?: DeathRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput | DeathRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput[]
    updateMany?: DeathRecordUpdateManyWithWhereWithoutAttendingDoctorInput | DeathRecordUpdateManyWithWhereWithoutAttendingDoctorInput[]
    deleteMany?: DeathRecordScalarWhereInput | DeathRecordScalarWhereInput[]
  }

  export type PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput> | PrescriptionCreateWithoutDoctorInput[] | PrescriptionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: PrescriptionCreateOrConnectWithoutDoctorInput | PrescriptionCreateOrConnectWithoutDoctorInput[]
    upsert?: PrescriptionUpsertWithWhereUniqueWithoutDoctorInput | PrescriptionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: PrescriptionCreateManyDoctorInputEnvelope
    set?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    disconnect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    delete?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    connect?: PrescriptionWhereUniqueInput | PrescriptionWhereUniqueInput[]
    update?: PrescriptionUpdateWithWhereUniqueWithoutDoctorInput | PrescriptionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: PrescriptionUpdateManyWithWhereWithoutDoctorInput | PrescriptionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
  }

  export type SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SecurityAuditLogCreateWithoutUserInput, SecurityAuditLogUncheckedCreateWithoutUserInput> | SecurityAuditLogCreateWithoutUserInput[] | SecurityAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityAuditLogCreateOrConnectWithoutUserInput | SecurityAuditLogCreateOrConnectWithoutUserInput[]
    upsert?: SecurityAuditLogUpsertWithWhereUniqueWithoutUserInput | SecurityAuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SecurityAuditLogCreateManyUserInputEnvelope
    set?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    disconnect?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    delete?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    connect?: SecurityAuditLogWhereUniqueInput | SecurityAuditLogWhereUniqueInput[]
    update?: SecurityAuditLogUpdateWithWhereUniqueWithoutUserInput | SecurityAuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SecurityAuditLogUpdateManyWithWhereWithoutUserInput | SecurityAuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SecurityAuditLogScalarWhereInput | SecurityAuditLogScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutPasswordResetsInput = {
    create?: XOR<PatientCreateWithoutPasswordResetsInput, PatientUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPasswordResetsInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPasswordResetsInput = {
    create?: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetsInput
    connect?: UserWhereUniqueInput
  }

  export type PatientUpdateOneWithoutPasswordResetsNestedInput = {
    create?: XOR<PatientCreateWithoutPasswordResetsInput, PatientUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPasswordResetsInput
    upsert?: PatientUpsertWithoutPasswordResetsInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPasswordResetsInput, PatientUpdateWithoutPasswordResetsInput>, PatientUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type UserUpdateOneWithoutPasswordResetsNestedInput = {
    create?: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetsInput
    upsert?: UserUpsertWithoutPasswordResetsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordResetsInput, UserUpdateWithoutPasswordResetsInput>, UserUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type UserCreateNestedOneWithoutSecurityAuditLogInput = {
    create?: XOR<UserCreateWithoutSecurityAuditLogInput, UserUncheckedCreateWithoutSecurityAuditLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutSecurityAuditLogInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSecurityAuditLogNestedInput = {
    create?: XOR<UserCreateWithoutSecurityAuditLogInput, UserUncheckedCreateWithoutSecurityAuditLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutSecurityAuditLogInput
    upsert?: UserUpsertWithoutSecurityAuditLogInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSecurityAuditLogInput, UserUpdateWithoutSecurityAuditLogInput>, UserUncheckedUpdateWithoutSecurityAuditLogInput>
  }

  export type PatientCreateNestedOneWithoutProfilePictureInput = {
    create?: XOR<PatientCreateWithoutProfilePictureInput, PatientUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: PatientCreateOrConnectWithoutProfilePictureInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProfilePictureInput = {
    create?: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type PatientUpdateOneWithoutProfilePictureNestedInput = {
    create?: XOR<PatientCreateWithoutProfilePictureInput, PatientUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: PatientCreateOrConnectWithoutProfilePictureInput
    upsert?: PatientUpsertWithoutProfilePictureInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutProfilePictureInput, PatientUpdateWithoutProfilePictureInput>, PatientUncheckedUpdateWithoutProfilePictureInput>
  }

  export type UserUpdateOneWithoutProfilePictureNestedInput = {
    create?: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfilePictureInput
    upsert?: UserUpsertWithoutProfilePictureInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfilePictureInput, UserUpdateWithoutProfilePictureInput>, UserUncheckedUpdateWithoutProfilePictureInput>
  }

  export type PatientCreateNestedOneWithoutEmailsInput = {
    create?: XOR<PatientCreateWithoutEmailsInput, PatientUncheckedCreateWithoutEmailsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutEmailsInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutEmailsNestedInput = {
    create?: XOR<PatientCreateWithoutEmailsInput, PatientUncheckedCreateWithoutEmailsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutEmailsInput
    upsert?: PatientUpsertWithoutEmailsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutEmailsInput, PatientUpdateWithoutEmailsInput>, PatientUncheckedUpdateWithoutEmailsInput>
  }

  export type PatientCreateNestedOneWithoutPhonesInput = {
    create?: XOR<PatientCreateWithoutPhonesInput, PatientUncheckedCreateWithoutPhonesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPhonesInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutPhonesNestedInput = {
    create?: XOR<PatientCreateWithoutPhonesInput, PatientUncheckedCreateWithoutPhonesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPhonesInput
    upsert?: PatientUpsertWithoutPhonesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPhonesInput, PatientUpdateWithoutPhonesInput>, PatientUncheckedUpdateWithoutPhonesInput>
  }

  export type HospitalCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<HospitalCreateWithoutDepartmentsInput, HospitalUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDepartmentsInput
    connect?: HospitalWhereUniqueInput
  }

  export type DepartmentMembershipCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<DepartmentMembershipCreateWithoutDepartmentInput, DepartmentMembershipUncheckedCreateWithoutDepartmentInput> | DepartmentMembershipCreateWithoutDepartmentInput[] | DepartmentMembershipUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutDepartmentInput | DepartmentMembershipCreateOrConnectWithoutDepartmentInput[]
    createMany?: DepartmentMembershipCreateManyDepartmentInputEnvelope
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
  }

  export type DepartmentMembershipUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<DepartmentMembershipCreateWithoutDepartmentInput, DepartmentMembershipUncheckedCreateWithoutDepartmentInput> | DepartmentMembershipCreateWithoutDepartmentInput[] | DepartmentMembershipUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutDepartmentInput | DepartmentMembershipCreateOrConnectWithoutDepartmentInput[]
    createMany?: DepartmentMembershipCreateManyDepartmentInputEnvelope
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
  }

  export type HospitalUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<HospitalCreateWithoutDepartmentsInput, HospitalUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDepartmentsInput
    upsert?: HospitalUpsertWithoutDepartmentsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutDepartmentsInput, HospitalUpdateWithoutDepartmentsInput>, HospitalUncheckedUpdateWithoutDepartmentsInput>
  }

  export type DepartmentMembershipUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<DepartmentMembershipCreateWithoutDepartmentInput, DepartmentMembershipUncheckedCreateWithoutDepartmentInput> | DepartmentMembershipCreateWithoutDepartmentInput[] | DepartmentMembershipUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutDepartmentInput | DepartmentMembershipCreateOrConnectWithoutDepartmentInput[]
    upsert?: DepartmentMembershipUpsertWithWhereUniqueWithoutDepartmentInput | DepartmentMembershipUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: DepartmentMembershipCreateManyDepartmentInputEnvelope
    set?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    disconnect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    delete?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    update?: DepartmentMembershipUpdateWithWhereUniqueWithoutDepartmentInput | DepartmentMembershipUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: DepartmentMembershipUpdateManyWithWhereWithoutDepartmentInput | DepartmentMembershipUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: DepartmentMembershipScalarWhereInput | DepartmentMembershipScalarWhereInput[]
  }

  export type DepartmentMembershipUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<DepartmentMembershipCreateWithoutDepartmentInput, DepartmentMembershipUncheckedCreateWithoutDepartmentInput> | DepartmentMembershipCreateWithoutDepartmentInput[] | DepartmentMembershipUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentMembershipCreateOrConnectWithoutDepartmentInput | DepartmentMembershipCreateOrConnectWithoutDepartmentInput[]
    upsert?: DepartmentMembershipUpsertWithWhereUniqueWithoutDepartmentInput | DepartmentMembershipUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: DepartmentMembershipCreateManyDepartmentInputEnvelope
    set?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    disconnect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    delete?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    connect?: DepartmentMembershipWhereUniqueInput | DepartmentMembershipWhereUniqueInput[]
    update?: DepartmentMembershipUpdateWithWhereUniqueWithoutDepartmentInput | DepartmentMembershipUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: DepartmentMembershipUpdateManyWithWhereWithoutDepartmentInput | DepartmentMembershipUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: DepartmentMembershipScalarWhereInput | DepartmentMembershipScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDepartmentMembershipsInput = {
    create?: XOR<UserCreateWithoutDepartmentMembershipsInput, UserUncheckedCreateWithoutDepartmentMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutMembersInput = {
    create?: XOR<DepartmentCreateWithoutMembersInput, DepartmentUncheckedCreateWithoutMembersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMembersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDepartmentMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentMembershipsInput, UserUncheckedCreateWithoutDepartmentMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentMembershipsInput
    upsert?: UserUpsertWithoutDepartmentMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDepartmentMembershipsInput, UserUpdateWithoutDepartmentMembershipsInput>, UserUncheckedUpdateWithoutDepartmentMembershipsInput>
  }

  export type DepartmentUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<DepartmentCreateWithoutMembersInput, DepartmentUncheckedCreateWithoutMembersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutMembersInput
    upsert?: DepartmentUpsertWithoutMembersInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutMembersInput, DepartmentUpdateWithoutMembersInput>, DepartmentUncheckedUpdateWithoutMembersInput>
  }

  export type UserCreateNestedOneWithoutStaffProfileInput = {
    create?: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffProfileInput
    connect?: UserWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutStaffProfilesInput = {
    create?: XOR<HospitalCreateWithoutStaffProfilesInput, HospitalUncheckedCreateWithoutStaffProfilesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutStaffProfilesInput
    connect?: HospitalWhereUniqueInput
  }

  export type EnumEmploymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmploymentStatus
  }

  export type UserUpdateOneRequiredWithoutStaffProfileNestedInput = {
    create?: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffProfileInput
    upsert?: UserUpsertWithoutStaffProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffProfileInput, UserUpdateWithoutStaffProfileInput>, UserUncheckedUpdateWithoutStaffProfileInput>
  }

  export type HospitalUpdateOneRequiredWithoutStaffProfilesNestedInput = {
    create?: XOR<HospitalCreateWithoutStaffProfilesInput, HospitalUncheckedCreateWithoutStaffProfilesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutStaffProfilesInput
    upsert?: HospitalUpsertWithoutStaffProfilesInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutStaffProfilesInput, HospitalUpdateWithoutStaffProfilesInput>, HospitalUncheckedUpdateWithoutStaffProfilesInput>
  }

  export type PatientCreateNestedOneWithoutHospitalAccessesInput = {
    create?: XOR<PatientCreateWithoutHospitalAccessesInput, PatientUncheckedCreateWithoutHospitalAccessesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutHospitalAccessesInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutPatientAccessesInput = {
    create?: XOR<HospitalCreateWithoutPatientAccessesInput, HospitalUncheckedCreateWithoutPatientAccessesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPatientAccessesInput
    connect?: HospitalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPatientAccess_grantedByInput = {
    create?: XOR<UserCreateWithoutPatientAccess_grantedByInput, UserUncheckedCreateWithoutPatientAccess_grantedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientAccess_grantedByInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAccessLevelFieldUpdateOperationsInput = {
    set?: $Enums.AccessLevel
  }

  export type PatientUpdateOneRequiredWithoutHospitalAccessesNestedInput = {
    create?: XOR<PatientCreateWithoutHospitalAccessesInput, PatientUncheckedCreateWithoutHospitalAccessesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutHospitalAccessesInput
    upsert?: PatientUpsertWithoutHospitalAccessesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutHospitalAccessesInput, PatientUpdateWithoutHospitalAccessesInput>, PatientUncheckedUpdateWithoutHospitalAccessesInput>
  }

  export type HospitalUpdateOneRequiredWithoutPatientAccessesNestedInput = {
    create?: XOR<HospitalCreateWithoutPatientAccessesInput, HospitalUncheckedCreateWithoutPatientAccessesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPatientAccessesInput
    upsert?: HospitalUpsertWithoutPatientAccessesInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutPatientAccessesInput, HospitalUpdateWithoutPatientAccessesInput>, HospitalUncheckedUpdateWithoutPatientAccessesInput>
  }

  export type UserUpdateOneRequiredWithoutPatientAccess_grantedByNestedInput = {
    create?: XOR<UserCreateWithoutPatientAccess_grantedByInput, UserUncheckedCreateWithoutPatientAccess_grantedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientAccess_grantedByInput
    upsert?: UserUpsertWithoutPatientAccess_grantedByInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientAccess_grantedByInput, UserUpdateWithoutPatientAccess_grantedByInput>, UserUncheckedUpdateWithoutPatientAccess_grantedByInput>
  }

  export type PatientCreateNestedOneWithoutSearchIndexInput = {
    create?: XOR<PatientCreateWithoutSearchIndexInput, PatientUncheckedCreateWithoutSearchIndexInput>
    connectOrCreate?: PatientCreateOrConnectWithoutSearchIndexInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutSearchIndexNestedInput = {
    create?: XOR<PatientCreateWithoutSearchIndexInput, PatientUncheckedCreateWithoutSearchIndexInput>
    connectOrCreate?: PatientCreateOrConnectWithoutSearchIndexInput
    upsert?: PatientUpsertWithoutSearchIndexInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutSearchIndexInput, PatientUpdateWithoutSearchIndexInput>, PatientUncheckedUpdateWithoutSearchIndexInput>
  }

  export type DoctorAvailabilityCreateserviceTypesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutAvailabilityInput = {
    create?: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvailabilityInput
    connect?: UserWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutDoctorAvailabilitiesInput = {
    create?: XOR<HospitalCreateWithoutDoctorAvailabilitiesInput, HospitalUncheckedCreateWithoutDoctorAvailabilitiesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDoctorAvailabilitiesInput
    connect?: HospitalWhereUniqueInput
  }

  export type DoctorAvailabilityUpdateserviceTypesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutAvailabilityNestedInput = {
    create?: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvailabilityInput
    upsert?: UserUpsertWithoutAvailabilityInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAvailabilityInput, UserUpdateWithoutAvailabilityInput>, UserUncheckedUpdateWithoutAvailabilityInput>
  }

  export type HospitalUpdateOneRequiredWithoutDoctorAvailabilitiesNestedInput = {
    create?: XOR<HospitalCreateWithoutDoctorAvailabilitiesInput, HospitalUncheckedCreateWithoutDoctorAvailabilitiesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDoctorAvailabilitiesInput
    upsert?: HospitalUpsertWithoutDoctorAvailabilitiesInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutDoctorAvailabilitiesInput, HospitalUpdateWithoutDoctorAvailabilitiesInput>, HospitalUncheckedUpdateWithoutDoctorAvailabilitiesInput>
  }

  export type PatientWidgetPreferenceCreaterecentDoctorsInput = {
    set: string[]
  }

  export type PatientWidgetPreferenceCreatepreferredHospitalsInput = {
    set: string[]
  }

  export type PatientCreateNestedOneWithoutWidgetPrefsInput = {
    create?: XOR<PatientCreateWithoutWidgetPrefsInput, PatientUncheckedCreateWithoutWidgetPrefsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutWidgetPrefsInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientWidgetPreferenceUpdaterecentDoctorsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PatientWidgetPreferenceUpdatepreferredHospitalsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PatientUpdateOneRequiredWithoutWidgetPrefsNestedInput = {
    create?: XOR<PatientCreateWithoutWidgetPrefsInput, PatientUncheckedCreateWithoutWidgetPrefsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutWidgetPrefsInput
    upsert?: PatientUpsertWithoutWidgetPrefsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutWidgetPrefsInput, PatientUpdateWithoutWidgetPrefsInput>, PatientUncheckedUpdateWithoutWidgetPrefsInput>
  }

  export type PatientCreateNestedOneWithoutReferralsReceivedInput = {
    create?: XOR<PatientCreateWithoutReferralsReceivedInput, PatientUncheckedCreateWithoutReferralsReceivedInput>
    connectOrCreate?: PatientCreateOrConnectWithoutReferralsReceivedInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutReferralsFromInput = {
    create?: XOR<HospitalCreateWithoutReferralsFromInput, HospitalUncheckedCreateWithoutReferralsFromInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutReferralsFromInput
    connect?: HospitalWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutReferralsToInput = {
    create?: XOR<HospitalCreateWithoutReferralsToInput, HospitalUncheckedCreateWithoutReferralsToInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutReferralsToInput
    connect?: HospitalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReferralsSentInput = {
    create?: XOR<UserCreateWithoutReferralsSentInput, UserUncheckedCreateWithoutReferralsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReferralsReceivedInput = {
    create?: XOR<UserCreateWithoutReferralsReceivedInput, UserUncheckedCreateWithoutReferralsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type EnumReferralPriorityFieldUpdateOperationsInput = {
    set?: $Enums.ReferralPriority
  }

  export type EnumReferralStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReferralStatus
  }

  export type PatientUpdateOneRequiredWithoutReferralsReceivedNestedInput = {
    create?: XOR<PatientCreateWithoutReferralsReceivedInput, PatientUncheckedCreateWithoutReferralsReceivedInput>
    connectOrCreate?: PatientCreateOrConnectWithoutReferralsReceivedInput
    upsert?: PatientUpsertWithoutReferralsReceivedInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutReferralsReceivedInput, PatientUpdateWithoutReferralsReceivedInput>, PatientUncheckedUpdateWithoutReferralsReceivedInput>
  }

  export type HospitalUpdateOneRequiredWithoutReferralsFromNestedInput = {
    create?: XOR<HospitalCreateWithoutReferralsFromInput, HospitalUncheckedCreateWithoutReferralsFromInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutReferralsFromInput
    upsert?: HospitalUpsertWithoutReferralsFromInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutReferralsFromInput, HospitalUpdateWithoutReferralsFromInput>, HospitalUncheckedUpdateWithoutReferralsFromInput>
  }

  export type HospitalUpdateOneRequiredWithoutReferralsToNestedInput = {
    create?: XOR<HospitalCreateWithoutReferralsToInput, HospitalUncheckedCreateWithoutReferralsToInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutReferralsToInput
    upsert?: HospitalUpsertWithoutReferralsToInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutReferralsToInput, HospitalUpdateWithoutReferralsToInput>, HospitalUncheckedUpdateWithoutReferralsToInput>
  }

  export type UserUpdateOneRequiredWithoutReferralsSentNestedInput = {
    create?: XOR<UserCreateWithoutReferralsSentInput, UserUncheckedCreateWithoutReferralsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsSentInput
    upsert?: UserUpsertWithoutReferralsSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralsSentInput, UserUpdateWithoutReferralsSentInput>, UserUncheckedUpdateWithoutReferralsSentInput>
  }

  export type UserUpdateOneWithoutReferralsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutReferralsReceivedInput, UserUncheckedCreateWithoutReferralsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferralsReceivedInput
    upsert?: UserUpsertWithoutReferralsReceivedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferralsReceivedInput, UserUpdateWithoutReferralsReceivedInput>, UserUncheckedUpdateWithoutReferralsReceivedInput>
  }

  export type AmbulanceCreatefeaturesInput = {
    set: string[]
  }

  export type HospitalCreateNestedOneWithoutAmbulancesInput = {
    create?: XOR<HospitalCreateWithoutAmbulancesInput, HospitalUncheckedCreateWithoutAmbulancesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAmbulancesInput
    connect?: HospitalWhereUniqueInput
  }

  export type AmbulanceDispatchCreateNestedManyWithoutAmbulanceInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutAmbulanceInput, AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput> | AmbulanceDispatchCreateWithoutAmbulanceInput[] | AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput | AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput[]
    createMany?: AmbulanceDispatchCreateManyAmbulanceInputEnvelope
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
  }

  export type AmbulanceDispatchUncheckedCreateNestedManyWithoutAmbulanceInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutAmbulanceInput, AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput> | AmbulanceDispatchCreateWithoutAmbulanceInput[] | AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput | AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput[]
    createMany?: AmbulanceDispatchCreateManyAmbulanceInputEnvelope
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
  }

  export type EnumAmbulanceTypeFieldUpdateOperationsInput = {
    set?: $Enums.AmbulanceType
  }

  export type EnumAmbulanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.AmbulanceStatus
  }

  export type AmbulanceUpdatefeaturesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type HospitalUpdateOneRequiredWithoutAmbulancesNestedInput = {
    create?: XOR<HospitalCreateWithoutAmbulancesInput, HospitalUncheckedCreateWithoutAmbulancesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAmbulancesInput
    upsert?: HospitalUpsertWithoutAmbulancesInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutAmbulancesInput, HospitalUpdateWithoutAmbulancesInput>, HospitalUncheckedUpdateWithoutAmbulancesInput>
  }

  export type AmbulanceDispatchUpdateManyWithoutAmbulanceNestedInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutAmbulanceInput, AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput> | AmbulanceDispatchCreateWithoutAmbulanceInput[] | AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput | AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput[]
    upsert?: AmbulanceDispatchUpsertWithWhereUniqueWithoutAmbulanceInput | AmbulanceDispatchUpsertWithWhereUniqueWithoutAmbulanceInput[]
    createMany?: AmbulanceDispatchCreateManyAmbulanceInputEnvelope
    set?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    disconnect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    delete?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    update?: AmbulanceDispatchUpdateWithWhereUniqueWithoutAmbulanceInput | AmbulanceDispatchUpdateWithWhereUniqueWithoutAmbulanceInput[]
    updateMany?: AmbulanceDispatchUpdateManyWithWhereWithoutAmbulanceInput | AmbulanceDispatchUpdateManyWithWhereWithoutAmbulanceInput[]
    deleteMany?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
  }

  export type AmbulanceDispatchUncheckedUpdateManyWithoutAmbulanceNestedInput = {
    create?: XOR<AmbulanceDispatchCreateWithoutAmbulanceInput, AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput> | AmbulanceDispatchCreateWithoutAmbulanceInput[] | AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput[]
    connectOrCreate?: AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput | AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput[]
    upsert?: AmbulanceDispatchUpsertWithWhereUniqueWithoutAmbulanceInput | AmbulanceDispatchUpsertWithWhereUniqueWithoutAmbulanceInput[]
    createMany?: AmbulanceDispatchCreateManyAmbulanceInputEnvelope
    set?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    disconnect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    delete?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    connect?: AmbulanceDispatchWhereUniqueInput | AmbulanceDispatchWhereUniqueInput[]
    update?: AmbulanceDispatchUpdateWithWhereUniqueWithoutAmbulanceInput | AmbulanceDispatchUpdateWithWhereUniqueWithoutAmbulanceInput[]
    updateMany?: AmbulanceDispatchUpdateManyWithWhereWithoutAmbulanceInput | AmbulanceDispatchUpdateManyWithWhereWithoutAmbulanceInput[]
    deleteMany?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
  }

  export type AmbulanceCreateNestedOneWithoutDispatchesInput = {
    create?: XOR<AmbulanceCreateWithoutDispatchesInput, AmbulanceUncheckedCreateWithoutDispatchesInput>
    connectOrCreate?: AmbulanceCreateOrConnectWithoutDispatchesInput
    connect?: AmbulanceWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutAmbulanceDispatchesInput = {
    create?: XOR<PatientCreateWithoutAmbulanceDispatchesInput, PatientUncheckedCreateWithoutAmbulanceDispatchesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAmbulanceDispatchesInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutAmbulanceDispatchesInput = {
    create?: XOR<HospitalCreateWithoutAmbulanceDispatchesInput, HospitalUncheckedCreateWithoutAmbulanceDispatchesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAmbulanceDispatchesInput
    connect?: HospitalWhereUniqueInput
  }

  export type EnumDispatchPriorityFieldUpdateOperationsInput = {
    set?: $Enums.DispatchPriority
  }

  export type EnumDispatchStatusFieldUpdateOperationsInput = {
    set?: $Enums.DispatchStatus
  }

  export type AmbulanceUpdateOneRequiredWithoutDispatchesNestedInput = {
    create?: XOR<AmbulanceCreateWithoutDispatchesInput, AmbulanceUncheckedCreateWithoutDispatchesInput>
    connectOrCreate?: AmbulanceCreateOrConnectWithoutDispatchesInput
    upsert?: AmbulanceUpsertWithoutDispatchesInput
    connect?: AmbulanceWhereUniqueInput
    update?: XOR<XOR<AmbulanceUpdateToOneWithWhereWithoutDispatchesInput, AmbulanceUpdateWithoutDispatchesInput>, AmbulanceUncheckedUpdateWithoutDispatchesInput>
  }

  export type PatientUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput = {
    create?: XOR<PatientCreateWithoutAmbulanceDispatchesInput, PatientUncheckedCreateWithoutAmbulanceDispatchesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAmbulanceDispatchesInput
    upsert?: PatientUpsertWithoutAmbulanceDispatchesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAmbulanceDispatchesInput, PatientUpdateWithoutAmbulanceDispatchesInput>, PatientUncheckedUpdateWithoutAmbulanceDispatchesInput>
  }

  export type HospitalUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput = {
    create?: XOR<HospitalCreateWithoutAmbulanceDispatchesInput, HospitalUncheckedCreateWithoutAmbulanceDispatchesInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAmbulanceDispatchesInput
    upsert?: HospitalUpsertWithoutAmbulanceDispatchesInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutAmbulanceDispatchesInput, HospitalUpdateWithoutAmbulanceDispatchesInput>, HospitalUncheckedUpdateWithoutAmbulanceDispatchesInput>
  }

  export type PatientCreateNestedOneWithoutAmbulanceRequestsInput = {
    create?: XOR<PatientCreateWithoutAmbulanceRequestsInput, PatientUncheckedCreateWithoutAmbulanceRequestsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAmbulanceRequestsInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutAmbulanceRequestsInput = {
    create?: XOR<HospitalCreateWithoutAmbulanceRequestsInput, HospitalUncheckedCreateWithoutAmbulanceRequestsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAmbulanceRequestsInput
    connect?: HospitalWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutAmbulanceRequestsNestedInput = {
    create?: XOR<PatientCreateWithoutAmbulanceRequestsInput, PatientUncheckedCreateWithoutAmbulanceRequestsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAmbulanceRequestsInput
    upsert?: PatientUpsertWithoutAmbulanceRequestsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAmbulanceRequestsInput, PatientUpdateWithoutAmbulanceRequestsInput>, PatientUncheckedUpdateWithoutAmbulanceRequestsInput>
  }

  export type HospitalUpdateOneRequiredWithoutAmbulanceRequestsNestedInput = {
    create?: XOR<HospitalCreateWithoutAmbulanceRequestsInput, HospitalUncheckedCreateWithoutAmbulanceRequestsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutAmbulanceRequestsInput
    upsert?: HospitalUpsertWithoutAmbulanceRequestsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutAmbulanceRequestsInput, HospitalUpdateWithoutAmbulanceRequestsInput>, HospitalUncheckedUpdateWithoutAmbulanceRequestsInput>
  }

  export type PatientCreateNestedOneWithoutWalletInput = {
    create?: XOR<PatientCreateWithoutWalletInput, PatientUncheckedCreateWithoutWalletInput>
    connectOrCreate?: PatientCreateOrConnectWithoutWalletInput
    connect?: PatientWhereUniqueInput
  }

  export type WalletTransactionCreateNestedManyWithoutWalletInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type WalletTransactionUncheckedCreateNestedManyWithoutWalletInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type EnumWalletStatusFieldUpdateOperationsInput = {
    set?: $Enums.WalletStatus
  }

  export type PatientUpdateOneRequiredWithoutWalletNestedInput = {
    create?: XOR<PatientCreateWithoutWalletInput, PatientUncheckedCreateWithoutWalletInput>
    connectOrCreate?: PatientCreateOrConnectWithoutWalletInput
    upsert?: PatientUpsertWithoutWalletInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutWalletInput, PatientUpdateWithoutWalletInput>, PatientUncheckedUpdateWithoutWalletInput>
  }

  export type WalletTransactionUpdateManyWithoutWalletNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutWalletInput | WalletTransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutWalletInput | WalletTransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutWalletInput | WalletTransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type WalletTransactionUncheckedUpdateManyWithoutWalletNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutWalletInput | WalletTransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutWalletInput | WalletTransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutWalletInput | WalletTransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type WalletCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutTransactionsInput
    connect?: WalletWhereUniqueInput
  }

  export type PaymentCreateNestedOneWithoutTransactionInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput
    connect?: PaymentWhereUniqueInput
  }

  export type PaymentUncheckedCreateNestedOneWithoutTransactionInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput
    connect?: PaymentWhereUniqueInput
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type EnumTransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransactionStatus
  }

  export type WalletUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutTransactionsInput
    upsert?: WalletUpsertWithoutTransactionsInput
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutTransactionsInput, WalletUpdateWithoutTransactionsInput>, WalletUncheckedUpdateWithoutTransactionsInput>
  }

  export type PaymentUpdateOneWithoutTransactionNestedInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput
    upsert?: PaymentUpsertWithoutTransactionInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutTransactionInput, PaymentUpdateWithoutTransactionInput>, PaymentUncheckedUpdateWithoutTransactionInput>
  }

  export type PaymentUncheckedUpdateOneWithoutTransactionNestedInput = {
    create?: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutTransactionInput
    upsert?: PaymentUpsertWithoutTransactionInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutTransactionInput, PaymentUpdateWithoutTransactionInput>, PaymentUncheckedUpdateWithoutTransactionInput>
  }

  export type PatientCreateNestedOneWithoutBillingRecordsInput = {
    create?: XOR<PatientCreateWithoutBillingRecordsInput, PatientUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBillingRecordsInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutBillingRecordsInput = {
    create?: XOR<HospitalCreateWithoutBillingRecordsInput, HospitalUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutBillingRecordsInput
    connect?: HospitalWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutBillingInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutBillingInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumBillingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BillingStatus
  }

  export type PatientUpdateOneRequiredWithoutBillingRecordsNestedInput = {
    create?: XOR<PatientCreateWithoutBillingRecordsInput, PatientUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBillingRecordsInput
    upsert?: PatientUpsertWithoutBillingRecordsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutBillingRecordsInput, PatientUpdateWithoutBillingRecordsInput>, PatientUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type HospitalUpdateOneRequiredWithoutBillingRecordsNestedInput = {
    create?: XOR<HospitalCreateWithoutBillingRecordsInput, HospitalUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutBillingRecordsInput
    upsert?: HospitalUpsertWithoutBillingRecordsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutBillingRecordsInput, HospitalUpdateWithoutBillingRecordsInput>, HospitalUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type PaymentUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBillingInput | PaymentUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBillingInput | PaymentUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBillingInput | PaymentUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBillingInput | PaymentUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBillingInput | PaymentUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBillingInput | PaymentUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BillingCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<BillingCreateWithoutPaymentsInput, BillingUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BillingCreateOrConnectWithoutPaymentsInput
    connect?: BillingWhereUniqueInput
  }

  export type WalletTransactionCreateNestedOneWithoutPaymentInput = {
    create?: XOR<WalletTransactionCreateWithoutPaymentInput, WalletTransactionUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutPaymentInput
    connect?: WalletTransactionWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type BillingUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<BillingCreateWithoutPaymentsInput, BillingUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BillingCreateOrConnectWithoutPaymentsInput
    upsert?: BillingUpsertWithoutPaymentsInput
    connect?: BillingWhereUniqueInput
    update?: XOR<XOR<BillingUpdateToOneWithWhereWithoutPaymentsInput, BillingUpdateWithoutPaymentsInput>, BillingUncheckedUpdateWithoutPaymentsInput>
  }

  export type WalletTransactionUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutPaymentInput, WalletTransactionUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutPaymentInput
    upsert?: WalletTransactionUpsertWithoutPaymentInput
    disconnect?: WalletTransactionWhereInput | boolean
    delete?: WalletTransactionWhereInput | boolean
    connect?: WalletTransactionWhereUniqueInput
    update?: XOR<XOR<WalletTransactionUpdateToOneWithWhereWithoutPaymentInput, WalletTransactionUpdateWithoutPaymentInput>, WalletTransactionUncheckedUpdateWithoutPaymentInput>
  }

  export type PatientCreateNestedOneWithoutConversationsInput = {
    create?: XOR<PatientCreateWithoutConversationsInput, PatientUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutConversationsInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutConversationsInput = {
    create?: XOR<HospitalCreateWithoutConversationsInput, HospitalUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutConversationsInput
    connect?: HospitalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutConversationsInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    connect?: UserWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type EnumConversationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ConversationStatus
  }

  export type PatientUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<PatientCreateWithoutConversationsInput, PatientUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutConversationsInput
    upsert?: PatientUpsertWithoutConversationsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutConversationsInput, PatientUpdateWithoutConversationsInput>, PatientUncheckedUpdateWithoutConversationsInput>
  }

  export type HospitalUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<HospitalCreateWithoutConversationsInput, HospitalUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutConversationsInput
    upsert?: HospitalUpsertWithoutConversationsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutConversationsInput, HospitalUpdateWithoutConversationsInput>, HospitalUncheckedUpdateWithoutConversationsInput>
  }

  export type UserUpdateOneWithoutConversationsNestedInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    upsert?: UserUpsertWithoutConversationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConversationsInput, UserUpdateWithoutConversationsInput>, UserUncheckedUpdateWithoutConversationsInput>
  }

  export type MessageUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput> | MessageCreateWithoutConversationInput[] | MessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutConversationInput | MessageCreateOrConnectWithoutConversationInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutConversationInput | MessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: MessageCreateManyConversationInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutConversationInput | MessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutConversationInput | MessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesSentInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMessageStatusFieldUpdateOperationsInput = {
    set?: $Enums.MessageStatus
  }

  export type ConversationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    upsert?: ConversationUpsertWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<XOR<ConversationUpdateToOneWithWhereWithoutMessagesInput, ConversationUpdateWithoutMessagesInput>, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesSentNestedInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    upsert?: UserUpsertWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesSentInput, UserUpdateWithoutMessagesSentInput>, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type BirthRecordCreatecomplicationsInput = {
    set: string[]
  }

  export type PatientCreateNestedOneWithoutBirthRecordInput = {
    create?: XOR<PatientCreateWithoutBirthRecordInput, PatientUncheckedCreateWithoutBirthRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBirthRecordInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutMotherOfBirthsInput = {
    create?: XOR<PatientCreateWithoutMotherOfBirthsInput, PatientUncheckedCreateWithoutMotherOfBirthsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMotherOfBirthsInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutFatherOfBirthsInput = {
    create?: XOR<PatientCreateWithoutFatherOfBirthsInput, PatientUncheckedCreateWithoutFatherOfBirthsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutFatherOfBirthsInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutBirthRecordsInput = {
    create?: XOR<HospitalCreateWithoutBirthRecordsInput, HospitalUncheckedCreateWithoutBirthRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutBirthRecordsInput
    connect?: HospitalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBirthRecordsRegisteredInput = {
    create?: XOR<UserCreateWithoutBirthRecordsRegisteredInput, UserUncheckedCreateWithoutBirthRecordsRegisteredInput>
    connectOrCreate?: UserCreateOrConnectWithoutBirthRecordsRegisteredInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumDeliveryMethodFieldUpdateOperationsInput = {
    set?: $Enums.DeliveryMethod
  }

  export type BirthRecordUpdatecomplicationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PatientUpdateOneRequiredWithoutBirthRecordNestedInput = {
    create?: XOR<PatientCreateWithoutBirthRecordInput, PatientUncheckedCreateWithoutBirthRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutBirthRecordInput
    upsert?: PatientUpsertWithoutBirthRecordInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutBirthRecordInput, PatientUpdateWithoutBirthRecordInput>, PatientUncheckedUpdateWithoutBirthRecordInput>
  }

  export type PatientUpdateOneWithoutMotherOfBirthsNestedInput = {
    create?: XOR<PatientCreateWithoutMotherOfBirthsInput, PatientUncheckedCreateWithoutMotherOfBirthsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMotherOfBirthsInput
    upsert?: PatientUpsertWithoutMotherOfBirthsInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMotherOfBirthsInput, PatientUpdateWithoutMotherOfBirthsInput>, PatientUncheckedUpdateWithoutMotherOfBirthsInput>
  }

  export type PatientUpdateOneWithoutFatherOfBirthsNestedInput = {
    create?: XOR<PatientCreateWithoutFatherOfBirthsInput, PatientUncheckedCreateWithoutFatherOfBirthsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutFatherOfBirthsInput
    upsert?: PatientUpsertWithoutFatherOfBirthsInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutFatherOfBirthsInput, PatientUpdateWithoutFatherOfBirthsInput>, PatientUncheckedUpdateWithoutFatherOfBirthsInput>
  }

  export type HospitalUpdateOneRequiredWithoutBirthRecordsNestedInput = {
    create?: XOR<HospitalCreateWithoutBirthRecordsInput, HospitalUncheckedCreateWithoutBirthRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutBirthRecordsInput
    upsert?: HospitalUpsertWithoutBirthRecordsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutBirthRecordsInput, HospitalUpdateWithoutBirthRecordsInput>, HospitalUncheckedUpdateWithoutBirthRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutBirthRecordsRegisteredNestedInput = {
    create?: XOR<UserCreateWithoutBirthRecordsRegisteredInput, UserUncheckedCreateWithoutBirthRecordsRegisteredInput>
    connectOrCreate?: UserCreateOrConnectWithoutBirthRecordsRegisteredInput
    upsert?: UserUpsertWithoutBirthRecordsRegisteredInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBirthRecordsRegisteredInput, UserUpdateWithoutBirthRecordsRegisteredInput>, UserUncheckedUpdateWithoutBirthRecordsRegisteredInput>
  }

  export type PatientCreateNestedOneWithoutDeathRecordInput = {
    create?: XOR<PatientCreateWithoutDeathRecordInput, PatientUncheckedCreateWithoutDeathRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDeathRecordInput
    connect?: PatientWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutDeathRecordsInput = {
    create?: XOR<HospitalCreateWithoutDeathRecordsInput, HospitalUncheckedCreateWithoutDeathRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDeathRecordsInput
    connect?: HospitalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDeathRecordsRegisteredInput = {
    create?: XOR<UserCreateWithoutDeathRecordsRegisteredInput, UserUncheckedCreateWithoutDeathRecordsRegisteredInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeathRecordsRegisteredInput
    connect?: UserWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutDeathRecordNestedInput = {
    create?: XOR<PatientCreateWithoutDeathRecordInput, PatientUncheckedCreateWithoutDeathRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDeathRecordInput
    upsert?: PatientUpsertWithoutDeathRecordInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutDeathRecordInput, PatientUpdateWithoutDeathRecordInput>, PatientUncheckedUpdateWithoutDeathRecordInput>
  }

  export type HospitalUpdateOneRequiredWithoutDeathRecordsNestedInput = {
    create?: XOR<HospitalCreateWithoutDeathRecordsInput, HospitalUncheckedCreateWithoutDeathRecordsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutDeathRecordsInput
    upsert?: HospitalUpsertWithoutDeathRecordsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutDeathRecordsInput, HospitalUpdateWithoutDeathRecordsInput>, HospitalUncheckedUpdateWithoutDeathRecordsInput>
  }

  export type UserUpdateOneRequiredWithoutDeathRecordsRegisteredNestedInput = {
    create?: XOR<UserCreateWithoutDeathRecordsRegisteredInput, UserUncheckedCreateWithoutDeathRecordsRegisteredInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeathRecordsRegisteredInput
    upsert?: UserUpsertWithoutDeathRecordsRegisteredInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDeathRecordsRegisteredInput, UserUpdateWithoutDeathRecordsRegisteredInput>, UserUncheckedUpdateWithoutDeathRecordsRegisteredInput>
  }

  export type MarketplaceVendorCreatespecialtiesInput = {
    set: string[]
  }

  export type HospitalCreateNestedOneWithoutMarketplaceVendorsInput = {
    create?: XOR<HospitalCreateWithoutMarketplaceVendorsInput, HospitalUncheckedCreateWithoutMarketplaceVendorsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutMarketplaceVendorsInput
    connect?: HospitalWhereUniqueInput
  }

  export type MarketplaceProductCreateNestedManyWithoutVendorInput = {
    create?: XOR<MarketplaceProductCreateWithoutVendorInput, MarketplaceProductUncheckedCreateWithoutVendorInput> | MarketplaceProductCreateWithoutVendorInput[] | MarketplaceProductUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutVendorInput | MarketplaceProductCreateOrConnectWithoutVendorInput[]
    createMany?: MarketplaceProductCreateManyVendorInputEnvelope
    connect?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
  }

  export type SavedVendorCreateNestedManyWithoutVendorInput = {
    create?: XOR<SavedVendorCreateWithoutVendorInput, SavedVendorUncheckedCreateWithoutVendorInput> | SavedVendorCreateWithoutVendorInput[] | SavedVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutVendorInput | SavedVendorCreateOrConnectWithoutVendorInput[]
    createMany?: SavedVendorCreateManyVendorInputEnvelope
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
  }

  export type MarketplaceProductUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<MarketplaceProductCreateWithoutVendorInput, MarketplaceProductUncheckedCreateWithoutVendorInput> | MarketplaceProductCreateWithoutVendorInput[] | MarketplaceProductUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutVendorInput | MarketplaceProductCreateOrConnectWithoutVendorInput[]
    createMany?: MarketplaceProductCreateManyVendorInputEnvelope
    connect?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
  }

  export type SavedVendorUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<SavedVendorCreateWithoutVendorInput, SavedVendorUncheckedCreateWithoutVendorInput> | SavedVendorCreateWithoutVendorInput[] | SavedVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutVendorInput | SavedVendorCreateOrConnectWithoutVendorInput[]
    createMany?: SavedVendorCreateManyVendorInputEnvelope
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
  }

  export type MarketplaceVendorUpdatespecialtiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type HospitalUpdateOneRequiredWithoutMarketplaceVendorsNestedInput = {
    create?: XOR<HospitalCreateWithoutMarketplaceVendorsInput, HospitalUncheckedCreateWithoutMarketplaceVendorsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutMarketplaceVendorsInput
    upsert?: HospitalUpsertWithoutMarketplaceVendorsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutMarketplaceVendorsInput, HospitalUpdateWithoutMarketplaceVendorsInput>, HospitalUncheckedUpdateWithoutMarketplaceVendorsInput>
  }

  export type MarketplaceProductUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MarketplaceProductCreateWithoutVendorInput, MarketplaceProductUncheckedCreateWithoutVendorInput> | MarketplaceProductCreateWithoutVendorInput[] | MarketplaceProductUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutVendorInput | MarketplaceProductCreateOrConnectWithoutVendorInput[]
    upsert?: MarketplaceProductUpsertWithWhereUniqueWithoutVendorInput | MarketplaceProductUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MarketplaceProductCreateManyVendorInputEnvelope
    set?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    disconnect?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    delete?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    connect?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    update?: MarketplaceProductUpdateWithWhereUniqueWithoutVendorInput | MarketplaceProductUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MarketplaceProductUpdateManyWithWhereWithoutVendorInput | MarketplaceProductUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MarketplaceProductScalarWhereInput | MarketplaceProductScalarWhereInput[]
  }

  export type SavedVendorUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SavedVendorCreateWithoutVendorInput, SavedVendorUncheckedCreateWithoutVendorInput> | SavedVendorCreateWithoutVendorInput[] | SavedVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutVendorInput | SavedVendorCreateOrConnectWithoutVendorInput[]
    upsert?: SavedVendorUpsertWithWhereUniqueWithoutVendorInput | SavedVendorUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SavedVendorCreateManyVendorInputEnvelope
    set?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    disconnect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    delete?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    update?: SavedVendorUpdateWithWhereUniqueWithoutVendorInput | SavedVendorUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SavedVendorUpdateManyWithWhereWithoutVendorInput | SavedVendorUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SavedVendorScalarWhereInput | SavedVendorScalarWhereInput[]
  }

  export type MarketplaceProductUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<MarketplaceProductCreateWithoutVendorInput, MarketplaceProductUncheckedCreateWithoutVendorInput> | MarketplaceProductCreateWithoutVendorInput[] | MarketplaceProductUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutVendorInput | MarketplaceProductCreateOrConnectWithoutVendorInput[]
    upsert?: MarketplaceProductUpsertWithWhereUniqueWithoutVendorInput | MarketplaceProductUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: MarketplaceProductCreateManyVendorInputEnvelope
    set?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    disconnect?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    delete?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    connect?: MarketplaceProductWhereUniqueInput | MarketplaceProductWhereUniqueInput[]
    update?: MarketplaceProductUpdateWithWhereUniqueWithoutVendorInput | MarketplaceProductUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: MarketplaceProductUpdateManyWithWhereWithoutVendorInput | MarketplaceProductUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: MarketplaceProductScalarWhereInput | MarketplaceProductScalarWhereInput[]
  }

  export type SavedVendorUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<SavedVendorCreateWithoutVendorInput, SavedVendorUncheckedCreateWithoutVendorInput> | SavedVendorCreateWithoutVendorInput[] | SavedVendorUncheckedCreateWithoutVendorInput[]
    connectOrCreate?: SavedVendorCreateOrConnectWithoutVendorInput | SavedVendorCreateOrConnectWithoutVendorInput[]
    upsert?: SavedVendorUpsertWithWhereUniqueWithoutVendorInput | SavedVendorUpsertWithWhereUniqueWithoutVendorInput[]
    createMany?: SavedVendorCreateManyVendorInputEnvelope
    set?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    disconnect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    delete?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    connect?: SavedVendorWhereUniqueInput | SavedVendorWhereUniqueInput[]
    update?: SavedVendorUpdateWithWhereUniqueWithoutVendorInput | SavedVendorUpdateWithWhereUniqueWithoutVendorInput[]
    updateMany?: SavedVendorUpdateManyWithWhereWithoutVendorInput | SavedVendorUpdateManyWithWhereWithoutVendorInput[]
    deleteMany?: SavedVendorScalarWhereInput | SavedVendorScalarWhereInput[]
  }

  export type MarketplaceProductCreatetagsInput = {
    set: string[]
  }

  export type MarketplaceVendorCreateNestedOneWithoutProductsInput = {
    create?: XOR<MarketplaceVendorCreateWithoutProductsInput, MarketplaceVendorUncheckedCreateWithoutProductsInput>
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutProductsInput
    connect?: MarketplaceVendorWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type MarketplaceProductUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type MarketplaceVendorUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<MarketplaceVendorCreateWithoutProductsInput, MarketplaceVendorUncheckedCreateWithoutProductsInput>
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutProductsInput
    upsert?: MarketplaceVendorUpsertWithoutProductsInput
    connect?: MarketplaceVendorWhereUniqueInput
    update?: XOR<XOR<MarketplaceVendorUpdateToOneWithWhereWithoutProductsInput, MarketplaceVendorUpdateWithoutProductsInput>, MarketplaceVendorUncheckedUpdateWithoutProductsInput>
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutMarketplaceOrdersInput = {
    create?: XOR<PatientCreateWithoutMarketplaceOrdersInput, PatientUncheckedCreateWithoutMarketplaceOrdersInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMarketplaceOrdersInput
    connect?: PatientWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type PatientUpdateOneRequiredWithoutMarketplaceOrdersNestedInput = {
    create?: XOR<PatientCreateWithoutMarketplaceOrdersInput, PatientUncheckedCreateWithoutMarketplaceOrdersInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMarketplaceOrdersInput
    upsert?: PatientUpsertWithoutMarketplaceOrdersInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMarketplaceOrdersInput, PatientUpdateWithoutMarketplaceOrdersInput>, PatientUncheckedUpdateWithoutMarketplaceOrdersInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type MarketplaceOrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<MarketplaceOrderCreateWithoutItemsInput, MarketplaceOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MarketplaceOrderCreateOrConnectWithoutItemsInput
    connect?: MarketplaceOrderWhereUniqueInput
  }

  export type MarketplaceProductCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<MarketplaceProductCreateWithoutOrderItemsInput, MarketplaceProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutOrderItemsInput
    connect?: MarketplaceProductWhereUniqueInput
  }

  export type PrescriptionCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<PrescriptionCreateWithoutOrderItemsInput, PrescriptionUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: PrescriptionCreateOrConnectWithoutOrderItemsInput
    connect?: PrescriptionWhereUniqueInput
  }

  export type MarketplaceOrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<MarketplaceOrderCreateWithoutItemsInput, MarketplaceOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MarketplaceOrderCreateOrConnectWithoutItemsInput
    upsert?: MarketplaceOrderUpsertWithoutItemsInput
    connect?: MarketplaceOrderWhereUniqueInput
    update?: XOR<XOR<MarketplaceOrderUpdateToOneWithWhereWithoutItemsInput, MarketplaceOrderUpdateWithoutItemsInput>, MarketplaceOrderUncheckedUpdateWithoutItemsInput>
  }

  export type MarketplaceProductUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<MarketplaceProductCreateWithoutOrderItemsInput, MarketplaceProductUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutOrderItemsInput
    upsert?: MarketplaceProductUpsertWithoutOrderItemsInput
    connect?: MarketplaceProductWhereUniqueInput
    update?: XOR<XOR<MarketplaceProductUpdateToOneWithWhereWithoutOrderItemsInput, MarketplaceProductUpdateWithoutOrderItemsInput>, MarketplaceProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type PrescriptionUpdateOneWithoutOrderItemsNestedInput = {
    create?: XOR<PrescriptionCreateWithoutOrderItemsInput, PrescriptionUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: PrescriptionCreateOrConnectWithoutOrderItemsInput
    upsert?: PrescriptionUpsertWithoutOrderItemsInput
    disconnect?: PrescriptionWhereInput | boolean
    delete?: PrescriptionWhereInput | boolean
    connect?: PrescriptionWhereUniqueInput
    update?: XOR<XOR<PrescriptionUpdateToOneWithWhereWithoutOrderItemsInput, PrescriptionUpdateWithoutOrderItemsInput>, PrescriptionUncheckedUpdateWithoutOrderItemsInput>
  }

  export type PatientCreateNestedOneWithoutCartItemsInput = {
    create?: XOR<PatientCreateWithoutCartItemsInput, PatientUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCartItemsInput
    connect?: PatientWhereUniqueInput
  }

  export type MarketplaceProductCreateNestedOneWithoutCartItemsInput = {
    create?: XOR<MarketplaceProductCreateWithoutCartItemsInput, MarketplaceProductUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutCartItemsInput
    connect?: MarketplaceProductWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutCartItemsNestedInput = {
    create?: XOR<PatientCreateWithoutCartItemsInput, PatientUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutCartItemsInput
    upsert?: PatientUpsertWithoutCartItemsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutCartItemsInput, PatientUpdateWithoutCartItemsInput>, PatientUncheckedUpdateWithoutCartItemsInput>
  }

  export type MarketplaceProductUpdateOneRequiredWithoutCartItemsNestedInput = {
    create?: XOR<MarketplaceProductCreateWithoutCartItemsInput, MarketplaceProductUncheckedCreateWithoutCartItemsInput>
    connectOrCreate?: MarketplaceProductCreateOrConnectWithoutCartItemsInput
    upsert?: MarketplaceProductUpsertWithoutCartItemsInput
    connect?: MarketplaceProductWhereUniqueInput
    update?: XOR<XOR<MarketplaceProductUpdateToOneWithWhereWithoutCartItemsInput, MarketplaceProductUpdateWithoutCartItemsInput>, MarketplaceProductUncheckedUpdateWithoutCartItemsInput>
  }

  export type PatientCreateNestedOneWithoutSavedVendorsInput = {
    create?: XOR<PatientCreateWithoutSavedVendorsInput, PatientUncheckedCreateWithoutSavedVendorsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutSavedVendorsInput
    connect?: PatientWhereUniqueInput
  }

  export type MarketplaceVendorCreateNestedOneWithoutSavedByInput = {
    create?: XOR<MarketplaceVendorCreateWithoutSavedByInput, MarketplaceVendorUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutSavedByInput
    connect?: MarketplaceVendorWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutSavedVendorsNestedInput = {
    create?: XOR<PatientCreateWithoutSavedVendorsInput, PatientUncheckedCreateWithoutSavedVendorsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutSavedVendorsInput
    upsert?: PatientUpsertWithoutSavedVendorsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutSavedVendorsInput, PatientUpdateWithoutSavedVendorsInput>, PatientUncheckedUpdateWithoutSavedVendorsInput>
  }

  export type MarketplaceVendorUpdateOneRequiredWithoutSavedByNestedInput = {
    create?: XOR<MarketplaceVendorCreateWithoutSavedByInput, MarketplaceVendorUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: MarketplaceVendorCreateOrConnectWithoutSavedByInput
    upsert?: MarketplaceVendorUpsertWithoutSavedByInput
    connect?: MarketplaceVendorWhereUniqueInput
    update?: XOR<XOR<MarketplaceVendorUpdateToOneWithWhereWithoutSavedByInput, MarketplaceVendorUpdateWithoutSavedByInput>, MarketplaceVendorUncheckedUpdateWithoutSavedByInput>
  }

  export type PatientCreateNestedOneWithoutPrescriptionInput = {
    create?: XOR<PatientCreateWithoutPrescriptionInput, PatientUncheckedCreateWithoutPrescriptionInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPrescriptionInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPrescriptionsInput = {
    create?: XOR<UserCreateWithoutPrescriptionsInput, UserUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrescriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type HospitalCreateNestedOneWithoutPrescriptionsInput = {
    create?: XOR<HospitalCreateWithoutPrescriptionsInput, HospitalUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPrescriptionsInput
    connect?: HospitalWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutPrescriptionInput = {
    create?: XOR<OrderItemCreateWithoutPrescriptionInput, OrderItemUncheckedCreateWithoutPrescriptionInput> | OrderItemCreateWithoutPrescriptionInput[] | OrderItemUncheckedCreateWithoutPrescriptionInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutPrescriptionInput | OrderItemCreateOrConnectWithoutPrescriptionInput[]
    createMany?: OrderItemCreateManyPrescriptionInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutPrescriptionInput = {
    create?: XOR<OrderItemCreateWithoutPrescriptionInput, OrderItemUncheckedCreateWithoutPrescriptionInput> | OrderItemCreateWithoutPrescriptionInput[] | OrderItemUncheckedCreateWithoutPrescriptionInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutPrescriptionInput | OrderItemCreateOrConnectWithoutPrescriptionInput[]
    createMany?: OrderItemCreateManyPrescriptionInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type PatientUpdateOneRequiredWithoutPrescriptionNestedInput = {
    create?: XOR<PatientCreateWithoutPrescriptionInput, PatientUncheckedCreateWithoutPrescriptionInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPrescriptionInput
    upsert?: PatientUpsertWithoutPrescriptionInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPrescriptionInput, PatientUpdateWithoutPrescriptionInput>, PatientUncheckedUpdateWithoutPrescriptionInput>
  }

  export type UserUpdateOneRequiredWithoutPrescriptionsNestedInput = {
    create?: XOR<UserCreateWithoutPrescriptionsInput, UserUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrescriptionsInput
    upsert?: UserUpsertWithoutPrescriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPrescriptionsInput, UserUpdateWithoutPrescriptionsInput>, UserUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type HospitalUpdateOneRequiredWithoutPrescriptionsNestedInput = {
    create?: XOR<HospitalCreateWithoutPrescriptionsInput, HospitalUncheckedCreateWithoutPrescriptionsInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPrescriptionsInput
    upsert?: HospitalUpsertWithoutPrescriptionsInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<XOR<HospitalUpdateToOneWithWhereWithoutPrescriptionsInput, HospitalUpdateWithoutPrescriptionsInput>, HospitalUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type OrderItemUpdateManyWithoutPrescriptionNestedInput = {
    create?: XOR<OrderItemCreateWithoutPrescriptionInput, OrderItemUncheckedCreateWithoutPrescriptionInput> | OrderItemCreateWithoutPrescriptionInput[] | OrderItemUncheckedCreateWithoutPrescriptionInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutPrescriptionInput | OrderItemCreateOrConnectWithoutPrescriptionInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutPrescriptionInput | OrderItemUpsertWithWhereUniqueWithoutPrescriptionInput[]
    createMany?: OrderItemCreateManyPrescriptionInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutPrescriptionInput | OrderItemUpdateWithWhereUniqueWithoutPrescriptionInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutPrescriptionInput | OrderItemUpdateManyWithWhereWithoutPrescriptionInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutPrescriptionNestedInput = {
    create?: XOR<OrderItemCreateWithoutPrescriptionInput, OrderItemUncheckedCreateWithoutPrescriptionInput> | OrderItemCreateWithoutPrescriptionInput[] | OrderItemUncheckedCreateWithoutPrescriptionInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutPrescriptionInput | OrderItemCreateOrConnectWithoutPrescriptionInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutPrescriptionInput | OrderItemUpsertWithWhereUniqueWithoutPrescriptionInput[]
    createMany?: OrderItemCreateManyPrescriptionInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutPrescriptionInput | OrderItemUpdateWithWhereUniqueWithoutPrescriptionInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutPrescriptionInput | OrderItemUpdateManyWithWhereWithoutPrescriptionInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type NestedEnumAntenatalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AntenatalStatus | EnumAntenatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAntenatalStatusFilter<$PrismaModel> | $Enums.AntenatalStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type NestedEnumAntenatalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AntenatalStatus | EnumAntenatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AntenatalStatus[] | ListEnumAntenatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAntenatalStatusWithAggregatesFilter<$PrismaModel> | $Enums.AntenatalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAntenatalStatusFilter<$PrismaModel>
    _max?: NestedEnumAntenatalStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumCareLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.CareLevel | EnumCareLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCareLevelFilter<$PrismaModel> | $Enums.CareLevel
  }

  export type NestedEnumNeonatalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NeonatalStatus | EnumNeonatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNeonatalStatusFilter<$PrismaModel> | $Enums.NeonatalStatus
  }

  export type NestedEnumDischargeStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DischargeStatus | EnumDischargeStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDischargeStatusNullableFilter<$PrismaModel> | $Enums.DischargeStatus | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumCareLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CareLevel | EnumCareLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CareLevel[] | ListEnumCareLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCareLevelWithAggregatesFilter<$PrismaModel> | $Enums.CareLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCareLevelFilter<$PrismaModel>
    _max?: NestedEnumCareLevelFilter<$PrismaModel>
  }

  export type NestedEnumNeonatalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NeonatalStatus | EnumNeonatalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NeonatalStatus[] | ListEnumNeonatalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNeonatalStatusWithAggregatesFilter<$PrismaModel> | $Enums.NeonatalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNeonatalStatusFilter<$PrismaModel>
    _max?: NestedEnumNeonatalStatusFilter<$PrismaModel>
  }

  export type NestedEnumDischargeStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DischargeStatus | EnumDischargeStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DischargeStatus[] | ListEnumDischargeStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDischargeStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.DischargeStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDischargeStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumDischargeStatusNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedEnumEmploymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusFilter<$PrismaModel> | $Enums.EmploymentStatus
  }

  export type NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentStatus | EnumEmploymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentStatus[] | ListEnumEmploymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentStatusFilter<$PrismaModel>
    _max?: NestedEnumEmploymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumAccessLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelFilter<$PrismaModel> | $Enums.AccessLevel
  }

  export type NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccessLevel | EnumAccessLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccessLevel[] | ListEnumAccessLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAccessLevelWithAggregatesFilter<$PrismaModel> | $Enums.AccessLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccessLevelFilter<$PrismaModel>
    _max?: NestedEnumAccessLevelFilter<$PrismaModel>
  }

  export type NestedEnumReferralPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralPriority | EnumReferralPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralPriorityFilter<$PrismaModel> | $Enums.ReferralPriority
  }

  export type NestedEnumReferralStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusFilter<$PrismaModel> | $Enums.ReferralStatus
  }

  export type NestedEnumReferralPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralPriority | EnumReferralPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralPriority[] | ListEnumReferralPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralPriorityWithAggregatesFilter<$PrismaModel> | $Enums.ReferralPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReferralPriorityFilter<$PrismaModel>
    _max?: NestedEnumReferralPriorityFilter<$PrismaModel>
  }

  export type NestedEnumReferralStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReferralStatus | EnumReferralStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReferralStatus[] | ListEnumReferralStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReferralStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReferralStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReferralStatusFilter<$PrismaModel>
    _max?: NestedEnumReferralStatusFilter<$PrismaModel>
  }

  export type NestedEnumAmbulanceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceType | EnumAmbulanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceTypeFilter<$PrismaModel> | $Enums.AmbulanceType
  }

  export type NestedEnumAmbulanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceStatus | EnumAmbulanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceStatusFilter<$PrismaModel> | $Enums.AmbulanceStatus
  }

  export type NestedEnumAmbulanceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceType | EnumAmbulanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceType[] | ListEnumAmbulanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceTypeWithAggregatesFilter<$PrismaModel> | $Enums.AmbulanceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAmbulanceTypeFilter<$PrismaModel>
    _max?: NestedEnumAmbulanceTypeFilter<$PrismaModel>
  }

  export type NestedEnumAmbulanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AmbulanceStatus | EnumAmbulanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AmbulanceStatus[] | ListEnumAmbulanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAmbulanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AmbulanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAmbulanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAmbulanceStatusFilter<$PrismaModel>
  }

  export type NestedEnumDispatchPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchPriority | EnumDispatchPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchPriorityFilter<$PrismaModel> | $Enums.DispatchPriority
  }

  export type NestedEnumDispatchStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchStatus | EnumDispatchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchStatusFilter<$PrismaModel> | $Enums.DispatchStatus
  }

  export type NestedEnumDispatchPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchPriority | EnumDispatchPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchPriority[] | ListEnumDispatchPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchPriorityWithAggregatesFilter<$PrismaModel> | $Enums.DispatchPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDispatchPriorityFilter<$PrismaModel>
    _max?: NestedEnumDispatchPriorityFilter<$PrismaModel>
  }

  export type NestedEnumDispatchStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DispatchStatus | EnumDispatchStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DispatchStatus[] | ListEnumDispatchStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDispatchStatusWithAggregatesFilter<$PrismaModel> | $Enums.DispatchStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDispatchStatusFilter<$PrismaModel>
    _max?: NestedEnumDispatchStatusFilter<$PrismaModel>
  }

  export type NestedEnumWalletStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WalletStatus | EnumWalletStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWalletStatusFilter<$PrismaModel> | $Enums.WalletStatus
  }

  export type NestedEnumWalletStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WalletStatus | EnumWalletStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WalletStatus[] | ListEnumWalletStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWalletStatusWithAggregatesFilter<$PrismaModel> | $Enums.WalletStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWalletStatusFilter<$PrismaModel>
    _max?: NestedEnumWalletStatusFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type NestedEnumBillingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusFilter<$PrismaModel> | $Enums.BillingStatus
  }

  export type NestedEnumBillingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingStatus | EnumBillingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingStatus[] | ListEnumBillingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BillingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingStatusFilter<$PrismaModel>
    _max?: NestedEnumBillingStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumConversationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationStatus | EnumConversationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationStatusFilter<$PrismaModel> | $Enums.ConversationStatus
  }

  export type NestedEnumConversationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConversationStatus | EnumConversationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConversationStatus[] | ListEnumConversationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConversationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ConversationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConversationStatusFilter<$PrismaModel>
    _max?: NestedEnumConversationStatusFilter<$PrismaModel>
  }

  export type NestedEnumMessageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageStatus | EnumMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageStatusFilter<$PrismaModel> | $Enums.MessageStatus
  }

  export type NestedEnumMessageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageStatus | EnumMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageStatus[] | ListEnumMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageStatusWithAggregatesFilter<$PrismaModel> | $Enums.MessageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageStatusFilter<$PrismaModel>
    _max?: NestedEnumMessageStatusFilter<$PrismaModel>
  }

  export type NestedEnumDeliveryMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryMethod | EnumDeliveryMethodFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryMethodFilter<$PrismaModel> | $Enums.DeliveryMethod
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumDeliveryMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeliveryMethod | EnumDeliveryMethodFieldRefInput<$PrismaModel>
    in?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeliveryMethod[] | ListEnumDeliveryMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumDeliveryMethodWithAggregatesFilter<$PrismaModel> | $Enums.DeliveryMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeliveryMethodFilter<$PrismaModel>
    _max?: NestedEnumDeliveryMethodFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type UserCreateWithoutAntenatalRecords_createdInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAntenatalRecords_createdInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAntenatalRecords_createdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAntenatalRecords_createdInput, UserUncheckedCreateWithoutAntenatalRecords_createdInput>
  }

  export type HospitalCreateWithoutAntenatalRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutAntenatalRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutAntenatalRecordsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutAntenatalRecordsInput, HospitalUncheckedCreateWithoutAntenatalRecordsInput>
  }

  export type PatientCreateWithoutAntenatalRecordsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAntenatalRecordsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAntenatalRecordsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAntenatalRecordsInput, PatientUncheckedCreateWithoutAntenatalRecordsInput>
  }

  export type UserCreateWithoutAntenatalRecords_updatedInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAntenatalRecords_updatedInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAntenatalRecords_updatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAntenatalRecords_updatedInput, UserUncheckedCreateWithoutAntenatalRecords_updatedInput>
  }

  export type UserUpsertWithoutAntenatalRecords_createdInput = {
    update: XOR<UserUpdateWithoutAntenatalRecords_createdInput, UserUncheckedUpdateWithoutAntenatalRecords_createdInput>
    create: XOR<UserCreateWithoutAntenatalRecords_createdInput, UserUncheckedCreateWithoutAntenatalRecords_createdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAntenatalRecords_createdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAntenatalRecords_createdInput, UserUncheckedUpdateWithoutAntenatalRecords_createdInput>
  }

  export type UserUpdateWithoutAntenatalRecords_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAntenatalRecords_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalUpsertWithoutAntenatalRecordsInput = {
    update: XOR<HospitalUpdateWithoutAntenatalRecordsInput, HospitalUncheckedUpdateWithoutAntenatalRecordsInput>
    create: XOR<HospitalCreateWithoutAntenatalRecordsInput, HospitalUncheckedCreateWithoutAntenatalRecordsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutAntenatalRecordsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutAntenatalRecordsInput, HospitalUncheckedUpdateWithoutAntenatalRecordsInput>
  }

  export type HospitalUpdateWithoutAntenatalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutAntenatalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type PatientUpsertWithoutAntenatalRecordsInput = {
    update: XOR<PatientUpdateWithoutAntenatalRecordsInput, PatientUncheckedUpdateWithoutAntenatalRecordsInput>
    create: XOR<PatientCreateWithoutAntenatalRecordsInput, PatientUncheckedCreateWithoutAntenatalRecordsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAntenatalRecordsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAntenatalRecordsInput, PatientUncheckedUpdateWithoutAntenatalRecordsInput>
  }

  export type PatientUpdateWithoutAntenatalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAntenatalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutAntenatalRecords_updatedInput = {
    update: XOR<UserUpdateWithoutAntenatalRecords_updatedInput, UserUncheckedUpdateWithoutAntenatalRecords_updatedInput>
    create: XOR<UserCreateWithoutAntenatalRecords_updatedInput, UserUncheckedCreateWithoutAntenatalRecords_updatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAntenatalRecords_updatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAntenatalRecords_updatedInput, UserUncheckedUpdateWithoutAntenatalRecords_updatedInput>
  }

  export type UserUpdateWithoutAntenatalRecords_updatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAntenatalRecords_updatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAppointmentsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type PatientCreateWithoutAppointmentsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAppointmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type HospitalCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutAppointmentsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutAppointmentsInput, HospitalUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientUpsertWithoutAppointmentsInput = {
    update: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutAppointmentsInput = {
    update: XOR<HospitalUpdateWithoutAppointmentsInput, HospitalUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<HospitalCreateWithoutAppointmentsInput, HospitalUncheckedCreateWithoutAppointmentsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutAppointmentsInput, HospitalUncheckedUpdateWithoutAppointmentsInput>
  }

  export type HospitalUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type AntenatalRecordCreateWithoutHospitalInput = {
    id?: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_AntenatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_createdInput
    Patient: PatientCreateNestedOneWithoutAntenatalRecordsInput
    User_AntenatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_updatedInput
  }

  export type AntenatalRecordUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordCreateOrConnectWithoutHospitalInput = {
    where: AntenatalRecordWhereUniqueInput
    create: XOR<AntenatalRecordCreateWithoutHospitalInput, AntenatalRecordUncheckedCreateWithoutHospitalInput>
  }

  export type AntenatalRecordCreateManyHospitalInputEnvelope = {
    data: AntenatalRecordCreateManyHospitalInput | AntenatalRecordCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type NeonatalRecordCreateWithoutHospitalInput = {
    id?: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_NeonatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_createdInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientCreateNestedOneWithoutNeonatalRecords_AsMotherInput
    Patient_NeonatalRecord_patientIdToPatient: PatientCreateNestedOneWithoutNeonatalRecords_AsPatientInput
    User_NeonatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_updatedInput
  }

  export type NeonatalRecordUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateOrConnectWithoutHospitalInput = {
    where: NeonatalRecordWhereUniqueInput
    create: XOR<NeonatalRecordCreateWithoutHospitalInput, NeonatalRecordUncheckedCreateWithoutHospitalInput>
  }

  export type NeonatalRecordCreateManyHospitalInputEnvelope = {
    data: NeonatalRecordCreateManyHospitalInput | NeonatalRecordCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutHospitalInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHospitalInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHospitalInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHospitalInput, UserUncheckedCreateWithoutHospitalInput>
  }

  export type UserCreateManyHospitalInputEnvelope = {
    data: UserCreateManyHospitalInput | UserCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutHospitalInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    members?: DepartmentMembershipCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutHospitalInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    members?: DepartmentMembershipUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutHospitalInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutHospitalInput, DepartmentUncheckedCreateWithoutHospitalInput>
  }

  export type DepartmentCreateManyHospitalInputEnvelope = {
    data: DepartmentCreateManyHospitalInput | DepartmentCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type StaffProfileCreateWithoutHospitalInput = {
    id?: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutStaffProfileInput
  }

  export type StaffProfileUncheckedCreateWithoutHospitalInput = {
    id?: string
    userId: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffProfileCreateOrConnectWithoutHospitalInput = {
    where: StaffProfileWhereUniqueInput
    create: XOR<StaffProfileCreateWithoutHospitalInput, StaffProfileUncheckedCreateWithoutHospitalInput>
  }

  export type StaffProfileCreateManyHospitalInputEnvelope = {
    data: StaffProfileCreateManyHospitalInput | StaffProfileCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type PatientHospitalAccessCreateWithoutHospitalInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutHospitalAccessesInput
    granter: UserCreateNestedOneWithoutPatientAccess_grantedByInput
  }

  export type PatientHospitalAccessUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    grantedBy: string
    expiresAt?: Date | string | null
  }

  export type PatientHospitalAccessCreateOrConnectWithoutHospitalInput = {
    where: PatientHospitalAccessWhereUniqueInput
    create: XOR<PatientHospitalAccessCreateWithoutHospitalInput, PatientHospitalAccessUncheckedCreateWithoutHospitalInput>
  }

  export type PatientHospitalAccessCreateManyHospitalInputEnvelope = {
    data: PatientHospitalAccessCreateManyHospitalInput | PatientHospitalAccessCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutHospitalInput = {
    id?: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutAppointmentsInput
    Patient: PatientCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    doctorId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AppointmentCreateOrConnectWithoutHospitalInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutHospitalInput, AppointmentUncheckedCreateWithoutHospitalInput>
  }

  export type AppointmentCreateManyHospitalInputEnvelope = {
    data: AppointmentCreateManyHospitalInput | AppointmentCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type DoctorAvailabilityCreateWithoutHospitalInput = {
    id?: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
    doctor: UserCreateNestedOneWithoutAvailabilityInput
  }

  export type DoctorAvailabilityUncheckedCreateWithoutHospitalInput = {
    id?: string
    doctorId: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
  }

  export type DoctorAvailabilityCreateOrConnectWithoutHospitalInput = {
    where: DoctorAvailabilityWhereUniqueInput
    create: XOR<DoctorAvailabilityCreateWithoutHospitalInput, DoctorAvailabilityUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorAvailabilityCreateManyHospitalInputEnvelope = {
    data: DoctorAvailabilityCreateManyHospitalInput | DoctorAvailabilityCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutHospitalInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutHospitalInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutHospitalInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput>
  }

  export type PatientCreateManyHospitalInputEnvelope = {
    data: PatientCreateManyHospitalInput | PatientCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutHospitalInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutMedicalRecordsInput
    Patient: PatientCreateNestedOneWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    doctorId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type MedicalRecordCreateOrConnectWithoutHospitalInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutHospitalInput, MedicalRecordUncheckedCreateWithoutHospitalInput>
  }

  export type MedicalRecordCreateManyHospitalInputEnvelope = {
    data: MedicalRecordCreateManyHospitalInput | MedicalRecordCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCreateWithoutFromHospitalInput = {
    id?: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutReferralsReceivedInput
    toHospital: HospitalCreateNestedOneWithoutReferralsToInput
    referringDoctor: UserCreateNestedOneWithoutReferralsSentInput
    receivingDoctor?: UserCreateNestedOneWithoutReferralsReceivedInput
  }

  export type ReferralUncheckedCreateWithoutFromHospitalInput = {
    id?: string
    patientId: string
    toHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralCreateOrConnectWithoutFromHospitalInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutFromHospitalInput, ReferralUncheckedCreateWithoutFromHospitalInput>
  }

  export type ReferralCreateManyFromHospitalInputEnvelope = {
    data: ReferralCreateManyFromHospitalInput | ReferralCreateManyFromHospitalInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCreateWithoutToHospitalInput = {
    id?: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutReferralsReceivedInput
    fromHospital: HospitalCreateNestedOneWithoutReferralsFromInput
    referringDoctor: UserCreateNestedOneWithoutReferralsSentInput
    receivingDoctor?: UserCreateNestedOneWithoutReferralsReceivedInput
  }

  export type ReferralUncheckedCreateWithoutToHospitalInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralCreateOrConnectWithoutToHospitalInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutToHospitalInput, ReferralUncheckedCreateWithoutToHospitalInput>
  }

  export type ReferralCreateManyToHospitalInputEnvelope = {
    data: ReferralCreateManyToHospitalInput | ReferralCreateManyToHospitalInput[]
    skipDuplicates?: boolean
  }

  export type AmbulanceCreateWithoutHospitalInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
    dispatches?: AmbulanceDispatchCreateNestedManyWithoutAmbulanceInput
  }

  export type AmbulanceUncheckedCreateWithoutHospitalInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
    dispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutAmbulanceInput
  }

  export type AmbulanceCreateOrConnectWithoutHospitalInput = {
    where: AmbulanceWhereUniqueInput
    create: XOR<AmbulanceCreateWithoutHospitalInput, AmbulanceUncheckedCreateWithoutHospitalInput>
  }

  export type AmbulanceCreateManyHospitalInputEnvelope = {
    data: AmbulanceCreateManyHospitalInput | AmbulanceCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type AmbulanceDispatchCreateWithoutHospitalInput = {
    id?: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ambulance: AmbulanceCreateNestedOneWithoutDispatchesInput
    patient: PatientCreateNestedOneWithoutAmbulanceDispatchesInput
  }

  export type AmbulanceDispatchUncheckedCreateWithoutHospitalInput = {
    id?: string
    ambulanceId: string
    patientId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceDispatchCreateOrConnectWithoutHospitalInput = {
    where: AmbulanceDispatchWhereUniqueInput
    create: XOR<AmbulanceDispatchCreateWithoutHospitalInput, AmbulanceDispatchUncheckedCreateWithoutHospitalInput>
  }

  export type AmbulanceDispatchCreateManyHospitalInputEnvelope = {
    data: AmbulanceDispatchCreateManyHospitalInput | AmbulanceDispatchCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type AmbulanceRequestCreateWithoutHospitalInput = {
    id?: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAmbulanceRequestsInput
  }

  export type AmbulanceRequestUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceRequestCreateOrConnectWithoutHospitalInput = {
    where: AmbulanceRequestWhereUniqueInput
    create: XOR<AmbulanceRequestCreateWithoutHospitalInput, AmbulanceRequestUncheckedCreateWithoutHospitalInput>
  }

  export type AmbulanceRequestCreateManyHospitalInputEnvelope = {
    data: AmbulanceRequestCreateManyHospitalInput | AmbulanceRequestCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type BillingCreateWithoutHospitalInput = {
    id?: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutBillingRecordsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
  }

  export type BillingUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingCreateOrConnectWithoutHospitalInput = {
    where: BillingWhereUniqueInput
    create: XOR<BillingCreateWithoutHospitalInput, BillingUncheckedCreateWithoutHospitalInput>
  }

  export type BillingCreateManyHospitalInputEnvelope = {
    data: BillingCreateManyHospitalInput | BillingCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type ConversationCreateWithoutHospitalInput = {
    id?: string
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutConversationsInput
    doctor?: UserCreateNestedOneWithoutConversationsInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    doctorId?: string | null
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutHospitalInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutHospitalInput, ConversationUncheckedCreateWithoutHospitalInput>
  }

  export type ConversationCreateManyHospitalInputEnvelope = {
    data: ConversationCreateManyHospitalInput | ConversationCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type BirthRecordCreateWithoutHospitalInput = {
    id?: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutBirthRecordInput
    mother?: PatientCreateNestedOneWithoutMotherOfBirthsInput
    father?: PatientCreateNestedOneWithoutFatherOfBirthsInput
    attendingDoctor: UserCreateNestedOneWithoutBirthRecordsRegisteredInput
  }

  export type BirthRecordUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    motherId?: string | null
    fatherId?: string | null
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateOrConnectWithoutHospitalInput = {
    where: BirthRecordWhereUniqueInput
    create: XOR<BirthRecordCreateWithoutHospitalInput, BirthRecordUncheckedCreateWithoutHospitalInput>
  }

  export type BirthRecordCreateManyHospitalInputEnvelope = {
    data: BirthRecordCreateManyHospitalInput | BirthRecordCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type DeathRecordCreateWithoutHospitalInput = {
    id?: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutDeathRecordInput
    attendingDoctor: UserCreateNestedOneWithoutDeathRecordsRegisteredInput
  }

  export type DeathRecordUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    attendingDoctorId: string
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeathRecordCreateOrConnectWithoutHospitalInput = {
    where: DeathRecordWhereUniqueInput
    create: XOR<DeathRecordCreateWithoutHospitalInput, DeathRecordUncheckedCreateWithoutHospitalInput>
  }

  export type DeathRecordCreateManyHospitalInputEnvelope = {
    data: DeathRecordCreateManyHospitalInput | DeathRecordCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type MarketplaceVendorCreateWithoutHospitalInput = {
    id?: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: MarketplaceProductCreateNestedManyWithoutVendorInput
    savedBy?: SavedVendorCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorUncheckedCreateWithoutHospitalInput = {
    id?: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: MarketplaceProductUncheckedCreateNestedManyWithoutVendorInput
    savedBy?: SavedVendorUncheckedCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorCreateOrConnectWithoutHospitalInput = {
    where: MarketplaceVendorWhereUniqueInput
    create: XOR<MarketplaceVendorCreateWithoutHospitalInput, MarketplaceVendorUncheckedCreateWithoutHospitalInput>
  }

  export type MarketplaceVendorCreateManyHospitalInputEnvelope = {
    data: MarketplaceVendorCreateManyHospitalInput | MarketplaceVendorCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type PrescriptionCreateWithoutHospitalInput = {
    id?: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPrescriptionInput
    doctor: UserCreateNestedOneWithoutPrescriptionsInput
    orderItems?: OrderItemCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionUncheckedCreateWithoutHospitalInput = {
    id?: string
    patientId: string
    doctorId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionCreateOrConnectWithoutHospitalInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutHospitalInput, PrescriptionUncheckedCreateWithoutHospitalInput>
  }

  export type PrescriptionCreateManyHospitalInputEnvelope = {
    data: PrescriptionCreateManyHospitalInput | PrescriptionCreateManyHospitalInput[]
    skipDuplicates?: boolean
  }

  export type AntenatalRecordUpsertWithWhereUniqueWithoutHospitalInput = {
    where: AntenatalRecordWhereUniqueInput
    update: XOR<AntenatalRecordUpdateWithoutHospitalInput, AntenatalRecordUncheckedUpdateWithoutHospitalInput>
    create: XOR<AntenatalRecordCreateWithoutHospitalInput, AntenatalRecordUncheckedCreateWithoutHospitalInput>
  }

  export type AntenatalRecordUpdateWithWhereUniqueWithoutHospitalInput = {
    where: AntenatalRecordWhereUniqueInput
    data: XOR<AntenatalRecordUpdateWithoutHospitalInput, AntenatalRecordUncheckedUpdateWithoutHospitalInput>
  }

  export type AntenatalRecordUpdateManyWithWhereWithoutHospitalInput = {
    where: AntenatalRecordScalarWhereInput
    data: XOR<AntenatalRecordUpdateManyMutationInput, AntenatalRecordUncheckedUpdateManyWithoutHospitalInput>
  }

  export type AntenatalRecordScalarWhereInput = {
    AND?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
    OR?: AntenatalRecordScalarWhereInput[]
    NOT?: AntenatalRecordScalarWhereInput | AntenatalRecordScalarWhereInput[]
    id?: StringFilter<"AntenatalRecord"> | string
    patientId?: StringFilter<"AntenatalRecord"> | string
    hospitalId?: StringFilter<"AntenatalRecord"> | string
    gestationalAge?: IntFilter<"AntenatalRecord"> | number
    nextAppointment?: DateTimeNullableFilter<"AntenatalRecord"> | Date | string | null
    riskLevel?: EnumRiskLevelFilter<"AntenatalRecord"> | $Enums.RiskLevel
    status?: EnumAntenatalStatusFilter<"AntenatalRecord"> | $Enums.AntenatalStatus
    trimester?: IntFilter<"AntenatalRecord"> | number
    lastVisitDate?: DateTimeNullableFilter<"AntenatalRecord"> | Date | string | null
    expectedDueDate?: DateTimeFilter<"AntenatalRecord"> | Date | string
    ultrasoundReports?: JsonNullableFilter<"AntenatalRecord">
    labResults?: JsonNullableFilter<"AntenatalRecord">
    createdAt?: DateTimeFilter<"AntenatalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"AntenatalRecord"> | Date | string
    createdByUserId?: StringFilter<"AntenatalRecord"> | string
    updatedByUserId?: StringFilter<"AntenatalRecord"> | string
    mrn?: StringNullableFilter<"AntenatalRecord"> | string | null
  }

  export type NeonatalRecordUpsertWithWhereUniqueWithoutHospitalInput = {
    where: NeonatalRecordWhereUniqueInput
    update: XOR<NeonatalRecordUpdateWithoutHospitalInput, NeonatalRecordUncheckedUpdateWithoutHospitalInput>
    create: XOR<NeonatalRecordCreateWithoutHospitalInput, NeonatalRecordUncheckedCreateWithoutHospitalInput>
  }

  export type NeonatalRecordUpdateWithWhereUniqueWithoutHospitalInput = {
    where: NeonatalRecordWhereUniqueInput
    data: XOR<NeonatalRecordUpdateWithoutHospitalInput, NeonatalRecordUncheckedUpdateWithoutHospitalInput>
  }

  export type NeonatalRecordUpdateManyWithWhereWithoutHospitalInput = {
    where: NeonatalRecordScalarWhereInput
    data: XOR<NeonatalRecordUpdateManyMutationInput, NeonatalRecordUncheckedUpdateManyWithoutHospitalInput>
  }

  export type NeonatalRecordScalarWhereInput = {
    AND?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
    OR?: NeonatalRecordScalarWhereInput[]
    NOT?: NeonatalRecordScalarWhereInput | NeonatalRecordScalarWhereInput[]
    id?: StringFilter<"NeonatalRecord"> | string
    patientId?: StringFilter<"NeonatalRecord"> | string
    hospitalId?: StringFilter<"NeonatalRecord"> | string
    birthWeight?: FloatFilter<"NeonatalRecord"> | number
    gestationalAgeAtBirth?: IntFilter<"NeonatalRecord"> | number
    careLevel?: EnumCareLevelFilter<"NeonatalRecord"> | $Enums.CareLevel
    status?: EnumNeonatalStatusFilter<"NeonatalRecord"> | $Enums.NeonatalStatus
    dischargeStatus?: EnumDischargeStatusNullableFilter<"NeonatalRecord"> | $Enums.DischargeStatus | null
    apgarScore?: IntNullableFilter<"NeonatalRecord"> | number | null
    motherId?: StringNullableFilter<"NeonatalRecord"> | string | null
    birthComplications?: StringNullableFilter<"NeonatalRecord"> | string | null
    feedingMethod?: StringNullableFilter<"NeonatalRecord"> | string | null
    createdAt?: DateTimeFilter<"NeonatalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"NeonatalRecord"> | Date | string
    createdByUserId?: StringFilter<"NeonatalRecord"> | string
    updatedByUserId?: StringFilter<"NeonatalRecord"> | string
    mrn?: StringNullableFilter<"NeonatalRecord"> | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutHospitalInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutHospitalInput, UserUncheckedUpdateWithoutHospitalInput>
    create: XOR<UserCreateWithoutHospitalInput, UserUncheckedCreateWithoutHospitalInput>
  }

  export type UserUpdateWithWhereUniqueWithoutHospitalInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutHospitalInput, UserUncheckedUpdateWithoutHospitalInput>
  }

  export type UserUpdateManyWithWhereWithoutHospitalInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutHospitalInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    phone?: StringNullableFilter<"User"> | string | null
    photo?: StringNullableFilter<"User"> | string | null
    isSuperAdmin?: BoolFilter<"User"> | boolean
    isHospitalAdmin?: BoolFilter<"User"> | boolean
    specialties?: StringNullableListFilter<"User">
    hospitalId?: StringNullableFilter<"User"> | string | null
  }

  export type DepartmentUpsertWithWhereUniqueWithoutHospitalInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutHospitalInput, DepartmentUncheckedUpdateWithoutHospitalInput>
    create: XOR<DepartmentCreateWithoutHospitalInput, DepartmentUncheckedCreateWithoutHospitalInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutHospitalInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutHospitalInput, DepartmentUncheckedUpdateWithoutHospitalInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutHospitalInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutHospitalInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    hospitalId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type StaffProfileUpsertWithWhereUniqueWithoutHospitalInput = {
    where: StaffProfileWhereUniqueInput
    update: XOR<StaffProfileUpdateWithoutHospitalInput, StaffProfileUncheckedUpdateWithoutHospitalInput>
    create: XOR<StaffProfileCreateWithoutHospitalInput, StaffProfileUncheckedCreateWithoutHospitalInput>
  }

  export type StaffProfileUpdateWithWhereUniqueWithoutHospitalInput = {
    where: StaffProfileWhereUniqueInput
    data: XOR<StaffProfileUpdateWithoutHospitalInput, StaffProfileUncheckedUpdateWithoutHospitalInput>
  }

  export type StaffProfileUpdateManyWithWhereWithoutHospitalInput = {
    where: StaffProfileScalarWhereInput
    data: XOR<StaffProfileUpdateManyMutationInput, StaffProfileUncheckedUpdateManyWithoutHospitalInput>
  }

  export type StaffProfileScalarWhereInput = {
    AND?: StaffProfileScalarWhereInput | StaffProfileScalarWhereInput[]
    OR?: StaffProfileScalarWhereInput[]
    NOT?: StaffProfileScalarWhereInput | StaffProfileScalarWhereInput[]
    id?: StringFilter<"StaffProfile"> | string
    userId?: StringFilter<"StaffProfile"> | string
    hospitalId?: StringFilter<"StaffProfile"> | string
    staffId?: StringFilter<"StaffProfile"> | string
    specialization?: StringNullableFilter<"StaffProfile"> | string | null
    qualifications?: JsonNullableFilter<"StaffProfile">
    joiningDate?: DateTimeFilter<"StaffProfile"> | Date | string
    employmentStatus?: EnumEmploymentStatusFilter<"StaffProfile"> | $Enums.EmploymentStatus
    contactInformation?: JsonNullableFilter<"StaffProfile">
  }

  export type PatientHospitalAccessUpsertWithWhereUniqueWithoutHospitalInput = {
    where: PatientHospitalAccessWhereUniqueInput
    update: XOR<PatientHospitalAccessUpdateWithoutHospitalInput, PatientHospitalAccessUncheckedUpdateWithoutHospitalInput>
    create: XOR<PatientHospitalAccessCreateWithoutHospitalInput, PatientHospitalAccessUncheckedCreateWithoutHospitalInput>
  }

  export type PatientHospitalAccessUpdateWithWhereUniqueWithoutHospitalInput = {
    where: PatientHospitalAccessWhereUniqueInput
    data: XOR<PatientHospitalAccessUpdateWithoutHospitalInput, PatientHospitalAccessUncheckedUpdateWithoutHospitalInput>
  }

  export type PatientHospitalAccessUpdateManyWithWhereWithoutHospitalInput = {
    where: PatientHospitalAccessScalarWhereInput
    data: XOR<PatientHospitalAccessUpdateManyMutationInput, PatientHospitalAccessUncheckedUpdateManyWithoutHospitalInput>
  }

  export type PatientHospitalAccessScalarWhereInput = {
    AND?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
    OR?: PatientHospitalAccessScalarWhereInput[]
    NOT?: PatientHospitalAccessScalarWhereInput | PatientHospitalAccessScalarWhereInput[]
    id?: StringFilter<"PatientHospitalAccess"> | string
    patientId?: StringFilter<"PatientHospitalAccess"> | string
    hospitalId?: StringFilter<"PatientHospitalAccess"> | string
    accessLevel?: EnumAccessLevelFilter<"PatientHospitalAccess"> | $Enums.AccessLevel
    grantedAt?: DateTimeFilter<"PatientHospitalAccess"> | Date | string
    grantedBy?: StringFilter<"PatientHospitalAccess"> | string
    expiresAt?: DateTimeNullableFilter<"PatientHospitalAccess"> | Date | string | null
  }

  export type AppointmentUpsertWithWhereUniqueWithoutHospitalInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutHospitalInput, AppointmentUncheckedUpdateWithoutHospitalInput>
    create: XOR<AppointmentCreateWithoutHospitalInput, AppointmentUncheckedCreateWithoutHospitalInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutHospitalInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutHospitalInput, AppointmentUncheckedUpdateWithoutHospitalInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutHospitalInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutHospitalInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    doctorId?: StringFilter<"Appointment"> | string
    hospitalId?: StringFilter<"Appointment"> | string
    date?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type DoctorAvailabilityUpsertWithWhereUniqueWithoutHospitalInput = {
    where: DoctorAvailabilityWhereUniqueInput
    update: XOR<DoctorAvailabilityUpdateWithoutHospitalInput, DoctorAvailabilityUncheckedUpdateWithoutHospitalInput>
    create: XOR<DoctorAvailabilityCreateWithoutHospitalInput, DoctorAvailabilityUncheckedCreateWithoutHospitalInput>
  }

  export type DoctorAvailabilityUpdateWithWhereUniqueWithoutHospitalInput = {
    where: DoctorAvailabilityWhereUniqueInput
    data: XOR<DoctorAvailabilityUpdateWithoutHospitalInput, DoctorAvailabilityUncheckedUpdateWithoutHospitalInput>
  }

  export type DoctorAvailabilityUpdateManyWithWhereWithoutHospitalInput = {
    where: DoctorAvailabilityScalarWhereInput
    data: XOR<DoctorAvailabilityUpdateManyMutationInput, DoctorAvailabilityUncheckedUpdateManyWithoutHospitalInput>
  }

  export type DoctorAvailabilityScalarWhereInput = {
    AND?: DoctorAvailabilityScalarWhereInput | DoctorAvailabilityScalarWhereInput[]
    OR?: DoctorAvailabilityScalarWhereInput[]
    NOT?: DoctorAvailabilityScalarWhereInput | DoctorAvailabilityScalarWhereInput[]
    id?: StringFilter<"DoctorAvailability"> | string
    doctorId?: StringFilter<"DoctorAvailability"> | string
    hospitalId?: StringFilter<"DoctorAvailability"> | string
    available?: BoolFilter<"DoctorAvailability"> | boolean
    schedule?: JsonFilter<"DoctorAvailability">
    serviceTypes?: StringNullableListFilter<"DoctorAvailability">
    nextAvailable?: DateTimeNullableFilter<"DoctorAvailability"> | Date | string | null
  }

  export type PatientUpsertWithWhereUniqueWithoutHospitalInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutHospitalInput, PatientUncheckedUpdateWithoutHospitalInput>
    create: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutHospitalInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutHospitalInput, PatientUncheckedUpdateWithoutHospitalInput>
  }

  export type PatientUpdateManyWithWhereWithoutHospitalInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutHospitalInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: StringFilter<"Patient"> | string
    mrn?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    gender?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    contact?: StringNullableFilter<"Patient"> | string | null
    note?: StringNullableFilter<"Patient"> | string | null
    lastVisit?: DateTimeNullableFilter<"Patient"> | Date | string | null
    nextVisit?: DateTimeNullableFilter<"Patient"> | Date | string | null
    medicalHistory?: StringNullableFilter<"Patient"> | string | null
    userId?: StringNullableFilter<"Patient"> | string | null
    hospitalId?: StringNullableFilter<"Patient"> | string | null
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    qrCode?: StringNullableFilter<"Patient"> | string | null
    onboardingCompleted?: BoolFilter<"Patient"> | boolean
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutHospitalInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutHospitalInput, MedicalRecordUncheckedUpdateWithoutHospitalInput>
    create: XOR<MedicalRecordCreateWithoutHospitalInput, MedicalRecordUncheckedCreateWithoutHospitalInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutHospitalInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutHospitalInput, MedicalRecordUncheckedUpdateWithoutHospitalInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutHospitalInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutHospitalInput>
  }

  export type MedicalRecordScalarWhereInput = {
    AND?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
    OR?: MedicalRecordScalarWhereInput[]
    NOT?: MedicalRecordScalarWhereInput | MedicalRecordScalarWhereInput[]
    id?: StringFilter<"MedicalRecord"> | string
    patientId?: StringFilter<"MedicalRecord"> | string
    doctorId?: StringFilter<"MedicalRecord"> | string
    hospitalId?: StringFilter<"MedicalRecord"> | string
    type?: StringFilter<"MedicalRecord"> | string
    details?: JsonFilter<"MedicalRecord">
    date?: DateTimeFilter<"MedicalRecord"> | Date | string
    createdAt?: DateTimeFilter<"MedicalRecord"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalRecord"> | Date | string
  }

  export type ReferralUpsertWithWhereUniqueWithoutFromHospitalInput = {
    where: ReferralWhereUniqueInput
    update: XOR<ReferralUpdateWithoutFromHospitalInput, ReferralUncheckedUpdateWithoutFromHospitalInput>
    create: XOR<ReferralCreateWithoutFromHospitalInput, ReferralUncheckedCreateWithoutFromHospitalInput>
  }

  export type ReferralUpdateWithWhereUniqueWithoutFromHospitalInput = {
    where: ReferralWhereUniqueInput
    data: XOR<ReferralUpdateWithoutFromHospitalInput, ReferralUncheckedUpdateWithoutFromHospitalInput>
  }

  export type ReferralUpdateManyWithWhereWithoutFromHospitalInput = {
    where: ReferralScalarWhereInput
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyWithoutFromHospitalInput>
  }

  export type ReferralScalarWhereInput = {
    AND?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
    OR?: ReferralScalarWhereInput[]
    NOT?: ReferralScalarWhereInput | ReferralScalarWhereInput[]
    id?: StringFilter<"Referral"> | string
    patientId?: StringFilter<"Referral"> | string
    fromHospitalId?: StringFilter<"Referral"> | string
    toHospitalId?: StringFilter<"Referral"> | string
    referringDoctorId?: StringFilter<"Referral"> | string
    receivingDoctorId?: StringNullableFilter<"Referral"> | string | null
    reason?: StringFilter<"Referral"> | string
    notes?: StringNullableFilter<"Referral"> | string | null
    priority?: EnumReferralPriorityFilter<"Referral"> | $Enums.ReferralPriority
    status?: EnumReferralStatusFilter<"Referral"> | $Enums.ReferralStatus
    medicalRecords?: JsonNullableFilter<"Referral">
    createdAt?: DateTimeFilter<"Referral"> | Date | string
    updatedAt?: DateTimeFilter<"Referral"> | Date | string
    completedAt?: DateTimeNullableFilter<"Referral"> | Date | string | null
  }

  export type ReferralUpsertWithWhereUniqueWithoutToHospitalInput = {
    where: ReferralWhereUniqueInput
    update: XOR<ReferralUpdateWithoutToHospitalInput, ReferralUncheckedUpdateWithoutToHospitalInput>
    create: XOR<ReferralCreateWithoutToHospitalInput, ReferralUncheckedCreateWithoutToHospitalInput>
  }

  export type ReferralUpdateWithWhereUniqueWithoutToHospitalInput = {
    where: ReferralWhereUniqueInput
    data: XOR<ReferralUpdateWithoutToHospitalInput, ReferralUncheckedUpdateWithoutToHospitalInput>
  }

  export type ReferralUpdateManyWithWhereWithoutToHospitalInput = {
    where: ReferralScalarWhereInput
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyWithoutToHospitalInput>
  }

  export type AmbulanceUpsertWithWhereUniqueWithoutHospitalInput = {
    where: AmbulanceWhereUniqueInput
    update: XOR<AmbulanceUpdateWithoutHospitalInput, AmbulanceUncheckedUpdateWithoutHospitalInput>
    create: XOR<AmbulanceCreateWithoutHospitalInput, AmbulanceUncheckedCreateWithoutHospitalInput>
  }

  export type AmbulanceUpdateWithWhereUniqueWithoutHospitalInput = {
    where: AmbulanceWhereUniqueInput
    data: XOR<AmbulanceUpdateWithoutHospitalInput, AmbulanceUncheckedUpdateWithoutHospitalInput>
  }

  export type AmbulanceUpdateManyWithWhereWithoutHospitalInput = {
    where: AmbulanceScalarWhereInput
    data: XOR<AmbulanceUpdateManyMutationInput, AmbulanceUncheckedUpdateManyWithoutHospitalInput>
  }

  export type AmbulanceScalarWhereInput = {
    AND?: AmbulanceScalarWhereInput | AmbulanceScalarWhereInput[]
    OR?: AmbulanceScalarWhereInput[]
    NOT?: AmbulanceScalarWhereInput | AmbulanceScalarWhereInput[]
    id?: StringFilter<"Ambulance"> | string
    registrationNo?: StringFilter<"Ambulance"> | string
    type?: EnumAmbulanceTypeFilter<"Ambulance"> | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFilter<"Ambulance"> | $Enums.AmbulanceStatus
    hospitalId?: StringFilter<"Ambulance"> | string
    capacity?: IntFilter<"Ambulance"> | number
    equipment?: JsonNullableFilter<"Ambulance">
    features?: StringNullableListFilter<"Ambulance">
    gpsTracking?: JsonNullableFilter<"Ambulance">
    createdAt?: DateTimeFilter<"Ambulance"> | Date | string
    updatedAt?: DateTimeFilter<"Ambulance"> | Date | string
    lastMaintenance?: DateTimeNullableFilter<"Ambulance"> | Date | string | null
  }

  export type AmbulanceDispatchUpsertWithWhereUniqueWithoutHospitalInput = {
    where: AmbulanceDispatchWhereUniqueInput
    update: XOR<AmbulanceDispatchUpdateWithoutHospitalInput, AmbulanceDispatchUncheckedUpdateWithoutHospitalInput>
    create: XOR<AmbulanceDispatchCreateWithoutHospitalInput, AmbulanceDispatchUncheckedCreateWithoutHospitalInput>
  }

  export type AmbulanceDispatchUpdateWithWhereUniqueWithoutHospitalInput = {
    where: AmbulanceDispatchWhereUniqueInput
    data: XOR<AmbulanceDispatchUpdateWithoutHospitalInput, AmbulanceDispatchUncheckedUpdateWithoutHospitalInput>
  }

  export type AmbulanceDispatchUpdateManyWithWhereWithoutHospitalInput = {
    where: AmbulanceDispatchScalarWhereInput
    data: XOR<AmbulanceDispatchUpdateManyMutationInput, AmbulanceDispatchUncheckedUpdateManyWithoutHospitalInput>
  }

  export type AmbulanceDispatchScalarWhereInput = {
    AND?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
    OR?: AmbulanceDispatchScalarWhereInput[]
    NOT?: AmbulanceDispatchScalarWhereInput | AmbulanceDispatchScalarWhereInput[]
    id?: StringFilter<"AmbulanceDispatch"> | string
    ambulanceId?: StringFilter<"AmbulanceDispatch"> | string
    patientId?: StringFilter<"AmbulanceDispatch"> | string
    hospitalId?: StringFilter<"AmbulanceDispatch"> | string
    pickupLocation?: StringFilter<"AmbulanceDispatch"> | string
    dropLocation?: StringFilter<"AmbulanceDispatch"> | string
    dispatchTime?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    arrivalTime?: DateTimeNullableFilter<"AmbulanceDispatch"> | Date | string | null
    completionTime?: DateTimeNullableFilter<"AmbulanceDispatch"> | Date | string | null
    priority?: EnumDispatchPriorityFilter<"AmbulanceDispatch"> | $Enums.DispatchPriority
    status?: EnumDispatchStatusFilter<"AmbulanceDispatch"> | $Enums.DispatchStatus
    dispatchedBy?: StringFilter<"AmbulanceDispatch"> | string
    notes?: StringNullableFilter<"AmbulanceDispatch"> | string | null
    createdAt?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
    updatedAt?: DateTimeFilter<"AmbulanceDispatch"> | Date | string
  }

  export type AmbulanceRequestUpsertWithWhereUniqueWithoutHospitalInput = {
    where: AmbulanceRequestWhereUniqueInput
    update: XOR<AmbulanceRequestUpdateWithoutHospitalInput, AmbulanceRequestUncheckedUpdateWithoutHospitalInput>
    create: XOR<AmbulanceRequestCreateWithoutHospitalInput, AmbulanceRequestUncheckedCreateWithoutHospitalInput>
  }

  export type AmbulanceRequestUpdateWithWhereUniqueWithoutHospitalInput = {
    where: AmbulanceRequestWhereUniqueInput
    data: XOR<AmbulanceRequestUpdateWithoutHospitalInput, AmbulanceRequestUncheckedUpdateWithoutHospitalInput>
  }

  export type AmbulanceRequestUpdateManyWithWhereWithoutHospitalInput = {
    where: AmbulanceRequestScalarWhereInput
    data: XOR<AmbulanceRequestUpdateManyMutationInput, AmbulanceRequestUncheckedUpdateManyWithoutHospitalInput>
  }

  export type AmbulanceRequestScalarWhereInput = {
    AND?: AmbulanceRequestScalarWhereInput | AmbulanceRequestScalarWhereInput[]
    OR?: AmbulanceRequestScalarWhereInput[]
    NOT?: AmbulanceRequestScalarWhereInput | AmbulanceRequestScalarWhereInput[]
    id?: StringFilter<"AmbulanceRequest"> | string
    patientId?: StringFilter<"AmbulanceRequest"> | string
    hospitalId?: StringFilter<"AmbulanceRequest"> | string
    pickupLocation?: StringFilter<"AmbulanceRequest"> | string
    reason?: StringFilter<"AmbulanceRequest"> | string
    requestTime?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    status?: EnumDispatchStatusFilter<"AmbulanceRequest"> | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFilter<"AmbulanceRequest"> | $Enums.DispatchPriority
    contactName?: StringFilter<"AmbulanceRequest"> | string
    contactPhone?: StringFilter<"AmbulanceRequest"> | string
    notes?: StringNullableFilter<"AmbulanceRequest"> | string | null
    createdAt?: DateTimeFilter<"AmbulanceRequest"> | Date | string
    updatedAt?: DateTimeFilter<"AmbulanceRequest"> | Date | string
  }

  export type BillingUpsertWithWhereUniqueWithoutHospitalInput = {
    where: BillingWhereUniqueInput
    update: XOR<BillingUpdateWithoutHospitalInput, BillingUncheckedUpdateWithoutHospitalInput>
    create: XOR<BillingCreateWithoutHospitalInput, BillingUncheckedCreateWithoutHospitalInput>
  }

  export type BillingUpdateWithWhereUniqueWithoutHospitalInput = {
    where: BillingWhereUniqueInput
    data: XOR<BillingUpdateWithoutHospitalInput, BillingUncheckedUpdateWithoutHospitalInput>
  }

  export type BillingUpdateManyWithWhereWithoutHospitalInput = {
    where: BillingScalarWhereInput
    data: XOR<BillingUpdateManyMutationInput, BillingUncheckedUpdateManyWithoutHospitalInput>
  }

  export type BillingScalarWhereInput = {
    AND?: BillingScalarWhereInput | BillingScalarWhereInput[]
    OR?: BillingScalarWhereInput[]
    NOT?: BillingScalarWhereInput | BillingScalarWhereInput[]
    id?: StringFilter<"Billing"> | string
    patientId?: StringFilter<"Billing"> | string
    hospitalId?: StringFilter<"Billing"> | string
    amount?: FloatFilter<"Billing"> | number
    dueDate?: DateTimeFilter<"Billing"> | Date | string
    status?: EnumBillingStatusFilter<"Billing"> | $Enums.BillingStatus
    description?: StringFilter<"Billing"> | string
    invoiceNumber?: StringFilter<"Billing"> | string
    items?: JsonFilter<"Billing">
    createdAt?: DateTimeFilter<"Billing"> | Date | string
    updatedAt?: DateTimeFilter<"Billing"> | Date | string
    paidAt?: DateTimeNullableFilter<"Billing"> | Date | string | null
  }

  export type ConversationUpsertWithWhereUniqueWithoutHospitalInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutHospitalInput, ConversationUncheckedUpdateWithoutHospitalInput>
    create: XOR<ConversationCreateWithoutHospitalInput, ConversationUncheckedCreateWithoutHospitalInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutHospitalInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutHospitalInput, ConversationUncheckedUpdateWithoutHospitalInput>
  }

  export type ConversationUpdateManyWithWhereWithoutHospitalInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutHospitalInput>
  }

  export type ConversationScalarWhereInput = {
    AND?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    OR?: ConversationScalarWhereInput[]
    NOT?: ConversationScalarWhereInput | ConversationScalarWhereInput[]
    id?: StringFilter<"Conversation"> | string
    patientId?: StringFilter<"Conversation"> | string
    hospitalId?: StringFilter<"Conversation"> | string
    doctorId?: StringNullableFilter<"Conversation"> | string | null
    title?: StringNullableFilter<"Conversation"> | string | null
    status?: EnumConversationStatusFilter<"Conversation"> | $Enums.ConversationStatus
    lastMessageAt?: DateTimeNullableFilter<"Conversation"> | Date | string | null
    metadata?: JsonNullableFilter<"Conversation">
    createdAt?: DateTimeFilter<"Conversation"> | Date | string
    updatedAt?: DateTimeFilter<"Conversation"> | Date | string
  }

  export type BirthRecordUpsertWithWhereUniqueWithoutHospitalInput = {
    where: BirthRecordWhereUniqueInput
    update: XOR<BirthRecordUpdateWithoutHospitalInput, BirthRecordUncheckedUpdateWithoutHospitalInput>
    create: XOR<BirthRecordCreateWithoutHospitalInput, BirthRecordUncheckedCreateWithoutHospitalInput>
  }

  export type BirthRecordUpdateWithWhereUniqueWithoutHospitalInput = {
    where: BirthRecordWhereUniqueInput
    data: XOR<BirthRecordUpdateWithoutHospitalInput, BirthRecordUncheckedUpdateWithoutHospitalInput>
  }

  export type BirthRecordUpdateManyWithWhereWithoutHospitalInput = {
    where: BirthRecordScalarWhereInput
    data: XOR<BirthRecordUpdateManyMutationInput, BirthRecordUncheckedUpdateManyWithoutHospitalInput>
  }

  export type BirthRecordScalarWhereInput = {
    AND?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
    OR?: BirthRecordScalarWhereInput[]
    NOT?: BirthRecordScalarWhereInput | BirthRecordScalarWhereInput[]
    id?: StringFilter<"BirthRecord"> | string
    patientId?: StringFilter<"BirthRecord"> | string
    motherId?: StringNullableFilter<"BirthRecord"> | string | null
    fatherId?: StringNullableFilter<"BirthRecord"> | string | null
    hospitalId?: StringFilter<"BirthRecord"> | string
    birthDate?: DateTimeFilter<"BirthRecord"> | Date | string
    birthTime?: StringNullableFilter<"BirthRecord"> | string | null
    birthWeight?: FloatNullableFilter<"BirthRecord"> | number | null
    deliveryMethod?: EnumDeliveryMethodFilter<"BirthRecord"> | $Enums.DeliveryMethod
    attendingDoctorId?: StringFilter<"BirthRecord"> | string
    birthPlace?: StringNullableFilter<"BirthRecord"> | string | null
    certificateNumber?: StringFilter<"BirthRecord"> | string
    registeredAt?: DateTimeFilter<"BirthRecord"> | Date | string
    notes?: StringNullableFilter<"BirthRecord"> | string | null
    complications?: StringNullableListFilter<"BirthRecord">
    apgarScore?: IntNullableFilter<"BirthRecord"> | number | null
    gestationalAge?: IntNullableFilter<"BirthRecord"> | number | null
    createdAt?: DateTimeFilter<"BirthRecord"> | Date | string
    updatedAt?: DateTimeFilter<"BirthRecord"> | Date | string
  }

  export type DeathRecordUpsertWithWhereUniqueWithoutHospitalInput = {
    where: DeathRecordWhereUniqueInput
    update: XOR<DeathRecordUpdateWithoutHospitalInput, DeathRecordUncheckedUpdateWithoutHospitalInput>
    create: XOR<DeathRecordCreateWithoutHospitalInput, DeathRecordUncheckedCreateWithoutHospitalInput>
  }

  export type DeathRecordUpdateWithWhereUniqueWithoutHospitalInput = {
    where: DeathRecordWhereUniqueInput
    data: XOR<DeathRecordUpdateWithoutHospitalInput, DeathRecordUncheckedUpdateWithoutHospitalInput>
  }

  export type DeathRecordUpdateManyWithWhereWithoutHospitalInput = {
    where: DeathRecordScalarWhereInput
    data: XOR<DeathRecordUpdateManyMutationInput, DeathRecordUncheckedUpdateManyWithoutHospitalInput>
  }

  export type DeathRecordScalarWhereInput = {
    AND?: DeathRecordScalarWhereInput | DeathRecordScalarWhereInput[]
    OR?: DeathRecordScalarWhereInput[]
    NOT?: DeathRecordScalarWhereInput | DeathRecordScalarWhereInput[]
    id?: StringFilter<"DeathRecord"> | string
    patientId?: StringFilter<"DeathRecord"> | string
    hospitalId?: StringFilter<"DeathRecord"> | string
    dateOfDeath?: DateTimeFilter<"DeathRecord"> | Date | string
    timeOfDeath?: StringNullableFilter<"DeathRecord"> | string | null
    causeOfDeath?: StringNullableFilter<"DeathRecord"> | string | null
    attendingDoctorId?: StringFilter<"DeathRecord"> | string
    placeOfDeath?: StringFilter<"DeathRecord"> | string
    certificateNumber?: StringFilter<"DeathRecord"> | string
    registeredAt?: DateTimeFilter<"DeathRecord"> | Date | string
    notes?: StringNullableFilter<"DeathRecord"> | string | null
    createdAt?: DateTimeFilter<"DeathRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DeathRecord"> | Date | string
  }

  export type MarketplaceVendorUpsertWithWhereUniqueWithoutHospitalInput = {
    where: MarketplaceVendorWhereUniqueInput
    update: XOR<MarketplaceVendorUpdateWithoutHospitalInput, MarketplaceVendorUncheckedUpdateWithoutHospitalInput>
    create: XOR<MarketplaceVendorCreateWithoutHospitalInput, MarketplaceVendorUncheckedCreateWithoutHospitalInput>
  }

  export type MarketplaceVendorUpdateWithWhereUniqueWithoutHospitalInput = {
    where: MarketplaceVendorWhereUniqueInput
    data: XOR<MarketplaceVendorUpdateWithoutHospitalInput, MarketplaceVendorUncheckedUpdateWithoutHospitalInput>
  }

  export type MarketplaceVendorUpdateManyWithWhereWithoutHospitalInput = {
    where: MarketplaceVendorScalarWhereInput
    data: XOR<MarketplaceVendorUpdateManyMutationInput, MarketplaceVendorUncheckedUpdateManyWithoutHospitalInput>
  }

  export type MarketplaceVendorScalarWhereInput = {
    AND?: MarketplaceVendorScalarWhereInput | MarketplaceVendorScalarWhereInput[]
    OR?: MarketplaceVendorScalarWhereInput[]
    NOT?: MarketplaceVendorScalarWhereInput | MarketplaceVendorScalarWhereInput[]
    id?: StringFilter<"MarketplaceVendor"> | string
    hospitalId?: StringFilter<"MarketplaceVendor"> | string
    name?: StringFilter<"MarketplaceVendor"> | string
    description?: StringNullableFilter<"MarketplaceVendor"> | string | null
    contactEmail?: StringNullableFilter<"MarketplaceVendor"> | string | null
    contactPhone?: StringNullableFilter<"MarketplaceVendor"> | string | null
    address?: StringNullableFilter<"MarketplaceVendor"> | string | null
    logo?: StringNullableFilter<"MarketplaceVendor"> | string | null
    websiteUrl?: StringNullableFilter<"MarketplaceVendor"> | string | null
    verified?: BoolFilter<"MarketplaceVendor"> | boolean
    rating?: FloatNullableFilter<"MarketplaceVendor"> | number | null
    specialties?: StringNullableListFilter<"MarketplaceVendor">
    createdAt?: DateTimeFilter<"MarketplaceVendor"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceVendor"> | Date | string
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutHospitalInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutHospitalInput, PrescriptionUncheckedUpdateWithoutHospitalInput>
    create: XOR<PrescriptionCreateWithoutHospitalInput, PrescriptionUncheckedCreateWithoutHospitalInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutHospitalInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutHospitalInput, PrescriptionUncheckedUpdateWithoutHospitalInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutHospitalInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutHospitalInput>
  }

  export type PrescriptionScalarWhereInput = {
    AND?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
    OR?: PrescriptionScalarWhereInput[]
    NOT?: PrescriptionScalarWhereInput | PrescriptionScalarWhereInput[]
    id?: StringFilter<"Prescription"> | string
    patientId?: StringFilter<"Prescription"> | string
    doctorId?: StringFilter<"Prescription"> | string
    hospitalId?: StringFilter<"Prescription"> | string
    medications?: JsonFilter<"Prescription">
    dosageInstructions?: StringNullableFilter<"Prescription"> | string | null
    validFrom?: DateTimeFilter<"Prescription"> | Date | string
    validUntil?: DateTimeNullableFilter<"Prescription"> | Date | string | null
    filledStatus?: BoolFilter<"Prescription"> | boolean
    filledDate?: DateTimeNullableFilter<"Prescription"> | Date | string | null
    refills?: IntFilter<"Prescription"> | number
    refillsUsed?: IntFilter<"Prescription"> | number
    notes?: StringNullableFilter<"Prescription"> | string | null
    createdAt?: DateTimeFilter<"Prescription"> | Date | string
    updatedAt?: DateTimeFilter<"Prescription"> | Date | string
  }

  export type UserCreateWithoutMedicalRecordsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMedicalRecordsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMedicalRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMedicalRecordsInput, UserUncheckedCreateWithoutMedicalRecordsInput>
  }

  export type PatientCreateWithoutMedicalRecordsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMedicalRecordsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMedicalRecordsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMedicalRecordsInput, PatientUncheckedCreateWithoutMedicalRecordsInput>
  }

  export type HospitalCreateWithoutMedicalRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutMedicalRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutMedicalRecordsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutMedicalRecordsInput, HospitalUncheckedCreateWithoutMedicalRecordsInput>
  }

  export type UserUpsertWithoutMedicalRecordsInput = {
    update: XOR<UserUpdateWithoutMedicalRecordsInput, UserUncheckedUpdateWithoutMedicalRecordsInput>
    create: XOR<UserCreateWithoutMedicalRecordsInput, UserUncheckedCreateWithoutMedicalRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMedicalRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMedicalRecordsInput, UserUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type UserUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientUpsertWithoutMedicalRecordsInput = {
    update: XOR<PatientUpdateWithoutMedicalRecordsInput, PatientUncheckedUpdateWithoutMedicalRecordsInput>
    create: XOR<PatientCreateWithoutMedicalRecordsInput, PatientUncheckedCreateWithoutMedicalRecordsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMedicalRecordsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMedicalRecordsInput, PatientUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type PatientUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutMedicalRecordsInput = {
    update: XOR<HospitalUpdateWithoutMedicalRecordsInput, HospitalUncheckedUpdateWithoutMedicalRecordsInput>
    create: XOR<HospitalCreateWithoutMedicalRecordsInput, HospitalUncheckedCreateWithoutMedicalRecordsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutMedicalRecordsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutMedicalRecordsInput, HospitalUncheckedUpdateWithoutMedicalRecordsInput>
  }

  export type HospitalUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutMedicalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type UserCreateWithoutNeonatalRecords_createdInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNeonatalRecords_createdInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNeonatalRecords_createdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNeonatalRecords_createdInput, UserUncheckedCreateWithoutNeonatalRecords_createdInput>
  }

  export type HospitalCreateWithoutNeonatalRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutNeonatalRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutNeonatalRecordsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutNeonatalRecordsInput, HospitalUncheckedCreateWithoutNeonatalRecordsInput>
  }

  export type PatientCreateWithoutNeonatalRecords_AsMotherInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutNeonatalRecords_AsMotherInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutNeonatalRecords_AsMotherInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutNeonatalRecords_AsMotherInput, PatientUncheckedCreateWithoutNeonatalRecords_AsMotherInput>
  }

  export type PatientCreateWithoutNeonatalRecords_AsPatientInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutNeonatalRecords_AsPatientInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutNeonatalRecords_AsPatientInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutNeonatalRecords_AsPatientInput, PatientUncheckedCreateWithoutNeonatalRecords_AsPatientInput>
  }

  export type UserCreateWithoutNeonatalRecords_updatedInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNeonatalRecords_updatedInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNeonatalRecords_updatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNeonatalRecords_updatedInput, UserUncheckedCreateWithoutNeonatalRecords_updatedInput>
  }

  export type UserUpsertWithoutNeonatalRecords_createdInput = {
    update: XOR<UserUpdateWithoutNeonatalRecords_createdInput, UserUncheckedUpdateWithoutNeonatalRecords_createdInput>
    create: XOR<UserCreateWithoutNeonatalRecords_createdInput, UserUncheckedCreateWithoutNeonatalRecords_createdInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNeonatalRecords_createdInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNeonatalRecords_createdInput, UserUncheckedUpdateWithoutNeonatalRecords_createdInput>
  }

  export type UserUpdateWithoutNeonatalRecords_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNeonatalRecords_createdInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalUpsertWithoutNeonatalRecordsInput = {
    update: XOR<HospitalUpdateWithoutNeonatalRecordsInput, HospitalUncheckedUpdateWithoutNeonatalRecordsInput>
    create: XOR<HospitalCreateWithoutNeonatalRecordsInput, HospitalUncheckedCreateWithoutNeonatalRecordsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutNeonatalRecordsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutNeonatalRecordsInput, HospitalUncheckedUpdateWithoutNeonatalRecordsInput>
  }

  export type HospitalUpdateWithoutNeonatalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutNeonatalRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type PatientUpsertWithoutNeonatalRecords_AsMotherInput = {
    update: XOR<PatientUpdateWithoutNeonatalRecords_AsMotherInput, PatientUncheckedUpdateWithoutNeonatalRecords_AsMotherInput>
    create: XOR<PatientCreateWithoutNeonatalRecords_AsMotherInput, PatientUncheckedCreateWithoutNeonatalRecords_AsMotherInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutNeonatalRecords_AsMotherInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutNeonatalRecords_AsMotherInput, PatientUncheckedUpdateWithoutNeonatalRecords_AsMotherInput>
  }

  export type PatientUpdateWithoutNeonatalRecords_AsMotherInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutNeonatalRecords_AsMotherInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUpsertWithoutNeonatalRecords_AsPatientInput = {
    update: XOR<PatientUpdateWithoutNeonatalRecords_AsPatientInput, PatientUncheckedUpdateWithoutNeonatalRecords_AsPatientInput>
    create: XOR<PatientCreateWithoutNeonatalRecords_AsPatientInput, PatientUncheckedCreateWithoutNeonatalRecords_AsPatientInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutNeonatalRecords_AsPatientInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutNeonatalRecords_AsPatientInput, PatientUncheckedUpdateWithoutNeonatalRecords_AsPatientInput>
  }

  export type PatientUpdateWithoutNeonatalRecords_AsPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutNeonatalRecords_AsPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutNeonatalRecords_updatedInput = {
    update: XOR<UserUpdateWithoutNeonatalRecords_updatedInput, UserUncheckedUpdateWithoutNeonatalRecords_updatedInput>
    create: XOR<UserCreateWithoutNeonatalRecords_updatedInput, UserUncheckedCreateWithoutNeonatalRecords_updatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNeonatalRecords_updatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNeonatalRecords_updatedInput, UserUncheckedUpdateWithoutNeonatalRecords_updatedInput>
  }

  export type UserUpdateWithoutNeonatalRecords_updatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNeonatalRecords_updatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPatientProfileInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientProfileInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
  }

  export type HospitalCreateWithoutPatientsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutPatientsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutPatientsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutPatientsInput, HospitalUncheckedCreateWithoutPatientsInput>
  }

  export type AppointmentCreateWithoutPatientInput = {
    id?: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutAppointmentsInput
    Hospital: HospitalCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    hospitalId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: AppointmentCreateManyPatientInput | AppointmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutPatientInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutMedicalRecordsInput
    Hospital: HospitalCreateNestedOneWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    hospitalId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type MedicalRecordCreateOrConnectWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordCreateManyPatientInputEnvelope = {
    data: MedicalRecordCreateManyPatientInput | MedicalRecordCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetCreateWithoutPatientInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    User?: UserCreateNestedOneWithoutPasswordResetsInput
  }

  export type PasswordResetUncheckedCreateWithoutPatientInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type PasswordResetCreateOrConnectWithoutPatientInput = {
    where: PasswordResetWhereUniqueInput
    create: XOR<PasswordResetCreateWithoutPatientInput, PasswordResetUncheckedCreateWithoutPatientInput>
  }

  export type PasswordResetCreateManyPatientInputEnvelope = {
    data: PasswordResetCreateManyPatientInput | PasswordResetCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDoctorPatientsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDoctorPatientsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDoctorPatientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctorPatientsInput, UserUncheckedCreateWithoutDoctorPatientsInput>
  }

  export type ProfilePictureCreateWithoutPatientInput = {
    id?: string
    imageUrl: string
    imageData?: Uint8Array | null
    mimeType: string
    filename?: string | null
    size: number
    width?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy?: string | null
    ownerType: string
    user?: UserCreateNestedOneWithoutProfilePictureInput
  }

  export type ProfilePictureUncheckedCreateWithoutPatientInput = {
    id?: string
    userId?: string | null
    imageUrl: string
    imageData?: Uint8Array | null
    mimeType: string
    filename?: string | null
    size: number
    width?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy?: string | null
    ownerType: string
  }

  export type ProfilePictureCreateOrConnectWithoutPatientInput = {
    where: ProfilePictureWhereUniqueInput
    create: XOR<ProfilePictureCreateWithoutPatientInput, ProfilePictureUncheckedCreateWithoutPatientInput>
  }

  export type PatientEmailCreateWithoutPatientInput = {
    id?: string
    email: string
    verified?: boolean
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientEmailUncheckedCreateWithoutPatientInput = {
    id?: string
    email: string
    verified?: boolean
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientEmailCreateOrConnectWithoutPatientInput = {
    where: PatientEmailWhereUniqueInput
    create: XOR<PatientEmailCreateWithoutPatientInput, PatientEmailUncheckedCreateWithoutPatientInput>
  }

  export type PatientEmailCreateManyPatientInputEnvelope = {
    data: PatientEmailCreateManyPatientInput | PatientEmailCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientPhoneCreateWithoutPatientInput = {
    id?: string
    phone: string
    verified?: boolean
    primary?: boolean
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientPhoneUncheckedCreateWithoutPatientInput = {
    id?: string
    phone: string
    verified?: boolean
    primary?: boolean
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientPhoneCreateOrConnectWithoutPatientInput = {
    where: PatientPhoneWhereUniqueInput
    create: XOR<PatientPhoneCreateWithoutPatientInput, PatientPhoneUncheckedCreateWithoutPatientInput>
  }

  export type PatientPhoneCreateManyPatientInputEnvelope = {
    data: PatientPhoneCreateManyPatientInput | PatientPhoneCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientSearchIndexCreateWithoutPatientInput = {
    id?: string
    mrn: string
    name: string
    phone?: string | null
    email?: string | null
    qrCode: string
    searchVector?: string | null
  }

  export type PatientSearchIndexUncheckedCreateWithoutPatientInput = {
    id?: string
    mrn: string
    name: string
    phone?: string | null
    email?: string | null
    qrCode: string
    searchVector?: string | null
  }

  export type PatientSearchIndexCreateOrConnectWithoutPatientInput = {
    where: PatientSearchIndexWhereUniqueInput
    create: XOR<PatientSearchIndexCreateWithoutPatientInput, PatientSearchIndexUncheckedCreateWithoutPatientInput>
  }

  export type PatientWidgetPreferenceCreateWithoutPatientInput = {
    id?: string
    recentDoctors?: PatientWidgetPreferenceCreaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceCreatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientWidgetPreferenceUncheckedCreateWithoutPatientInput = {
    id?: string
    recentDoctors?: PatientWidgetPreferenceCreaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceCreatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientWidgetPreferenceCreateOrConnectWithoutPatientInput = {
    where: PatientWidgetPreferenceWhereUniqueInput
    create: XOR<PatientWidgetPreferenceCreateWithoutPatientInput, PatientWidgetPreferenceUncheckedCreateWithoutPatientInput>
  }

  export type PatientHospitalAccessCreateWithoutPatientInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    hospital: HospitalCreateNestedOneWithoutPatientAccessesInput
    granter: UserCreateNestedOneWithoutPatientAccess_grantedByInput
  }

  export type PatientHospitalAccessUncheckedCreateWithoutPatientInput = {
    id?: string
    hospitalId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    grantedBy: string
    expiresAt?: Date | string | null
  }

  export type PatientHospitalAccessCreateOrConnectWithoutPatientInput = {
    where: PatientHospitalAccessWhereUniqueInput
    create: XOR<PatientHospitalAccessCreateWithoutPatientInput, PatientHospitalAccessUncheckedCreateWithoutPatientInput>
  }

  export type PatientHospitalAccessCreateManyPatientInputEnvelope = {
    data: PatientHospitalAccessCreateManyPatientInput | PatientHospitalAccessCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type AntenatalRecordCreateWithoutPatientInput = {
    id?: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_AntenatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_createdInput
    Hospital: HospitalCreateNestedOneWithoutAntenatalRecordsInput
    User_AntenatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_updatedInput
  }

  export type AntenatalRecordUncheckedCreateWithoutPatientInput = {
    id?: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordCreateOrConnectWithoutPatientInput = {
    where: AntenatalRecordWhereUniqueInput
    create: XOR<AntenatalRecordCreateWithoutPatientInput, AntenatalRecordUncheckedCreateWithoutPatientInput>
  }

  export type AntenatalRecordCreateManyPatientInputEnvelope = {
    data: AntenatalRecordCreateManyPatientInput | AntenatalRecordCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    id?: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_NeonatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_createdInput
    Hospital: HospitalCreateNestedOneWithoutNeonatalRecordsInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientCreateNestedOneWithoutNeonatalRecords_AsMotherInput
    User_NeonatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_updatedInput
  }

  export type NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    id?: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    where: NeonatalRecordWhereUniqueInput
    create: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput>
  }

  export type NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInputEnvelope = {
    data: NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInput | NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInput[]
    skipDuplicates?: boolean
  }

  export type NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    id?: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_NeonatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_createdInput
    Hospital: HospitalCreateNestedOneWithoutNeonatalRecordsInput
    Patient_NeonatalRecord_patientIdToPatient: PatientCreateNestedOneWithoutNeonatalRecords_AsPatientInput
    User_NeonatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_updatedInput
  }

  export type NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateOrConnectWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    where: NeonatalRecordWhereUniqueInput
    create: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput>
  }

  export type NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInputEnvelope = {
    data: NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInput | NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCreateWithoutPatientInput = {
    id?: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    fromHospital: HospitalCreateNestedOneWithoutReferralsFromInput
    toHospital: HospitalCreateNestedOneWithoutReferralsToInput
    referringDoctor: UserCreateNestedOneWithoutReferralsSentInput
    receivingDoctor?: UserCreateNestedOneWithoutReferralsReceivedInput
  }

  export type ReferralUncheckedCreateWithoutPatientInput = {
    id?: string
    fromHospitalId: string
    toHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralCreateOrConnectWithoutPatientInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutPatientInput, ReferralUncheckedCreateWithoutPatientInput>
  }

  export type ReferralCreateManyPatientInputEnvelope = {
    data: ReferralCreateManyPatientInput | ReferralCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type AmbulanceDispatchCreateWithoutPatientInput = {
    id?: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ambulance: AmbulanceCreateNestedOneWithoutDispatchesInput
    hospital: HospitalCreateNestedOneWithoutAmbulanceDispatchesInput
  }

  export type AmbulanceDispatchUncheckedCreateWithoutPatientInput = {
    id?: string
    ambulanceId: string
    hospitalId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceDispatchCreateOrConnectWithoutPatientInput = {
    where: AmbulanceDispatchWhereUniqueInput
    create: XOR<AmbulanceDispatchCreateWithoutPatientInput, AmbulanceDispatchUncheckedCreateWithoutPatientInput>
  }

  export type AmbulanceDispatchCreateManyPatientInputEnvelope = {
    data: AmbulanceDispatchCreateManyPatientInput | AmbulanceDispatchCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type AmbulanceRequestCreateWithoutPatientInput = {
    id?: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutAmbulanceRequestsInput
  }

  export type AmbulanceRequestUncheckedCreateWithoutPatientInput = {
    id?: string
    hospitalId: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceRequestCreateOrConnectWithoutPatientInput = {
    where: AmbulanceRequestWhereUniqueInput
    create: XOR<AmbulanceRequestCreateWithoutPatientInput, AmbulanceRequestUncheckedCreateWithoutPatientInput>
  }

  export type AmbulanceRequestCreateManyPatientInputEnvelope = {
    data: AmbulanceRequestCreateManyPatientInput | AmbulanceRequestCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type WalletCreateWithoutPatientInput = {
    id?: string
    balance?: number
    currency?: string
    status?: $Enums.WalletStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: WalletTransactionCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutPatientInput = {
    id?: string
    balance?: number
    currency?: string
    status?: $Enums.WalletStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: WalletTransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutPatientInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutPatientInput, WalletUncheckedCreateWithoutPatientInput>
  }

  export type BillingCreateWithoutPatientInput = {
    id?: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
    hospital: HospitalCreateNestedOneWithoutBillingRecordsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
  }

  export type BillingUncheckedCreateWithoutPatientInput = {
    id?: string
    hospitalId: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingCreateOrConnectWithoutPatientInput = {
    where: BillingWhereUniqueInput
    create: XOR<BillingCreateWithoutPatientInput, BillingUncheckedCreateWithoutPatientInput>
  }

  export type BillingCreateManyPatientInputEnvelope = {
    data: BillingCreateManyPatientInput | BillingCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ConversationCreateWithoutPatientInput = {
    id?: string
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutConversationsInput
    doctor?: UserCreateNestedOneWithoutConversationsInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutPatientInput = {
    id?: string
    hospitalId: string
    doctorId?: string | null
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutPatientInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutPatientInput, ConversationUncheckedCreateWithoutPatientInput>
  }

  export type ConversationCreateManyPatientInputEnvelope = {
    data: ConversationCreateManyPatientInput | ConversationCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type BirthRecordCreateWithoutPatientInput = {
    id?: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mother?: PatientCreateNestedOneWithoutMotherOfBirthsInput
    father?: PatientCreateNestedOneWithoutFatherOfBirthsInput
    hospital: HospitalCreateNestedOneWithoutBirthRecordsInput
    attendingDoctor: UserCreateNestedOneWithoutBirthRecordsRegisteredInput
  }

  export type BirthRecordUncheckedCreateWithoutPatientInput = {
    id?: string
    motherId?: string | null
    fatherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateOrConnectWithoutPatientInput = {
    where: BirthRecordWhereUniqueInput
    create: XOR<BirthRecordCreateWithoutPatientInput, BirthRecordUncheckedCreateWithoutPatientInput>
  }

  export type BirthRecordCreateWithoutMotherInput = {
    id?: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutBirthRecordInput
    father?: PatientCreateNestedOneWithoutFatherOfBirthsInput
    hospital: HospitalCreateNestedOneWithoutBirthRecordsInput
    attendingDoctor: UserCreateNestedOneWithoutBirthRecordsRegisteredInput
  }

  export type BirthRecordUncheckedCreateWithoutMotherInput = {
    id?: string
    patientId: string
    fatherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateOrConnectWithoutMotherInput = {
    where: BirthRecordWhereUniqueInput
    create: XOR<BirthRecordCreateWithoutMotherInput, BirthRecordUncheckedCreateWithoutMotherInput>
  }

  export type BirthRecordCreateManyMotherInputEnvelope = {
    data: BirthRecordCreateManyMotherInput | BirthRecordCreateManyMotherInput[]
    skipDuplicates?: boolean
  }

  export type BirthRecordCreateWithoutFatherInput = {
    id?: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutBirthRecordInput
    mother?: PatientCreateNestedOneWithoutMotherOfBirthsInput
    hospital: HospitalCreateNestedOneWithoutBirthRecordsInput
    attendingDoctor: UserCreateNestedOneWithoutBirthRecordsRegisteredInput
  }

  export type BirthRecordUncheckedCreateWithoutFatherInput = {
    id?: string
    patientId: string
    motherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateOrConnectWithoutFatherInput = {
    where: BirthRecordWhereUniqueInput
    create: XOR<BirthRecordCreateWithoutFatherInput, BirthRecordUncheckedCreateWithoutFatherInput>
  }

  export type BirthRecordCreateManyFatherInputEnvelope = {
    data: BirthRecordCreateManyFatherInput | BirthRecordCreateManyFatherInput[]
    skipDuplicates?: boolean
  }

  export type DeathRecordCreateWithoutPatientInput = {
    id?: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutDeathRecordsInput
    attendingDoctor: UserCreateNestedOneWithoutDeathRecordsRegisteredInput
  }

  export type DeathRecordUncheckedCreateWithoutPatientInput = {
    id?: string
    hospitalId: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    attendingDoctorId: string
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeathRecordCreateOrConnectWithoutPatientInput = {
    where: DeathRecordWhereUniqueInput
    create: XOR<DeathRecordCreateWithoutPatientInput, DeathRecordUncheckedCreateWithoutPatientInput>
  }

  export type MarketplaceOrderCreateWithoutPatientInput = {
    id?: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type MarketplaceOrderUncheckedCreateWithoutPatientInput = {
    id?: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type MarketplaceOrderCreateOrConnectWithoutPatientInput = {
    where: MarketplaceOrderWhereUniqueInput
    create: XOR<MarketplaceOrderCreateWithoutPatientInput, MarketplaceOrderUncheckedCreateWithoutPatientInput>
  }

  export type MarketplaceOrderCreateManyPatientInputEnvelope = {
    data: MarketplaceOrderCreateManyPatientInput | MarketplaceOrderCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type SavedVendorCreateWithoutPatientInput = {
    id?: string
    savedAt?: Date | string
    vendor: MarketplaceVendorCreateNestedOneWithoutSavedByInput
  }

  export type SavedVendorUncheckedCreateWithoutPatientInput = {
    id?: string
    vendorId: string
    savedAt?: Date | string
  }

  export type SavedVendorCreateOrConnectWithoutPatientInput = {
    where: SavedVendorWhereUniqueInput
    create: XOR<SavedVendorCreateWithoutPatientInput, SavedVendorUncheckedCreateWithoutPatientInput>
  }

  export type SavedVendorCreateManyPatientInputEnvelope = {
    data: SavedVendorCreateManyPatientInput | SavedVendorCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type CartItemCreateWithoutPatientInput = {
    id?: string
    quantity: number
    addedAt?: Date | string
    product: MarketplaceProductCreateNestedOneWithoutCartItemsInput
  }

  export type CartItemUncheckedCreateWithoutPatientInput = {
    id?: string
    productId: string
    quantity: number
    addedAt?: Date | string
  }

  export type CartItemCreateOrConnectWithoutPatientInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutPatientInput, CartItemUncheckedCreateWithoutPatientInput>
  }

  export type CartItemCreateManyPatientInputEnvelope = {
    data: CartItemCreateManyPatientInput | CartItemCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PrescriptionCreateWithoutPatientInput = {
    id?: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: UserCreateNestedOneWithoutPrescriptionsInput
    hospital: HospitalCreateNestedOneWithoutPrescriptionsInput
    orderItems?: OrderItemCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionUncheckedCreateWithoutPatientInput = {
    id?: string
    doctorId: string
    hospitalId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionCreateOrConnectWithoutPatientInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput>
  }

  export type PrescriptionCreateManyPatientInputEnvelope = {
    data: PrescriptionCreateManyPatientInput | PrescriptionCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientProfileInput = {
    update: XOR<UserUpdateWithoutPatientProfileInput, UserUncheckedUpdateWithoutPatientProfileInput>
    create: XOR<UserCreateWithoutPatientProfileInput, UserUncheckedCreateWithoutPatientProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientProfileInput, UserUncheckedUpdateWithoutPatientProfileInput>
  }

  export type UserUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalUpsertWithoutPatientsInput = {
    update: XOR<HospitalUpdateWithoutPatientsInput, HospitalUncheckedUpdateWithoutPatientsInput>
    create: XOR<HospitalCreateWithoutPatientsInput, HospitalUncheckedCreateWithoutPatientsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutPatientsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutPatientsInput, HospitalUncheckedUpdateWithoutPatientsInput>
  }

  export type HospitalUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutPatientInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutPatientInput>
  }

  export type PasswordResetUpsertWithWhereUniqueWithoutPatientInput = {
    where: PasswordResetWhereUniqueInput
    update: XOR<PasswordResetUpdateWithoutPatientInput, PasswordResetUncheckedUpdateWithoutPatientInput>
    create: XOR<PasswordResetCreateWithoutPatientInput, PasswordResetUncheckedCreateWithoutPatientInput>
  }

  export type PasswordResetUpdateWithWhereUniqueWithoutPatientInput = {
    where: PasswordResetWhereUniqueInput
    data: XOR<PasswordResetUpdateWithoutPatientInput, PasswordResetUncheckedUpdateWithoutPatientInput>
  }

  export type PasswordResetUpdateManyWithWhereWithoutPatientInput = {
    where: PasswordResetScalarWhereInput
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyWithoutPatientInput>
  }

  export type PasswordResetScalarWhereInput = {
    AND?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
    OR?: PasswordResetScalarWhereInput[]
    NOT?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
    id?: StringFilter<"PasswordReset"> | string
    token?: StringFilter<"PasswordReset"> | string
    email?: StringNullableFilter<"PasswordReset"> | string | null
    expiresAt?: DateTimeFilter<"PasswordReset"> | Date | string
    usedAt?: DateTimeNullableFilter<"PasswordReset"> | Date | string | null
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordReset"> | Date | string
    patientId?: StringNullableFilter<"PasswordReset"> | string | null
    userId?: StringNullableFilter<"PasswordReset"> | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutDoctorPatientsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDoctorPatientsInput, UserUncheckedUpdateWithoutDoctorPatientsInput>
    create: XOR<UserCreateWithoutDoctorPatientsInput, UserUncheckedCreateWithoutDoctorPatientsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDoctorPatientsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDoctorPatientsInput, UserUncheckedUpdateWithoutDoctorPatientsInput>
  }

  export type UserUpdateManyWithWhereWithoutDoctorPatientsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDoctorPatientsInput>
  }

  export type ProfilePictureUpsertWithoutPatientInput = {
    update: XOR<ProfilePictureUpdateWithoutPatientInput, ProfilePictureUncheckedUpdateWithoutPatientInput>
    create: XOR<ProfilePictureCreateWithoutPatientInput, ProfilePictureUncheckedCreateWithoutPatientInput>
    where?: ProfilePictureWhereInput
  }

  export type ProfilePictureUpdateToOneWithWhereWithoutPatientInput = {
    where?: ProfilePictureWhereInput
    data: XOR<ProfilePictureUpdateWithoutPatientInput, ProfilePictureUncheckedUpdateWithoutPatientInput>
  }

  export type ProfilePictureUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutProfilePictureNestedInput
  }

  export type ProfilePictureUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
  }

  export type PatientEmailUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientEmailWhereUniqueInput
    update: XOR<PatientEmailUpdateWithoutPatientInput, PatientEmailUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientEmailCreateWithoutPatientInput, PatientEmailUncheckedCreateWithoutPatientInput>
  }

  export type PatientEmailUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientEmailWhereUniqueInput
    data: XOR<PatientEmailUpdateWithoutPatientInput, PatientEmailUncheckedUpdateWithoutPatientInput>
  }

  export type PatientEmailUpdateManyWithWhereWithoutPatientInput = {
    where: PatientEmailScalarWhereInput
    data: XOR<PatientEmailUpdateManyMutationInput, PatientEmailUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientEmailScalarWhereInput = {
    AND?: PatientEmailScalarWhereInput | PatientEmailScalarWhereInput[]
    OR?: PatientEmailScalarWhereInput[]
    NOT?: PatientEmailScalarWhereInput | PatientEmailScalarWhereInput[]
    id?: StringFilter<"PatientEmail"> | string
    email?: StringFilter<"PatientEmail"> | string
    verified?: BoolFilter<"PatientEmail"> | boolean
    primary?: BoolFilter<"PatientEmail"> | boolean
    createdAt?: DateTimeFilter<"PatientEmail"> | Date | string
    updatedAt?: DateTimeFilter<"PatientEmail"> | Date | string
    patientId?: StringFilter<"PatientEmail"> | string
  }

  export type PatientPhoneUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientPhoneWhereUniqueInput
    update: XOR<PatientPhoneUpdateWithoutPatientInput, PatientPhoneUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientPhoneCreateWithoutPatientInput, PatientPhoneUncheckedCreateWithoutPatientInput>
  }

  export type PatientPhoneUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientPhoneWhereUniqueInput
    data: XOR<PatientPhoneUpdateWithoutPatientInput, PatientPhoneUncheckedUpdateWithoutPatientInput>
  }

  export type PatientPhoneUpdateManyWithWhereWithoutPatientInput = {
    where: PatientPhoneScalarWhereInput
    data: XOR<PatientPhoneUpdateManyMutationInput, PatientPhoneUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientPhoneScalarWhereInput = {
    AND?: PatientPhoneScalarWhereInput | PatientPhoneScalarWhereInput[]
    OR?: PatientPhoneScalarWhereInput[]
    NOT?: PatientPhoneScalarWhereInput | PatientPhoneScalarWhereInput[]
    id?: StringFilter<"PatientPhone"> | string
    phone?: StringFilter<"PatientPhone"> | string
    verified?: BoolFilter<"PatientPhone"> | boolean
    primary?: BoolFilter<"PatientPhone"> | boolean
    type?: StringFilter<"PatientPhone"> | string
    createdAt?: DateTimeFilter<"PatientPhone"> | Date | string
    updatedAt?: DateTimeFilter<"PatientPhone"> | Date | string
    patientId?: StringFilter<"PatientPhone"> | string
  }

  export type PatientSearchIndexUpsertWithoutPatientInput = {
    update: XOR<PatientSearchIndexUpdateWithoutPatientInput, PatientSearchIndexUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientSearchIndexCreateWithoutPatientInput, PatientSearchIndexUncheckedCreateWithoutPatientInput>
    where?: PatientSearchIndexWhereInput
  }

  export type PatientSearchIndexUpdateToOneWithWhereWithoutPatientInput = {
    where?: PatientSearchIndexWhereInput
    data: XOR<PatientSearchIndexUpdateWithoutPatientInput, PatientSearchIndexUncheckedUpdateWithoutPatientInput>
  }

  export type PatientSearchIndexUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    searchVector?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientSearchIndexUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: StringFieldUpdateOperationsInput | string
    searchVector?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientWidgetPreferenceUpsertWithoutPatientInput = {
    update: XOR<PatientWidgetPreferenceUpdateWithoutPatientInput, PatientWidgetPreferenceUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientWidgetPreferenceCreateWithoutPatientInput, PatientWidgetPreferenceUncheckedCreateWithoutPatientInput>
    where?: PatientWidgetPreferenceWhereInput
  }

  export type PatientWidgetPreferenceUpdateToOneWithWhereWithoutPatientInput = {
    where?: PatientWidgetPreferenceWhereInput
    data: XOR<PatientWidgetPreferenceUpdateWithoutPatientInput, PatientWidgetPreferenceUncheckedUpdateWithoutPatientInput>
  }

  export type PatientWidgetPreferenceUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    recentDoctors?: PatientWidgetPreferenceUpdaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceUpdatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientWidgetPreferenceUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    recentDoctors?: PatientWidgetPreferenceUpdaterecentDoctorsInput | string[]
    preferredHospitals?: PatientWidgetPreferenceUpdatepreferredHospitalsInput | string[]
    searchHistory?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientHospitalAccessUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientHospitalAccessWhereUniqueInput
    update: XOR<PatientHospitalAccessUpdateWithoutPatientInput, PatientHospitalAccessUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientHospitalAccessCreateWithoutPatientInput, PatientHospitalAccessUncheckedCreateWithoutPatientInput>
  }

  export type PatientHospitalAccessUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientHospitalAccessWhereUniqueInput
    data: XOR<PatientHospitalAccessUpdateWithoutPatientInput, PatientHospitalAccessUncheckedUpdateWithoutPatientInput>
  }

  export type PatientHospitalAccessUpdateManyWithWhereWithoutPatientInput = {
    where: PatientHospitalAccessScalarWhereInput
    data: XOR<PatientHospitalAccessUpdateManyMutationInput, PatientHospitalAccessUncheckedUpdateManyWithoutPatientInput>
  }

  export type AntenatalRecordUpsertWithWhereUniqueWithoutPatientInput = {
    where: AntenatalRecordWhereUniqueInput
    update: XOR<AntenatalRecordUpdateWithoutPatientInput, AntenatalRecordUncheckedUpdateWithoutPatientInput>
    create: XOR<AntenatalRecordCreateWithoutPatientInput, AntenatalRecordUncheckedCreateWithoutPatientInput>
  }

  export type AntenatalRecordUpdateWithWhereUniqueWithoutPatientInput = {
    where: AntenatalRecordWhereUniqueInput
    data: XOR<AntenatalRecordUpdateWithoutPatientInput, AntenatalRecordUncheckedUpdateWithoutPatientInput>
  }

  export type AntenatalRecordUpdateManyWithWhereWithoutPatientInput = {
    where: AntenatalRecordScalarWhereInput
    data: XOR<AntenatalRecordUpdateManyMutationInput, AntenatalRecordUncheckedUpdateManyWithoutPatientInput>
  }

  export type NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    where: NeonatalRecordWhereUniqueInput
    update: XOR<NeonatalRecordUpdateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedUpdateWithoutPatient_NeonatalRecord_patientIdToPatientInput>
    create: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_patientIdToPatientInput>
  }

  export type NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    where: NeonatalRecordWhereUniqueInput
    data: XOR<NeonatalRecordUpdateWithoutPatient_NeonatalRecord_patientIdToPatientInput, NeonatalRecordUncheckedUpdateWithoutPatient_NeonatalRecord_patientIdToPatientInput>
  }

  export type NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    where: NeonatalRecordScalarWhereInput
    data: XOR<NeonatalRecordUpdateManyMutationInput, NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientInput>
  }

  export type NeonatalRecordUpsertWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    where: NeonatalRecordWhereUniqueInput
    update: XOR<NeonatalRecordUpdateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedUpdateWithoutPatient_NeonatalRecord_motherIdToPatientInput>
    create: XOR<NeonatalRecordCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedCreateWithoutPatient_NeonatalRecord_motherIdToPatientInput>
  }

  export type NeonatalRecordUpdateWithWhereUniqueWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    where: NeonatalRecordWhereUniqueInput
    data: XOR<NeonatalRecordUpdateWithoutPatient_NeonatalRecord_motherIdToPatientInput, NeonatalRecordUncheckedUpdateWithoutPatient_NeonatalRecord_motherIdToPatientInput>
  }

  export type NeonatalRecordUpdateManyWithWhereWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    where: NeonatalRecordScalarWhereInput
    data: XOR<NeonatalRecordUpdateManyMutationInput, NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientInput>
  }

  export type ReferralUpsertWithWhereUniqueWithoutPatientInput = {
    where: ReferralWhereUniqueInput
    update: XOR<ReferralUpdateWithoutPatientInput, ReferralUncheckedUpdateWithoutPatientInput>
    create: XOR<ReferralCreateWithoutPatientInput, ReferralUncheckedCreateWithoutPatientInput>
  }

  export type ReferralUpdateWithWhereUniqueWithoutPatientInput = {
    where: ReferralWhereUniqueInput
    data: XOR<ReferralUpdateWithoutPatientInput, ReferralUncheckedUpdateWithoutPatientInput>
  }

  export type ReferralUpdateManyWithWhereWithoutPatientInput = {
    where: ReferralScalarWhereInput
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyWithoutPatientInput>
  }

  export type AmbulanceDispatchUpsertWithWhereUniqueWithoutPatientInput = {
    where: AmbulanceDispatchWhereUniqueInput
    update: XOR<AmbulanceDispatchUpdateWithoutPatientInput, AmbulanceDispatchUncheckedUpdateWithoutPatientInput>
    create: XOR<AmbulanceDispatchCreateWithoutPatientInput, AmbulanceDispatchUncheckedCreateWithoutPatientInput>
  }

  export type AmbulanceDispatchUpdateWithWhereUniqueWithoutPatientInput = {
    where: AmbulanceDispatchWhereUniqueInput
    data: XOR<AmbulanceDispatchUpdateWithoutPatientInput, AmbulanceDispatchUncheckedUpdateWithoutPatientInput>
  }

  export type AmbulanceDispatchUpdateManyWithWhereWithoutPatientInput = {
    where: AmbulanceDispatchScalarWhereInput
    data: XOR<AmbulanceDispatchUpdateManyMutationInput, AmbulanceDispatchUncheckedUpdateManyWithoutPatientInput>
  }

  export type AmbulanceRequestUpsertWithWhereUniqueWithoutPatientInput = {
    where: AmbulanceRequestWhereUniqueInput
    update: XOR<AmbulanceRequestUpdateWithoutPatientInput, AmbulanceRequestUncheckedUpdateWithoutPatientInput>
    create: XOR<AmbulanceRequestCreateWithoutPatientInput, AmbulanceRequestUncheckedCreateWithoutPatientInput>
  }

  export type AmbulanceRequestUpdateWithWhereUniqueWithoutPatientInput = {
    where: AmbulanceRequestWhereUniqueInput
    data: XOR<AmbulanceRequestUpdateWithoutPatientInput, AmbulanceRequestUncheckedUpdateWithoutPatientInput>
  }

  export type AmbulanceRequestUpdateManyWithWhereWithoutPatientInput = {
    where: AmbulanceRequestScalarWhereInput
    data: XOR<AmbulanceRequestUpdateManyMutationInput, AmbulanceRequestUncheckedUpdateManyWithoutPatientInput>
  }

  export type WalletUpsertWithoutPatientInput = {
    update: XOR<WalletUpdateWithoutPatientInput, WalletUncheckedUpdateWithoutPatientInput>
    create: XOR<WalletCreateWithoutPatientInput, WalletUncheckedCreateWithoutPatientInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutPatientInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutPatientInput, WalletUncheckedUpdateWithoutPatientInput>
  }

  export type WalletUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: WalletTransactionUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: WalletTransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type BillingUpsertWithWhereUniqueWithoutPatientInput = {
    where: BillingWhereUniqueInput
    update: XOR<BillingUpdateWithoutPatientInput, BillingUncheckedUpdateWithoutPatientInput>
    create: XOR<BillingCreateWithoutPatientInput, BillingUncheckedCreateWithoutPatientInput>
  }

  export type BillingUpdateWithWhereUniqueWithoutPatientInput = {
    where: BillingWhereUniqueInput
    data: XOR<BillingUpdateWithoutPatientInput, BillingUncheckedUpdateWithoutPatientInput>
  }

  export type BillingUpdateManyWithWhereWithoutPatientInput = {
    where: BillingScalarWhereInput
    data: XOR<BillingUpdateManyMutationInput, BillingUncheckedUpdateManyWithoutPatientInput>
  }

  export type ConversationUpsertWithWhereUniqueWithoutPatientInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutPatientInput, ConversationUncheckedUpdateWithoutPatientInput>
    create: XOR<ConversationCreateWithoutPatientInput, ConversationUncheckedCreateWithoutPatientInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutPatientInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutPatientInput, ConversationUncheckedUpdateWithoutPatientInput>
  }

  export type ConversationUpdateManyWithWhereWithoutPatientInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutPatientInput>
  }

  export type BirthRecordUpsertWithoutPatientInput = {
    update: XOR<BirthRecordUpdateWithoutPatientInput, BirthRecordUncheckedUpdateWithoutPatientInput>
    create: XOR<BirthRecordCreateWithoutPatientInput, BirthRecordUncheckedCreateWithoutPatientInput>
    where?: BirthRecordWhereInput
  }

  export type BirthRecordUpdateToOneWithWhereWithoutPatientInput = {
    where?: BirthRecordWhereInput
    data: XOR<BirthRecordUpdateWithoutPatientInput, BirthRecordUncheckedUpdateWithoutPatientInput>
  }

  export type BirthRecordUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mother?: PatientUpdateOneWithoutMotherOfBirthsNestedInput
    father?: PatientUpdateOneWithoutFatherOfBirthsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutBirthRecordsNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutBirthRecordsRegisteredNestedInput
  }

  export type BirthRecordUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUpsertWithWhereUniqueWithoutMotherInput = {
    where: BirthRecordWhereUniqueInput
    update: XOR<BirthRecordUpdateWithoutMotherInput, BirthRecordUncheckedUpdateWithoutMotherInput>
    create: XOR<BirthRecordCreateWithoutMotherInput, BirthRecordUncheckedCreateWithoutMotherInput>
  }

  export type BirthRecordUpdateWithWhereUniqueWithoutMotherInput = {
    where: BirthRecordWhereUniqueInput
    data: XOR<BirthRecordUpdateWithoutMotherInput, BirthRecordUncheckedUpdateWithoutMotherInput>
  }

  export type BirthRecordUpdateManyWithWhereWithoutMotherInput = {
    where: BirthRecordScalarWhereInput
    data: XOR<BirthRecordUpdateManyMutationInput, BirthRecordUncheckedUpdateManyWithoutMotherInput>
  }

  export type BirthRecordUpsertWithWhereUniqueWithoutFatherInput = {
    where: BirthRecordWhereUniqueInput
    update: XOR<BirthRecordUpdateWithoutFatherInput, BirthRecordUncheckedUpdateWithoutFatherInput>
    create: XOR<BirthRecordCreateWithoutFatherInput, BirthRecordUncheckedCreateWithoutFatherInput>
  }

  export type BirthRecordUpdateWithWhereUniqueWithoutFatherInput = {
    where: BirthRecordWhereUniqueInput
    data: XOR<BirthRecordUpdateWithoutFatherInput, BirthRecordUncheckedUpdateWithoutFatherInput>
  }

  export type BirthRecordUpdateManyWithWhereWithoutFatherInput = {
    where: BirthRecordScalarWhereInput
    data: XOR<BirthRecordUpdateManyMutationInput, BirthRecordUncheckedUpdateManyWithoutFatherInput>
  }

  export type DeathRecordUpsertWithoutPatientInput = {
    update: XOR<DeathRecordUpdateWithoutPatientInput, DeathRecordUncheckedUpdateWithoutPatientInput>
    create: XOR<DeathRecordCreateWithoutPatientInput, DeathRecordUncheckedCreateWithoutPatientInput>
    where?: DeathRecordWhereInput
  }

  export type DeathRecordUpdateToOneWithWhereWithoutPatientInput = {
    where?: DeathRecordWhereInput
    data: XOR<DeathRecordUpdateWithoutPatientInput, DeathRecordUncheckedUpdateWithoutPatientInput>
  }

  export type DeathRecordUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutDeathRecordsNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutDeathRecordsRegisteredNestedInput
  }

  export type DeathRecordUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceOrderUpsertWithWhereUniqueWithoutPatientInput = {
    where: MarketplaceOrderWhereUniqueInput
    update: XOR<MarketplaceOrderUpdateWithoutPatientInput, MarketplaceOrderUncheckedUpdateWithoutPatientInput>
    create: XOR<MarketplaceOrderCreateWithoutPatientInput, MarketplaceOrderUncheckedCreateWithoutPatientInput>
  }

  export type MarketplaceOrderUpdateWithWhereUniqueWithoutPatientInput = {
    where: MarketplaceOrderWhereUniqueInput
    data: XOR<MarketplaceOrderUpdateWithoutPatientInput, MarketplaceOrderUncheckedUpdateWithoutPatientInput>
  }

  export type MarketplaceOrderUpdateManyWithWhereWithoutPatientInput = {
    where: MarketplaceOrderScalarWhereInput
    data: XOR<MarketplaceOrderUpdateManyMutationInput, MarketplaceOrderUncheckedUpdateManyWithoutPatientInput>
  }

  export type MarketplaceOrderScalarWhereInput = {
    AND?: MarketplaceOrderScalarWhereInput | MarketplaceOrderScalarWhereInput[]
    OR?: MarketplaceOrderScalarWhereInput[]
    NOT?: MarketplaceOrderScalarWhereInput | MarketplaceOrderScalarWhereInput[]
    id?: StringFilter<"MarketplaceOrder"> | string
    patientId?: StringFilter<"MarketplaceOrder"> | string
    reference?: StringFilter<"MarketplaceOrder"> | string
    totalAmount?: FloatFilter<"MarketplaceOrder"> | number
    status?: EnumOrderStatusFilter<"MarketplaceOrder"> | $Enums.OrderStatus
    paymentStatus?: StringNullableFilter<"MarketplaceOrder"> | string | null
    shippingAddress?: StringNullableFilter<"MarketplaceOrder"> | string | null
    trackingNumber?: StringNullableFilter<"MarketplaceOrder"> | string | null
    createdAt?: DateTimeFilter<"MarketplaceOrder"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceOrder"> | Date | string
  }

  export type SavedVendorUpsertWithWhereUniqueWithoutPatientInput = {
    where: SavedVendorWhereUniqueInput
    update: XOR<SavedVendorUpdateWithoutPatientInput, SavedVendorUncheckedUpdateWithoutPatientInput>
    create: XOR<SavedVendorCreateWithoutPatientInput, SavedVendorUncheckedCreateWithoutPatientInput>
  }

  export type SavedVendorUpdateWithWhereUniqueWithoutPatientInput = {
    where: SavedVendorWhereUniqueInput
    data: XOR<SavedVendorUpdateWithoutPatientInput, SavedVendorUncheckedUpdateWithoutPatientInput>
  }

  export type SavedVendorUpdateManyWithWhereWithoutPatientInput = {
    where: SavedVendorScalarWhereInput
    data: XOR<SavedVendorUpdateManyMutationInput, SavedVendorUncheckedUpdateManyWithoutPatientInput>
  }

  export type SavedVendorScalarWhereInput = {
    AND?: SavedVendorScalarWhereInput | SavedVendorScalarWhereInput[]
    OR?: SavedVendorScalarWhereInput[]
    NOT?: SavedVendorScalarWhereInput | SavedVendorScalarWhereInput[]
    id?: StringFilter<"SavedVendor"> | string
    patientId?: StringFilter<"SavedVendor"> | string
    vendorId?: StringFilter<"SavedVendor"> | string
    savedAt?: DateTimeFilter<"SavedVendor"> | Date | string
  }

  export type CartItemUpsertWithWhereUniqueWithoutPatientInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutPatientInput, CartItemUncheckedUpdateWithoutPatientInput>
    create: XOR<CartItemCreateWithoutPatientInput, CartItemUncheckedCreateWithoutPatientInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutPatientInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutPatientInput, CartItemUncheckedUpdateWithoutPatientInput>
  }

  export type CartItemUpdateManyWithWhereWithoutPatientInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutPatientInput>
  }

  export type CartItemScalarWhereInput = {
    AND?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    OR?: CartItemScalarWhereInput[]
    NOT?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    id?: StringFilter<"CartItem"> | string
    patientId?: StringFilter<"CartItem"> | string
    productId?: StringFilter<"CartItem"> | string
    quantity?: IntFilter<"CartItem"> | number
    addedAt?: DateTimeFilter<"CartItem"> | Date | string
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutPatientInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutPatientInput, PrescriptionUncheckedUpdateWithoutPatientInput>
    create: XOR<PrescriptionCreateWithoutPatientInput, PrescriptionUncheckedCreateWithoutPatientInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutPatientInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutPatientInput, PrescriptionUncheckedUpdateWithoutPatientInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutPatientInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCreateWithoutUserInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type HospitalCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutUsersInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutUsersInput, HospitalUncheckedCreateWithoutUsersInput>
  }

  export type NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    id?: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_NeonatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_createdInput
    Hospital: HospitalCreateNestedOneWithoutNeonatalRecordsInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientCreateNestedOneWithoutNeonatalRecords_AsMotherInput
    Patient_NeonatalRecord_patientIdToPatient: PatientCreateNestedOneWithoutNeonatalRecords_AsPatientInput
  }

  export type NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    where: NeonatalRecordWhereUniqueInput
    create: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput>
  }

  export type NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInputEnvelope = {
    data: NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInput | NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInput[]
    skipDuplicates?: boolean
  }

  export type AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    id?: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    Hospital: HospitalCreateNestedOneWithoutAntenatalRecordsInput
    Patient: PatientCreateNestedOneWithoutAntenatalRecordsInput
    User_AntenatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_updatedInput
  }

  export type AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    updatedByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    where: AntenatalRecordWhereUniqueInput
    create: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput>
  }

  export type AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInputEnvelope = {
    data: AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInput | AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInput[]
    skipDuplicates?: boolean
  }

  export type AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    id?: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    User_AntenatalRecord_createdByUserIdToUser: UserCreateNestedOneWithoutAntenatalRecords_createdInput
    Hospital: HospitalCreateNestedOneWithoutAntenatalRecordsInput
    Patient: PatientCreateNestedOneWithoutAntenatalRecordsInput
  }

  export type AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordCreateOrConnectWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    where: AntenatalRecordWhereUniqueInput
    create: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput>
  }

  export type AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInputEnvelope = {
    data: AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInput | AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutUserInput = {
    id?: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Patient: PatientCreateNestedOneWithoutAppointmentsInput
    Hospital: HospitalCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AppointmentCreateOrConnectWithoutUserInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput>
  }

  export type AppointmentCreateManyUserInputEnvelope = {
    data: AppointmentCreateManyUserInput | AppointmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutUserInput = {
    id?: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    Patient: PatientCreateNestedOneWithoutMedicalRecordsInput
    Hospital: HospitalCreateNestedOneWithoutMedicalRecordsInput
  }

  export type MedicalRecordUncheckedCreateWithoutUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type MedicalRecordCreateOrConnectWithoutUserInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutUserInput, MedicalRecordUncheckedCreateWithoutUserInput>
  }

  export type MedicalRecordCreateManyUserInputEnvelope = {
    data: MedicalRecordCreateManyUserInput | MedicalRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    id?: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    mrn?: string | null
    Hospital: HospitalCreateNestedOneWithoutNeonatalRecordsInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientCreateNestedOneWithoutNeonatalRecords_AsMotherInput
    Patient_NeonatalRecord_patientIdToPatient: PatientCreateNestedOneWithoutNeonatalRecords_AsPatientInput
    User_NeonatalRecord_updatedByUserIdToUser: UserCreateNestedOneWithoutNeonatalRecords_updatedInput
  }

  export type NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateOrConnectWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    where: NeonatalRecordWhereUniqueInput
    create: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput>
  }

  export type NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInputEnvelope = {
    data: NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInput | NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientHospitalAccessCreateWithoutGranterInput = {
    id?: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutHospitalAccessesInput
    hospital: HospitalCreateNestedOneWithoutPatientAccessesInput
  }

  export type PatientHospitalAccessUncheckedCreateWithoutGranterInput = {
    id?: string
    patientId: string
    hospitalId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type PatientHospitalAccessCreateOrConnectWithoutGranterInput = {
    where: PatientHospitalAccessWhereUniqueInput
    create: XOR<PatientHospitalAccessCreateWithoutGranterInput, PatientHospitalAccessUncheckedCreateWithoutGranterInput>
  }

  export type PatientHospitalAccessCreateManyGranterInputEnvelope = {
    data: PatientHospitalAccessCreateManyGranterInput | PatientHospitalAccessCreateManyGranterInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutDoctorsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutDoctorsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutDoctorsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput>
  }

  export type ProfilePictureCreateWithoutUserInput = {
    id?: string
    imageUrl: string
    imageData?: Uint8Array | null
    mimeType: string
    filename?: string | null
    size: number
    width?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy?: string | null
    ownerType: string
    patient?: PatientCreateNestedOneWithoutProfilePictureInput
  }

  export type ProfilePictureUncheckedCreateWithoutUserInput = {
    id?: string
    patientId?: string | null
    imageUrl: string
    imageData?: Uint8Array | null
    mimeType: string
    filename?: string | null
    size: number
    width?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy?: string | null
    ownerType: string
  }

  export type ProfilePictureCreateOrConnectWithoutUserInput = {
    where: ProfilePictureWhereUniqueInput
    create: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetCreateWithoutUserInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient?: PatientCreateNestedOneWithoutPasswordResetsInput
  }

  export type PasswordResetUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId?: string | null
  }

  export type PasswordResetCreateOrConnectWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetCreateManyUserInputEnvelope = {
    data: PasswordResetCreateManyUserInput | PasswordResetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StaffProfileCreateWithoutUserInput = {
    id?: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
    hospital: HospitalCreateNestedOneWithoutStaffProfilesInput
  }

  export type StaffProfileUncheckedCreateWithoutUserInput = {
    id?: string
    hospitalId: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffProfileCreateOrConnectWithoutUserInput = {
    where: StaffProfileWhereUniqueInput
    create: XOR<StaffProfileCreateWithoutUserInput, StaffProfileUncheckedCreateWithoutUserInput>
  }

  export type DepartmentMembershipCreateWithoutUserInput = {
    id?: string
    role: string
    joinedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutMembersInput
  }

  export type DepartmentMembershipUncheckedCreateWithoutUserInput = {
    id?: string
    departmentId: string
    role: string
    joinedAt?: Date | string
  }

  export type DepartmentMembershipCreateOrConnectWithoutUserInput = {
    where: DepartmentMembershipWhereUniqueInput
    create: XOR<DepartmentMembershipCreateWithoutUserInput, DepartmentMembershipUncheckedCreateWithoutUserInput>
  }

  export type DepartmentMembershipCreateManyUserInputEnvelope = {
    data: DepartmentMembershipCreateManyUserInput | DepartmentMembershipCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DoctorAvailabilityCreateWithoutDoctorInput = {
    id?: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
    hospital: HospitalCreateNestedOneWithoutDoctorAvailabilitiesInput
  }

  export type DoctorAvailabilityUncheckedCreateWithoutDoctorInput = {
    id?: string
    hospitalId: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
  }

  export type DoctorAvailabilityCreateOrConnectWithoutDoctorInput = {
    where: DoctorAvailabilityWhereUniqueInput
    create: XOR<DoctorAvailabilityCreateWithoutDoctorInput, DoctorAvailabilityUncheckedCreateWithoutDoctorInput>
  }

  export type ReferralCreateWithoutReferringDoctorInput = {
    id?: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutReferralsReceivedInput
    fromHospital: HospitalCreateNestedOneWithoutReferralsFromInput
    toHospital: HospitalCreateNestedOneWithoutReferralsToInput
    receivingDoctor?: UserCreateNestedOneWithoutReferralsReceivedInput
  }

  export type ReferralUncheckedCreateWithoutReferringDoctorInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    toHospitalId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralCreateOrConnectWithoutReferringDoctorInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutReferringDoctorInput, ReferralUncheckedCreateWithoutReferringDoctorInput>
  }

  export type ReferralCreateManyReferringDoctorInputEnvelope = {
    data: ReferralCreateManyReferringDoctorInput | ReferralCreateManyReferringDoctorInput[]
    skipDuplicates?: boolean
  }

  export type ReferralCreateWithoutReceivingDoctorInput = {
    id?: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutReferralsReceivedInput
    fromHospital: HospitalCreateNestedOneWithoutReferralsFromInput
    toHospital: HospitalCreateNestedOneWithoutReferralsToInput
    referringDoctor: UserCreateNestedOneWithoutReferralsSentInput
  }

  export type ReferralUncheckedCreateWithoutReceivingDoctorInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    toHospitalId: string
    referringDoctorId: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralCreateOrConnectWithoutReceivingDoctorInput = {
    where: ReferralWhereUniqueInput
    create: XOR<ReferralCreateWithoutReceivingDoctorInput, ReferralUncheckedCreateWithoutReceivingDoctorInput>
  }

  export type ReferralCreateManyReceivingDoctorInputEnvelope = {
    data: ReferralCreateManyReceivingDoctorInput | ReferralCreateManyReceivingDoctorInput[]
    skipDuplicates?: boolean
  }

  export type ConversationCreateWithoutDoctorInput = {
    id?: string
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutConversationsInput
    hospital: HospitalCreateNestedOneWithoutConversationsInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutDoctorInput = {
    id?: string
    patientId: string
    hospitalId: string
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutDoctorInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutDoctorInput, ConversationUncheckedCreateWithoutDoctorInput>
  }

  export type ConversationCreateManyDoctorInputEnvelope = {
    data: ConversationCreateManyDoctorInput | ConversationCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    conversation: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    conversationId: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type BirthRecordCreateWithoutAttendingDoctorInput = {
    id?: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutBirthRecordInput
    mother?: PatientCreateNestedOneWithoutMotherOfBirthsInput
    father?: PatientCreateNestedOneWithoutFatherOfBirthsInput
    hospital: HospitalCreateNestedOneWithoutBirthRecordsInput
  }

  export type BirthRecordUncheckedCreateWithoutAttendingDoctorInput = {
    id?: string
    patientId: string
    motherId?: string | null
    fatherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateOrConnectWithoutAttendingDoctorInput = {
    where: BirthRecordWhereUniqueInput
    create: XOR<BirthRecordCreateWithoutAttendingDoctorInput, BirthRecordUncheckedCreateWithoutAttendingDoctorInput>
  }

  export type BirthRecordCreateManyAttendingDoctorInputEnvelope = {
    data: BirthRecordCreateManyAttendingDoctorInput | BirthRecordCreateManyAttendingDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DeathRecordCreateWithoutAttendingDoctorInput = {
    id?: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutDeathRecordInput
    hospital: HospitalCreateNestedOneWithoutDeathRecordsInput
  }

  export type DeathRecordUncheckedCreateWithoutAttendingDoctorInput = {
    id?: string
    patientId: string
    hospitalId: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeathRecordCreateOrConnectWithoutAttendingDoctorInput = {
    where: DeathRecordWhereUniqueInput
    create: XOR<DeathRecordCreateWithoutAttendingDoctorInput, DeathRecordUncheckedCreateWithoutAttendingDoctorInput>
  }

  export type DeathRecordCreateManyAttendingDoctorInputEnvelope = {
    data: DeathRecordCreateManyAttendingDoctorInput | DeathRecordCreateManyAttendingDoctorInput[]
    skipDuplicates?: boolean
  }

  export type PrescriptionCreateWithoutDoctorInput = {
    id?: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPrescriptionInput
    hospital: HospitalCreateNestedOneWithoutPrescriptionsInput
    orderItems?: OrderItemCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionUncheckedCreateWithoutDoctorInput = {
    id?: string
    patientId: string
    hospitalId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutPrescriptionInput
  }

  export type PrescriptionCreateOrConnectWithoutDoctorInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput>
  }

  export type PrescriptionCreateManyDoctorInputEnvelope = {
    data: PrescriptionCreateManyDoctorInput | PrescriptionCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type SecurityAuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestPath?: string | null
    success?: boolean
  }

  export type SecurityAuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestPath?: string | null
    success?: boolean
  }

  export type SecurityAuditLogCreateOrConnectWithoutUserInput = {
    where: SecurityAuditLogWhereUniqueInput
    create: XOR<SecurityAuditLogCreateWithoutUserInput, SecurityAuditLogUncheckedCreateWithoutUserInput>
  }

  export type SecurityAuditLogCreateManyUserInputEnvelope = {
    data: SecurityAuditLogCreateManyUserInput | SecurityAuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutUserInput = {
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutUserInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutUsersInput = {
    update: XOR<HospitalUpdateWithoutUsersInput, HospitalUncheckedUpdateWithoutUsersInput>
    create: XOR<HospitalCreateWithoutUsersInput, HospitalUncheckedCreateWithoutUsersInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutUsersInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutUsersInput, HospitalUncheckedUpdateWithoutUsersInput>
  }

  export type HospitalUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    where: NeonatalRecordWhereUniqueInput
    update: XOR<NeonatalRecordUpdateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedUpdateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput>
    create: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput>
  }

  export type NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    where: NeonatalRecordWhereUniqueInput
    data: XOR<NeonatalRecordUpdateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput, NeonatalRecordUncheckedUpdateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput>
  }

  export type NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    where: NeonatalRecordScalarWhereInput
    data: XOR<NeonatalRecordUpdateManyMutationInput, NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput>
  }

  export type AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    where: AntenatalRecordWhereUniqueInput
    update: XOR<AntenatalRecordUpdateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedUpdateWithoutUser_AntenatalRecord_createdByUserIdToUserInput>
    create: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_createdByUserIdToUserInput>
  }

  export type AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    where: AntenatalRecordWhereUniqueInput
    data: XOR<AntenatalRecordUpdateWithoutUser_AntenatalRecord_createdByUserIdToUserInput, AntenatalRecordUncheckedUpdateWithoutUser_AntenatalRecord_createdByUserIdToUserInput>
  }

  export type AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    where: AntenatalRecordScalarWhereInput
    data: XOR<AntenatalRecordUpdateManyMutationInput, AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput>
  }

  export type AntenatalRecordUpsertWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    where: AntenatalRecordWhereUniqueInput
    update: XOR<AntenatalRecordUpdateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedUpdateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput>
    create: XOR<AntenatalRecordCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedCreateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput>
  }

  export type AntenatalRecordUpdateWithWhereUniqueWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    where: AntenatalRecordWhereUniqueInput
    data: XOR<AntenatalRecordUpdateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput, AntenatalRecordUncheckedUpdateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput>
  }

  export type AntenatalRecordUpdateManyWithWhereWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    where: AntenatalRecordScalarWhereInput
    data: XOR<AntenatalRecordUpdateManyMutationInput, AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutUserInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutUserInput, AppointmentUncheckedUpdateWithoutUserInput>
    create: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutUserInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutUserInput, AppointmentUncheckedUpdateWithoutUserInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutUserInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutUserInput>
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutUserInput, MedicalRecordUncheckedUpdateWithoutUserInput>
    create: XOR<MedicalRecordCreateWithoutUserInput, MedicalRecordUncheckedCreateWithoutUserInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutUserInput, MedicalRecordUncheckedUpdateWithoutUserInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutUserInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type NeonatalRecordUpsertWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    where: NeonatalRecordWhereUniqueInput
    update: XOR<NeonatalRecordUpdateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedUpdateWithoutUser_NeonatalRecord_createdByUserIdToUserInput>
    create: XOR<NeonatalRecordCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedCreateWithoutUser_NeonatalRecord_createdByUserIdToUserInput>
  }

  export type NeonatalRecordUpdateWithWhereUniqueWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    where: NeonatalRecordWhereUniqueInput
    data: XOR<NeonatalRecordUpdateWithoutUser_NeonatalRecord_createdByUserIdToUserInput, NeonatalRecordUncheckedUpdateWithoutUser_NeonatalRecord_createdByUserIdToUserInput>
  }

  export type NeonatalRecordUpdateManyWithWhereWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    where: NeonatalRecordScalarWhereInput
    data: XOR<NeonatalRecordUpdateManyMutationInput, NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput>
  }

  export type PatientHospitalAccessUpsertWithWhereUniqueWithoutGranterInput = {
    where: PatientHospitalAccessWhereUniqueInput
    update: XOR<PatientHospitalAccessUpdateWithoutGranterInput, PatientHospitalAccessUncheckedUpdateWithoutGranterInput>
    create: XOR<PatientHospitalAccessCreateWithoutGranterInput, PatientHospitalAccessUncheckedCreateWithoutGranterInput>
  }

  export type PatientHospitalAccessUpdateWithWhereUniqueWithoutGranterInput = {
    where: PatientHospitalAccessWhereUniqueInput
    data: XOR<PatientHospitalAccessUpdateWithoutGranterInput, PatientHospitalAccessUncheckedUpdateWithoutGranterInput>
  }

  export type PatientHospitalAccessUpdateManyWithWhereWithoutGranterInput = {
    where: PatientHospitalAccessScalarWhereInput
    data: XOR<PatientHospitalAccessUpdateManyMutationInput, PatientHospitalAccessUncheckedUpdateManyWithoutGranterInput>
  }

  export type PatientUpsertWithWhereUniqueWithoutDoctorsInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutDoctorsInput, PatientUncheckedUpdateWithoutDoctorsInput>
    create: XOR<PatientCreateWithoutDoctorsInput, PatientUncheckedCreateWithoutDoctorsInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutDoctorsInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutDoctorsInput, PatientUncheckedUpdateWithoutDoctorsInput>
  }

  export type PatientUpdateManyWithWhereWithoutDoctorsInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutDoctorsInput>
  }

  export type ProfilePictureUpsertWithoutUserInput = {
    update: XOR<ProfilePictureUpdateWithoutUserInput, ProfilePictureUncheckedUpdateWithoutUserInput>
    create: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
    where?: ProfilePictureWhereInput
  }

  export type ProfilePictureUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfilePictureWhereInput
    data: XOR<ProfilePictureUpdateWithoutUserInput, ProfilePictureUncheckedUpdateWithoutUserInput>
  }

  export type ProfilePictureUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
    patient?: PatientUpdateOneWithoutProfilePictureNestedInput
  }

  export type ProfilePictureUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    imageData?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    mimeType?: StringFieldUpdateOperationsInput | string
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    size?: IntFieldUpdateOperationsInput | number
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ownerType?: StringFieldUpdateOperationsInput | string
  }

  export type PasswordResetUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    update: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    data: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetUpdateManyWithWhereWithoutUserInput = {
    where: PasswordResetScalarWhereInput
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyWithoutUserInput>
  }

  export type StaffProfileUpsertWithoutUserInput = {
    update: XOR<StaffProfileUpdateWithoutUserInput, StaffProfileUncheckedUpdateWithoutUserInput>
    create: XOR<StaffProfileCreateWithoutUserInput, StaffProfileUncheckedCreateWithoutUserInput>
    where?: StaffProfileWhereInput
  }

  export type StaffProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: StaffProfileWhereInput
    data: XOR<StaffProfileUpdateWithoutUserInput, StaffProfileUncheckedUpdateWithoutUserInput>
  }

  export type StaffProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
    hospital?: HospitalUpdateOneRequiredWithoutStaffProfilesNestedInput
  }

  export type StaffProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type DepartmentMembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: DepartmentMembershipWhereUniqueInput
    update: XOR<DepartmentMembershipUpdateWithoutUserInput, DepartmentMembershipUncheckedUpdateWithoutUserInput>
    create: XOR<DepartmentMembershipCreateWithoutUserInput, DepartmentMembershipUncheckedCreateWithoutUserInput>
  }

  export type DepartmentMembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: DepartmentMembershipWhereUniqueInput
    data: XOR<DepartmentMembershipUpdateWithoutUserInput, DepartmentMembershipUncheckedUpdateWithoutUserInput>
  }

  export type DepartmentMembershipUpdateManyWithWhereWithoutUserInput = {
    where: DepartmentMembershipScalarWhereInput
    data: XOR<DepartmentMembershipUpdateManyMutationInput, DepartmentMembershipUncheckedUpdateManyWithoutUserInput>
  }

  export type DepartmentMembershipScalarWhereInput = {
    AND?: DepartmentMembershipScalarWhereInput | DepartmentMembershipScalarWhereInput[]
    OR?: DepartmentMembershipScalarWhereInput[]
    NOT?: DepartmentMembershipScalarWhereInput | DepartmentMembershipScalarWhereInput[]
    id?: StringFilter<"DepartmentMembership"> | string
    userId?: StringFilter<"DepartmentMembership"> | string
    departmentId?: StringFilter<"DepartmentMembership"> | string
    role?: StringFilter<"DepartmentMembership"> | string
    joinedAt?: DateTimeFilter<"DepartmentMembership"> | Date | string
  }

  export type DoctorAvailabilityUpsertWithoutDoctorInput = {
    update: XOR<DoctorAvailabilityUpdateWithoutDoctorInput, DoctorAvailabilityUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorAvailabilityCreateWithoutDoctorInput, DoctorAvailabilityUncheckedCreateWithoutDoctorInput>
    where?: DoctorAvailabilityWhereInput
  }

  export type DoctorAvailabilityUpdateToOneWithWhereWithoutDoctorInput = {
    where?: DoctorAvailabilityWhereInput
    data: XOR<DoctorAvailabilityUpdateWithoutDoctorInput, DoctorAvailabilityUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorAvailabilityUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hospital?: HospitalUpdateOneRequiredWithoutDoctorAvailabilitiesNestedInput
  }

  export type DoctorAvailabilityUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUpsertWithWhereUniqueWithoutReferringDoctorInput = {
    where: ReferralWhereUniqueInput
    update: XOR<ReferralUpdateWithoutReferringDoctorInput, ReferralUncheckedUpdateWithoutReferringDoctorInput>
    create: XOR<ReferralCreateWithoutReferringDoctorInput, ReferralUncheckedCreateWithoutReferringDoctorInput>
  }

  export type ReferralUpdateWithWhereUniqueWithoutReferringDoctorInput = {
    where: ReferralWhereUniqueInput
    data: XOR<ReferralUpdateWithoutReferringDoctorInput, ReferralUncheckedUpdateWithoutReferringDoctorInput>
  }

  export type ReferralUpdateManyWithWhereWithoutReferringDoctorInput = {
    where: ReferralScalarWhereInput
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyWithoutReferringDoctorInput>
  }

  export type ReferralUpsertWithWhereUniqueWithoutReceivingDoctorInput = {
    where: ReferralWhereUniqueInput
    update: XOR<ReferralUpdateWithoutReceivingDoctorInput, ReferralUncheckedUpdateWithoutReceivingDoctorInput>
    create: XOR<ReferralCreateWithoutReceivingDoctorInput, ReferralUncheckedCreateWithoutReceivingDoctorInput>
  }

  export type ReferralUpdateWithWhereUniqueWithoutReceivingDoctorInput = {
    where: ReferralWhereUniqueInput
    data: XOR<ReferralUpdateWithoutReceivingDoctorInput, ReferralUncheckedUpdateWithoutReceivingDoctorInput>
  }

  export type ReferralUpdateManyWithWhereWithoutReceivingDoctorInput = {
    where: ReferralScalarWhereInput
    data: XOR<ReferralUpdateManyMutationInput, ReferralUncheckedUpdateManyWithoutReceivingDoctorInput>
  }

  export type ConversationUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ConversationWhereUniqueInput
    update: XOR<ConversationUpdateWithoutDoctorInput, ConversationUncheckedUpdateWithoutDoctorInput>
    create: XOR<ConversationCreateWithoutDoctorInput, ConversationUncheckedCreateWithoutDoctorInput>
  }

  export type ConversationUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ConversationWhereUniqueInput
    data: XOR<ConversationUpdateWithoutDoctorInput, ConversationUncheckedUpdateWithoutDoctorInput>
  }

  export type ConversationUpdateManyWithWhereWithoutDoctorInput = {
    where: ConversationScalarWhereInput
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyWithoutDoctorInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    conversationId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    attachments?: JsonNullableFilter<"Message">
    status?: EnumMessageStatusFilter<"Message"> | $Enums.MessageStatus
    sentAt?: DateTimeFilter<"Message"> | Date | string
    deliveredAt?: DateTimeNullableFilter<"Message"> | Date | string | null
    readAt?: DateTimeNullableFilter<"Message"> | Date | string | null
  }

  export type BirthRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput = {
    where: BirthRecordWhereUniqueInput
    update: XOR<BirthRecordUpdateWithoutAttendingDoctorInput, BirthRecordUncheckedUpdateWithoutAttendingDoctorInput>
    create: XOR<BirthRecordCreateWithoutAttendingDoctorInput, BirthRecordUncheckedCreateWithoutAttendingDoctorInput>
  }

  export type BirthRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput = {
    where: BirthRecordWhereUniqueInput
    data: XOR<BirthRecordUpdateWithoutAttendingDoctorInput, BirthRecordUncheckedUpdateWithoutAttendingDoctorInput>
  }

  export type BirthRecordUpdateManyWithWhereWithoutAttendingDoctorInput = {
    where: BirthRecordScalarWhereInput
    data: XOR<BirthRecordUpdateManyMutationInput, BirthRecordUncheckedUpdateManyWithoutAttendingDoctorInput>
  }

  export type DeathRecordUpsertWithWhereUniqueWithoutAttendingDoctorInput = {
    where: DeathRecordWhereUniqueInput
    update: XOR<DeathRecordUpdateWithoutAttendingDoctorInput, DeathRecordUncheckedUpdateWithoutAttendingDoctorInput>
    create: XOR<DeathRecordCreateWithoutAttendingDoctorInput, DeathRecordUncheckedCreateWithoutAttendingDoctorInput>
  }

  export type DeathRecordUpdateWithWhereUniqueWithoutAttendingDoctorInput = {
    where: DeathRecordWhereUniqueInput
    data: XOR<DeathRecordUpdateWithoutAttendingDoctorInput, DeathRecordUncheckedUpdateWithoutAttendingDoctorInput>
  }

  export type DeathRecordUpdateManyWithWhereWithoutAttendingDoctorInput = {
    where: DeathRecordScalarWhereInput
    data: XOR<DeathRecordUpdateManyMutationInput, DeathRecordUncheckedUpdateManyWithoutAttendingDoctorInput>
  }

  export type PrescriptionUpsertWithWhereUniqueWithoutDoctorInput = {
    where: PrescriptionWhereUniqueInput
    update: XOR<PrescriptionUpdateWithoutDoctorInput, PrescriptionUncheckedUpdateWithoutDoctorInput>
    create: XOR<PrescriptionCreateWithoutDoctorInput, PrescriptionUncheckedCreateWithoutDoctorInput>
  }

  export type PrescriptionUpdateWithWhereUniqueWithoutDoctorInput = {
    where: PrescriptionWhereUniqueInput
    data: XOR<PrescriptionUpdateWithoutDoctorInput, PrescriptionUncheckedUpdateWithoutDoctorInput>
  }

  export type PrescriptionUpdateManyWithWhereWithoutDoctorInput = {
    where: PrescriptionScalarWhereInput
    data: XOR<PrescriptionUpdateManyMutationInput, PrescriptionUncheckedUpdateManyWithoutDoctorInput>
  }

  export type SecurityAuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: SecurityAuditLogWhereUniqueInput
    update: XOR<SecurityAuditLogUpdateWithoutUserInput, SecurityAuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<SecurityAuditLogCreateWithoutUserInput, SecurityAuditLogUncheckedCreateWithoutUserInput>
  }

  export type SecurityAuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: SecurityAuditLogWhereUniqueInput
    data: XOR<SecurityAuditLogUpdateWithoutUserInput, SecurityAuditLogUncheckedUpdateWithoutUserInput>
  }

  export type SecurityAuditLogUpdateManyWithWhereWithoutUserInput = {
    where: SecurityAuditLogScalarWhereInput
    data: XOR<SecurityAuditLogUpdateManyMutationInput, SecurityAuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SecurityAuditLogScalarWhereInput = {
    AND?: SecurityAuditLogScalarWhereInput | SecurityAuditLogScalarWhereInput[]
    OR?: SecurityAuditLogScalarWhereInput[]
    NOT?: SecurityAuditLogScalarWhereInput | SecurityAuditLogScalarWhereInput[]
    id?: StringFilter<"SecurityAuditLog"> | string
    userId?: StringFilter<"SecurityAuditLog"> | string
    action?: StringFilter<"SecurityAuditLog"> | string
    details?: StringNullableFilter<"SecurityAuditLog"> | string | null
    ipAddress?: StringNullableFilter<"SecurityAuditLog"> | string | null
    userAgent?: StringNullableFilter<"SecurityAuditLog"> | string | null
    createdAt?: DateTimeFilter<"SecurityAuditLog"> | Date | string
    updatedAt?: DateTimeFilter<"SecurityAuditLog"> | Date | string
    requestPath?: StringNullableFilter<"SecurityAuditLog"> | string | null
    success?: BoolFilter<"SecurityAuditLog"> | boolean
  }

  export type PatientCreateWithoutPasswordResetsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPasswordResetsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPasswordResetsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPasswordResetsInput, PatientUncheckedCreateWithoutPasswordResetsInput>
  }

  export type UserCreateWithoutPasswordResetsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordResetsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordResetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
  }

  export type PatientUpsertWithoutPasswordResetsInput = {
    update: XOR<PatientUpdateWithoutPasswordResetsInput, PatientUncheckedUpdateWithoutPasswordResetsInput>
    create: XOR<PatientCreateWithoutPasswordResetsInput, PatientUncheckedCreateWithoutPasswordResetsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPasswordResetsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPasswordResetsInput, PatientUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type PatientUpdateWithoutPasswordResetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPasswordResetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutPasswordResetsInput = {
    update: XOR<UserUpdateWithoutPasswordResetsInput, UserUncheckedUpdateWithoutPasswordResetsInput>
    create: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordResetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordResetsInput, UserUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type UserUpdateWithoutPasswordResetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordResetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSecurityAuditLogInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
  }

  export type UserUncheckedCreateWithoutSecurityAuditLogInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type UserCreateOrConnectWithoutSecurityAuditLogInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSecurityAuditLogInput, UserUncheckedCreateWithoutSecurityAuditLogInput>
  }

  export type UserUpsertWithoutSecurityAuditLogInput = {
    update: XOR<UserUpdateWithoutSecurityAuditLogInput, UserUncheckedUpdateWithoutSecurityAuditLogInput>
    create: XOR<UserCreateWithoutSecurityAuditLogInput, UserUncheckedCreateWithoutSecurityAuditLogInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSecurityAuditLogInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSecurityAuditLogInput, UserUncheckedUpdateWithoutSecurityAuditLogInput>
  }

  export type UserUpdateWithoutSecurityAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
  }

  export type UserUncheckedUpdateWithoutSecurityAuditLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PatientCreateWithoutProfilePictureInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutProfilePictureInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutProfilePictureInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutProfilePictureInput, PatientUncheckedCreateWithoutProfilePictureInput>
  }

  export type UserCreateWithoutProfilePictureInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilePictureInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilePictureInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
  }

  export type PatientUpsertWithoutProfilePictureInput = {
    update: XOR<PatientUpdateWithoutProfilePictureInput, PatientUncheckedUpdateWithoutProfilePictureInput>
    create: XOR<PatientCreateWithoutProfilePictureInput, PatientUncheckedCreateWithoutProfilePictureInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutProfilePictureInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutProfilePictureInput, PatientUncheckedUpdateWithoutProfilePictureInput>
  }

  export type PatientUpdateWithoutProfilePictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutProfilePictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutProfilePictureInput = {
    update: XOR<UserUpdateWithoutProfilePictureInput, UserUncheckedUpdateWithoutProfilePictureInput>
    create: XOR<UserCreateWithoutProfilePictureInput, UserUncheckedCreateWithoutProfilePictureInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfilePictureInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfilePictureInput, UserUncheckedUpdateWithoutProfilePictureInput>
  }

  export type UserUpdateWithoutProfilePictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilePictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientCreateWithoutEmailsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutEmailsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutEmailsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutEmailsInput, PatientUncheckedCreateWithoutEmailsInput>
  }

  export type PatientUpsertWithoutEmailsInput = {
    update: XOR<PatientUpdateWithoutEmailsInput, PatientUncheckedUpdateWithoutEmailsInput>
    create: XOR<PatientCreateWithoutEmailsInput, PatientUncheckedCreateWithoutEmailsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutEmailsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutEmailsInput, PatientUncheckedUpdateWithoutEmailsInput>
  }

  export type PatientUpdateWithoutEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateWithoutPhonesInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPhonesInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPhonesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPhonesInput, PatientUncheckedCreateWithoutPhonesInput>
  }

  export type PatientUpsertWithoutPhonesInput = {
    update: XOR<PatientUpdateWithoutPhonesInput, PatientUncheckedUpdateWithoutPhonesInput>
    create: XOR<PatientCreateWithoutPhonesInput, PatientUncheckedCreateWithoutPhonesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPhonesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPhonesInput, PatientUncheckedUpdateWithoutPhonesInput>
  }

  export type PatientUpdateWithoutPhonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPhonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutDepartmentsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutDepartmentsInput, HospitalUncheckedCreateWithoutDepartmentsInput>
  }

  export type DepartmentMembershipCreateWithoutDepartmentInput = {
    id?: string
    role: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutDepartmentMembershipsInput
  }

  export type DepartmentMembershipUncheckedCreateWithoutDepartmentInput = {
    id?: string
    userId: string
    role: string
    joinedAt?: Date | string
  }

  export type DepartmentMembershipCreateOrConnectWithoutDepartmentInput = {
    where: DepartmentMembershipWhereUniqueInput
    create: XOR<DepartmentMembershipCreateWithoutDepartmentInput, DepartmentMembershipUncheckedCreateWithoutDepartmentInput>
  }

  export type DepartmentMembershipCreateManyDepartmentInputEnvelope = {
    data: DepartmentMembershipCreateManyDepartmentInput | DepartmentMembershipCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type HospitalUpsertWithoutDepartmentsInput = {
    update: XOR<HospitalUpdateWithoutDepartmentsInput, HospitalUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<HospitalCreateWithoutDepartmentsInput, HospitalUncheckedCreateWithoutDepartmentsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutDepartmentsInput, HospitalUncheckedUpdateWithoutDepartmentsInput>
  }

  export type HospitalUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type DepartmentMembershipUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: DepartmentMembershipWhereUniqueInput
    update: XOR<DepartmentMembershipUpdateWithoutDepartmentInput, DepartmentMembershipUncheckedUpdateWithoutDepartmentInput>
    create: XOR<DepartmentMembershipCreateWithoutDepartmentInput, DepartmentMembershipUncheckedCreateWithoutDepartmentInput>
  }

  export type DepartmentMembershipUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: DepartmentMembershipWhereUniqueInput
    data: XOR<DepartmentMembershipUpdateWithoutDepartmentInput, DepartmentMembershipUncheckedUpdateWithoutDepartmentInput>
  }

  export type DepartmentMembershipUpdateManyWithWhereWithoutDepartmentInput = {
    where: DepartmentMembershipScalarWhereInput
    data: XOR<DepartmentMembershipUpdateManyMutationInput, DepartmentMembershipUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutDepartmentMembershipsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDepartmentMembershipsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDepartmentMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentMembershipsInput, UserUncheckedCreateWithoutDepartmentMembershipsInput>
  }

  export type DepartmentCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    hospital: HospitalCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    hospitalId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DepartmentCreateOrConnectWithoutMembersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutMembersInput, DepartmentUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutDepartmentMembershipsInput = {
    update: XOR<UserUpdateWithoutDepartmentMembershipsInput, UserUncheckedUpdateWithoutDepartmentMembershipsInput>
    create: XOR<UserCreateWithoutDepartmentMembershipsInput, UserUncheckedCreateWithoutDepartmentMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDepartmentMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDepartmentMembershipsInput, UserUncheckedUpdateWithoutDepartmentMembershipsInput>
  }

  export type UserUpdateWithoutDepartmentMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutMembersInput = {
    update: XOR<DepartmentUpdateWithoutMembersInput, DepartmentUncheckedUpdateWithoutMembersInput>
    create: XOR<DepartmentCreateWithoutMembersInput, DepartmentUncheckedCreateWithoutMembersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutMembersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutMembersInput, DepartmentUncheckedUpdateWithoutMembersInput>
  }

  export type DepartmentUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutStaffProfileInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStaffProfileInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStaffProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
  }

  export type HospitalCreateWithoutStaffProfilesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutStaffProfilesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutStaffProfilesInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutStaffProfilesInput, HospitalUncheckedCreateWithoutStaffProfilesInput>
  }

  export type UserUpsertWithoutStaffProfileInput = {
    update: XOR<UserUpdateWithoutStaffProfileInput, UserUncheckedUpdateWithoutStaffProfileInput>
    create: XOR<UserCreateWithoutStaffProfileInput, UserUncheckedCreateWithoutStaffProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffProfileInput, UserUncheckedUpdateWithoutStaffProfileInput>
  }

  export type UserUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalUpsertWithoutStaffProfilesInput = {
    update: XOR<HospitalUpdateWithoutStaffProfilesInput, HospitalUncheckedUpdateWithoutStaffProfilesInput>
    create: XOR<HospitalCreateWithoutStaffProfilesInput, HospitalUncheckedCreateWithoutStaffProfilesInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutStaffProfilesInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutStaffProfilesInput, HospitalUncheckedUpdateWithoutStaffProfilesInput>
  }

  export type HospitalUpdateWithoutStaffProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutStaffProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type PatientCreateWithoutHospitalAccessesInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutHospitalAccessesInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutHospitalAccessesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutHospitalAccessesInput, PatientUncheckedCreateWithoutHospitalAccessesInput>
  }

  export type HospitalCreateWithoutPatientAccessesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutPatientAccessesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutPatientAccessesInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutPatientAccessesInput, HospitalUncheckedCreateWithoutPatientAccessesInput>
  }

  export type UserCreateWithoutPatientAccess_grantedByInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientAccess_grantedByInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientAccess_grantedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientAccess_grantedByInput, UserUncheckedCreateWithoutPatientAccess_grantedByInput>
  }

  export type PatientUpsertWithoutHospitalAccessesInput = {
    update: XOR<PatientUpdateWithoutHospitalAccessesInput, PatientUncheckedUpdateWithoutHospitalAccessesInput>
    create: XOR<PatientCreateWithoutHospitalAccessesInput, PatientUncheckedCreateWithoutHospitalAccessesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutHospitalAccessesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutHospitalAccessesInput, PatientUncheckedUpdateWithoutHospitalAccessesInput>
  }

  export type PatientUpdateWithoutHospitalAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutHospitalAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutPatientAccessesInput = {
    update: XOR<HospitalUpdateWithoutPatientAccessesInput, HospitalUncheckedUpdateWithoutPatientAccessesInput>
    create: XOR<HospitalCreateWithoutPatientAccessesInput, HospitalUncheckedCreateWithoutPatientAccessesInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutPatientAccessesInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutPatientAccessesInput, HospitalUncheckedUpdateWithoutPatientAccessesInput>
  }

  export type HospitalUpdateWithoutPatientAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutPatientAccessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type UserUpsertWithoutPatientAccess_grantedByInput = {
    update: XOR<UserUpdateWithoutPatientAccess_grantedByInput, UserUncheckedUpdateWithoutPatientAccess_grantedByInput>
    create: XOR<UserCreateWithoutPatientAccess_grantedByInput, UserUncheckedCreateWithoutPatientAccess_grantedByInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientAccess_grantedByInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientAccess_grantedByInput, UserUncheckedUpdateWithoutPatientAccess_grantedByInput>
  }

  export type UserUpdateWithoutPatientAccess_grantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientAccess_grantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientCreateWithoutSearchIndexInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutSearchIndexInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutSearchIndexInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutSearchIndexInput, PatientUncheckedCreateWithoutSearchIndexInput>
  }

  export type PatientUpsertWithoutSearchIndexInput = {
    update: XOR<PatientUpdateWithoutSearchIndexInput, PatientUncheckedUpdateWithoutSearchIndexInput>
    create: XOR<PatientCreateWithoutSearchIndexInput, PatientUncheckedCreateWithoutSearchIndexInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutSearchIndexInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutSearchIndexInput, PatientUncheckedUpdateWithoutSearchIndexInput>
  }

  export type PatientUpdateWithoutSearchIndexInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutSearchIndexInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserCreateWithoutAvailabilityInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAvailabilityInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAvailabilityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
  }

  export type HospitalCreateWithoutDoctorAvailabilitiesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutDoctorAvailabilitiesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutDoctorAvailabilitiesInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutDoctorAvailabilitiesInput, HospitalUncheckedCreateWithoutDoctorAvailabilitiesInput>
  }

  export type UserUpsertWithoutAvailabilityInput = {
    update: XOR<UserUpdateWithoutAvailabilityInput, UserUncheckedUpdateWithoutAvailabilityInput>
    create: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAvailabilityInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAvailabilityInput, UserUncheckedUpdateWithoutAvailabilityInput>
  }

  export type UserUpdateWithoutAvailabilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvailabilityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalUpsertWithoutDoctorAvailabilitiesInput = {
    update: XOR<HospitalUpdateWithoutDoctorAvailabilitiesInput, HospitalUncheckedUpdateWithoutDoctorAvailabilitiesInput>
    create: XOR<HospitalCreateWithoutDoctorAvailabilitiesInput, HospitalUncheckedCreateWithoutDoctorAvailabilitiesInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutDoctorAvailabilitiesInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutDoctorAvailabilitiesInput, HospitalUncheckedUpdateWithoutDoctorAvailabilitiesInput>
  }

  export type HospitalUpdateWithoutDoctorAvailabilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutDoctorAvailabilitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type PatientCreateWithoutWidgetPrefsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutWidgetPrefsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutWidgetPrefsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutWidgetPrefsInput, PatientUncheckedCreateWithoutWidgetPrefsInput>
  }

  export type PatientUpsertWithoutWidgetPrefsInput = {
    update: XOR<PatientUpdateWithoutWidgetPrefsInput, PatientUncheckedUpdateWithoutWidgetPrefsInput>
    create: XOR<PatientCreateWithoutWidgetPrefsInput, PatientUncheckedCreateWithoutWidgetPrefsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutWidgetPrefsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutWidgetPrefsInput, PatientUncheckedUpdateWithoutWidgetPrefsInput>
  }

  export type PatientUpdateWithoutWidgetPrefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutWidgetPrefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateWithoutReferralsReceivedInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutReferralsReceivedInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutReferralsReceivedInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutReferralsReceivedInput, PatientUncheckedCreateWithoutReferralsReceivedInput>
  }

  export type HospitalCreateWithoutReferralsFromInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutReferralsFromInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutReferralsFromInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutReferralsFromInput, HospitalUncheckedCreateWithoutReferralsFromInput>
  }

  export type HospitalCreateWithoutReferralsToInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutReferralsToInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutReferralsToInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutReferralsToInput, HospitalUncheckedCreateWithoutReferralsToInput>
  }

  export type UserCreateWithoutReferralsSentInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferralsSentInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferralsSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralsSentInput, UserUncheckedCreateWithoutReferralsSentInput>
  }

  export type UserCreateWithoutReferralsReceivedInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferralsReceivedInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferralsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferralsReceivedInput, UserUncheckedCreateWithoutReferralsReceivedInput>
  }

  export type PatientUpsertWithoutReferralsReceivedInput = {
    update: XOR<PatientUpdateWithoutReferralsReceivedInput, PatientUncheckedUpdateWithoutReferralsReceivedInput>
    create: XOR<PatientCreateWithoutReferralsReceivedInput, PatientUncheckedCreateWithoutReferralsReceivedInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutReferralsReceivedInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutReferralsReceivedInput, PatientUncheckedUpdateWithoutReferralsReceivedInput>
  }

  export type PatientUpdateWithoutReferralsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutReferralsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutReferralsFromInput = {
    update: XOR<HospitalUpdateWithoutReferralsFromInput, HospitalUncheckedUpdateWithoutReferralsFromInput>
    create: XOR<HospitalCreateWithoutReferralsFromInput, HospitalUncheckedCreateWithoutReferralsFromInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutReferralsFromInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutReferralsFromInput, HospitalUncheckedUpdateWithoutReferralsFromInput>
  }

  export type HospitalUpdateWithoutReferralsFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutReferralsFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUpsertWithoutReferralsToInput = {
    update: XOR<HospitalUpdateWithoutReferralsToInput, HospitalUncheckedUpdateWithoutReferralsToInput>
    create: XOR<HospitalCreateWithoutReferralsToInput, HospitalUncheckedCreateWithoutReferralsToInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutReferralsToInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutReferralsToInput, HospitalUncheckedUpdateWithoutReferralsToInput>
  }

  export type HospitalUpdateWithoutReferralsToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutReferralsToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type UserUpsertWithoutReferralsSentInput = {
    update: XOR<UserUpdateWithoutReferralsSentInput, UserUncheckedUpdateWithoutReferralsSentInput>
    create: XOR<UserCreateWithoutReferralsSentInput, UserUncheckedCreateWithoutReferralsSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralsSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralsSentInput, UserUncheckedUpdateWithoutReferralsSentInput>
  }

  export type UserUpdateWithoutReferralsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReferralsReceivedInput = {
    update: XOR<UserUpdateWithoutReferralsReceivedInput, UserUncheckedUpdateWithoutReferralsReceivedInput>
    create: XOR<UserCreateWithoutReferralsReceivedInput, UserUncheckedCreateWithoutReferralsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferralsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferralsReceivedInput, UserUncheckedUpdateWithoutReferralsReceivedInput>
  }

  export type UserUpdateWithoutReferralsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferralsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalCreateWithoutAmbulancesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutAmbulancesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutAmbulancesInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutAmbulancesInput, HospitalUncheckedCreateWithoutAmbulancesInput>
  }

  export type AmbulanceDispatchCreateWithoutAmbulanceInput = {
    id?: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAmbulanceDispatchesInput
    hospital: HospitalCreateNestedOneWithoutAmbulanceDispatchesInput
  }

  export type AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput = {
    id?: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceDispatchCreateOrConnectWithoutAmbulanceInput = {
    where: AmbulanceDispatchWhereUniqueInput
    create: XOR<AmbulanceDispatchCreateWithoutAmbulanceInput, AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput>
  }

  export type AmbulanceDispatchCreateManyAmbulanceInputEnvelope = {
    data: AmbulanceDispatchCreateManyAmbulanceInput | AmbulanceDispatchCreateManyAmbulanceInput[]
    skipDuplicates?: boolean
  }

  export type HospitalUpsertWithoutAmbulancesInput = {
    update: XOR<HospitalUpdateWithoutAmbulancesInput, HospitalUncheckedUpdateWithoutAmbulancesInput>
    create: XOR<HospitalCreateWithoutAmbulancesInput, HospitalUncheckedCreateWithoutAmbulancesInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutAmbulancesInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutAmbulancesInput, HospitalUncheckedUpdateWithoutAmbulancesInput>
  }

  export type HospitalUpdateWithoutAmbulancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutAmbulancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type AmbulanceDispatchUpsertWithWhereUniqueWithoutAmbulanceInput = {
    where: AmbulanceDispatchWhereUniqueInput
    update: XOR<AmbulanceDispatchUpdateWithoutAmbulanceInput, AmbulanceDispatchUncheckedUpdateWithoutAmbulanceInput>
    create: XOR<AmbulanceDispatchCreateWithoutAmbulanceInput, AmbulanceDispatchUncheckedCreateWithoutAmbulanceInput>
  }

  export type AmbulanceDispatchUpdateWithWhereUniqueWithoutAmbulanceInput = {
    where: AmbulanceDispatchWhereUniqueInput
    data: XOR<AmbulanceDispatchUpdateWithoutAmbulanceInput, AmbulanceDispatchUncheckedUpdateWithoutAmbulanceInput>
  }

  export type AmbulanceDispatchUpdateManyWithWhereWithoutAmbulanceInput = {
    where: AmbulanceDispatchScalarWhereInput
    data: XOR<AmbulanceDispatchUpdateManyMutationInput, AmbulanceDispatchUncheckedUpdateManyWithoutAmbulanceInput>
  }

  export type AmbulanceCreateWithoutDispatchesInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
    hospital: HospitalCreateNestedOneWithoutAmbulancesInput
  }

  export type AmbulanceUncheckedCreateWithoutDispatchesInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    hospitalId: string
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
  }

  export type AmbulanceCreateOrConnectWithoutDispatchesInput = {
    where: AmbulanceWhereUniqueInput
    create: XOR<AmbulanceCreateWithoutDispatchesInput, AmbulanceUncheckedCreateWithoutDispatchesInput>
  }

  export type PatientCreateWithoutAmbulanceDispatchesInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAmbulanceDispatchesInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAmbulanceDispatchesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAmbulanceDispatchesInput, PatientUncheckedCreateWithoutAmbulanceDispatchesInput>
  }

  export type HospitalCreateWithoutAmbulanceDispatchesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutAmbulanceDispatchesInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutAmbulanceDispatchesInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutAmbulanceDispatchesInput, HospitalUncheckedCreateWithoutAmbulanceDispatchesInput>
  }

  export type AmbulanceUpsertWithoutDispatchesInput = {
    update: XOR<AmbulanceUpdateWithoutDispatchesInput, AmbulanceUncheckedUpdateWithoutDispatchesInput>
    create: XOR<AmbulanceCreateWithoutDispatchesInput, AmbulanceUncheckedCreateWithoutDispatchesInput>
    where?: AmbulanceWhereInput
  }

  export type AmbulanceUpdateToOneWithWhereWithoutDispatchesInput = {
    where?: AmbulanceWhereInput
    data: XOR<AmbulanceUpdateWithoutDispatchesInput, AmbulanceUncheckedUpdateWithoutDispatchesInput>
  }

  export type AmbulanceUpdateWithoutDispatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hospital?: HospitalUpdateOneRequiredWithoutAmbulancesNestedInput
  }

  export type AmbulanceUncheckedUpdateWithoutDispatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    hospitalId?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUpsertWithoutAmbulanceDispatchesInput = {
    update: XOR<PatientUpdateWithoutAmbulanceDispatchesInput, PatientUncheckedUpdateWithoutAmbulanceDispatchesInput>
    create: XOR<PatientCreateWithoutAmbulanceDispatchesInput, PatientUncheckedCreateWithoutAmbulanceDispatchesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAmbulanceDispatchesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAmbulanceDispatchesInput, PatientUncheckedUpdateWithoutAmbulanceDispatchesInput>
  }

  export type PatientUpdateWithoutAmbulanceDispatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAmbulanceDispatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutAmbulanceDispatchesInput = {
    update: XOR<HospitalUpdateWithoutAmbulanceDispatchesInput, HospitalUncheckedUpdateWithoutAmbulanceDispatchesInput>
    create: XOR<HospitalCreateWithoutAmbulanceDispatchesInput, HospitalUncheckedCreateWithoutAmbulanceDispatchesInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutAmbulanceDispatchesInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutAmbulanceDispatchesInput, HospitalUncheckedUpdateWithoutAmbulanceDispatchesInput>
  }

  export type HospitalUpdateWithoutAmbulanceDispatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutAmbulanceDispatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type PatientCreateWithoutAmbulanceRequestsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAmbulanceRequestsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAmbulanceRequestsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAmbulanceRequestsInput, PatientUncheckedCreateWithoutAmbulanceRequestsInput>
  }

  export type HospitalCreateWithoutAmbulanceRequestsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutAmbulanceRequestsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutAmbulanceRequestsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutAmbulanceRequestsInput, HospitalUncheckedCreateWithoutAmbulanceRequestsInput>
  }

  export type PatientUpsertWithoutAmbulanceRequestsInput = {
    update: XOR<PatientUpdateWithoutAmbulanceRequestsInput, PatientUncheckedUpdateWithoutAmbulanceRequestsInput>
    create: XOR<PatientCreateWithoutAmbulanceRequestsInput, PatientUncheckedCreateWithoutAmbulanceRequestsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAmbulanceRequestsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAmbulanceRequestsInput, PatientUncheckedUpdateWithoutAmbulanceRequestsInput>
  }

  export type PatientUpdateWithoutAmbulanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAmbulanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutAmbulanceRequestsInput = {
    update: XOR<HospitalUpdateWithoutAmbulanceRequestsInput, HospitalUncheckedUpdateWithoutAmbulanceRequestsInput>
    create: XOR<HospitalCreateWithoutAmbulanceRequestsInput, HospitalUncheckedCreateWithoutAmbulanceRequestsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutAmbulanceRequestsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutAmbulanceRequestsInput, HospitalUncheckedUpdateWithoutAmbulanceRequestsInput>
  }

  export type HospitalUpdateWithoutAmbulanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutAmbulanceRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type PatientCreateWithoutWalletInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutWalletInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutWalletInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutWalletInput, PatientUncheckedCreateWithoutWalletInput>
  }

  export type WalletTransactionCreateWithoutWalletInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    payment?: PaymentCreateNestedOneWithoutTransactionInput
  }

  export type WalletTransactionUncheckedCreateWithoutWalletInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    payment?: PaymentUncheckedCreateNestedOneWithoutTransactionInput
  }

  export type WalletTransactionCreateOrConnectWithoutWalletInput = {
    where: WalletTransactionWhereUniqueInput
    create: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput>
  }

  export type WalletTransactionCreateManyWalletInputEnvelope = {
    data: WalletTransactionCreateManyWalletInput | WalletTransactionCreateManyWalletInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutWalletInput = {
    update: XOR<PatientUpdateWithoutWalletInput, PatientUncheckedUpdateWithoutWalletInput>
    create: XOR<PatientCreateWithoutWalletInput, PatientUncheckedCreateWithoutWalletInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutWalletInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutWalletInput, PatientUncheckedUpdateWithoutWalletInput>
  }

  export type PatientUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type WalletTransactionUpsertWithWhereUniqueWithoutWalletInput = {
    where: WalletTransactionWhereUniqueInput
    update: XOR<WalletTransactionUpdateWithoutWalletInput, WalletTransactionUncheckedUpdateWithoutWalletInput>
    create: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput>
  }

  export type WalletTransactionUpdateWithWhereUniqueWithoutWalletInput = {
    where: WalletTransactionWhereUniqueInput
    data: XOR<WalletTransactionUpdateWithoutWalletInput, WalletTransactionUncheckedUpdateWithoutWalletInput>
  }

  export type WalletTransactionUpdateManyWithWhereWithoutWalletInput = {
    where: WalletTransactionScalarWhereInput
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyWithoutWalletInput>
  }

  export type WalletTransactionScalarWhereInput = {
    AND?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
    OR?: WalletTransactionScalarWhereInput[]
    NOT?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
    id?: StringFilter<"WalletTransaction"> | string
    walletId?: StringFilter<"WalletTransaction"> | string
    amount?: FloatFilter<"WalletTransaction"> | number
    type?: EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
    status?: EnumTransactionStatusFilter<"WalletTransaction"> | $Enums.TransactionStatus
    reference?: StringFilter<"WalletTransaction"> | string
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    metadata?: JsonNullableFilter<"WalletTransaction">
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    completedAt?: DateTimeNullableFilter<"WalletTransaction"> | Date | string | null
  }

  export type WalletCreateWithoutTransactionsInput = {
    id?: string
    balance?: number
    currency?: string
    status?: $Enums.WalletStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutTransactionsInput = {
    id?: string
    patientId: string
    balance?: number
    currency?: string
    status?: $Enums.WalletStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WalletCreateOrConnectWithoutTransactionsInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
  }

  export type PaymentCreateWithoutTransactionInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    billing: BillingCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutTransactionInput = {
    id?: string
    billingId: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutTransactionInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
  }

  export type WalletUpsertWithoutTransactionsInput = {
    update: XOR<WalletUpdateWithoutTransactionsInput, WalletUncheckedUpdateWithoutTransactionsInput>
    create: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutTransactionsInput, WalletUncheckedUpdateWithoutTransactionsInput>
  }

  export type WalletUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumWalletStatusFieldUpdateOperationsInput | $Enums.WalletStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpsertWithoutTransactionInput = {
    update: XOR<PaymentUpdateWithoutTransactionInput, PaymentUncheckedUpdateWithoutTransactionInput>
    create: XOR<PaymentCreateWithoutTransactionInput, PaymentUncheckedCreateWithoutTransactionInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutTransactionInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutTransactionInput, PaymentUncheckedUpdateWithoutTransactionInput>
  }

  export type PaymentUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing?: BillingUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    billingId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateWithoutBillingRecordsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutBillingRecordsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutBillingRecordsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutBillingRecordsInput, PatientUncheckedCreateWithoutBillingRecordsInput>
  }

  export type HospitalCreateWithoutBillingRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutBillingRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutBillingRecordsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutBillingRecordsInput, HospitalUncheckedCreateWithoutBillingRecordsInput>
  }

  export type PaymentCreateWithoutBillingInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction?: WalletTransactionCreateNestedOneWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutBillingInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    transactionId?: string | null
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutBillingInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput>
  }

  export type PaymentCreateManyBillingInputEnvelope = {
    data: PaymentCreateManyBillingInput | PaymentCreateManyBillingInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutBillingRecordsInput = {
    update: XOR<PatientUpdateWithoutBillingRecordsInput, PatientUncheckedUpdateWithoutBillingRecordsInput>
    create: XOR<PatientCreateWithoutBillingRecordsInput, PatientUncheckedCreateWithoutBillingRecordsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutBillingRecordsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutBillingRecordsInput, PatientUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type PatientUpdateWithoutBillingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutBillingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutBillingRecordsInput = {
    update: XOR<HospitalUpdateWithoutBillingRecordsInput, HospitalUncheckedUpdateWithoutBillingRecordsInput>
    create: XOR<HospitalCreateWithoutBillingRecordsInput, HospitalUncheckedCreateWithoutBillingRecordsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutBillingRecordsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutBillingRecordsInput, HospitalUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type HospitalUpdateWithoutBillingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutBillingRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type PaymentUpsertWithWhereUniqueWithoutBillingInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutBillingInput, PaymentUncheckedUpdateWithoutBillingInput>
    create: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutBillingInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutBillingInput, PaymentUncheckedUpdateWithoutBillingInput>
  }

  export type PaymentUpdateManyWithWhereWithoutBillingInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutBillingInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    billingId?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    method?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    reference?: StringFilter<"Payment"> | string
    status?: EnumTransactionStatusFilter<"Payment"> | $Enums.TransactionStatus
    transactionId?: StringNullableFilter<"Payment"> | string | null
    receiptNumber?: StringFilter<"Payment"> | string
    paymentDate?: DateTimeFilter<"Payment"> | Date | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type BillingCreateWithoutPaymentsInput = {
    id?: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
    patient: PatientCreateNestedOneWithoutBillingRecordsInput
    hospital: HospitalCreateNestedOneWithoutBillingRecordsInput
  }

  export type BillingUncheckedCreateWithoutPaymentsInput = {
    id?: string
    patientId: string
    hospitalId: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
  }

  export type BillingCreateOrConnectWithoutPaymentsInput = {
    where: BillingWhereUniqueInput
    create: XOR<BillingCreateWithoutPaymentsInput, BillingUncheckedCreateWithoutPaymentsInput>
  }

  export type WalletTransactionCreateWithoutPaymentInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
    wallet: WalletCreateNestedOneWithoutTransactionsInput
  }

  export type WalletTransactionUncheckedCreateWithoutPaymentInput = {
    id?: string
    walletId: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type WalletTransactionCreateOrConnectWithoutPaymentInput = {
    where: WalletTransactionWhereUniqueInput
    create: XOR<WalletTransactionCreateWithoutPaymentInput, WalletTransactionUncheckedCreateWithoutPaymentInput>
  }

  export type BillingUpsertWithoutPaymentsInput = {
    update: XOR<BillingUpdateWithoutPaymentsInput, BillingUncheckedUpdateWithoutPaymentsInput>
    create: XOR<BillingCreateWithoutPaymentsInput, BillingUncheckedCreateWithoutPaymentsInput>
    where?: BillingWhereInput
  }

  export type BillingUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: BillingWhereInput
    data: XOR<BillingUpdateWithoutPaymentsInput, BillingUncheckedUpdateWithoutPaymentsInput>
  }

  export type BillingUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutBillingRecordsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutBillingRecordsNestedInput
  }

  export type BillingUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WalletTransactionUpsertWithoutPaymentInput = {
    update: XOR<WalletTransactionUpdateWithoutPaymentInput, WalletTransactionUncheckedUpdateWithoutPaymentInput>
    create: XOR<WalletTransactionCreateWithoutPaymentInput, WalletTransactionUncheckedCreateWithoutPaymentInput>
    where?: WalletTransactionWhereInput
  }

  export type WalletTransactionUpdateToOneWithWhereWithoutPaymentInput = {
    where?: WalletTransactionWhereInput
    data: XOR<WalletTransactionUpdateWithoutPaymentInput, WalletTransactionUncheckedUpdateWithoutPaymentInput>
  }

  export type WalletTransactionUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    wallet?: WalletUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type WalletTransactionUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCreateWithoutConversationsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutConversationsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutConversationsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutConversationsInput, PatientUncheckedCreateWithoutConversationsInput>
  }

  export type HospitalCreateWithoutConversationsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutConversationsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutConversationsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutConversationsInput, HospitalUncheckedCreateWithoutConversationsInput>
  }

  export type UserCreateWithoutConversationsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConversationsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConversationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
  }

  export type MessageCreateWithoutConversationInput = {
    id?: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
    sender: UserCreateNestedOneWithoutMessagesSentInput
  }

  export type MessageUncheckedCreateWithoutConversationInput = {
    id?: string
    senderId: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
  }

  export type MessageCreateOrConnectWithoutConversationInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageCreateManyConversationInputEnvelope = {
    data: MessageCreateManyConversationInput | MessageCreateManyConversationInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutConversationsInput = {
    update: XOR<PatientUpdateWithoutConversationsInput, PatientUncheckedUpdateWithoutConversationsInput>
    create: XOR<PatientCreateWithoutConversationsInput, PatientUncheckedCreateWithoutConversationsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutConversationsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutConversationsInput, PatientUncheckedUpdateWithoutConversationsInput>
  }

  export type PatientUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutConversationsInput = {
    update: XOR<HospitalUpdateWithoutConversationsInput, HospitalUncheckedUpdateWithoutConversationsInput>
    create: XOR<HospitalCreateWithoutConversationsInput, HospitalUncheckedCreateWithoutConversationsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutConversationsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutConversationsInput, HospitalUncheckedUpdateWithoutConversationsInput>
  }

  export type HospitalUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type UserUpsertWithoutConversationsInput = {
    update: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConversationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
  }

  export type UserUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithWhereWithoutConversationInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutConversationInput>
  }

  export type ConversationCreateWithoutMessagesInput = {
    id?: string
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutConversationsInput
    hospital: HospitalCreateNestedOneWithoutConversationsInput
    doctor?: UserCreateNestedOneWithoutConversationsInput
  }

  export type ConversationUncheckedCreateWithoutMessagesInput = {
    id?: string
    patientId: string
    hospitalId: string
    doctorId?: string | null
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConversationCreateOrConnectWithoutMessagesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessagesSentInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesSentInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
  }

  export type ConversationUpsertWithoutMessagesInput = {
    update: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    where?: ConversationWhereInput
  }

  export type ConversationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ConversationWhereInput
    data: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutConversationsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutConversationsNestedInput
    doctor?: UserUpdateOneWithoutConversationsNestedInput
  }

  export type ConversationUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutMessagesSentInput = {
    update: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientCreateWithoutBirthRecordInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutBirthRecordInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutBirthRecordInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutBirthRecordInput, PatientUncheckedCreateWithoutBirthRecordInput>
  }

  export type PatientCreateWithoutMotherOfBirthsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMotherOfBirthsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMotherOfBirthsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMotherOfBirthsInput, PatientUncheckedCreateWithoutMotherOfBirthsInput>
  }

  export type PatientCreateWithoutFatherOfBirthsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutFatherOfBirthsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutFatherOfBirthsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutFatherOfBirthsInput, PatientUncheckedCreateWithoutFatherOfBirthsInput>
  }

  export type HospitalCreateWithoutBirthRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutBirthRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutBirthRecordsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutBirthRecordsInput, HospitalUncheckedCreateWithoutBirthRecordsInput>
  }

  export type UserCreateWithoutBirthRecordsRegisteredInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBirthRecordsRegisteredInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBirthRecordsRegisteredInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBirthRecordsRegisteredInput, UserUncheckedCreateWithoutBirthRecordsRegisteredInput>
  }

  export type PatientUpsertWithoutBirthRecordInput = {
    update: XOR<PatientUpdateWithoutBirthRecordInput, PatientUncheckedUpdateWithoutBirthRecordInput>
    create: XOR<PatientCreateWithoutBirthRecordInput, PatientUncheckedCreateWithoutBirthRecordInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutBirthRecordInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutBirthRecordInput, PatientUncheckedUpdateWithoutBirthRecordInput>
  }

  export type PatientUpdateWithoutBirthRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutBirthRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUpsertWithoutMotherOfBirthsInput = {
    update: XOR<PatientUpdateWithoutMotherOfBirthsInput, PatientUncheckedUpdateWithoutMotherOfBirthsInput>
    create: XOR<PatientCreateWithoutMotherOfBirthsInput, PatientUncheckedCreateWithoutMotherOfBirthsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMotherOfBirthsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMotherOfBirthsInput, PatientUncheckedUpdateWithoutMotherOfBirthsInput>
  }

  export type PatientUpdateWithoutMotherOfBirthsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMotherOfBirthsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUpsertWithoutFatherOfBirthsInput = {
    update: XOR<PatientUpdateWithoutFatherOfBirthsInput, PatientUncheckedUpdateWithoutFatherOfBirthsInput>
    create: XOR<PatientCreateWithoutFatherOfBirthsInput, PatientUncheckedCreateWithoutFatherOfBirthsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutFatherOfBirthsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutFatherOfBirthsInput, PatientUncheckedUpdateWithoutFatherOfBirthsInput>
  }

  export type PatientUpdateWithoutFatherOfBirthsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutFatherOfBirthsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutBirthRecordsInput = {
    update: XOR<HospitalUpdateWithoutBirthRecordsInput, HospitalUncheckedUpdateWithoutBirthRecordsInput>
    create: XOR<HospitalCreateWithoutBirthRecordsInput, HospitalUncheckedCreateWithoutBirthRecordsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutBirthRecordsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutBirthRecordsInput, HospitalUncheckedUpdateWithoutBirthRecordsInput>
  }

  export type HospitalUpdateWithoutBirthRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutBirthRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type UserUpsertWithoutBirthRecordsRegisteredInput = {
    update: XOR<UserUpdateWithoutBirthRecordsRegisteredInput, UserUncheckedUpdateWithoutBirthRecordsRegisteredInput>
    create: XOR<UserCreateWithoutBirthRecordsRegisteredInput, UserUncheckedCreateWithoutBirthRecordsRegisteredInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBirthRecordsRegisteredInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBirthRecordsRegisteredInput, UserUncheckedUpdateWithoutBirthRecordsRegisteredInput>
  }

  export type UserUpdateWithoutBirthRecordsRegisteredInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBirthRecordsRegisteredInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientCreateWithoutDeathRecordInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutDeathRecordInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutDeathRecordInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutDeathRecordInput, PatientUncheckedCreateWithoutDeathRecordInput>
  }

  export type HospitalCreateWithoutDeathRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutDeathRecordsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutDeathRecordsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutDeathRecordsInput, HospitalUncheckedCreateWithoutDeathRecordsInput>
  }

  export type UserCreateWithoutDeathRecordsRegisteredInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDeathRecordsRegisteredInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDeathRecordsRegisteredInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDeathRecordsRegisteredInput, UserUncheckedCreateWithoutDeathRecordsRegisteredInput>
  }

  export type PatientUpsertWithoutDeathRecordInput = {
    update: XOR<PatientUpdateWithoutDeathRecordInput, PatientUncheckedUpdateWithoutDeathRecordInput>
    create: XOR<PatientCreateWithoutDeathRecordInput, PatientUncheckedCreateWithoutDeathRecordInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutDeathRecordInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutDeathRecordInput, PatientUncheckedUpdateWithoutDeathRecordInput>
  }

  export type PatientUpdateWithoutDeathRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutDeathRecordInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type HospitalUpsertWithoutDeathRecordsInput = {
    update: XOR<HospitalUpdateWithoutDeathRecordsInput, HospitalUncheckedUpdateWithoutDeathRecordsInput>
    create: XOR<HospitalCreateWithoutDeathRecordsInput, HospitalUncheckedCreateWithoutDeathRecordsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutDeathRecordsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutDeathRecordsInput, HospitalUncheckedUpdateWithoutDeathRecordsInput>
  }

  export type HospitalUpdateWithoutDeathRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutDeathRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type UserUpsertWithoutDeathRecordsRegisteredInput = {
    update: XOR<UserUpdateWithoutDeathRecordsRegisteredInput, UserUncheckedUpdateWithoutDeathRecordsRegisteredInput>
    create: XOR<UserCreateWithoutDeathRecordsRegisteredInput, UserUncheckedCreateWithoutDeathRecordsRegisteredInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDeathRecordsRegisteredInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDeathRecordsRegisteredInput, UserUncheckedUpdateWithoutDeathRecordsRegisteredInput>
  }

  export type UserUpdateWithoutDeathRecordsRegisteredInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDeathRecordsRegisteredInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalCreateWithoutMarketplaceVendorsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutMarketplaceVendorsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    Prescriptions?: PrescriptionUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutMarketplaceVendorsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutMarketplaceVendorsInput, HospitalUncheckedCreateWithoutMarketplaceVendorsInput>
  }

  export type MarketplaceProductCreateWithoutVendorInput = {
    id?: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
    cartItems?: CartItemCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductUncheckedCreateWithoutVendorInput = {
    id?: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductCreateOrConnectWithoutVendorInput = {
    where: MarketplaceProductWhereUniqueInput
    create: XOR<MarketplaceProductCreateWithoutVendorInput, MarketplaceProductUncheckedCreateWithoutVendorInput>
  }

  export type MarketplaceProductCreateManyVendorInputEnvelope = {
    data: MarketplaceProductCreateManyVendorInput | MarketplaceProductCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type SavedVendorCreateWithoutVendorInput = {
    id?: string
    savedAt?: Date | string
    patient: PatientCreateNestedOneWithoutSavedVendorsInput
  }

  export type SavedVendorUncheckedCreateWithoutVendorInput = {
    id?: string
    patientId: string
    savedAt?: Date | string
  }

  export type SavedVendorCreateOrConnectWithoutVendorInput = {
    where: SavedVendorWhereUniqueInput
    create: XOR<SavedVendorCreateWithoutVendorInput, SavedVendorUncheckedCreateWithoutVendorInput>
  }

  export type SavedVendorCreateManyVendorInputEnvelope = {
    data: SavedVendorCreateManyVendorInput | SavedVendorCreateManyVendorInput[]
    skipDuplicates?: boolean
  }

  export type HospitalUpsertWithoutMarketplaceVendorsInput = {
    update: XOR<HospitalUpdateWithoutMarketplaceVendorsInput, HospitalUncheckedUpdateWithoutMarketplaceVendorsInput>
    create: XOR<HospitalCreateWithoutMarketplaceVendorsInput, HospitalUncheckedCreateWithoutMarketplaceVendorsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutMarketplaceVendorsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutMarketplaceVendorsInput, HospitalUncheckedUpdateWithoutMarketplaceVendorsInput>
  }

  export type HospitalUpdateWithoutMarketplaceVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutMarketplaceVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type MarketplaceProductUpsertWithWhereUniqueWithoutVendorInput = {
    where: MarketplaceProductWhereUniqueInput
    update: XOR<MarketplaceProductUpdateWithoutVendorInput, MarketplaceProductUncheckedUpdateWithoutVendorInput>
    create: XOR<MarketplaceProductCreateWithoutVendorInput, MarketplaceProductUncheckedCreateWithoutVendorInput>
  }

  export type MarketplaceProductUpdateWithWhereUniqueWithoutVendorInput = {
    where: MarketplaceProductWhereUniqueInput
    data: XOR<MarketplaceProductUpdateWithoutVendorInput, MarketplaceProductUncheckedUpdateWithoutVendorInput>
  }

  export type MarketplaceProductUpdateManyWithWhereWithoutVendorInput = {
    where: MarketplaceProductScalarWhereInput
    data: XOR<MarketplaceProductUpdateManyMutationInput, MarketplaceProductUncheckedUpdateManyWithoutVendorInput>
  }

  export type MarketplaceProductScalarWhereInput = {
    AND?: MarketplaceProductScalarWhereInput | MarketplaceProductScalarWhereInput[]
    OR?: MarketplaceProductScalarWhereInput[]
    NOT?: MarketplaceProductScalarWhereInput | MarketplaceProductScalarWhereInput[]
    id?: StringFilter<"MarketplaceProduct"> | string
    vendorId?: StringFilter<"MarketplaceProduct"> | string
    name?: StringFilter<"MarketplaceProduct"> | string
    description?: StringNullableFilter<"MarketplaceProduct"> | string | null
    price?: FloatFilter<"MarketplaceProduct"> | number
    discountPrice?: FloatNullableFilter<"MarketplaceProduct"> | number | null
    category?: StringFilter<"MarketplaceProduct"> | string
    tags?: StringNullableListFilter<"MarketplaceProduct">
    imageUrl?: StringNullableFilter<"MarketplaceProduct"> | string | null
    inStock?: BoolFilter<"MarketplaceProduct"> | boolean
    requiredPrescription?: BoolFilter<"MarketplaceProduct"> | boolean
    createdAt?: DateTimeFilter<"MarketplaceProduct"> | Date | string
    updatedAt?: DateTimeFilter<"MarketplaceProduct"> | Date | string
  }

  export type SavedVendorUpsertWithWhereUniqueWithoutVendorInput = {
    where: SavedVendorWhereUniqueInput
    update: XOR<SavedVendorUpdateWithoutVendorInput, SavedVendorUncheckedUpdateWithoutVendorInput>
    create: XOR<SavedVendorCreateWithoutVendorInput, SavedVendorUncheckedCreateWithoutVendorInput>
  }

  export type SavedVendorUpdateWithWhereUniqueWithoutVendorInput = {
    where: SavedVendorWhereUniqueInput
    data: XOR<SavedVendorUpdateWithoutVendorInput, SavedVendorUncheckedUpdateWithoutVendorInput>
  }

  export type SavedVendorUpdateManyWithWhereWithoutVendorInput = {
    where: SavedVendorScalarWhereInput
    data: XOR<SavedVendorUpdateManyMutationInput, SavedVendorUncheckedUpdateManyWithoutVendorInput>
  }

  export type MarketplaceVendorCreateWithoutProductsInput = {
    id?: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutMarketplaceVendorsInput
    savedBy?: SavedVendorCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorUncheckedCreateWithoutProductsInput = {
    id?: string
    hospitalId: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    savedBy?: SavedVendorUncheckedCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorCreateOrConnectWithoutProductsInput = {
    where: MarketplaceVendorWhereUniqueInput
    create: XOR<MarketplaceVendorCreateWithoutProductsInput, MarketplaceVendorUncheckedCreateWithoutProductsInput>
  }

  export type OrderItemCreateWithoutProductInput = {
    id?: string
    quantity: number
    unitPrice: number
    totalPrice: number
    order: MarketplaceOrderCreateNestedOneWithoutItemsInput
    prescription?: PrescriptionCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: string
    orderId: string
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId?: string | null
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type CartItemCreateWithoutProductInput = {
    id?: string
    quantity: number
    addedAt?: Date | string
    patient: PatientCreateNestedOneWithoutCartItemsInput
  }

  export type CartItemUncheckedCreateWithoutProductInput = {
    id?: string
    patientId: string
    quantity: number
    addedAt?: Date | string
  }

  export type CartItemCreateOrConnectWithoutProductInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemCreateManyProductInputEnvelope = {
    data: CartItemCreateManyProductInput | CartItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type MarketplaceVendorUpsertWithoutProductsInput = {
    update: XOR<MarketplaceVendorUpdateWithoutProductsInput, MarketplaceVendorUncheckedUpdateWithoutProductsInput>
    create: XOR<MarketplaceVendorCreateWithoutProductsInput, MarketplaceVendorUncheckedCreateWithoutProductsInput>
    where?: MarketplaceVendorWhereInput
  }

  export type MarketplaceVendorUpdateToOneWithWhereWithoutProductsInput = {
    where?: MarketplaceVendorWhereInput
    data: XOR<MarketplaceVendorUpdateWithoutProductsInput, MarketplaceVendorUncheckedUpdateWithoutProductsInput>
  }

  export type MarketplaceVendorUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutMarketplaceVendorsNestedInput
    savedBy?: SavedVendorUpdateManyWithoutVendorNestedInput
  }

  export type MarketplaceVendorUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    savedBy?: SavedVendorUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: StringFilter<"OrderItem"> | string
    orderId?: StringFilter<"OrderItem"> | string
    productId?: StringFilter<"OrderItem"> | string
    quantity?: IntFilter<"OrderItem"> | number
    unitPrice?: FloatFilter<"OrderItem"> | number
    totalPrice?: FloatFilter<"OrderItem"> | number
    prescriptionId?: StringNullableFilter<"OrderItem"> | string | null
  }

  export type CartItemUpsertWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
  }

  export type CartItemUpdateManyWithWhereWithoutProductInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutProductInput>
  }

  export type PatientCreateWithoutMarketplaceOrdersInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMarketplaceOrdersInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMarketplaceOrdersInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMarketplaceOrdersInput, PatientUncheckedCreateWithoutMarketplaceOrdersInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    id?: string
    quantity: number
    unitPrice: number
    totalPrice: number
    product: MarketplaceProductCreateNestedOneWithoutOrderItemsInput
    prescription?: PrescriptionCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: string
    productId: string
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId?: string | null
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutMarketplaceOrdersInput = {
    update: XOR<PatientUpdateWithoutMarketplaceOrdersInput, PatientUncheckedUpdateWithoutMarketplaceOrdersInput>
    create: XOR<PatientCreateWithoutMarketplaceOrdersInput, PatientUncheckedCreateWithoutMarketplaceOrdersInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMarketplaceOrdersInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMarketplaceOrdersInput, PatientUncheckedUpdateWithoutMarketplaceOrdersInput>
  }

  export type PatientUpdateWithoutMarketplaceOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMarketplaceOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type MarketplaceOrderCreateWithoutItemsInput = {
    id?: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMarketplaceOrdersInput
  }

  export type MarketplaceOrderUncheckedCreateWithoutItemsInput = {
    id?: string
    patientId: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketplaceOrderCreateOrConnectWithoutItemsInput = {
    where: MarketplaceOrderWhereUniqueInput
    create: XOR<MarketplaceOrderCreateWithoutItemsInput, MarketplaceOrderUncheckedCreateWithoutItemsInput>
  }

  export type MarketplaceProductCreateWithoutOrderItemsInput = {
    id?: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor: MarketplaceVendorCreateNestedOneWithoutProductsInput
    cartItems?: CartItemCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    vendorId: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    cartItems?: CartItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductCreateOrConnectWithoutOrderItemsInput = {
    where: MarketplaceProductWhereUniqueInput
    create: XOR<MarketplaceProductCreateWithoutOrderItemsInput, MarketplaceProductUncheckedCreateWithoutOrderItemsInput>
  }

  export type PrescriptionCreateWithoutOrderItemsInput = {
    id?: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPrescriptionInput
    doctor: UserCreateNestedOneWithoutPrescriptionsInput
    hospital: HospitalCreateNestedOneWithoutPrescriptionsInput
  }

  export type PrescriptionUncheckedCreateWithoutOrderItemsInput = {
    id?: string
    patientId: string
    doctorId: string
    hospitalId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateOrConnectWithoutOrderItemsInput = {
    where: PrescriptionWhereUniqueInput
    create: XOR<PrescriptionCreateWithoutOrderItemsInput, PrescriptionUncheckedCreateWithoutOrderItemsInput>
  }

  export type MarketplaceOrderUpsertWithoutItemsInput = {
    update: XOR<MarketplaceOrderUpdateWithoutItemsInput, MarketplaceOrderUncheckedUpdateWithoutItemsInput>
    create: XOR<MarketplaceOrderCreateWithoutItemsInput, MarketplaceOrderUncheckedCreateWithoutItemsInput>
    where?: MarketplaceOrderWhereInput
  }

  export type MarketplaceOrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: MarketplaceOrderWhereInput
    data: XOR<MarketplaceOrderUpdateWithoutItemsInput, MarketplaceOrderUncheckedUpdateWithoutItemsInput>
  }

  export type MarketplaceOrderUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMarketplaceOrdersNestedInput
  }

  export type MarketplaceOrderUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceProductUpsertWithoutOrderItemsInput = {
    update: XOR<MarketplaceProductUpdateWithoutOrderItemsInput, MarketplaceProductUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<MarketplaceProductCreateWithoutOrderItemsInput, MarketplaceProductUncheckedCreateWithoutOrderItemsInput>
    where?: MarketplaceProductWhereInput
  }

  export type MarketplaceProductUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: MarketplaceProductWhereInput
    data: XOR<MarketplaceProductUpdateWithoutOrderItemsInput, MarketplaceProductUncheckedUpdateWithoutOrderItemsInput>
  }

  export type MarketplaceProductUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: MarketplaceVendorUpdateOneRequiredWithoutProductsNestedInput
    cartItems?: CartItemUpdateManyWithoutProductNestedInput
  }

  export type MarketplaceProductUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cartItems?: CartItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type PrescriptionUpsertWithoutOrderItemsInput = {
    update: XOR<PrescriptionUpdateWithoutOrderItemsInput, PrescriptionUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<PrescriptionCreateWithoutOrderItemsInput, PrescriptionUncheckedCreateWithoutOrderItemsInput>
    where?: PrescriptionWhereInput
  }

  export type PrescriptionUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: PrescriptionWhereInput
    data: XOR<PrescriptionUpdateWithoutOrderItemsInput, PrescriptionUncheckedUpdateWithoutOrderItemsInput>
  }

  export type PrescriptionUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPrescriptionNestedInput
    doctor?: UserUpdateOneRequiredWithoutPrescriptionsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutPrescriptionsNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutOrderItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateWithoutCartItemsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutCartItemsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutCartItemsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutCartItemsInput, PatientUncheckedCreateWithoutCartItemsInput>
  }

  export type MarketplaceProductCreateWithoutCartItemsInput = {
    id?: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    vendor: MarketplaceVendorCreateNestedOneWithoutProductsInput
    orderItems?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductUncheckedCreateWithoutCartItemsInput = {
    id?: string
    vendorId: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type MarketplaceProductCreateOrConnectWithoutCartItemsInput = {
    where: MarketplaceProductWhereUniqueInput
    create: XOR<MarketplaceProductCreateWithoutCartItemsInput, MarketplaceProductUncheckedCreateWithoutCartItemsInput>
  }

  export type PatientUpsertWithoutCartItemsInput = {
    update: XOR<PatientUpdateWithoutCartItemsInput, PatientUncheckedUpdateWithoutCartItemsInput>
    create: XOR<PatientCreateWithoutCartItemsInput, PatientUncheckedCreateWithoutCartItemsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutCartItemsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutCartItemsInput, PatientUncheckedUpdateWithoutCartItemsInput>
  }

  export type PatientUpdateWithoutCartItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutCartItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type MarketplaceProductUpsertWithoutCartItemsInput = {
    update: XOR<MarketplaceProductUpdateWithoutCartItemsInput, MarketplaceProductUncheckedUpdateWithoutCartItemsInput>
    create: XOR<MarketplaceProductCreateWithoutCartItemsInput, MarketplaceProductUncheckedCreateWithoutCartItemsInput>
    where?: MarketplaceProductWhereInput
  }

  export type MarketplaceProductUpdateToOneWithWhereWithoutCartItemsInput = {
    where?: MarketplaceProductWhereInput
    data: XOR<MarketplaceProductUpdateWithoutCartItemsInput, MarketplaceProductUncheckedUpdateWithoutCartItemsInput>
  }

  export type MarketplaceProductUpdateWithoutCartItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: MarketplaceVendorUpdateOneRequiredWithoutProductsNestedInput
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type MarketplaceProductUncheckedUpdateWithoutCartItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type PatientCreateWithoutSavedVendorsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutSavedVendorsInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
    Prescription?: PrescriptionUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutSavedVendorsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutSavedVendorsInput, PatientUncheckedCreateWithoutSavedVendorsInput>
  }

  export type MarketplaceVendorCreateWithoutSavedByInput = {
    id?: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    hospital: HospitalCreateNestedOneWithoutMarketplaceVendorsInput
    products?: MarketplaceProductCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorUncheckedCreateWithoutSavedByInput = {
    id?: string
    hospitalId: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: MarketplaceProductUncheckedCreateNestedManyWithoutVendorInput
  }

  export type MarketplaceVendorCreateOrConnectWithoutSavedByInput = {
    where: MarketplaceVendorWhereUniqueInput
    create: XOR<MarketplaceVendorCreateWithoutSavedByInput, MarketplaceVendorUncheckedCreateWithoutSavedByInput>
  }

  export type PatientUpsertWithoutSavedVendorsInput = {
    update: XOR<PatientUpdateWithoutSavedVendorsInput, PatientUncheckedUpdateWithoutSavedVendorsInput>
    create: XOR<PatientCreateWithoutSavedVendorsInput, PatientUncheckedCreateWithoutSavedVendorsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutSavedVendorsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutSavedVendorsInput, PatientUncheckedUpdateWithoutSavedVendorsInput>
  }

  export type PatientUpdateWithoutSavedVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutSavedVendorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type MarketplaceVendorUpsertWithoutSavedByInput = {
    update: XOR<MarketplaceVendorUpdateWithoutSavedByInput, MarketplaceVendorUncheckedUpdateWithoutSavedByInput>
    create: XOR<MarketplaceVendorCreateWithoutSavedByInput, MarketplaceVendorUncheckedCreateWithoutSavedByInput>
    where?: MarketplaceVendorWhereInput
  }

  export type MarketplaceVendorUpdateToOneWithWhereWithoutSavedByInput = {
    where?: MarketplaceVendorWhereInput
    data: XOR<MarketplaceVendorUpdateWithoutSavedByInput, MarketplaceVendorUncheckedUpdateWithoutSavedByInput>
  }

  export type MarketplaceVendorUpdateWithoutSavedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutMarketplaceVendorsNestedInput
    products?: MarketplaceProductUpdateManyWithoutVendorNestedInput
  }

  export type MarketplaceVendorUncheckedUpdateWithoutSavedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: MarketplaceProductUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type PatientCreateWithoutPrescriptionInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    User?: UserCreateNestedOneWithoutPatientProfileInput
    Hospital?: HospitalCreateNestedOneWithoutPatientsInput
    Appointments?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutPatientInput
    Doctors?: UserCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutPatientInput
    Wallet?: WalletCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingCreateNestedManyWithoutPatientInput
    Conversations?: ConversationCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorCreateNestedManyWithoutPatientInput
    CartItems?: CartItemCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPrescriptionInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    hospitalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutPatientInput
    Doctors?: UserUncheckedCreateNestedManyWithoutDoctorPatientsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutPatientInput
    Emails?: PatientEmailUncheckedCreateNestedManyWithoutPatientInput
    Phones?: PatientPhoneUncheckedCreateNestedManyWithoutPatientInput
    SearchIndex?: PatientSearchIndexUncheckedCreateNestedOneWithoutPatientInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedCreateNestedOneWithoutPatientInput
    HospitalAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutPatientInput
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutPatientInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_patientIdToPatientInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedCreateNestedManyWithoutPatient_NeonatalRecord_motherIdToPatientInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutPatientInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutPatientInput
    Wallet?: WalletUncheckedCreateNestedOneWithoutPatientInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutPatientInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutPatientInput
    BirthRecord?: BirthRecordUncheckedCreateNestedOneWithoutPatientInput
    MotherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutMotherInput
    FatherOfBirths?: BirthRecordUncheckedCreateNestedManyWithoutFatherInput
    DeathRecord?: DeathRecordUncheckedCreateNestedOneWithoutPatientInput
    MarketplaceOrders?: MarketplaceOrderUncheckedCreateNestedManyWithoutPatientInput
    SavedVendors?: SavedVendorUncheckedCreateNestedManyWithoutPatientInput
    CartItems?: CartItemUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPrescriptionInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPrescriptionInput, PatientUncheckedCreateWithoutPrescriptionInput>
  }

  export type UserCreateWithoutPrescriptionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    patientProfile?: PatientCreateNestedOneWithoutUserInput
    Hospital?: HospitalCreateNestedOneWithoutUsersInput
    NeonatalRecords_updated?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordCreateNestedManyWithoutAttendingDoctorInput
    SecurityAuditLog?: SecurityAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPrescriptionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
    hospitalId?: string | null
    patientProfile?: PatientUncheckedCreateNestedOneWithoutUserInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput
    AntenatalRecords_created?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedCreateNestedManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutUserInput
    NeonatalRecords_created?: NeonatalRecordUncheckedCreateNestedManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedCreateNestedManyWithoutGranterInput
    DoctorPatients?: PatientUncheckedCreateNestedManyWithoutDoctorsInput
    ProfilePicture?: ProfilePictureUncheckedCreateNestedOneWithoutUserInput
    PasswordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    StaffProfile?: StaffProfileUncheckedCreateNestedOneWithoutUserInput
    DepartmentMemberships?: DepartmentMembershipUncheckedCreateNestedManyWithoutUserInput
    Availability?: DoctorAvailabilityUncheckedCreateNestedOneWithoutDoctorInput
    ReferralsSent?: ReferralUncheckedCreateNestedManyWithoutReferringDoctorInput
    ReferralsReceived?: ReferralUncheckedCreateNestedManyWithoutReceivingDoctorInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutDoctorInput
    MessagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    BirthRecordsRegistered?: BirthRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    DeathRecordsRegistered?: DeathRecordUncheckedCreateNestedManyWithoutAttendingDoctorInput
    SecurityAuditLog?: SecurityAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPrescriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrescriptionsInput, UserUncheckedCreateWithoutPrescriptionsInput>
  }

  export type HospitalCreateWithoutPrescriptionsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordCreateNestedManyWithoutHospitalInput
    Users?: UserCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityCreateNestedManyWithoutHospitalInput
    Patients?: PatientCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateWithoutPrescriptionsInput = {
    id?: string
    name: string
    subdomain: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    settings: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    code?: string | null
    AntenatalRecords?: AntenatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    NeonatalRecords?: NeonatalRecordUncheckedCreateNestedManyWithoutHospitalInput
    Users?: UserUncheckedCreateNestedManyWithoutHospitalInput
    Departments?: DepartmentUncheckedCreateNestedManyWithoutHospitalInput
    StaffProfiles?: StaffProfileUncheckedCreateNestedManyWithoutHospitalInput
    PatientAccesses?: PatientHospitalAccessUncheckedCreateNestedManyWithoutHospitalInput
    Appointments?: AppointmentUncheckedCreateNestedManyWithoutHospitalInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedCreateNestedManyWithoutHospitalInput
    Patients?: PatientUncheckedCreateNestedManyWithoutHospitalInput
    MedicalRecords?: MedicalRecordUncheckedCreateNestedManyWithoutHospitalInput
    ReferralsFrom?: ReferralUncheckedCreateNestedManyWithoutFromHospitalInput
    ReferralsTo?: ReferralUncheckedCreateNestedManyWithoutToHospitalInput
    Ambulances?: AmbulanceUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedCreateNestedManyWithoutHospitalInput
    AmbulanceRequests?: AmbulanceRequestUncheckedCreateNestedManyWithoutHospitalInput
    BillingRecords?: BillingUncheckedCreateNestedManyWithoutHospitalInput
    Conversations?: ConversationUncheckedCreateNestedManyWithoutHospitalInput
    BirthRecords?: BirthRecordUncheckedCreateNestedManyWithoutHospitalInput
    DeathRecords?: DeathRecordUncheckedCreateNestedManyWithoutHospitalInput
    MarketplaceVendors?: MarketplaceVendorUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalCreateOrConnectWithoutPrescriptionsInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutPrescriptionsInput, HospitalUncheckedCreateWithoutPrescriptionsInput>
  }

  export type OrderItemCreateWithoutPrescriptionInput = {
    id?: string
    quantity: number
    unitPrice: number
    totalPrice: number
    order: MarketplaceOrderCreateNestedOneWithoutItemsInput
    product: MarketplaceProductCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutPrescriptionInput = {
    id?: string
    orderId: string
    productId: string
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemCreateOrConnectWithoutPrescriptionInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutPrescriptionInput, OrderItemUncheckedCreateWithoutPrescriptionInput>
  }

  export type OrderItemCreateManyPrescriptionInputEnvelope = {
    data: OrderItemCreateManyPrescriptionInput | OrderItemCreateManyPrescriptionInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutPrescriptionInput = {
    update: XOR<PatientUpdateWithoutPrescriptionInput, PatientUncheckedUpdateWithoutPrescriptionInput>
    create: XOR<PatientCreateWithoutPrescriptionInput, PatientUncheckedCreateWithoutPrescriptionInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPrescriptionInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPrescriptionInput, PatientUncheckedUpdateWithoutPrescriptionInput>
  }

  export type PatientUpdateWithoutPrescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPrescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutPrescriptionsInput = {
    update: XOR<UserUpdateWithoutPrescriptionsInput, UserUncheckedUpdateWithoutPrescriptionsInput>
    create: XOR<UserCreateWithoutPrescriptionsInput, UserUncheckedCreateWithoutPrescriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPrescriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPrescriptionsInput, UserUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type UserUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HospitalUpsertWithoutPrescriptionsInput = {
    update: XOR<HospitalUpdateWithoutPrescriptionsInput, HospitalUncheckedUpdateWithoutPrescriptionsInput>
    create: XOR<HospitalCreateWithoutPrescriptionsInput, HospitalUncheckedCreateWithoutPrescriptionsInput>
    where?: HospitalWhereInput
  }

  export type HospitalUpdateToOneWithWhereWithoutPrescriptionsInput = {
    where?: HospitalWhereInput
    data: XOR<HospitalUpdateWithoutPrescriptionsInput, HospitalUncheckedUpdateWithoutPrescriptionsInput>
  }

  export type HospitalUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUpdateManyWithoutHospitalNestedInput
    Users?: UserUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUpdateManyWithoutHospitalNestedInput
  }

  export type HospitalUncheckedUpdateWithoutPrescriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subdomain?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    branding?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    code?: NullableStringFieldUpdateOperationsInput | string | null
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    NeonatalRecords?: NeonatalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    Users?: UserUncheckedUpdateManyWithoutHospitalNestedInput
    Departments?: DepartmentUncheckedUpdateManyWithoutHospitalNestedInput
    StaffProfiles?: StaffProfileUncheckedUpdateManyWithoutHospitalNestedInput
    PatientAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutHospitalNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutHospitalNestedInput
    DoctorAvailabilities?: DoctorAvailabilityUncheckedUpdateManyWithoutHospitalNestedInput
    Patients?: PatientUncheckedUpdateManyWithoutHospitalNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutHospitalNestedInput
    ReferralsFrom?: ReferralUncheckedUpdateManyWithoutFromHospitalNestedInput
    ReferralsTo?: ReferralUncheckedUpdateManyWithoutToHospitalNestedInput
    Ambulances?: AmbulanceUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutHospitalNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutHospitalNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutHospitalNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutHospitalNestedInput
    BirthRecords?: BirthRecordUncheckedUpdateManyWithoutHospitalNestedInput
    DeathRecords?: DeathRecordUncheckedUpdateManyWithoutHospitalNestedInput
    MarketplaceVendors?: MarketplaceVendorUncheckedUpdateManyWithoutHospitalNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutPrescriptionInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutPrescriptionInput, OrderItemUncheckedUpdateWithoutPrescriptionInput>
    create: XOR<OrderItemCreateWithoutPrescriptionInput, OrderItemUncheckedCreateWithoutPrescriptionInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutPrescriptionInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutPrescriptionInput, OrderItemUncheckedUpdateWithoutPrescriptionInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutPrescriptionInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutPrescriptionInput>
  }

  export type AntenatalRecordCreateManyHospitalInput = {
    id?: string
    patientId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateManyHospitalInput = {
    id?: string
    patientId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type UserCreateManyHospitalInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    phone?: string | null
    photo?: string | null
    isSuperAdmin?: boolean
    isHospitalAdmin?: boolean
    specialties?: UserCreatespecialtiesInput | string[]
  }

  export type DepartmentCreateManyHospitalInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type StaffProfileCreateManyHospitalInput = {
    id?: string
    userId: string
    staffId: string
    specialization?: string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate: Date | string
    employmentStatus: $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientHospitalAccessCreateManyHospitalInput = {
    id?: string
    patientId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    grantedBy: string
    expiresAt?: Date | string | null
  }

  export type AppointmentCreateManyHospitalInput = {
    id?: string
    patientId: string
    doctorId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DoctorAvailabilityCreateManyHospitalInput = {
    id?: string
    doctorId: string
    available?: boolean
    schedule: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityCreateserviceTypesInput | string[]
    nextAvailable?: Date | string | null
  }

  export type PatientCreateManyHospitalInput = {
    id?: string
    mrn: string
    name: string
    gender?: string | null
    dateOfBirth?: Date | string | null
    contact?: string | null
    note?: string | null
    lastVisit?: Date | string | null
    nextVisit?: Date | string | null
    medicalHistory?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    qrCode?: string | null
    onboardingCompleted?: boolean
  }

  export type MedicalRecordCreateManyHospitalInput = {
    id?: string
    patientId: string
    doctorId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type ReferralCreateManyFromHospitalInput = {
    id?: string
    patientId: string
    toHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralCreateManyToHospitalInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AmbulanceCreateManyHospitalInput = {
    id?: string
    registrationNo: string
    type: $Enums.AmbulanceType
    status?: $Enums.AmbulanceStatus
    capacity?: number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceCreatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    lastMaintenance?: Date | string | null
  }

  export type AmbulanceDispatchCreateManyHospitalInput = {
    id?: string
    ambulanceId: string
    patientId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceRequestCreateManyHospitalInput = {
    id?: string
    patientId: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingCreateManyHospitalInput = {
    id?: string
    patientId: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
  }

  export type ConversationCreateManyHospitalInput = {
    id?: string
    patientId: string
    doctorId?: string | null
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateManyHospitalInput = {
    id?: string
    patientId: string
    motherId?: string | null
    fatherId?: string | null
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeathRecordCreateManyHospitalInput = {
    id?: string
    patientId: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    attendingDoctorId: string
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketplaceVendorCreateManyHospitalInput = {
    id?: string
    name: string
    description?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    address?: string | null
    logo?: string | null
    websiteUrl?: string | null
    verified?: boolean
    rating?: number | null
    specialties?: MarketplaceVendorCreatespecialtiesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateManyHospitalInput = {
    id?: string
    patientId: string
    doctorId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AntenatalRecordUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_AntenatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_createdNestedInput
    Patient?: PatientUpdateOneRequiredWithoutAntenatalRecordsNestedInput
    User_AntenatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_updatedNestedInput
  }

  export type AntenatalRecordUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_NeonatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_createdNestedInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientUpdateOneWithoutNeonatalRecords_AsMotherNestedInput
    Patient_NeonatalRecord_patientIdToPatient?: PatientUpdateOneRequiredWithoutNeonatalRecords_AsPatientNestedInput
    User_NeonatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_updatedNestedInput
  }

  export type NeonatalRecordUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    DoctorPatients?: PatientUncheckedUpdateManyWithoutDoctorsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
  }

  export type DepartmentUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: DepartmentMembershipUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: DepartmentMembershipUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffProfileUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutStaffProfileNestedInput
  }

  export type StaffProfileUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StaffProfileUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    joiningDate?: DateTimeFieldUpdateOperationsInput | Date | string
    employmentStatus?: EnumEmploymentStatusFieldUpdateOperationsInput | $Enums.EmploymentStatus
    contactInformation?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PatientHospitalAccessUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutHospitalAccessesNestedInput
    granter?: UserUpdateOneRequiredWithoutPatientAccess_grantedByNestedInput
  }

  export type PatientHospitalAccessUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientHospitalAccessUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    Patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorAvailabilityUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doctor?: UserUpdateOneRequiredWithoutAvailabilityNestedInput
  }

  export type DoctorAvailabilityUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DoctorAvailabilityUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    schedule?: JsonNullValueInput | InputJsonValue
    serviceTypes?: DoctorAvailabilityUpdateserviceTypesInput | string[]
    nextAvailable?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    Doctors?: UserUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    Doctors?: UserUncheckedUpdateManyWithoutDoctorPatientsNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalRecordUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutMedicalRecordsNestedInput
    Patient?: PatientUpdateOneRequiredWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralUpdateWithoutFromHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutReferralsReceivedNestedInput
    toHospital?: HospitalUpdateOneRequiredWithoutReferralsToNestedInput
    referringDoctor?: UserUpdateOneRequiredWithoutReferralsSentNestedInput
    receivingDoctor?: UserUpdateOneWithoutReferralsReceivedNestedInput
  }

  export type ReferralUncheckedUpdateWithoutFromHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateManyWithoutFromHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUpdateWithoutToHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutReferralsReceivedNestedInput
    fromHospital?: HospitalUpdateOneRequiredWithoutReferralsFromNestedInput
    referringDoctor?: UserUpdateOneRequiredWithoutReferralsSentNestedInput
    receivingDoctor?: UserUpdateOneWithoutReferralsReceivedNestedInput
  }

  export type ReferralUncheckedUpdateWithoutToHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateManyWithoutToHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AmbulanceUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dispatches?: AmbulanceDispatchUpdateManyWithoutAmbulanceNestedInput
  }

  export type AmbulanceUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutAmbulanceNestedInput
  }

  export type AmbulanceUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrationNo?: StringFieldUpdateOperationsInput | string
    type?: EnumAmbulanceTypeFieldUpdateOperationsInput | $Enums.AmbulanceType
    status?: EnumAmbulanceStatusFieldUpdateOperationsInput | $Enums.AmbulanceStatus
    capacity?: IntFieldUpdateOperationsInput | number
    equipment?: NullableJsonNullValueInput | InputJsonValue
    features?: AmbulanceUpdatefeaturesInput | string[]
    gpsTracking?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastMaintenance?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AmbulanceDispatchUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ambulance?: AmbulanceUpdateOneRequiredWithoutDispatchesNestedInput
    patient?: PatientUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput
  }

  export type AmbulanceDispatchUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    ambulanceId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceDispatchUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    ambulanceId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceRequestUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAmbulanceRequestsNestedInput
  }

  export type AmbulanceRequestUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceRequestUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutBillingRecordsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
  }

  export type BillingUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConversationUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutConversationsNestedInput
    doctor?: UserUpdateOneWithoutConversationsNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutBirthRecordNestedInput
    mother?: PatientUpdateOneWithoutMotherOfBirthsNestedInput
    father?: PatientUpdateOneWithoutFatherOfBirthsNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutBirthRecordsRegisteredNestedInput
  }

  export type BirthRecordUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeathRecordUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutDeathRecordNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutDeathRecordsRegisteredNestedInput
  }

  export type DeathRecordUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeathRecordUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceVendorUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: MarketplaceProductUpdateManyWithoutVendorNestedInput
    savedBy?: SavedVendorUpdateManyWithoutVendorNestedInput
  }

  export type MarketplaceVendorUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: MarketplaceProductUncheckedUpdateManyWithoutVendorNestedInput
    savedBy?: SavedVendorUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type MarketplaceVendorUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verified?: BoolFieldUpdateOperationsInput | boolean
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    specialties?: MarketplaceVendorUpdatespecialtiesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPrescriptionNestedInput
    doctor?: UserUpdateOneRequiredWithoutPrescriptionsNestedInput
    orderItems?: OrderItemUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionUncheckedUpdateManyWithoutHospitalInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyPatientInput = {
    id?: string
    doctorId: string
    hospitalId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type MedicalRecordCreateManyPatientInput = {
    id?: string
    doctorId: string
    hospitalId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type PasswordResetCreateManyPatientInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type PatientEmailCreateManyPatientInput = {
    id?: string
    email: string
    verified?: boolean
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientPhoneCreateManyPatientInput = {
    id?: string
    phone: string
    verified?: boolean
    primary?: boolean
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHospitalAccessCreateManyPatientInput = {
    id?: string
    hospitalId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    grantedBy: string
    expiresAt?: Date | string | null
  }

  export type AntenatalRecordCreateManyPatientInput = {
    id?: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateManyPatient_NeonatalRecord_patientIdToPatientInput = {
    id?: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type NeonatalRecordCreateManyPatient_NeonatalRecord_motherIdToPatientInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    updatedByUserId: string
    mrn?: string | null
  }

  export type ReferralCreateManyPatientInput = {
    id?: string
    fromHospitalId: string
    toHospitalId: string
    referringDoctorId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AmbulanceDispatchCreateManyPatientInput = {
    id?: string
    ambulanceId: string
    hospitalId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceRequestCreateManyPatientInput = {
    id?: string
    hospitalId: string
    pickupLocation: string
    reason: string
    requestTime?: Date | string
    status?: $Enums.DispatchStatus
    priority?: $Enums.DispatchPriority
    contactName: string
    contactPhone: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingCreateManyPatientInput = {
    id?: string
    hospitalId: string
    amount: number
    dueDate: Date | string
    status?: $Enums.BillingStatus
    description: string
    invoiceNumber: string
    items: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    paidAt?: Date | string | null
  }

  export type ConversationCreateManyPatientInput = {
    id?: string
    hospitalId: string
    doctorId?: string | null
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateManyMotherInput = {
    id?: string
    patientId: string
    fatherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BirthRecordCreateManyFatherInput = {
    id?: string
    patientId: string
    motherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    attendingDoctorId: string
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketplaceOrderCreateManyPatientInput = {
    id?: string
    reference: string
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentStatus?: string | null
    shippingAddress?: string | null
    trackingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedVendorCreateManyPatientInput = {
    id?: string
    vendorId: string
    savedAt?: Date | string
  }

  export type CartItemCreateManyPatientInput = {
    id?: string
    productId: string
    quantity: number
    addedAt?: Date | string
  }

  export type PrescriptionCreateManyPatientInput = {
    id?: string
    doctorId: string
    hospitalId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutMedicalRecordsNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutPasswordResetsNestedInput
  }

  export type PasswordResetUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutDoctorPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    patientProfile?: PatientUpdateOneWithoutUserNestedInput
    Hospital?: HospitalUpdateOneWithoutUsersNestedInput
    NeonatalRecords_updated?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUpdateManyWithoutGranterNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctorPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    patientProfile?: PatientUncheckedUpdateOneWithoutUserNestedInput
    NeonatalRecords_updated?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserNestedInput
    AntenatalRecords_created?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserNestedInput
    AntenatalRecords_updated?: AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserNestedInput
    Appointments?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutUserNestedInput
    NeonatalRecords_created?: NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserNestedInput
    PatientAccess_grantedBy?: PatientHospitalAccessUncheckedUpdateManyWithoutGranterNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutUserNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    StaffProfile?: StaffProfileUncheckedUpdateOneWithoutUserNestedInput
    DepartmentMemberships?: DepartmentMembershipUncheckedUpdateManyWithoutUserNestedInput
    Availability?: DoctorAvailabilityUncheckedUpdateOneWithoutDoctorNestedInput
    ReferralsSent?: ReferralUncheckedUpdateManyWithoutReferringDoctorNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutReceivingDoctorNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutDoctorNestedInput
    MessagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    BirthRecordsRegistered?: BirthRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    DeathRecordsRegistered?: DeathRecordUncheckedUpdateManyWithoutAttendingDoctorNestedInput
    Prescriptions?: PrescriptionUncheckedUpdateManyWithoutDoctorNestedInput
    SecurityAuditLog?: SecurityAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDoctorPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    isSuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    isHospitalAdmin?: BoolFieldUpdateOperationsInput | boolean
    specialties?: UserUpdatespecialtiesInput | string[]
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientEmailUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEmailUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientEmailUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientPhoneUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientPhoneUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientPhoneUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    primary?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHospitalAccessUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hospital?: HospitalUpdateOneRequiredWithoutPatientAccessesNestedInput
    granter?: UserUpdateOneRequiredWithoutPatientAccess_grantedByNestedInput
  }

  export type PatientHospitalAccessUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientHospitalAccessUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedBy?: StringFieldUpdateOperationsInput | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AntenatalRecordUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_AntenatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_createdNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutAntenatalRecordsNestedInput
    User_AntenatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_updatedNestedInput
  }

  export type AntenatalRecordUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUpdateWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_NeonatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_createdNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutNeonatalRecordsNestedInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientUpdateOneWithoutNeonatalRecords_AsMotherNestedInput
    User_NeonatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_updatedNestedInput
  }

  export type NeonatalRecordUncheckedUpdateWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUpdateWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_NeonatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_createdNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutNeonatalRecordsNestedInput
    Patient_NeonatalRecord_patientIdToPatient?: PatientUpdateOneRequiredWithoutNeonatalRecords_AsPatientNestedInput
    User_NeonatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_updatedNestedInput
  }

  export type NeonatalRecordUncheckedUpdateWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferralUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fromHospital?: HospitalUpdateOneRequiredWithoutReferralsFromNestedInput
    toHospital?: HospitalUpdateOneRequiredWithoutReferralsToNestedInput
    referringDoctor?: UserUpdateOneRequiredWithoutReferralsSentNestedInput
    receivingDoctor?: UserUpdateOneWithoutReferralsReceivedNestedInput
  }

  export type ReferralUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AmbulanceDispatchUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ambulance?: AmbulanceUpdateOneRequiredWithoutDispatchesNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput
  }

  export type AmbulanceDispatchUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    ambulanceId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceDispatchUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    ambulanceId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceRequestUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutAmbulanceRequestsNestedInput
  }

  export type AmbulanceRequestUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceRequestUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    requestTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    contactName?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hospital?: HospitalUpdateOneRequiredWithoutBillingRecordsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
  }

  export type BillingUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumBillingStatusFieldUpdateOperationsInput | $Enums.BillingStatus
    description?: StringFieldUpdateOperationsInput | string
    invoiceNumber?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConversationUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hospital?: HospitalUpdateOneRequiredWithoutConversationsNestedInput
    doctor?: UserUpdateOneWithoutConversationsNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUpdateWithoutMotherInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutBirthRecordNestedInput
    father?: PatientUpdateOneWithoutFatherOfBirthsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutBirthRecordsNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutBirthRecordsRegisteredNestedInput
  }

  export type BirthRecordUncheckedUpdateWithoutMotherInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUncheckedUpdateManyWithoutMotherInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUpdateWithoutFatherInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutBirthRecordNestedInput
    mother?: PatientUpdateOneWithoutMotherOfBirthsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutBirthRecordsNestedInput
    attendingDoctor?: UserUpdateOneRequiredWithoutBirthRecordsRegisteredNestedInput
  }

  export type BirthRecordUncheckedUpdateWithoutFatherInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUncheckedUpdateManyWithoutFatherInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    attendingDoctorId?: StringFieldUpdateOperationsInput | string
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketplaceOrderUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type MarketplaceOrderUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type MarketplaceOrderUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    reference?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    trackingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedVendorUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendor?: MarketplaceVendorUpdateOneRequiredWithoutSavedByNestedInput
  }

  export type SavedVendorUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedVendorUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    vendorId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: MarketplaceProductUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type CartItemUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: UserUpdateOneRequiredWithoutPrescriptionsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutPrescriptionsNestedInput
    orderItems?: OrderItemUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeonatalRecordCreateManyUser_NeonatalRecord_updatedByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordCreateManyUser_AntenatalRecord_createdByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    updatedByUserId: string
    mrn?: string | null
  }

  export type AntenatalRecordCreateManyUser_AntenatalRecord_updatedByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    gestationalAge: number
    nextAppointment?: Date | string | null
    riskLevel?: $Enums.RiskLevel
    status?: $Enums.AntenatalStatus
    trimester?: number
    lastVisitDate?: Date | string | null
    expectedDueDate: Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt: Date | string
    createdByUserId: string
    mrn?: string | null
  }

  export type AppointmentCreateManyUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    date: Date | string
    status: $Enums.AppointmentStatus
    notes?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type MedicalRecordCreateManyUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    type: string
    details: JsonNullValueInput | InputJsonValue
    date: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type NeonatalRecordCreateManyUser_NeonatalRecord_createdByUserIdToUserInput = {
    id?: string
    patientId: string
    hospitalId: string
    birthWeight: number
    gestationalAgeAtBirth: number
    careLevel?: $Enums.CareLevel
    status?: $Enums.NeonatalStatus
    dischargeStatus?: $Enums.DischargeStatus | null
    apgarScore?: number | null
    motherId?: string | null
    birthComplications?: string | null
    feedingMethod?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    updatedByUserId: string
    mrn?: string | null
  }

  export type PatientHospitalAccessCreateManyGranterInput = {
    id?: string
    patientId: string
    hospitalId: string
    accessLevel: $Enums.AccessLevel
    grantedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type PasswordResetCreateManyUserInput = {
    id?: string
    token: string
    email?: string | null
    expiresAt: Date | string
    usedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientId?: string | null
  }

  export type DepartmentMembershipCreateManyUserInput = {
    id?: string
    departmentId: string
    role: string
    joinedAt?: Date | string
  }

  export type ReferralCreateManyReferringDoctorInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    toHospitalId: string
    receivingDoctorId?: string | null
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ReferralCreateManyReceivingDoctorInput = {
    id?: string
    patientId: string
    fromHospitalId: string
    toHospitalId: string
    referringDoctorId: string
    reason: string
    notes?: string | null
    priority?: $Enums.ReferralPriority
    status?: $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type ConversationCreateManyDoctorInput = {
    id?: string
    patientId: string
    hospitalId: string
    title?: string | null
    status?: $Enums.ConversationStatus
    lastMessageAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageCreateManySenderInput = {
    id?: string
    conversationId: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
  }

  export type BirthRecordCreateManyAttendingDoctorInput = {
    id?: string
    patientId: string
    motherId?: string | null
    fatherId?: string | null
    hospitalId: string
    birthDate: Date | string
    birthTime?: string | null
    birthWeight?: number | null
    deliveryMethod?: $Enums.DeliveryMethod
    birthPlace?: string | null
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    complications?: BirthRecordCreatecomplicationsInput | string[]
    apgarScore?: number | null
    gestationalAge?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DeathRecordCreateManyAttendingDoctorInput = {
    id?: string
    patientId: string
    hospitalId: string
    dateOfDeath: Date | string
    timeOfDeath?: string | null
    causeOfDeath?: string | null
    placeOfDeath: string
    certificateNumber: string
    registeredAt?: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PrescriptionCreateManyDoctorInput = {
    id?: string
    patientId: string
    hospitalId: string
    medications: JsonNullValueInput | InputJsonValue
    dosageInstructions?: string | null
    validFrom: Date | string
    validUntil?: Date | string | null
    filledStatus?: boolean
    filledDate?: Date | string | null
    refills?: number
    refillsUsed?: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SecurityAuditLogCreateManyUserInput = {
    id?: string
    action: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestPath?: string | null
    success?: boolean
  }

  export type NeonatalRecordUpdateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_NeonatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_createdNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutNeonatalRecordsNestedInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientUpdateOneWithoutNeonatalRecords_AsMotherNestedInput
    Patient_NeonatalRecord_patientIdToPatient?: PatientUpdateOneRequiredWithoutNeonatalRecords_AsPatientNestedInput
  }

  export type NeonatalRecordUncheckedUpdateWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_updatedByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordUpdateWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    Hospital?: HospitalUpdateOneRequiredWithoutAntenatalRecordsNestedInput
    Patient?: PatientUpdateOneRequiredWithoutAntenatalRecordsNestedInput
    User_AntenatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_updatedNestedInput
  }

  export type AntenatalRecordUncheckedUpdateWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_createdByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordUpdateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    User_AntenatalRecord_createdByUserIdToUser?: UserUpdateOneRequiredWithoutAntenatalRecords_createdNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutAntenatalRecordsNestedInput
    Patient?: PatientUpdateOneRequiredWithoutAntenatalRecordsNestedInput
  }

  export type AntenatalRecordUncheckedUpdateWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AntenatalRecordUncheckedUpdateManyWithoutUser_AntenatalRecord_updatedByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    gestationalAge?: IntFieldUpdateOperationsInput | number
    nextAppointment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    status?: EnumAntenatalStatusFieldUpdateOperationsInput | $Enums.AntenatalStatus
    trimester?: IntFieldUpdateOperationsInput | number
    lastVisitDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expectedDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ultrasoundReports?: NullableJsonNullValueInput | InputJsonValue
    labResults?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneRequiredWithoutMedicalRecordsNestedInput
    Hospital?: HospitalUpdateOneRequiredWithoutMedicalRecordsNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeonatalRecordUpdateWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
    Hospital?: HospitalUpdateOneRequiredWithoutNeonatalRecordsNestedInput
    Patient_NeonatalRecord_motherIdToPatient?: PatientUpdateOneWithoutNeonatalRecords_AsMotherNestedInput
    Patient_NeonatalRecord_patientIdToPatient?: PatientUpdateOneRequiredWithoutNeonatalRecords_AsPatientNestedInput
    User_NeonatalRecord_updatedByUserIdToUser?: UserUpdateOneRequiredWithoutNeonatalRecords_updatedNestedInput
  }

  export type NeonatalRecordUncheckedUpdateWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NeonatalRecordUncheckedUpdateManyWithoutUser_NeonatalRecord_createdByUserIdToUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthWeight?: FloatFieldUpdateOperationsInput | number
    gestationalAgeAtBirth?: IntFieldUpdateOperationsInput | number
    careLevel?: EnumCareLevelFieldUpdateOperationsInput | $Enums.CareLevel
    status?: EnumNeonatalStatusFieldUpdateOperationsInput | $Enums.NeonatalStatus
    dischargeStatus?: NullableEnumDischargeStatusFieldUpdateOperationsInput | $Enums.DischargeStatus | null
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    birthComplications?: NullableStringFieldUpdateOperationsInput | string | null
    feedingMethod?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedByUserId?: StringFieldUpdateOperationsInput | string
    mrn?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientHospitalAccessUpdateWithoutGranterInput = {
    id?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutHospitalAccessesNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutPatientAccessesNestedInput
  }

  export type PatientHospitalAccessUncheckedUpdateWithoutGranterInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientHospitalAccessUncheckedUpdateManyWithoutGranterInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    accessLevel?: EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneWithoutPatientProfileNestedInput
    Hospital?: HospitalUpdateOneWithoutPatientsNestedInput
    Appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUpdateManyWithoutPatientNestedInput
    ProfilePicture?: ProfilePictureUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    Appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecords?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    PasswordResets?: PasswordResetUncheckedUpdateManyWithoutPatientNestedInput
    ProfilePicture?: ProfilePictureUncheckedUpdateOneWithoutPatientNestedInput
    Emails?: PatientEmailUncheckedUpdateManyWithoutPatientNestedInput
    Phones?: PatientPhoneUncheckedUpdateManyWithoutPatientNestedInput
    SearchIndex?: PatientSearchIndexUncheckedUpdateOneWithoutPatientNestedInput
    WidgetPrefs?: PatientWidgetPreferenceUncheckedUpdateOneWithoutPatientNestedInput
    HospitalAccesses?: PatientHospitalAccessUncheckedUpdateManyWithoutPatientNestedInput
    AntenatalRecords?: AntenatalRecordUncheckedUpdateManyWithoutPatientNestedInput
    NeonatalRecords_AsPatient?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_patientIdToPatientNestedInput
    NeonatalRecords_AsMother?: NeonatalRecordUncheckedUpdateManyWithoutPatient_NeonatalRecord_motherIdToPatientNestedInput
    ReferralsReceived?: ReferralUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceDispatches?: AmbulanceDispatchUncheckedUpdateManyWithoutPatientNestedInput
    AmbulanceRequests?: AmbulanceRequestUncheckedUpdateManyWithoutPatientNestedInput
    Wallet?: WalletUncheckedUpdateOneWithoutPatientNestedInput
    BillingRecords?: BillingUncheckedUpdateManyWithoutPatientNestedInput
    Conversations?: ConversationUncheckedUpdateManyWithoutPatientNestedInput
    BirthRecord?: BirthRecordUncheckedUpdateOneWithoutPatientNestedInput
    MotherOfBirths?: BirthRecordUncheckedUpdateManyWithoutMotherNestedInput
    FatherOfBirths?: BirthRecordUncheckedUpdateManyWithoutFatherNestedInput
    DeathRecord?: DeathRecordUncheckedUpdateOneWithoutPatientNestedInput
    MarketplaceOrders?: MarketplaceOrderUncheckedUpdateManyWithoutPatientNestedInput
    SavedVendors?: SavedVendorUncheckedUpdateManyWithoutPatientNestedInput
    CartItems?: CartItemUncheckedUpdateManyWithoutPatientNestedInput
    Prescription?: PrescriptionUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mrn?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contact?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    lastVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextVisit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    medicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordResetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutPasswordResetsNestedInput
  }

  export type PasswordResetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordResetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentMembershipUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutMembersNestedInput
  }

  export type DepartmentMembershipUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMembershipUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReferralUpdateWithoutReferringDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutReferralsReceivedNestedInput
    fromHospital?: HospitalUpdateOneRequiredWithoutReferralsFromNestedInput
    toHospital?: HospitalUpdateOneRequiredWithoutReferralsToNestedInput
    receivingDoctor?: UserUpdateOneWithoutReferralsReceivedNestedInput
  }

  export type ReferralUncheckedUpdateWithoutReferringDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateManyWithoutReferringDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    receivingDoctorId?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUpdateWithoutReceivingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: PatientUpdateOneRequiredWithoutReferralsReceivedNestedInput
    fromHospital?: HospitalUpdateOneRequiredWithoutReferralsFromNestedInput
    toHospital?: HospitalUpdateOneRequiredWithoutReferralsToNestedInput
    referringDoctor?: UserUpdateOneRequiredWithoutReferralsSentNestedInput
  }

  export type ReferralUncheckedUpdateWithoutReceivingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReferralUncheckedUpdateManyWithoutReceivingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    fromHospitalId?: StringFieldUpdateOperationsInput | string
    toHospitalId?: StringFieldUpdateOperationsInput | string
    referringDoctorId?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumReferralPriorityFieldUpdateOperationsInput | $Enums.ReferralPriority
    status?: EnumReferralStatusFieldUpdateOperationsInput | $Enums.ReferralStatus
    medicalRecords?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConversationUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutConversationsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutConversationsNestedInput
    messages?: MessageUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type ConversationUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumConversationStatusFieldUpdateOperationsInput | $Enums.ConversationStatus
    lastMessageAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    conversation?: ConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BirthRecordUpdateWithoutAttendingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutBirthRecordNestedInput
    mother?: PatientUpdateOneWithoutMotherOfBirthsNestedInput
    father?: PatientUpdateOneWithoutFatherOfBirthsNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutBirthRecordsNestedInput
  }

  export type BirthRecordUncheckedUpdateWithoutAttendingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BirthRecordUncheckedUpdateManyWithoutAttendingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    motherId?: NullableStringFieldUpdateOperationsInput | string | null
    fatherId?: NullableStringFieldUpdateOperationsInput | string | null
    hospitalId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    birthTime?: NullableStringFieldUpdateOperationsInput | string | null
    birthWeight?: NullableFloatFieldUpdateOperationsInput | number | null
    deliveryMethod?: EnumDeliveryMethodFieldUpdateOperationsInput | $Enums.DeliveryMethod
    birthPlace?: NullableStringFieldUpdateOperationsInput | string | null
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    complications?: BirthRecordUpdatecomplicationsInput | string[]
    apgarScore?: NullableIntFieldUpdateOperationsInput | number | null
    gestationalAge?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeathRecordUpdateWithoutAttendingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutDeathRecordNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutDeathRecordsNestedInput
  }

  export type DeathRecordUncheckedUpdateWithoutAttendingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeathRecordUncheckedUpdateManyWithoutAttendingDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    dateOfDeath?: DateTimeFieldUpdateOperationsInput | Date | string
    timeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    causeOfDeath?: NullableStringFieldUpdateOperationsInput | string | null
    placeOfDeath?: StringFieldUpdateOperationsInput | string
    certificateNumber?: StringFieldUpdateOperationsInput | string
    registeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrescriptionUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPrescriptionNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutPrescriptionsNestedInput
    orderItems?: OrderItemUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutPrescriptionNestedInput
  }

  export type PrescriptionUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    medications?: JsonNullValueInput | InputJsonValue
    dosageInstructions?: NullableStringFieldUpdateOperationsInput | string | null
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    filledStatus?: BoolFieldUpdateOperationsInput | boolean
    filledDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refills?: IntFieldUpdateOperationsInput | number
    refillsUsed?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityAuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestPath?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SecurityAuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestPath?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SecurityAuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestPath?: NullableStringFieldUpdateOperationsInput | string | null
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DepartmentMembershipCreateManyDepartmentInput = {
    id?: string
    userId: string
    role: string
    joinedAt?: Date | string
  }

  export type DepartmentMembershipUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDepartmentMembershipsNestedInput
  }

  export type DepartmentMembershipUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMembershipUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceDispatchCreateManyAmbulanceInput = {
    id?: string
    patientId: string
    hospitalId: string
    pickupLocation: string
    dropLocation: string
    dispatchTime: Date | string
    arrivalTime?: Date | string | null
    completionTime?: Date | string | null
    priority?: $Enums.DispatchPriority
    status?: $Enums.DispatchStatus
    dispatchedBy: string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AmbulanceDispatchUpdateWithoutAmbulanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput
    hospital?: HospitalUpdateOneRequiredWithoutAmbulanceDispatchesNestedInput
  }

  export type AmbulanceDispatchUncheckedUpdateWithoutAmbulanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AmbulanceDispatchUncheckedUpdateManyWithoutAmbulanceInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    hospitalId?: StringFieldUpdateOperationsInput | string
    pickupLocation?: StringFieldUpdateOperationsInput | string
    dropLocation?: StringFieldUpdateOperationsInput | string
    dispatchTime?: DateTimeFieldUpdateOperationsInput | Date | string
    arrivalTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completionTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    priority?: EnumDispatchPriorityFieldUpdateOperationsInput | $Enums.DispatchPriority
    status?: EnumDispatchStatusFieldUpdateOperationsInput | $Enums.DispatchStatus
    dispatchedBy?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletTransactionCreateManyWalletInput = {
    id?: string
    amount: number
    type: $Enums.TransactionType
    status?: $Enums.TransactionStatus
    reference: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type WalletTransactionUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment?: PaymentUpdateOneWithoutTransactionNestedInput
  }

  export type WalletTransactionUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment?: PaymentUncheckedUpdateOneWithoutTransactionNestedInput
  }

  export type WalletTransactionUncheckedUpdateManyWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    reference?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentCreateManyBillingInput = {
    id?: string
    amount: number
    method: $Enums.PaymentMethod
    reference: string
    status?: $Enums.TransactionStatus
    transactionId?: string | null
    receiptNumber: string
    paymentDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateWithoutBillingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: WalletTransactionUpdateOneWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutBillingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutBillingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    method?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    receiptNumber?: StringFieldUpdateOperationsInput | string
    paymentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyConversationInput = {
    id?: string
    senderId: string
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.MessageStatus
    sentAt?: Date | string
    deliveredAt?: Date | string | null
    readAt?: Date | string | null
  }

  export type MessageUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
  }

  export type MessageUncheckedUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUncheckedUpdateManyWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MarketplaceProductCreateManyVendorInput = {
    id?: string
    name: string
    description?: string | null
    price: number
    discountPrice?: number | null
    category: string
    tags?: MarketplaceProductCreatetagsInput | string[]
    imageUrl?: string | null
    inStock?: boolean
    requiredPrescription?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SavedVendorCreateManyVendorInput = {
    id?: string
    patientId: string
    savedAt?: Date | string
  }

  export type MarketplaceProductUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUpdateManyWithoutProductNestedInput
    cartItems?: CartItemUpdateManyWithoutProductNestedInput
  }

  export type MarketplaceProductUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type MarketplaceProductUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    discountPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: MarketplaceProductUpdatetagsInput | string[]
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    inStock?: BoolFieldUpdateOperationsInput | boolean
    requiredPrescription?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedVendorUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutSavedVendorsNestedInput
  }

  export type SavedVendorUncheckedUpdateWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedVendorUncheckedUpdateManyWithoutVendorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    savedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyProductInput = {
    id?: string
    orderId: string
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId?: string | null
  }

  export type CartItemCreateManyProductInput = {
    id?: string
    patientId: string
    quantity: number
    addedAt?: Date | string
  }

  export type OrderItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    order?: MarketplaceOrderUpdateOneRequiredWithoutItemsNestedInput
    prescription?: PrescriptionUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    prescriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    prescriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartItemUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutCartItemsNestedInput
  }

  export type CartItemUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderItemCreateManyOrderInput = {
    id?: string
    productId: string
    quantity: number
    unitPrice: number
    totalPrice: number
    prescriptionId?: string | null
  }

  export type OrderItemUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    product?: MarketplaceProductUpdateOneRequiredWithoutOrderItemsNestedInput
    prescription?: PrescriptionUpdateOneWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    prescriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    prescriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyPrescriptionInput = {
    id?: string
    orderId: string
    productId: string
    quantity: number
    unitPrice: number
    totalPrice: number
  }

  export type OrderItemUpdateWithoutPrescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    order?: MarketplaceOrderUpdateOneRequiredWithoutItemsNestedInput
    product?: MarketplaceProductUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutPrescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutPrescriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}