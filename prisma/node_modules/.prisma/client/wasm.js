
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AntenatalRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  gestationalAge: 'gestationalAge',
  nextAppointment: 'nextAppointment',
  riskLevel: 'riskLevel',
  status: 'status',
  trimester: 'trimester',
  lastVisitDate: 'lastVisitDate',
  expectedDueDate: 'expectedDueDate',
  ultrasoundReports: 'ultrasoundReports',
  labResults: 'labResults',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdByUserId: 'createdByUserId',
  updatedByUserId: 'updatedByUserId',
  mrn: 'mrn'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  hospitalId: 'hospitalId',
  date: 'date',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subdomain: 'subdomain',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  settings: 'settings',
  branding: 'branding',
  isActive: 'isActive',
  code: 'code'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  hospitalId: 'hospitalId',
  type: 'type',
  details: 'details',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NeonatalRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  birthWeight: 'birthWeight',
  gestationalAgeAtBirth: 'gestationalAgeAtBirth',
  careLevel: 'careLevel',
  status: 'status',
  dischargeStatus: 'dischargeStatus',
  apgarScore: 'apgarScore',
  motherId: 'motherId',
  birthComplications: 'birthComplications',
  feedingMethod: 'feedingMethod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdByUserId: 'createdByUserId',
  updatedByUserId: 'updatedByUserId',
  mrn: 'mrn'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  mrn: 'mrn',
  name: 'name',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  contact: 'contact',
  note: 'note',
  lastVisit: 'lastVisit',
  nextVisit: 'nextVisit',
  medicalHistory: 'medicalHistory',
  userId: 'userId',
  hospitalId: 'hospitalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  qrCode: 'qrCode',
  onboardingCompleted: 'onboardingCompleted'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  phone: 'phone',
  photo: 'photo',
  isSuperAdmin: 'isSuperAdmin',
  isHospitalAdmin: 'isHospitalAdmin',
  specialties: 'specialties',
  hospitalId: 'hospitalId'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  patientId: 'patientId',
  userId: 'userId'
};

exports.Prisma.SecurityAuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  requestPath: 'requestPath',
  success: 'success'
};

exports.Prisma.ProfilePictureScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  userId: 'userId',
  imageUrl: 'imageUrl',
  imageData: 'imageData',
  mimeType: 'mimeType',
  filename: 'filename',
  size: 'size',
  width: 'width',
  height: 'height',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uploadedBy: 'uploadedBy',
  ownerType: 'ownerType'
};

exports.Prisma.PatientEmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  verified: 'verified',
  primary: 'primary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  patientId: 'patientId'
};

exports.Prisma.PatientPhoneScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  verified: 'verified',
  primary: 'primary',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  patientId: 'patientId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  hospitalId: 'hospitalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentMembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  departmentId: 'departmentId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.StaffProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  hospitalId: 'hospitalId',
  staffId: 'staffId',
  specialization: 'specialization',
  qualifications: 'qualifications',
  joiningDate: 'joiningDate',
  employmentStatus: 'employmentStatus',
  contactInformation: 'contactInformation'
};

exports.Prisma.PatientHospitalAccessScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  accessLevel: 'accessLevel',
  grantedAt: 'grantedAt',
  grantedBy: 'grantedBy',
  expiresAt: 'expiresAt'
};

exports.Prisma.PatientSearchIndexScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  mrn: 'mrn',
  name: 'name',
  phone: 'phone',
  email: 'email',
  qrCode: 'qrCode',
  searchVector: 'searchVector'
};

exports.Prisma.DoctorAvailabilityScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  hospitalId: 'hospitalId',
  available: 'available',
  schedule: 'schedule',
  serviceTypes: 'serviceTypes',
  nextAvailable: 'nextAvailable'
};

exports.Prisma.PatientWidgetPreferenceScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  recentDoctors: 'recentDoctors',
  preferredHospitals: 'preferredHospitals',
  searchHistory: 'searchHistory'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  fromHospitalId: 'fromHospitalId',
  toHospitalId: 'toHospitalId',
  referringDoctorId: 'referringDoctorId',
  receivingDoctorId: 'receivingDoctorId',
  reason: 'reason',
  notes: 'notes',
  priority: 'priority',
  status: 'status',
  medicalRecords: 'medicalRecords',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.AmbulanceScalarFieldEnum = {
  id: 'id',
  registrationNo: 'registrationNo',
  type: 'type',
  status: 'status',
  hospitalId: 'hospitalId',
  capacity: 'capacity',
  equipment: 'equipment',
  features: 'features',
  gpsTracking: 'gpsTracking',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastMaintenance: 'lastMaintenance'
};

exports.Prisma.AmbulanceDispatchScalarFieldEnum = {
  id: 'id',
  ambulanceId: 'ambulanceId',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  pickupLocation: 'pickupLocation',
  dropLocation: 'dropLocation',
  dispatchTime: 'dispatchTime',
  arrivalTime: 'arrivalTime',
  completionTime: 'completionTime',
  priority: 'priority',
  status: 'status',
  dispatchedBy: 'dispatchedBy',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AmbulanceRequestScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  pickupLocation: 'pickupLocation',
  reason: 'reason',
  requestTime: 'requestTime',
  status: 'status',
  priority: 'priority',
  contactName: 'contactName',
  contactPhone: 'contactPhone',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  balance: 'balance',
  currency: 'currency',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  amount: 'amount',
  type: 'type',
  status: 'status',
  reference: 'reference',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.BillingScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  amount: 'amount',
  dueDate: 'dueDate',
  status: 'status',
  description: 'description',
  invoiceNumber: 'invoiceNumber',
  items: 'items',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paidAt: 'paidAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  billingId: 'billingId',
  amount: 'amount',
  method: 'method',
  reference: 'reference',
  status: 'status',
  transactionId: 'transactionId',
  receiptNumber: 'receiptNumber',
  paymentDate: 'paymentDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  doctorId: 'doctorId',
  title: 'title',
  status: 'status',
  lastMessageAt: 'lastMessageAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  content: 'content',
  attachments: 'attachments',
  status: 'status',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  readAt: 'readAt'
};

exports.Prisma.BirthRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  motherId: 'motherId',
  fatherId: 'fatherId',
  hospitalId: 'hospitalId',
  birthDate: 'birthDate',
  birthTime: 'birthTime',
  birthWeight: 'birthWeight',
  deliveryMethod: 'deliveryMethod',
  attendingDoctorId: 'attendingDoctorId',
  birthPlace: 'birthPlace',
  certificateNumber: 'certificateNumber',
  registeredAt: 'registeredAt',
  notes: 'notes',
  complications: 'complications',
  apgarScore: 'apgarScore',
  gestationalAge: 'gestationalAge',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeathRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  hospitalId: 'hospitalId',
  dateOfDeath: 'dateOfDeath',
  timeOfDeath: 'timeOfDeath',
  causeOfDeath: 'causeOfDeath',
  attendingDoctorId: 'attendingDoctorId',
  placeOfDeath: 'placeOfDeath',
  certificateNumber: 'certificateNumber',
  registeredAt: 'registeredAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketplaceVendorScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  name: 'name',
  description: 'description',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  address: 'address',
  logo: 'logo',
  websiteUrl: 'websiteUrl',
  verified: 'verified',
  rating: 'rating',
  specialties: 'specialties',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketplaceProductScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  name: 'name',
  description: 'description',
  price: 'price',
  discountPrice: 'discountPrice',
  category: 'category',
  tags: 'tags',
  imageUrl: 'imageUrl',
  inStock: 'inStock',
  requiredPrescription: 'requiredPrescription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketplaceOrderScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  reference: 'reference',
  totalAmount: 'totalAmount',
  status: 'status',
  paymentStatus: 'paymentStatus',
  shippingAddress: 'shippingAddress',
  trackingNumber: 'trackingNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  prescriptionId: 'prescriptionId'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  productId: 'productId',
  quantity: 'quantity',
  addedAt: 'addedAt'
};

exports.Prisma.SavedVendorScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  vendorId: 'vendorId',
  savedAt: 'savedAt'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  hospitalId: 'hospitalId',
  medications: 'medications',
  dosageInstructions: 'dosageInstructions',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  filledStatus: 'filledStatus',
  filledDate: 'filledDate',
  refills: 'refills',
  refillsUsed: 'refillsUsed',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.AntenatalStatus = exports.$Enums.AntenatalStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  REFERRED: 'REFERRED',
  TRANSFERRED: 'TRANSFERRED'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.CareLevel = exports.$Enums.CareLevel = {
  NORMAL: 'NORMAL',
  INTENSIVE: 'INTENSIVE',
  CRITICAL: 'CRITICAL'
};

exports.NeonatalStatus = exports.$Enums.NeonatalStatus = {
  ACTIVE: 'ACTIVE',
  DISCHARGED: 'DISCHARGED',
  TRANSFERRED: 'TRANSFERRED',
  DECEASED: 'DECEASED'
};

exports.DischargeStatus = exports.$Enums.DischargeStatus = {
  READY: 'READY',
  NOT_READY: 'NOT_READY'
};

exports.UserRole = exports.$Enums.UserRole = {
  PATIENT: 'PATIENT',
  DOCTOR: 'DOCTOR',
  STAFF: 'STAFF',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

exports.EmploymentStatus = exports.$Enums.EmploymentStatus = {
  ACTIVE: 'ACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  READ: 'READ',
  WRITE: 'WRITE',
  ADMIN: 'ADMIN'
};

exports.ReferralPriority = exports.$Enums.ReferralPriority = {
  ROUTINE: 'ROUTINE',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY'
};

exports.ReferralStatus = exports.$Enums.ReferralStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.AmbulanceType = exports.$Enums.AmbulanceType = {
  BASIC: 'BASIC',
  ADVANCED: 'ADVANCED',
  NEONATAL: 'NEONATAL',
  MOBILE_ICU: 'MOBILE_ICU'
};

exports.AmbulanceStatus = exports.$Enums.AmbulanceStatus = {
  AVAILABLE: 'AVAILABLE',
  DISPATCHED: 'DISPATCHED',
  IN_MAINTENANCE: 'IN_MAINTENANCE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE'
};

exports.DispatchPriority = exports.$Enums.DispatchPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.DispatchStatus = exports.$Enums.DispatchStatus = {
  REQUESTED: 'REQUESTED',
  DISPATCHED: 'DISPATCHED',
  EN_ROUTE: 'EN_ROUTE',
  ARRIVED: 'ARRIVED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.WalletStatus = exports.$Enums.WalletStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  CLOSED: 'CLOSED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  PAYMENT: 'PAYMENT',
  REFUND: 'REFUND',
  TRANSFER: 'TRANSFER'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REVERSED: 'REVERSED'
};

exports.BillingStatus = exports.$Enums.BillingStatus = {
  PENDING: 'PENDING',
  PARTIAL: 'PARTIAL',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  TRANSFER: 'TRANSFER',
  MOBILE_MONEY: 'MOBILE_MONEY',
  INSURANCE: 'INSURANCE'
};

exports.ConversationStatus = exports.$Enums.ConversationStatus = {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  BLOCKED: 'BLOCKED'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ'
};

exports.DeliveryMethod = exports.$Enums.DeliveryMethod = {
  NATURAL: 'NATURAL',
  CESAREAN: 'CESAREAN',
  ASSISTED: 'ASSISTED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  RETURNED: 'RETURNED'
};

exports.Prisma.ModelName = {
  AntenatalRecord: 'AntenatalRecord',
  Appointment: 'Appointment',
  Hospital: 'Hospital',
  MedicalRecord: 'MedicalRecord',
  NeonatalRecord: 'NeonatalRecord',
  Patient: 'Patient',
  User: 'User',
  PasswordReset: 'PasswordReset',
  SecurityAuditLog: 'SecurityAuditLog',
  ProfilePicture: 'ProfilePicture',
  PatientEmail: 'PatientEmail',
  PatientPhone: 'PatientPhone',
  Department: 'Department',
  DepartmentMembership: 'DepartmentMembership',
  StaffProfile: 'StaffProfile',
  PatientHospitalAccess: 'PatientHospitalAccess',
  PatientSearchIndex: 'PatientSearchIndex',
  DoctorAvailability: 'DoctorAvailability',
  PatientWidgetPreference: 'PatientWidgetPreference',
  Referral: 'Referral',
  Ambulance: 'Ambulance',
  AmbulanceDispatch: 'AmbulanceDispatch',
  AmbulanceRequest: 'AmbulanceRequest',
  Wallet: 'Wallet',
  WalletTransaction: 'WalletTransaction',
  Billing: 'Billing',
  Payment: 'Payment',
  Conversation: 'Conversation',
  Message: 'Message',
  BirthRecord: 'BirthRecord',
  DeathRecord: 'DeathRecord',
  MarketplaceVendor: 'MarketplaceVendor',
  MarketplaceProduct: 'MarketplaceProduct',
  MarketplaceOrder: 'MarketplaceOrder',
  OrderItem: 'OrderItem',
  CartItem: 'CartItem',
  SavedVendor: 'SavedVendor',
  Prescription: 'Prescription'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
