generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// ReferralStatus enum already exists in the database
enum ReferralStatus {
  NONE
  PENDING
  APPROVED
  REJECTED
  TRANSFERRED
  COMPLETED
  CANCELLED
}

model Hospital {
  id                String                   @id @default(uuid())
  name              String
  subdomain         String                   @unique
  description       String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  settings          Json
  branding          Json?
  syncStatus        String?                  @default("synced")
  syncedAt          DateTime?
  globalId          String?                  @unique
  pluginSettings    HospitalPluginSettings[]
  patients          Patient[]
  patientAccessLogs PatientAccessLog[]
  pluginPermissions PluginRolePermission[]
  users             User[]
  referralsAsReferrer   Referral[]              @relation("ReferringHospital")
  referralsAsReceiver   Referral[]              @relation("ReceivingHospital")
  antenatalRecords  AntenatalRecord[]
  neonatalRecords   NeonatalRecord[]
}

model User {
  id                 String                   @id @default(uuid())
  email              String                   @unique
  password           String
  name               String?
  role               String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  hospitalId         String?
  profileImage       String?
  syncStatus         String?                  @default("synced")
  syncedAt           DateTime?
  globalId           String?                  @unique
  offlineAccess      Boolean                  @default(false)
  offlineExpiry      DateTime?
  lastLogin          DateTime?
  appointments       Appointment[]
  chatParticipations ChatParticipant[]
  activatedPlugins   HospitalPluginSettings[] @relation("PluginActivator")
  medicalRecords     MedicalRecord[]
  messages           Message[]
  patients           Patient[]
  patientAccessLogs  PatientAccessLog[]
  createdPluginData  PatientPluginData[]      @relation("CreatedPluginData")
  updatedPluginData  PatientPluginData[]      @relation("UpdatedPluginData")
  createdAntenatal   AntenatalRecord[]         @relation("CreatedAntenatalRecord")
  updatedAntenatal   AntenatalRecord[]         @relation("UpdatedAntenatalRecord")
  createdNeonatal    NeonatalRecord[]          @relation("CreatedNeonatalRecord")
  updatedNeonatal    NeonatalRecord[]          @relation("UpdatedNeonatalRecord")
  hospital           Hospital?                @relation(fields: [hospitalId], references: [id])
}

model Patient {
  id                   String              @id @default(uuid())
  mrn                  String?
  gender               String
  contact              Json?
  medicalHistory       Json?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  hospitalId           String?
  userId               String?
  syncStatus           String?             @default("synced")
  syncedAt             DateTime?
  globalId             String?             @unique
  active               Boolean             @default(true)
  address              Json?
  birthDate            DateTime
  communication        Json?
  deceased             Boolean             @default(false)
  deceasedDateTime     DateTime?
  email                String?
  extension            Json?
  generalPractitioner  Json?
  managingOrganization String?
  maritalStatus        Json?
  medicalNumber        String              @unique
  multipleBirth        Boolean?
  multipleBirthInteger Int?
  password             String?
  photo                String?
  resetCode            String?
  resetExpiration      DateTime?
  resourceType         String              @default("Patient")
  telecom              Json?
  name                 Json
  phone                String?
  referralCode         String?             @unique
  referralStatus       ReferralStatus?     @default(NONE)
  currentHospitalId    String?             // Track which hospital is currently managing the patient
  appointments         Appointment[]
  records              MedicalRecord[]
  hospital             Hospital?           @relation(fields: [hospitalId], references: [id])
  user                 User?               @relation(fields: [userId], references: [id])
  accessLogs           PatientAccessLog[]
  pluginData           PatientPluginData[]
  referrals            Referral[]          @relation("ReferringPatient")
  antenatal            AntenatalRecord[]
  neonatal             NeonatalRecord[]
  children             NeonatalRecord[]    @relation("MotherChildRelation")
}

model Appointment {
  id              String    @id @default(uuid())
  patientId       String
  doctorId        String
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  appointmentType Json?
  comment         String?
  description     String?
  end             DateTime?
  extension       Json?
  hospitalId      String?
  minutesDuration Int?
  priority        Int?
  reason          Json?
  resourceType    String    @default("Appointment")
  serviceType     Json?
  specialty       Json?
  start           DateTime
  syncStatus      String?   @default("synced")
  syncedAt        DateTime?
  globalId        String?   @unique
  doctor          User      @relation(fields: [doctorId], references: [id])
  patient         Patient   @relation(fields: [patientId], references: [id])
}

model MedicalRecord {
  id                   String    @id @default(uuid())
  patientId            String
  doctorId             String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  bodySite             Json?
  category             Json?
  code                 Json
  derivedFrom          Json?
  syncStatus           String?   @default("synced")
  syncedAt             DateTime?
  globalId             String?   @unique
  device               String?
  effectiveDateTime    DateTime
  extension            Json?
  hasMember            Json?
  hospitalId           String?
  interpretation       Json?
  issued               DateTime
  method               Json?
  note                 Json?
  performer            Json?
  referenceRange       Json?
  resourceType         String
  specimen             String?
  status               String
  valueCodeableConcept Json?
  valueQuantity        Json?
  valueString          String?
  doctor               User      @relation(fields: [doctorId], references: [id])
  patient              Patient   @relation(fields: [patientId], references: [id])
}

model SystemSettings {
  id         String    @id @default(uuid())
  key        String    @unique
  value      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  syncStatus String?   @default("synced")
  syncedAt   DateTime?
  globalId   String?   @unique
}

model Chat {
  id           String            @id @default(uuid())
  name         String?
  type         String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  syncStatus   String?           @default("synced")
  syncedAt     DateTime?
  globalId     String?           @unique
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id         String    @id @default(uuid())
  chatId     String
  userId     String
  isAdmin    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  syncStatus String?   @default("synced")
  syncedAt   DateTime?
  globalId   String?   @unique
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
}

model Message {
  id         String    @id @default(uuid())
  chatId     String
  senderId   String
  content    String
  isRead     Boolean   @default(false)
  readBy     Json?
  sentAt     DateTime  @default(now())
  syncStatus String?   @default("synced")
  syncedAt   DateTime?
  globalId   String?   @unique
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender     User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model SyncQueue {
  id               String    @id @default(uuid())
  modelName        String
  recordId         String
  globalId         String?
  operation        String
  status           String    @default("pending")
  payload          String
  errorMessage     String?
  conflictResolved Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  attemptCount     Int       @default(0)
  lastAttemptAt    DateTime?
  userId           String
  hospitalId       String?

  @@index([status, modelName])
  @@index([recordId, modelName])
}

model OfflineSession {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActiveAt DateTime @updatedAt
  ipAddress    String?
  userAgent    String?
  isRevoked    Boolean  @default(false)

  @@index([userId, expiresAt])
}

model EmailVerification {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  expires   DateTime
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plugin {
  id                      String                   @id @default(uuid())
  name                    String
  version                 String
  category                String
  author                  String
  description             String
  medicalReference        String                   @default("byMedicalNumber")
  hiddenFromGit           Boolean                  @default(false)
  crossHospitalCompatible Boolean                  @default(true)
  path                    String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  hospitalSettings        HospitalPluginSettings[]
  accessLogs              PatientAccessLog[]
  patientData             PatientPluginData[]
  rolePermissions         PluginRolePermission[]

  @@unique([name, version])
}

model HospitalPluginSettings {
  id            String    @id @default(uuid())
  hospitalId    String
  pluginId      String
  pluginName    String
  isActive      Boolean   @default(false)
  settings      Json
  activatedAt   DateTime?
  activatedById String?
  modifiedAt    DateTime  @updatedAt
  activatedBy   User?     @relation("PluginActivator", fields: [activatedById], references: [id])
  hospital      Hospital  @relation(fields: [hospitalId], references: [id])
  plugin        Plugin    @relation(fields: [pluginId], references: [id])

  @@unique([hospitalId, pluginId])
}

model PatientAccessLog {
  id            String   @id @default(uuid())
  patientId     String
  medicalNumber String
  hospitalId    String
  userId        String
  action        String
  pluginId      String
  pluginName    String
  context       Json?
  timestamp     DateTime @default(now())
  hospital      Hospital @relation(fields: [hospitalId], references: [id])
  patient       Patient  @relation(fields: [patientId], references: [id])
  plugin        Plugin   @relation(fields: [pluginId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([patientId, timestamp])
  @@index([hospitalId, pluginName])
  @@index([userId, timestamp])
}

model PluginRolePermission {
  id          String   @id @default(uuid())
  hospitalId  String
  pluginId    String
  roleId      String
  permissions Json
  hospital    Hospital @relation(fields: [hospitalId], references: [id])
  plugin      Plugin   @relation(fields: [pluginId], references: [id])

  @@unique([hospitalId, pluginId, roleId])
}

model PatientPluginData {
  id                  String   @id @default(uuid())
  patientId           String
  pluginId            String
  pluginName          String
  data                Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  createdByUserId     String
  updatedByUserId     String
  createdByHospitalId String
  updatedByHospitalId String
  createdByUser       User     @relation("CreatedPluginData", fields: [createdByUserId], references: [id])
  patient             Patient  @relation(fields: [patientId], references: [id])
  plugin              Plugin   @relation(fields: [pluginId], references: [id])
  updatedByUser       User     @relation("UpdatedPluginData", fields: [updatedByUserId], references: [id])

  @@unique([patientId, pluginName])
  @@index([patientId, pluginName])
  @@index([createdByHospitalId])
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum AntenatalStatus {
  ACTIVE
  COMPLETED
  REFERRED
  TRANSFERRED
}

model AntenatalRecord {
  id                String           @id @default(uuid())
  patientId         String
  hospitalId        String
  gestationalAge    Int              // In weeks
  nextAppointment   DateTime?
  riskLevel         RiskLevel        @default(LOW)
  status            AntenatalStatus  @default(ACTIVE)
  trimester         Int              @default(1)
  lastVisitDate     DateTime?
  expectedDueDate   DateTime
  medicalNotes      String?
  ultrasoundReports Json?
  labResults        Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdByUserId   String
  updatedByUserId   String

  // Relations
  patient           Patient          @relation(fields: [patientId], references: [id])
  hospital          Hospital         @relation(fields: [hospitalId], references: [id])
  createdByUser     User             @relation("CreatedAntenatalRecord", fields: [createdByUserId], references: [id])
  updatedByUser     User             @relation("UpdatedAntenatalRecord", fields: [updatedByUserId], references: [id])

  @@index([patientId])
  @@index([hospitalId])
  @@index([status])
  @@index([riskLevel])
}

enum CareLevel {
  NORMAL
  INTENSIVE
  CRITICAL
}

enum NeonatalStatus {
  ACTIVE
  DISCHARGED
  TRANSFERRED
  DECEASED
}

enum DischargeStatus {
  READY
  NOT_READY
}

model NeonatalRecord {
  id                String            @id @default(uuid())
  patientId         String
  hospitalId        String
  birthWeight       Float             // In grams
  gestationalAgeAtBirth Int           // In weeks
  careLevel         CareLevel         @default(NORMAL)
  status            NeonatalStatus    @default(ACTIVE)
  dischargeStatus   DischargeStatus?  
  apgarScore        Int?
  motherId          String?           // Reference to the mother's patient ID if available
  birthComplications String?
  medicalNotes      String?
  feedingMethod     String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdByUserId   String
  updatedByUserId   String

  // Relations
  patient           Patient           @relation(fields: [patientId], references: [id])
  hospital          Hospital          @relation(fields: [hospitalId], references: [id])
  createdByUser     User              @relation("CreatedNeonatalRecord", fields: [createdByUserId], references: [id])
  updatedByUser     User              @relation("UpdatedNeonatalRecord", fields: [updatedByUserId], references: [id])
  mother            Patient?          @relation("MotherChildRelation", fields: [motherId], references: [id])
  
  @@index([patientId])
  @@index([hospitalId])
  @@index([status])
  @@index([careLevel])
  @@index([motherId])
}

model PluginSyncQueue {
  id               String    @id @default(uuid())
  pluginId         String
  pluginName       String
  modelName        String
  recordId         String
  operation        String
  status           String    @default("pending")
  payload          Json
  errorMessage     String?
  conflictResolved Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  attemptCount     Int       @default(0)
  lastAttemptAt    DateTime?
  userId           String
  hospitalId       String

  @@index([status, pluginName])
  @@index([hospitalId, status])
}

model Referral {
  id                  String         @id @default(uuid())
  patientId           String
  referralCode        String         @unique
  status              ReferralStatus @default(PENDING)
  notes               String?
  medicalSummary      Json?
  referringHospitalId String
  receivingHospitalId String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  completedAt         DateTime?
  priority            String?        @default("ROUTINE") // URGENT, EMERGENCY, ROUTINE
  ambulanceRequired   Boolean        @default(false)
  
  // Relations
  patient             Patient        @relation("ReferringPatient", fields: [patientId], references: [id])
  referringHospital   Hospital       @relation("ReferringHospital", fields: [referringHospitalId], references: [id])
  receivingHospital   Hospital       @relation("ReceivingHospital", fields: [receivingHospitalId], references: [id])
  
  @@index([referralCode])
  @@index([patientId])
  @@index([status])
  @@index([referringHospitalId])
  @@index([receivingHospitalId])
}
