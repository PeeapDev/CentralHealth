import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { PrismaAdapter } from "@auth/prisma-adapter";
import { prisma } from "@/lib/prisma";
import { Adapter } from "next-auth/adapters";
import crypto from "crypto";
import jwt from "jsonwebtoken";

// Helper function to generate a medical number
function generateMedicalNumber(): string {
  const randomDigits = Math.floor(10000 + Math.random() * 90000);
  return `P${randomDigits}`;
}

// Generate a custom JWT compatible with the existing system
const generateCustomJWT = (userId: string, email: string, medicalNumber: string) => {
  const jwtSecret = process.env.JWT_SECRET || 'fallback_secret_for_development';
  
  return jwt.sign(
    {
      id: userId,
      medicalNumber: medicalNumber,
      email: email,
      role: 'patient',
    },
    jwtSecret,
    { expiresIn: '7d' }
  );
};

const handler = NextAuth({
  adapter: PrismaAdapter(prisma) as Adapter,
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID || "",
      clientSecret: process.env.GOOGLE_CLIENT_SECRET || "",
      profile(profile) {
        const medicalNumber = generateMedicalNumber();
        return {
          id: profile.sub,
          name: profile.name,
          email: profile.email,
          image: profile.picture,
          medicalNumber: medicalNumber,
          resourceType: "Patient",
          active: true,
          // Create JSON fields for Prisma
          gender: "unknown",
          birthDate: new Date(),
          phone: "",
          telecom: JSON.stringify([
            {
              system: "email",
              value: profile.email,
              use: "work"
            }
          ]),
          address: JSON.stringify([]),
          photo: profile.picture || "",
        };
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user, account }) {
      if (user) {
        token.id = user.id;
        token.role = "patient";
        token.medicalNumber = user.medicalNumber;
      }
      return token;
    },
    async session({ session, token }) {
      if (session?.user) {
        session.user.id = token.id as string;
        session.user.role = "patient";
        session.user.medicalNumber = token.medicalNumber as string;
      }
      return session;
    },
    async signIn({ user, account, profile }) {
      if (user && user.email) {
        // Generate a custom JWT compatible with the existing system
        const customToken = generateCustomJWT(
          user.id, 
          user.email,
          user.medicalNumber || generateMedicalNumber()
        );
        
        // Store in localStorage for compatibility with existing system
        if (typeof window !== 'undefined') {
          localStorage.setItem('token', customToken);
          localStorage.setItem('isPatientLoggedIn', 'true');
          localStorage.setItem('patientInfo', JSON.stringify({
            id: user.id,
            name: user.name,
            email: user.email,
            medicalNumber: user.medicalNumber
          }));
        }
      }
      return true;
    }
  },
  pages: {
    signIn: "/login",
    signOut: "/",
    error: "/error",
  },
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  secret: process.env.NEXTAUTH_SECRET || process.env.JWT_SECRET || "fallback_secret_for_development",
});

export { handler as GET, handler as POST };
